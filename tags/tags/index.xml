<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tags on</title><link>https://www.ryken.cloud/tags/tags/</link><description>Recent content in tags on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 26 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ryken.cloud/tags/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>vscode + golang 环境</title><link>https://www.ryken.cloud/vscode-+-golang-%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 26 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.ryken.cloud/vscode-+-golang-%E7%8E%AF%E5%A2%83/</guid><description>环境配置 安装 golang vscode 连接上远程主机并安装 vscode server vscode 中安装 go 插件 安装 go 插件依赖的工具： ctrl+shift+p 调出命令面板，输入go install tools 选Go: Install/Update Tool 全选进行安装 使用 CGO 时，vscode 报错 1 go list failed to return CompiledGoFiles.</description></item><item><title>calico 中的 proxy-arp</title><link>https://www.ryken.cloud/calico-%E4%B8%AD%E7%9A%84-proxy-arp/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.ryken.cloud/calico-%E4%B8%AD%E7%9A%84-proxy-arp/</guid><description> /proc/sys/net/ipv4/conf/DEV/rp_filter =&amp;gt; 1：开启反向路径过滤，确认数据包来源，对于普通容器，IP基本无法伪装，但是如果是VM（Calico也支持VM），很容易伪装IP地址，所以为了安全打开这个选项。 /proc/sys/net/ipv4/conf/DEV/route_localnet =&amp;gt; 1：允许路由到本地。 /proc/sys/net/ipv4/neigh/DEV/proxy_delay =&amp;gt; 0：默认情况下，主机为了减少ARP风暴的可能，会延迟一段时间回复ARP包，这个选项关闭这个延迟。 /proc/sys/net/ipv4/conf/DEV/forwarding =&amp;gt; 1：允许转发数据包（如果不允许转发的话，那数据包就出不去主机了）。 上面是IPv4的情况，如果是IPv6的网络，则会设置：
/proc/sys/net/ipv6/conf/DEV/proxy_ndp =&amp;gt; 1：这个和proxy_arp是一样的。 /proc/sys/net/ipv4/conf/DEV/forwarding =&amp;gt; 1：同IPv4。</description></item><item><title>安装 bcc 工具包</title><link>https://www.ryken.cloud/%E5%AE%89%E8%A3%85-bcc-%E5%B7%A5%E5%85%B7%E5%8C%85/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://www.ryken.cloud/%E5%AE%89%E8%A3%85-bcc-%E5%B7%A5%E5%85%B7%E5%8C%85/</guid><description>eunomia-bpf 是一个开源的 eBPF 动态加载运行时和开发工具链，它的目的是简化 eBPF 程序的开发、构建、分发、运行。它基于 libbpf 的 CO-RE 轻量级开发框架，支持通过用户态 WASM 虚拟机控制 eBPF 程序的加载和执行，并将预编译的 eBPF 程序打包为通用的 JSON 或 WASM 模块进行分发。</description></item><item><title>4. OFN Gateway</title><link>https://www.ryken.cloud/4.-OFN-Gateway/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://www.ryken.cloud/4.-OFN-Gateway/</guid><description/></item></channel></rss>