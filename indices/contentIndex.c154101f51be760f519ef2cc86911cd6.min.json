{"/":{"title":"rykenのgarden","content":"\n\u003e 花园比较简陋还在装修中... ...\n\nhello👋，我是 ryken([[About me]])，这是我的数字花园。\n\n对于我来说，大大小小的笔记软件也用了不少，也终究是被伤到“遍体鳞伤”，还好遇到了 obsidian，相见恨晚啊。\n\n[[我的数字花园来历]]。\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90":{"title":"一个简单的例子","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/68b2055f323740c301f2851d20e30934.png)\n\n一个运行在Tomcat里的Web App，JSP页面通过JDBC直接访问MySQL数据库并展示数据。该例子只要程序正确连接到了数据库，就会自动完成对应的表的创建与初始化数据的准备工作。所以，当我们通过浏览器访问此应用时，就会显示一个表格的页面，数据则来自数据库。\n启动两个容器：Web App容器和MySQL容器，并且Web App容器需要访问MySQL容器。在Docker时代，假设我们在一个宿主机上启动了这两个容器，就需要把MySQL容器的IP地址通过环境变量注入Web App容器里；同时，需要将Web App容器的8080端口映射到宿主机的8080端口，以便在外部访问。\n### 创建mysql服务：\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: mysql\nspec:\n  replicas: 1\n  selector:\n    app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        ports:\n        - containerPort: 3306\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: \"123456\"\n```\n\n- kind属性用来表明此资源对象的类型，这里的值为ReplicationController，表示这是一个RC；\n- spec.selector是RC的Pod标签选择器，即监控和管理拥有这些标签的Pod实例，确保在当前集群中始终有且仅有replicas个Pod实例在运行，这里设置replicas=1，表示只能运行一个MySQL Pod实例；\n- spec.template.metadata.labels指定了该Pod的标签，需要特别注意的是：这里的labels必须匹配之前的spec.selector；\n\n执行命令：\n`kubectl create -f mysql-rc.yaml` 创建该rc资源\n`kubectl get rc` 查看刚刚创建的rc资源\n`kubectl get pods` 查看创建的pod情况\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/9bb2a48c16e10cc1e871a28fc5e66671.png)\n\n使用`docker ps`会发现MySQL Pod对应的容器还多创建了一个来自谷歌的pause容器，这就是Pod的“根容器”。\n### 创建一个与之关联的Kubernetes Service - mysql服务\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\nspec:\n  ports:\n    - port: 3306\n  selector:\n    app: mysql\n```\n\n- metadata.name是Service的服务名（ServiceName）；\n- port属性则定义了Service的虚端口；\n- spec.selector确定了哪些Pod副本（实例）对应本服务。\n\n执行命令：\n\n- `kubectl create -f mysql-svc.yaml` 创建mysql服务\n- `kubectl get svc` 获取创建的service\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/40ddb520049586805bba6751cdc0391e.png)\n\nMySQL服务被分配了一个值为10.104.7.62的Cluster IP地址。随后,Kubernetes集群中其他新创建的Pod就可以通过Service的Cluster IP+端口号3306来连接和访问它了。通常，Cluster IP是在Service创建后由Kubernetes系统自动分配的，其他Pod无法预先知道某个Service的Cluster IP地址,因此需要一个服务发现机制来找到这个服务。最初时Kubernetes巧妙地使用了Linux环境变量来解决这个问题。根据Service的唯一名称，容器可以从环境变量中获取Service对应的Cluster IP地址和端口,从而发起TCP/IP连接请求。\n### 启动Tomcat服务\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: myweb\nspec:\n  replicas: 2\n  selector:\n    app: myweb\n  template:\n    metadata:\n      labels:\n        app: myweb\n    spec:\n      containers:\n        - name: myweb\n          image: kubeguide/tomcat-app:v1\n          ports:\n            - containerPort: 8080\n          env:\n            - name: MYSQL_SERVICE_HOST\n              value: 10.104.7.62\n```\n在Tomcat容器内,应用将使用环境变量MYSQL_SERVICE_HOST的值连接MySQL服务。更安全可靠的用法是使用服务的名称mysql。\n执行命令;\n\n- `kubectl create -f myweb-rc.yaml` 完成rc的创建\n- `kubectl get pods` 获取创建的pods\n\n### 创建对应的Tomcat服务\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: myweb\nspec:\n  type: NodePort\n  ports:\n    - port: 8080\n      nodePort: 30001\n  selector:\n    app: myweb\n```\n执行命令：\n\n- `kubectl create -f myweb-svc.yaml`完成service的创建\t\n- `kubectl get svc` 获取创建的service\n\ntype=NodePort和nodePort=30001的两个属性表明此Service开启了NodePort方式的外网访问模式。在Kubernetes集群之外，比在本机的浏览器里，可以通过30001这个端口访问myweb（对应到8080的虚端口上）。[http://192.168.72.128:30001/demo/](http://192.168.72.128:30001/demo/)\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81%E8%87%AA%E6%97%8B%E9%94%81":{"title":"","content":"乐观锁和悲观锁并不是一种真实存在的锁，而是一种设计思想。\n\n- 悲观锁总认为最坏的情况可能会出现，认为数据很可能会被其他人所修改，所以悲观锁在持有数据的时候总会把资源/数据 锁住，这样其他线程想要请求这个资源的时候就会阻塞，直到等到悲观锁把资源释放为止。\n- 乐观锁的思想与悲观锁的思想相反，它总认为资源和数据不会被别人所修改，所以读取不会上锁，但是乐观锁在进行写入操作的时候会判断当前数据是否被修改过 CAS或版本号机制。\n- 自旋锁：只有获取了锁的线程才能对资源进行访问，由于同一时刻只能有一个线程获取到锁。没有获取到锁的线程就一直循环等待判断该资源是否已经释放锁，这种锁叫做**自旋锁**，它不用将线程阻塞起来，还有一种处理方式就是把自己阻塞起来，等待重新调度请求，这种叫做**互斥锁。**\n\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9B%B8%E5%85%B3":{"title":"","content":"#containerlab #交换机 \n\nNokia SR Linux\n```\n# access CLI \ndocker exec -it \u003cname\u003e sr_cli\n\n# access bash\ndocker exec -it \u003cname\u003e bash\n```\n\n\nArista cEOS\n```\n# access CLI\ndocker exec -it \u003cname\u003e Cli\n\n# access bash\ndocker exec -it \u003cname\u003e bash\n```\n\n\n[Single SR Linux node - containerlab](https://containerlab.dev/lab-examples/single-srl/)\n\n[Get Started - Learn SR Linux](https://learn.srlinux.dev/get-started/#__tabbed_1_2)\nhttps://yang.srlinux.dev/v21.11.3/tree.txt\n\ngnmic\n[gNMIc (openconfig.net)](https://gnmic.openconfig.net/)","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/%E4%BB%A5systemd%E5%90%AF%E5%8A%A8":{"title":"以systemd启动","content":"以 ubuntu 22.04 为例\n首先正常安装 calico，并确保其运行状态正常\n1. 安装 runit/bird/ipset\n```bash\napt-get install runit runit-systemd ipset -y\n```\n2. 修改相关配置\n```bash\n# 1. 修改 runit 服务\n# runit 服务文件路径：/lib/systemd/system/runit.service\n# killMode 修改为默认的 control-group；\n# 从文件中加载环境变量 EnvironmentFile\nroot@calico:~/kubekey/test# cat /lib/systemd/system/runit.service \n[Unit]\nDescription=Runit service supervision\nDocumentation=http://smarden.org/runit/\n\n[Service]\nEnvironmentFile=/etc/calico/calico.env\nExecStart=/etc/runit/2\nKillSignal=SIGHUP\nKillMode=control-group\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n\n# 2. 修改 runit 启动脚本，让exec的子进程使用全部的 ENV\n# 注释掉重新注入环境变量（倒数第二行）\n...\n#exec env - PATH=$PATH \\\nrunsvdir -P \"${SVDIR}\" 'log: ...........................................................................................................................................................................................................................................................................................................................................................................................................'\n```\n3. 拷贝 calico-node 容器配置到主机\n```bash\n# /etc/calico  存放了bird/confd 配置信息 \n# confd 依赖的配置文件：/etc/calico/confd\nmkdir /etc/calico\ndocker ps |grep k8s_calico-node | awk '{print $1}'\n# 将下面 id 替换\ndocker cp 015c2b846cbe:/usr/bin/calico-node /usr/local/bin/\ndocker cp 015c2b846cbe:/usr/bin/bird /usr/local/bin/\ndocker cp 015c2b846cbe:/usr/bin/bird6 /usr/local/bin/\ndocker cp 015c2b846cbe:/etc/service/enabled/ /etc/service/\ndocker cp 015c2b846cbe:/etc/calico/ /etc/calico\ndocker cp 015c2b846cbe:/etc/envvars /etc/calico/calico.env\n```\n\n3.1. 增加  kubeconfig 的环境变量 \n先拷贝原有的 calico 环境变量 - container 路径 /etc/envvars\n再需要添加主机上的 kubeconfig 的环境变量\n```bash\nsed -i '/PWD=\\//d' /etc/calico/calico.env\nsed -i '/HOME=\\/root/d' /etc/calico/calico.env\necho KUBECONFIG=/root/.kube/config  \u003e\u003e /etc/calico/calico.env\n```\n\n3.2. 拷贝 runit 服务配置到主机对应路径 - container 路径 /etc/service/enabled/\n此处拷贝到主机的路径应与 runit 脚本中 runsvdir -P \"${SVDIR}\" 中的 SVDIR 设置的一致\n\n4. cni 二进制 以及 配置文件\ncni 配置文件是由 calico init 进程自动解析并拷贝到主机上的，路径为 /etc/cni/net.d/10-xxx\ncni 二进制文件是由 calico init 进程自动拷贝到 cni 二进制路径下的，路径为 /opt/cni/bin/\n\n修改 /etc/cni/net.d/10-xxx 中 kubeconfig的路径\n```yaml\nroot@calico:~/kubekey# cat /etc/cni/net.d/10-calico.conflist \n{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"calico\",\n      \"mtu\": 0,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"/root/.kube/config\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    },\n    {\n      \"type\": \"bandwidth\",\n      \"capabilities\": {\"bandwidth\": true}\n    }\n  ]\n}\n```\n\n如果需要动态修改 calico cni 配置或者需要重复拷贝 cni 二进制文件到主机，可以将 calico-node daemonset 中的 init container 保留，将主要的 calico container 替换为一个 busybox，这样可以保持 init container 不做修改\n\n\u003e 如果保留 init container，在  init container 重启的时候会覆盖掉 /etc/cni/net.d 下面的 cni 配置(特别注意刚刚修改的 kubeconfig 路径)和 calico-kubeconfig\n\n\n```bash\n#!/bin/bash\n\n# 安装软件包\napt-get install runit runit-systemd ipset -y\n\n# 修改 runit 服务\ncat \u003e /lib/systemd/system/runit.service \u003c\u003c EOF\n[Unit]\nDescription=Runit service supervision\nDocumentation=http://smarden.org/runit/\n\n[Service]\nEnvironmentFile=/etc/calico/calico.env\nExecStart=/etc/runit/2\nKillSignal=SIGHUP\nKillMode=control-group\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# 修改 /etc/runit/2 - 添加注释 #\nsed -i '/exec env/s/^/#/' /etc/runit/2\n\n\n# 拷贝calico-node 容器中的数据到主机中\n# 这里也可以从基础镜像中获取；但是环境变量就需要自己去写\nmkdir /etc/calico\nid=$(docker ps |grep k8s_calico-node | awk '{print $1}')\ndocker cp $id:/usr/bin/calico-node /usr/local/bin/\ndocker cp $id:/usr/bin/bird /usr/local/bin/\ndocker cp $id:/usr/bin/bird6 /usr/local/bin/\ndocker cp $id:/etc/service/enabled/ /etc/service/\ndocker cp $id:/etc/calico/ /etc/calico\ndocker cp $id:/etc/envvars /etc/calico/calico.env\n\n# 修改环境变量\nsed -i '/PWD=\\//d' /etc/calico/calico.env\nsed -i '/HOME=\\/root/d' /etc/calico/calico.env\necho KUBECONFIG=/root/.kube/config  \u003e\u003e /etc/calico/calico.env\n\n# 修改 calico-node 使其无法被调度到任何节点 - 随意加 label 或者删除掉也可以\n# kubectl delete ds -n -n kube-system calico-node\nkubectl patch daemonset -n kube-system calico-node -p '{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"kubernetes.io/os\":\"linux\",\"test\":\"value\"}}}}}'\n\n# 修改 cni 配置中的 kubeconfig\nsed -i 's|\"kubeconfig\": \"/etc/cni/net.d/calico-kubeconfig\"|\"kubeconfig\": \"/root/.kube/config\"|g' /etc/cni/net.d/10-calico.conflist \n```\n\n参考链接：\n- [runit - a UNIX init scheme with service supervision (smarden.org)](https://smarden.org/runit/)\n- [Binary install without package manager | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/latest/getting-started/bare-metal/installation/binary)\n- [calico/node/Dockerfile.amd64 at release-v3.23 · projectcalico/calico (github.com)](https://github.com/projectcalico/calico/blob/release-v3.23/node/Dockerfile.amd64)\n\n\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/%E4%BC%98%E5%8C%96%E6%80%BB%E8%A7%88":{"title":"优化总览","content":"虚拟化带来了灵活性和可扩展性，但同时也伴随着一些性能上的损失；特别是在网络性能上，让容器网络性能相比主机网络性能大幅下降了 35%。\n\n回顾一下标准 Kubernetes 网络数据路径架构带来的一些限制以及 Cilium 如何解决这些限制\n### Kube-proxy 替换\n\nKube-Proxy 将通过 iptables 或 ipvs 系统处理 NAT 和 services 负载平衡\n\n**限制**\n\niptables 一个并非专门为了 Kubernetes 的数据流以及集群规模而建立的技术。也导致 kube-proxy 对其的依赖而增加的开销\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/3d6e4d3119ee2cc0dd179d71d0a588de.png)\n\n\n\n**改进**\n\neBPF 的 kube-proxy 替代品的性能明显优于原始版本，尤其是当规模上去之后，性能提升更加显著。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/7c95fa52a8790496dcf6f69c78a5b230.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/e3b3c339012fabdd4403828fe772efd1.png)\n\n\n### Ebpf host-routing\n\n**限制**： 上层协议栈的转发\n\n当流量离开 Pod 时，通常需要将 Pod 的源 IP 伪装成其离开的主机上的 IP。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/7e7eba776b46448e6fc7e77372649276.png)\n\n传统上，执行这种形式的网络转换是通过将数据包发送到网络堆栈以供 netfilter 子系统更改 IP 地址来完成的。鉴于 masquerading 要求连接跟踪器查看来自两个方向的流量以避免无效连接造成的丢弃，因此来自主机网卡的返回入口流量也必须进入网络堆栈。\n伪装还需要咨询内核的路由层，以便了解下一跳地址/接口并填充目标/源 MAC 地址。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/1d2fd2c39c54c7b152f8d0b1daebc7e0.png)\n\n总之，伪装流量会导致入站和出站流量被内部网络堆栈处理。这不仅引入了不必要的延迟和处理开销，还会干扰 TCP 流量控制机制。当流量被向上转发时，数据包的套接字关联会在主机的转发层中变得孤立。\n\n换句话说，系统通知应用程序流量已经离开节点，即使数据包仍在内部系统中处理。这意味着应用程序可能无法意识到系统的拥塞，影响 TCP 的反压过程，最终导致缓冲膨胀，显著影响性能\n\n\n**改进**\n\n实现基于 eBPF 的主机路由，以便为离开和进入 Pod 的数据包提供更直接的路由。\n\nbpf_redirect_neigh() 和 bpf_redirect_peer() 分别转发来自和发往 Pod 的流量，并避免需要将数据包推送到网络堆栈。\n\n- bpf_redirect_peer() 确保物理 NIC 可以一次性将数据包从堆栈推送到在不同 Pod 命名空间中的应用程序套接字中。\n- bpf_redirect_neigh() 将解析下一跳的 L2 地址，并在保持数据包的套接字关联的同时将数据包重定向到 NIC 驱动程序。这避免了孤立的套接字，并确保 TCP 堆栈的适当反压。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/dfd02f392c085b9343aad01be392143f.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/94bcd28cc92ef219c8213354caa99bd5.png)\n\n性能测试：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/d97469f839b836590ee23099d6c136fd.png)\n\n### Big TCP\n\n**限制**\n\n减少数据包数量的一种方法是将它们分组在一起。虽然 GRO（通用接收卸载）和 TSO（传输分段卸载）可以将数据包一起批处理。但由于 IP 标头中的长度字段，我们受到 64K 数据包大小的限制。\n\n那如何将数据包分组为更大的数据包呢？\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/08be8008c365fdf5c97278cf285e27a6.png)\n\n**改进**\n\n借助 Cilium 上的 BIG TCP，可以将 TCP 数据包分组到一个超大的 192K 数据包中；减少对CPU的影响并显着提高性能。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/ee9e856b1dede1976c84ccac4cb0e809.png)\n\n\n### netkit\n\n \n**限制**\n\nveth-pair 作为传统的虚拟电缆，作为 Linux 容器网络技术被广泛采用，但它是在 Linux 内核 2.6.24 中引入的技术，并且存在一些缺点。\n\n- veth 依赖第 2 层通信和 ARP 来让容器与 veth 对的另一端进行通信。这是人为且不必要的步骤：Pod 不应该执行 ARP 解析。\n- veth 带来性能损失。当流量离开 Pod 前往另一个节点或节点外流量进入 Pod 时，数据必须首先进入容器内的网络堆栈、交换机命名空间，在主机命名空间上进行处理和处理，然后再由网络发送和处理重传接口。这可能看起来无害，但整个过程（包括通过每个 CPU 积压队列发送数据包）在压力下可能会变得昂贵。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/e60dd32b4a134e3658c752c314087c34.png)\n\n\n\n**改进**\n\nCilium netkit 旨在实现：主机网络和容器网络之间的网络性能匹配，并引入了 Linux 6.7 内核\n\nNetkit 基于一个概念：如果我们可以直接将 BPF 程序加载到 Pods 中，从而更接近源头，会怎样？\n\n一个主要的好处是**能够更早做出网络决策**。例如，对于发往节点外部工作负载的 Pod 出站流量，netkit 可以在不经过每个 CPU 的积压队列的情况下直接重定向到物理设备。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/05df3db72c2ee69aa7c4886031d84abc.png)\n\n在第一次迭代中，netkit 设备成对发货，其中包括一个主设备和一个对等设备。主设备通常驻留在主机命名空间中，而其对等设备则驻留在 Pod 的命名空间内。\n\n只有主设备才能为其自身及其对等设备管理 BPF 程序。这是 Cilium netkit 引入的另一个好处：**Pod 内的任何人都无法删除 BPF 程序**。由于 Cilium 是 Pod 上运行的 BPF 程序的所有者，因此它还可以防止 BPF 程序相互冲突等情况，\n\nCilium netkit 默认支持 L3，从而消除 ARP 引入的延迟和管理开销（L2 也是受支持的选项）\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/1883a5a17ea5fbac4f8d2fece7f9e839.png)\n\n性能测试： 延迟 + 吞吐\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/2145cec847d37fdaffb62d60e2cdcfd9.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/2870bf02ed8d7e612d7f410c2a1a8115.png)\n\n\n### 链接\n- https://isovalent.com/blog/post/cilium-netkit-a-new-container-networking-paradigm-for-the-ai-era/\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93":{"title":"","content":"CGO在使用C/C++资源的时候一般有三种形式：直接使用源码、链接静态库、链接动态库。直接使用源码就是在`import \"C\"`之前的注释部分包含C代码，或者在当前包中包含C/C++源文件。链接静态库和动态库的方式比较类似，都是通过在`LDFLAGS`选项指定要链接的库方式链接。\n\n### gcc生成静态库/动态库\n| ar -rc libxxx.a xxx.o（正确方法）\nar -rc libxxx.a xxx1.c （可以生成静态库；运行可执行程序会报错：could not read symbols:Archive has no index;run ranlib to add one）\n\ngcc -fPIC -shared xxx1.c xxx2.c xxx3.c -o libxxx.so \ngcc -fPIC -shared xxx1.o xxx2.o xxx3.o -o libxxx.so |\n| --- |\n\n\n\n## 使用C静态库\n静态库因为是静态链接，最终的目标程序并不会产生额外的运行时依赖，也不会出现动态库特有的跨运行时资源管理的错误。不过静态库对链接阶段会有一定要求：静态库一般包含了全部的代码，里面会有大量的符号，如果不同静态库之间出现了符号冲突则会导致链接的失败。\n`number/number.h`头文件只有一个纯C语言风格的函数声明：\n```c\nint number_add_mod(int a, int b, int mod);\n```\n`number/number.c`对应函数的实现：\n```c\n#include \"number.h\"\nint number_add_mod(int a, int b, int mod) {\n\treturn (a+b)%mod;\n}\n```\n通过以下命令可以生成一个叫libnumber.a的静态库：\n```bash\n$ cd ./number\n$ gcc -c -o number.o number.c\n$ ar rcs libnumber.a number.o\n```\n创建main.go文件如下：\n```go\npackage main\n//#cgo CFLAGS: -I./number\n//#cgo LDFLAGS: -L${SRCDIR}/number -lnumber\n//\n//#include \"number.h\"\nimport \"C\"\nimport \"fmt\"\nfunc main() {\n\tfmt.Println(C.number_add_mod(10, 5, 12))\n}\n```\n\n## 使用C动态库\n动态库出现的初衷是对于相同的库，多个进程可以共享同一个，以节省内存和磁盘资源。从库开发角度来说，动态库可以隔离不同动态库之间的关系，减少链接时出现符号冲突的风险。而且对于windows等平台，动态库是跨越VC和GCC不同编译器平台的唯一的可行方式。\n```bash\n$ cd number\n$ gcc -shared -o libnumber.so number.c\n```\n\n对于CGO来说，使用动态库和静态库是一样的，编译时GCC会自动找到libnumber.a或libnumber.so进行链接。而对于Linux系统来说，需要设置LD_LIBRARY_PATH环境变量，确保能找到动态库。\n\n## 导出C静态库/动态库\n根据CGO文档的要求，**我们需要在main包中导出C函数**。对于C静态库构建方式来说，会忽略main包中的main函数，只是简单导出C函数。采用以下命令构建：\n```bash\n$ go build -buildmode=c-archive -o number.a\n$ go build -buildmode=c-shared -o number.so\n```\n在生成number.a静态库的同时，cgo还会生成一个number.h文件。其中`extern \"C\"`部分的语法是为了同时适配C和C++两种语言。\n### 导出非main包的函数\n文档说明导出的C函数必须是在main包导出，然后才能在生成的头文件包含声明的语句。但是很多时候我们可能更希望将不同类型的导出函数组织到不同的Go包中，然后统一导出为一个静态库或动态库。\n要实现从是从非main包导出C函数，或者是多个包导出C函数（因为只能有一个main包），我们需要自己提供导出C函数对应的头文件（**因为CGO无法为非main包的导出函数生成头文件**）。\n假设我们先创建一个number子包，用于提供模加法函数：\n```go\npackage number\nimport \"C\"\n//export number_add_mod\nfunc number_add_mod(a, b, mod C.int) C.int {\n\treturn (a + b) % mod\n}\n```\n然后是当前的main包：\n```go\npackage main\nimport \"C\"\nimport (\n\t\"fmt\"\n\t_ \"./number\"\n)\nfunc main() {\n\tprintln(\"Done\")\n}\n//export goPrintln\nfunc goPrintln(s *C.char) {\n\tfmt.Println(\"goPrintln:\", C.GoString(s))\n}\n```\n其中我们导入了number子包，在number子包中有导出的C函数number_add_mod，同时我们在main包也导出了goPrintln函数。\n通过以下命令创建C静态库：\n```bash\n$ go build -buildmode=c-archive -o main.a\n```\n这时候在生成main.a静态库的同时，也会生成一个main.h头文件。但是main.h头文件中只有main包中导出的goPrintln函数的声明，并没有number子包导出函数的声明。其实number_add_mod函数在生成的C静态库中是存在的，我们可以直接使用。\n我们并没有包含CGO自动生成的main.h头文件，而是通过手工方式声明了goPrintln和number_add_mod两个导出函数。这样我们就实现了从多个Go包导出C函数了。\n但是不同包导出的Go函数将在同一个全局的名字空间，因此需要小心避免重名的问题。 如果是从不同的包导出Go函数到C语言空间，那么cgo自动生成的`_cgo_export.h`文件将无法包含全部的函数声明， 我们必须通过手写头文件的方式导出的全部函数。\n\n## windows平台\n对于windows平台，我们还可以用VC工具来生成动态库（windows下有一些复杂的C++库只能用VC构建）。\n## go get/build相关\n因为我们有number库的全部代码，所以我们可以用go generate工具来生成静态库，或者是通过Makefile来构建静态库。因此发布CGO源码包时，我们并不需要提前构建C静态库。\n因为多了一个静态库的构建步骤，这种使用了自定义静态库并已经包含了静态库全部代码的Go包无法直接用go get安装。不过我们依然可以通过go get下载，然后用go generate触发静态库构建，最后才是go install来完成安装。\n为了支持go get命令直接下载并安装，我们C语言的`#include`语法可以将number库的**源文件链接到当前的包**。\n创建`z_link_number_c.c`文件如下：\n```\n#include \"./number/number.c\"\n```\n然后在执行go get或go build之类命令的时候，CGO就是自动构建number库对应的代码。这种技术是在不改变静态库源代码组织结构的前提下，将静态库转化为了源代码方式引用。这种CGO包是最完美的。\n\n如果使用的是第三方的静态库，我们需要先下载安装静态库到合适的位置。然后在#cgo命令中通过CFLAGS和LDFLAGS来指定头文件和库的位置。对于不同的操作系统甚至同一种操作系统的不同版本来说，这些库的安装路径可能都是不同的，那么如何在代码中指定这些可能变化的参数呢？\n在Linux环境，有一个pkg-config命令可以**查询要使用某个静态库或动态库时的编译和链接参数**。我们可以在#cgo命令中直接使用pkg-config命令来生成编译和链接参数。而且还可以通过PKG_CONFIG环境变量订制pkg-config命令。因为不同的操作系统对pkg-config命令的支持不尽相同，通过该方式很难兼容不同的操作系统下的构建参数。不过对于Linux等特定的系统，pkg-config命令确实可以简化构建参数的管理。\n## pkg-config\n为不同C/C库提供编译和链接参数是一项非常繁琐的工作，因此cgo提供了对应`pkg-config`工具的支持。 我们可以通过`#cgo pkg-config xxx`命令来生成xxx库需要的编译和链接参数，其底层通过调用 `pkg-config xxx --cflags`生成编译参数，通过`pkg-config xxx --libs`命令生成链接参数。 需要注意的是`pkg-config`工具生成的编译和链接参数是C/C++公用的，无法做更细的区分。\n`pkg-config`工具虽然方便，但是有很多非标准的C/C++库并没有实现对其支持。 这时候我们可以手工为`pkg-config`工具创建对应库的编译和链接参数实现支持。\n比如有一个名为xxx的C/C++库，我们可以手工创建`/usr/local/lib/pkgconfig/xxx.bc`文件：\n```\nName: xxx\nCflags:-I/usr/local/include\nLibs:-L/usr/local/lib –lxxx2\n```\n其中Name是库的名字，Cflags和Libs行分别对应xxx使用库需要的编译和链接参数。如果bc文件在其它目录， 可以通过PKG_CONFIG_PATH环境变量指定`pkg-config`工具的检索目录。\n而对应cgo来说，我们甚至可以通过PKG_CONFIG 环境变量可指定自定义的pkg-config程序。 如果是自己实现CGO专用的pkg-config程序，只要处理`--cflags`和`--libs`两个参数即可。\n下面的程序是macos系统下生成Python3的编译和链接参数：\n```go\n// py3-config.go\nfunc main() {\n\tfor _, s := range os.Args {\n\t\tif s == \"--cflags\" {\n\t\t\tout, _ := exec.Command(\"python3-config\", \"--cflags\").CombinedOutput()\n\t\t\tout = bytes.Replace(out, []byte(\"-arch\"), []byte{}, -1)\n\t\t\tout = bytes.Replace(out, []byte(\"i386\"), []byte{}, -1)\n\t\t\tout = bytes.Replace(out, []byte(\"x86_64\"), []byte{}, -1)\n\t\t\tfmt.Print(string(out))\n\t\t\treturn\n\t\t}\n\t\tif s == \"--libs\" {\n\t\t\tout, _ := exec.Command(\"python3-config\", \"--ldflags\").CombinedOutput()\n\t\t\tfmt.Print(string(out))\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n然后通过以下命令构建并使用自定义的`pkg-config`工具：\n```\n$ go build -o py3-config py3-config.go\n$ PKG_CONFIG=./py3-config go build -buildmode=c-shared -o gopkg.so main.go\n```\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E4%BD%BF%E7%94%A8-containerlab-+-kind-%E6%90%AD%E5%BB%BA-calico-tor":{"title":"使用 containerlab + kind 搭建 calico-tor","content":"\n#### 1. 使用 kind 创建 node 节点\n```yaml\nkind: Cluster\nname: cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-ip: 10.1.5.11 # 节点 IP\n        node-labels: \"rack=rack1\" # 节点标签\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n  extraPortMappings:\n  - containerPort: 30880\n    hostPort: 30880\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n  - containerPort: 30881\n    hostPort: 30881\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n- role: worker\n  kubeadmConfigPatches:\n  - |\n    kind: JoinConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-ip: 10.1.5.12 # 节点 IP\n        node-labels: \"rack=rack1\" # 节点标签\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n- role: worker\n  kubeadmConfigPatches:\n  - |\n    kind: JoinConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-ip: 10.1.8.13 # 节点 IP\n        node-labels: \"rack=rack2\" # 节点标签\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n- role: worker\n  kubeadmConfigPatches:\n  - |\n    kind: JoinConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-ip: 10.1.8.14 # 节点 IP\n        node-labels: \"rack=rack2\" # 节点标签\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\nnetworking:\n  disableDefaultCNI: true\n  podSubnet: 10.233.64.0/18\n  serviceSubnet: 10.233.0.0/18\n```\n`kind create cluster --config cluster.yaml`\n\n#### 2. 创建拓扑\n网络拓扑图：\n![upgit_20230320_1679292214.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679292214.png)\n\n```yaml\nname: bgp\ntopology:\n  nodes:\n    spine1:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n\n    spine2:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n\n    leaf1:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n\n    leaf2: \n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n\n\n    server1:\n      kind: linux\n      image: rykren/nettools:latest\n      network-mode: container:cluster-control-plane\n      exec:\n      - ip addr add 10.1.5.11/24 dev net0\n      - ip route replace default via 10.1.5.1\n    server2:\n      kind: linux\n      image: rykren/nettools:latest\n      network-mode: container:cluster-worker\n      exec:\n      - ip addr add 10.1.5.12/24 dev net0\n      - ip route replace default via 10.1.5.1\n\n    server3:\n      kind: linux\n      image: rykren/nettools:latest\n      network-mode: container:cluster-worker2\n      exec:\n      - ip addr add 10.1.8.13/24 dev net0\n      - ip route replace default via 10.1.8.1\n\n    server4:\n      kind: linux\n      image: rykren/nettools:latest\n      network-mode: container:cluster-worker3\n      exec:\n      - ip addr add 10.1.8.14/24 dev net0\n      - ip route replace default via 10.1.8.1\n\n  links:\n  - endpoints: [\"leaf1:eth1\", \"spine1:eth1\"]\n  - endpoints: [\"leaf1:eth2\", \"spine2:eth1\"]\n  - endpoints: [\"leaf1:eth3\", \"server1:net0\"]\n  - endpoints: [\"leaf1:eth4\", \"server2:net0\"]\n\n  - endpoints: [\"leaf2:eth1\", \"spine1:eth2\"]\n  - endpoints: [\"leaf2:eth2\", \"spine2:eth2\"]\n  - endpoints: [\"leaf2:eth3\", \"server3:net0\"]\n  - endpoints: [\"leaf2:eth4\", \"server4:net0\"]\n```\n`clab deploy -t spine-leaf.yaml`\n\n#### 3. 安装calico  + calicoctl\n- `wget https://projectcalico.docs.tigera.io/archive/v3.23/manifests/calico.yaml`\n- `wget https://github.com/projectcalico/calico/releases/download/v3.24.5/calicoctl-linux-amd64`\n- 修改 `CALICO_IPV4POOL_CIDR` 为 10.233.64.0/18\n- `kubectl apply -f calico.yaml`\n\n#### 4. 配置交换机\n```\n# spine1\nset interfaces ethernet eth0 address '172.20.20.2/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.1.0.0/16'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.10.2/24'\nset interfaces ethernet eth2 address '10.1.34.2/24'\nset protocols bgp parameters router-id '10.1.10.2'\nset protocols bgp local-as 500 \nset protocols bgp neighbor 10.1.10.1 remote-as '65005'\nset protocols bgp neighbor 10.1.34.1 remote-as '65008'\n\n\n# spine2\nset interfaces ethernet eth0 address '172.20.20.6/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.1.0.0/16'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.12.2/24'\nset interfaces ethernet eth2 address '10.1.11.2/24'\nset protocols bgp parameters router-id '10.1.12.2'\nset protocols bgp local-as 800 \nset protocols bgp neighbor 10.1.11.1 remote-as '65008'\nset protocols bgp neighbor 10.1.12.1 remote-as '65005'\n\n\n# leaf-1\nset interfaces ethernet eth0 disable\nset interfaces bridge br0 address '10.1.5.1/24'\nset interfaces bridge br0 description 'leaf1-br'\nset interfaces bridge br0 member interface eth3\nset interfaces bridge br0 member interface eth4\n\nset protocols static route 10.1.34.0/24 next-hop 10.1.10.2\nset protocols static route 10.1.11.0/24 next-hop 10.1.12.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.10.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.12.2\n\nset interfaces ethernet eth1 address '10.1.10.1/24'\nset interfaces ethernet eth2 address '10.1.12.1/24'\nset protocols bgp local-as 65005\nset protocols bgp address-family ipv4-unicast network 10.1.5.0/24\nset protocols bgp neighbor 10.1.5.11 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.5.11 remote-as '65005'\nset protocols bgp neighbor 10.1.5.12 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.5.12 remote-as '65005'\nset protocols bgp neighbor 10.1.10.2 remote-as '500'\nset protocols bgp neighbor 10.1.12.2 remote-as '800'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.1.5.1'\n\n\n# leaf2\nset interfaces ethernet eth0 disable\nset interfaces bridge br0 address '10.1.8.1/24'\nset interfaces bridge br0 description 'leaf2-br'\nset interfaces bridge br0 member interface eth3\nset interfaces bridge br0 member interface eth4\n\nset protocols static route 10.1.10.0/24 next-hop 10.1.34.2\nset protocols static route 10.1.12.0/24 next-hop 10.1.11.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.34.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.11.2\n\nset interfaces ethernet eth1 address '10.1.34.1/24'\nset interfaces ethernet eth2 address '10.1.11.1/24'\nset protocols bgp local-as 65008\nset protocols bgp address-family ipv4-unicast network 10.1.8.0/24\nset protocols bgp neighbor 10.1.8.13 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.8.13 remote-as '65008'\nset protocols bgp neighbor 10.1.8.14 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.8.14 remote-as '65008'\nset protocols bgp neighbor 10.1.11.2 remote-as '800'\nset protocols bgp neighbor 10.1.34.2 remote-as '500'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.1.8.1'\n\n```\n\n\n\n#### 5. 配置 calico\n- 配置 bgppeer\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: rack1-to-leaf1\nspec:\n  peerIP: 10.1.5.1\n  asNumber: 65005\n  nodeSelector: rack == 'rack1'\n---\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: rack2-to-leaf2\nspec:\n  peerIP: 10.1.8.1\n  asNumber: 65008\n  nodeSelector: rack == 'rack2'\n```\n- 关闭 bgp full mesh\n```\napiVersion: projectcalico.org/v3\nkind: BGPConfiguration\nmetadata:\n  name: default\nspec:\n  logSeverityScreen: Info\n  nodeToNodeMeshEnabled: false\n```\n- 修改节点的 ASNumber\n```\ncalicoctl get node -o yaml \u003e node-patch.yaml\nvim node-path.yaml\n// 在 spec.bgp 中添加 asNumber: 65008\ncalicoctl apply -f node-patch.yaml\n```\n- 部署新的 deploy\n```yaml\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: test\n  namespace: default\n  labels:\n    app: test\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: test\n  template:\n    metadata:\n      labels:\n        app: test\n    spec:\n      containers:\n        - name: container\n          image: rykren/whoami\n          imagePullPolicy: IfNotPresent\n      restartPolicy: Always\n```\n\n#### 6. alias 命令\n```\nalias clab='containerlab'\nalias knode1-exec='docker exec -it cluster-control-plane bash'\nalias knode2-exec='docker exec -it cluster-worker bash'\nalias knode3-exec='docker exec -it cluster-worker2 bash'\nalias knode4-exec='docker exec -it cluster-worker3 bash'\nalias node1-exec='docker exec -it clab-bgp-server1 bash'\nalias node2-exec='docker exec -it clab-bgp-server2 bash'\nalias node3-exec='docker exec -it clab-bgp-server3 bash'\nalias node4-exec='docker exec -it clab-bgp-server4 bash'\nalias spine1-exec='docker exec -it clab-bgp-spine1 bash'\nalias spine2-exec='docker exec -it clab-bgp-spine2 bash'\nalias leaf1-exec='docker exec -it clab-bgp-leaf1 bash'\nalias leaf2-exec='docker exec -it clab-bgp-leaf2 bash'\nalias vspine1-exec='docker exec -it clab-bgp-spine1 su vyos'\nalias vspine2-exec='docker exec -it clab-bgp-spine2 su vyos'\nalias vleaf1-exec='docker exec -it clab-bgp-leaf1 su vyos'\nalias vleaf2-exec='docker exec -it clab-bgp-leaf2 su vyos'\n```\n\n其他：因为配置了 nat 转发不能直接 ping 到内网中的节点\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/%E4%BD%BF%E7%94%A8-ebpf-%E7%9A%84%E9%A1%B9%E7%9B%AE":{"title":"使用 ebpf 的项目","content":"\n[eBPF Applications Landscape](https://ebpf.io/applications/)\n\n基础设施库：\n- https://github.com/libbpf/libbpf-rs\n- https://github.com/aya-rs/aya\n\n[kubernetes-sigs/blixt: Layer 4 Kubernetes load-balancer (github.com)](https://github.com/kubernetes-sigs/blixt)\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/%E4%BD%BF%E7%94%A8-libebpf":{"title":"使用 libebpf","content":"","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E4%BD%BF%E7%94%A8code-generator%E7%94%9F%E6%88%90crd%E7%9A%84clientsetinformerlisters":{"title":"","content":"#code-generator #informer #kubernetes  #kubebuilder\n\n参考链接：[使用code-generator生成crd的clientset、informer、listers - 赶路人的博客 (xieys.club)](https://xieys.club/code-generator-crd/)","lastmodified":"2025-03-26T03:48:43.170318574Z","tags":null},"/%E5%85%89%E5%A4%A7%E7%9B%91%E6%8E%A7%E9%9C%80%E6%B1%82%E6%95%B4%E7%90%86":{"title":"光大监控需求整理","content":"\n\n\n### 需求整理\n1. 网络监控的自证，从监控和日志上给证据。(带宽、吞吐率、延迟、抖动、错误的监控)\n2. 网络错误后、业务的快速恢复。方案上可以切换集群、网络自修复等。(快速恢复环境的最佳实践文档)\n3. 文档细化\n- 文档 word 化，脑图 + 分析步骤\n- 脑图中一些说明补充为命令的指导(如四层的网络检测怎么做，nc命令的简要说明)\n4. 数据的采集、日志的采集(一键收集日志的脚本)\n5. [长期] 云上网络监控的整体规划，不依赖具体cni。\n- KSE 4.1 的网络可视化扩展组件\n- 巡检扩展组件里面针对网络的指标巡检\n- 部分组件添加sidecar的来做网络探测。\n\n网络侧的快速响应-非业务侧通知\n记录保留恢复后的模拟\n\n### 方案以及验证\n- [[calico metrics]]\n- kubelet metrics （cAdvisor）\n\t- container_network_receive_errors_total\n\t- container_network_receive_packets_dropped_total\n\t- container_network_receive_packets_total\n\t- container_network_receive_bytes_total\n\t- container_network_transmit_errors_total\n\t- container_network_transmit_packets_dropped_total\n\t- container_network_transmit_packets_total\n\t- container_network_transmit_bytes_total\n\t- \n\t- kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'\n\t- http://172.31.73.12:8001/api/v1/nodes/node1/proxy/metrics/cadvisor\n- kube-proxy metrics\n\t- 使用命令查看 curl http://localhost:10249/metrics\n- ~~kube-state-metrics~~\n\n- node-exporter\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/fc6d6dc18f9f345dff22fbdc33f76905.png)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/52bec8c490163787af3e7fb34e997704.png)\n\t- 使用命令查看 curl http://localhost:9100/metrics | grep node_network\n\t- http://172.31.73.29:32000/graph\n\t- 需要记录 calico 网卡与 container的关系 - [Workload endpoint (tigera.io)](https://docs.tigera.io/archive/v3.23/reference/resources/workloadendpoint)\n\t- ![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/d186c900d83c634fef1429ec2d28446a.png)\n\n- block-exporter [[Prometheus Blockbox Exporter]]\n\t- 针对光大对于 calico 监控的需求可以通过以下方面实现部分需求：\n\t\t1. icmp 检测节点的联通性\n\t\t2. tcp 检测 bgp 179 端口是否在线\n- sidecar - envoy -  statsd-exporter → prometheus\n\t- [Statistics — envoy 1.27.0-dev-cb6362 documentation (envoyproxy.io)](https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/stats)\n\t- [Statistics — envoy 1.27.0-dev-cb6362 documentation (envoyproxy.io)](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/stats)\n\t- [Statistics — envoy 1.27.0-dev-cb6362 documentation (envoyproxy.io)](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/statistics)\n\t- ![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/a362c8afd5611baeb764adb8189ce64d.png)\n\n\n- pixie - ebpf 监控 [pixie-io/pixie (github.com)](https://github.com/pixie-io/pixie)   [About Pixie | Pixie Overview (px.dev)](https://docs.px.dev/about-pixie/what-is-pixie/)\n- kindling - ebpf 监控  [Browse - Dashboards - Grafana](http://218.75.39.90:30010/grafana/dashboards?query=)\n\n网络延迟：[simonswine/kube-latency: Benchmark kubernetes' Pod network (github.com)](https://github.com/simonswine/kube-latency)\n\n#### serviceMonitor\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/b75bef400b8f174f6dad5433bd8cafbe.png)\n\n使用 kube-prometheus 安装 prometheus\n默认安装 node-exporter、black-exporter、kubelet-serviceMonitor\n\n### kubelet 的 metrics\n/_metrics_/cadvisor\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/6271940d9fdfb8e51f7454874e61e587.png)\n\n### kube-proxy metrics\n修改 kube-proxy configmap bindAddress\n修改 ds container 添加 container port\n如何让 prometheus job 采集 kube-proxy\ncurl http://localhost:10249/metrics \n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    control-plane: kube-proxy\n  name: kube-proxy\n  namespace: monitoring\nspec:\n  endpoints:\n    - path: /metrics\n      port: metrics\n      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tlsConfig:\n        insecureSkipVerify: true\n  namespaceSelector:\n    matchNames:\n      - kube-system\n  selector:\n    matchLabels:\n      k8s-app: kube-proxy\n```\n\n\n### node-exporter\n\n| 指标 | 说明 | 解释 |\n| -- | -- | -- |\n| node_netstat_Icmp6_InErrors| 统计Icmp6InErrors | HELP node_netstat_Icmp6_InErrors Statistic Icmp6InErrors. |  \n| node_netstat_Icmp6_InMsgs| 统计Icmp6InMsgs | HELP node_netstat_Icmp6_InMsgs Statistic Icmp6InMsgs. |  \n| node_netstat_Icmp6_OutMsgs | 统计Icmp6OutMsgs  | HELP node_netstat_Icmp6_OutMsgs Statistic Icmp6OutMsgs. |  \n| node_netstat_Icmp_InErrors | 统计IcmpInErrors  | HELP node_netstat_Icmp_InErrors Statistic IcmpInErrors. |  \n| node_netstat_Icmp_InMsgs | 统计IcmpInMsgs  | HELP node_netstat_Icmp_InMsgs Statistic IcmpInMsgs. |  \n| node_netstat_Icmp_OutMsgs| 统计IcmpOutMsgs | HELP node_netstat_Icmp_OutMsgs Statistic IcmpOutMsgs. |  \n| node_netstat_Ip6_InOctets| 统计Ip6InOctets | HELP node_netstat_Ip6_InOctets Statistic Ip6InOctets. |  \n| node_netstat_Ip6_OutOctets | 统计Ip6OutOctets  | HELP node_netstat_Ip6_OutOctets Statistic Ip6OutOctets. |  \n| node_netstat_IpExt_InOctets| 统计IpExtInOctets | HELP node_netstat_IpExt_InOctets Statistic IpExtInOctets. |  \n| node_netstat_IpExt_OutOctets | 统计IpExtOutOctets  | HELP node_netstat_IpExt_OutOctets Statistic IpExtOutOctets. |  \n| node_netstat_Ip_Forwarding | 统计IpForwarding  | HELP node_netstat_Ip_Forwarding Statistic IpForwarding. |  \n| node_netstat_TcpExt_ListenDrops| 统计TcpExtListenDrops | HELP node_netstat_TcpExt_ListenDrops Statistic TcpExtListenDrops. |  \n| node_netstat_TcpExt_ListenOverflows| 统计TcpExtListenOverflows | HELP node_netstat_TcpExt_ListenOverflows Statistic TcpExtListenOverflows. |  \n| node_netstat_TcpExt_SyncookiesFailed | 统计TcpExtSyncookiesFailed  | HELP node_netstat_TcpExt_SyncookiesFailed Statistic TcpExtSyncookiesFailed. |  \n| node_netstat_TcpExt_SyncookiesRecv | 统计TcpExtSyncookiesRecv  | HELP node_netstat_TcpExt_SyncookiesRecv Statistic TcpExtSyncookiesRecv. |  \n| node_netstat_TcpExt_SyncookiesSent | 统计TcpExtSyncookiesSent  | HELP node_netstat_TcpExt_SyncookiesSent Statistic TcpExtSyncookiesSent. |  \n| node_netstat_TcpExt_TCPSynRetrans| 统计TcpExtTCPSynRetrans | HELP node_netstat_TcpExt_TCPSynRetrans Statistic TcpExtTCPSynRetrans. |  \n| node_netstat_Tcp_ActiveOpens | 统计TcpActiveOpens  | HELP node_netstat_Tcp_ActiveOpens Statistic TcpActiveOpens. |  \n| node_netstat_Tcp_CurrEstab | 统计TcpCurrEstab  | HELP node_netstat_Tcp_CurrEstab Statistic TcpCurrEstab. |  \n| node_netstat_Tcp_InErrs| 统计TcpInErrs | HELP node_netstat_Tcp_InErrs Statistic TcpInErrs. |  \n| node_netstat_Tcp_InSegs| 统计TcpInSegs | HELP node_netstat_Tcp_InSegs Statistic TcpInSegs. |  \n| node_netstat_Tcp_OutSegs | 统计TcpOutSegs  | HELP node_netstat_Tcp_OutSegs Statistic TcpOutSegs. |  \n| node_netstat_Tcp_PassiveOpens| 统计TcpPassiveOpens | HELP node_netstat_Tcp_PassiveOpens Statistic TcpPassiveOpens. |  \n| node_netstat_Tcp_RetransSegs | 统计TcpRetransSegs  | HELP node_netstat_Tcp_RetransSegs Statistic TcpRetransSegs. |  \n| node_netstat_Udp6_InDatagrams| 统计Udp6InDatagrams | HELP node_netstat_Udp6_InDatagrams Statistic Udp6InDatagrams. |  \n| node_netstat_Udp6_InErrors | 统计Udp6InErrors  | HELP node_netstat_Udp6_InErrors Statistic Udp6InErrors. |  \n| node_netstat_Udp6_NoPorts| 统计Udp6NoPorts | HELP node_netstat_Udp6_NoPorts Statistic Udp6NoPorts. |  \n| node_netstat_Udp6_OutDatagrams | 统计Udp6OutDatagrams  | HELP node_netstat_Udp6_OutDatagrams Statistic Udp6OutDatagrams. |  \n| node_netstat_UdpLite6_InErrors | 统计UdpLite6InErrors  | HELP node_netstat_UdpLite6_InErrors Statistic UdpLite6InErrors. |  \n| node_netstat_UdpLite_InErrors| 统计UdpLiteInErrors | HELP node_netstat_UdpLite_InErrors Statistic UdpLiteInErrors. |  \n| node_netstat_Udp_InDatagrams | 统计UdpInDatagrams  | HELP node_netstat_Udp_InDatagrams Statistic UdpInDatagrams. |  \n| node_netstat_Udp_InErrors| 统计UdpInErrors | HELP node_netstat_Udp_InErrors Statistic UdpInErrors. |  \n| node_netstat_Udp_NoPorts | 统计UdpNoPorts  | HELP node_netstat_Udp_NoPorts Statistic UdpNoPorts. |  \n| node_netstat_Udp_OutDatagrams| 统计UdpOutDatagrams | HELP node_netstat_Udp_OutDatagrams Statistic UdpOutDatagrams. |  \n| node_network_address_assign_type  | /sys/class/net/ address_assign_type值  | HELP node_network_address_assign_type address_assign_type value of | /sys/class/net/. || node_network_carrier  | /sys/class/net/ carrier值  | HELP node_network_carrier carrier value of | /sys/class/net/. || node_network_carrier_changes_total  | /sys/class/net/ carrier_changes_total值  | HELP node_network_carrier_changes_total carrier_changes_total value of | /sys/class/net/. || node_network_device_id  | /sys/class/net/ device_id值  | HELP node_network_device_id device_id value of | /sys/class/net/. || node_network_dormant  | /sys/class/net/ dormant（休眠）值  | HELP node_network_dormant dormant value of | /sys/class/net/. || node_network_flags  | /sys/class/net/ flags值  | HELP node_network_flags flags value of | /sys/class/net/. || node_network_iface_id | /sys/class/net/ iface_id值 | HELP node_network_iface_id iface_id value of | /sys/class/net/. || node_network_iface_link | /sys/class/net/ iface_link值 | HELP node_network_iface_link iface_link value of | /sys/class/net/. || node_network_iface_link_mode  | /sys/class/net/ iface_link_mode值  | HELP node_network_iface_link_mode iface_link_mode value of | /sys/class/net/. || node_network_info 来自| /sys/class/net/的非数字数据，值始终为1 | HELP node_network_info Non-numeric data from | /sys/class/net/, value is always 1. |  \n| node_network_mtu_bytes  | /sys/class/net/ mtu_bytes值  | HELP node_network_mtu_bytes mtu_bytes value of | /sys/class/net/. || node_network_net_dev_group  | /sys/class/net/ net_dev_group值  | HELP node_network_net_dev_group net_dev_group value of | /sys/class/net/. || node_network_protocol_type  | /sys/class/net/ protocol_type值  | HELP node_network_protocol_type protocol_type value of | /sys/class/net/. || node_network_receive_bytes_total  | 网络设备统计信息receive_bytes | HELP node_network_receive_bytes_total Network device statistic receive_bytes. |  \n| node_network_receive_compressed_total | 网络设备统计信息receive_compressed  | HELP node_network_receive_compressed_total Network device statistic receive_compressed. |  \n| node_network_receive_drop_total | 网络设备统计信息receive_drop  | HELP node_network_receive_drop_total Network device statistic receive_drop. |  \n| node_network_receive_errs_total | 网络设备统计信息receive_errs  | HELP node_network_receive_errs_total Network device statistic receive_errs. |  \n| node_network_receive_fifo_total | 网络设备统计信息receive_fifo  | HELP node_network_receive_fifo_total Network device statistic receive_fifo. |  \n| node_network_receive_frame_total  | 网络设备统计信息receive_frame | HELP node_network_receive_frame_total Network device statistic receive_frame. |  \n| node_network_receive_multicast_total  | 网络设备统计信息receive_multicast | HELP node_network_receive_multicast_total Network device statistic receive_multicast. |  \n| node_network_receive_packets_total  | 网络设备统计信息receive_packets | HELP node_network_receive_packets_total Network device statistic receive_packets. |  \n| node_network_speed_bytes  | /sys/class/net/ speed_bytes值  | HELP node_network_speed_bytes speed_bytes value of | /sys/class/net/. || node_network_transmit_bytes_total | 网络设备统计信息transmit_bytes  | HELP node_network_transmit_bytes_total Network device statistic transmit_bytes. |  \n| node_network_transmit_carrier_total | 网络设备统计信息transmit_carrier  | HELP node_network_transmit_carrier_total Network device statistic transmit_carrier. |  \n| node_network_transmit_colls_total | 网络设备统计信息transmit_colls  | HELP node_network_transmit_colls_total Network device statistic transmit_colls. |  \n| node_network_transmit_compressed_total  | 网络设备统计信息transmit_compressed | HELP node_network_transmit_compressed_total Network device statistic transmit_compressed. |  \n| node_network_transmit_drop_total  | 网络设备统计信息transmit_drop | HELP node_network_transmit_drop_total Network device statistic transmit_drop. |  \n| node_network_transmit_errs_total  | 网络设备统计信息transmit_errs | HELP node_network_transmit_errs_total Network device statistic transmit_errs. |  \n| node_network_transmit_fifo_total  | 网络设备统计信息transmit_fifo | HELP node_network_transmit_fifo_total Network device statistic transmit_fifo. |  \n| node_network_transmit_packets_total | 网络设备统计信息transmit_packets  | HELP node_network_transmit_packets_total Network device statistic transmit_packets. |  \n| node_network_transmit_queue_length  | /sys/class/net/ transmit_queue_length值  | HELP node_network_transmit_queue_length transmit_queue_length value of | /sys/class/net/. || node_network_up |如果operstate为’up’，则值为1，否则为0 | 网卡状态 |\n\n\n\n### black-exporter\n[BlackBox-Exporter 集成 - HackMD](https://hackmd.io/5aQhC1jhQy2CD1LW1IixlQ?view)\n\n\nsidecar - envoy\nenvoy → statsd-exporter → prometheus\n\n\n\n\n其他：\n- keda：HPA\n- mesh-chao\n\n### BGP Metrics\n1. calico enterprise bgp metrics\n\t- bgp_peers  \n\t\tbgp_peers{instance=\"calico-node-1\", status=\"Established\", ip_version=\"IPv4\"}\n\t- bgp_routes_imported\n\t\tirate(bgp_routes_imported{instance=\"calico-node-1\",ip_version=\"IPv4\"}[120s])\n\t- bgp\n\t\tirate(bgp_route_updates_received{instance=\"calico-node-1\",ip_version=\"IPv4\"}[5m])\n\t- 实现思路启动一个 daemonset 挂载 calico 的 unix socket 并集成 birdcl 访问对应的 bird 获取相应的数据并暴露出来。 类似 calicoctl node status\n\t\n2. gobgp metrics 参考\n\t- [greenpau/gobgp_exporter](https://github.com/greenpau/gobgp_exporter)\n\n| **Metric** | **Description** | **Labels** |\n| ------ | ------- | ------ |\n| `gobgp_router_up` | Is GoBGP up and responds to queries (1) or is it down (0). | |\n| `gobgp_router_id` | What is GoBGP router ID. | `id` |\n| `gobgp_router_asn` | What is GoBGP AS number. | |\n| `gobgp_router_failed_req_count` | The number of failed requests to GoBGP router. | |\n| `gobgp_router_next_poll` | The timestamp of the next potential scrape of the router. | |\n| `gobgp_router_scrape_time` | The amount of time it took to scrape the router. | |\n| `gobgp_route_total_destination_count` | The number of routes on per address family and route table basis | `address_family`, `route_table`, `vrf_name` |\n| `gobgp_route_total_path_count` | The number of available paths to destinations on per address family and route table basis | `address_family`, `route_table`, `vrf_name` |\n| `gobgp_route_accepted_path_count` | The number of accepted paths to destinations on per address family and route table basis | `address_family`, `route_table`, `vrf_name` |\n| `gobgp_peer_count` | The number of BGP peers | |\n| `gobgp_peer_up` | Is the peer up and in established state (1) or it is not (0). | `name` |\n| `gobgp_peer_asn` | What is the AS number of the peer | `name` |\n| `gobgp_peer_local_asn` | What is the AS number presented to the peer by this router. | `name` |\n| `gobgp_peer_admin_state` | Is the peer configured for being Up (0), Down (1), or PFX_CT (2) | `name` |\n| `gobgp_peer_session_state` | What is the state of BGP session to the peer - unknown (0), idle (1), connect (2), active (3), opensent (4), openconfirm (5), established (6) | `name` |\n| `gobgp_peer_received_message_total_count` | The total number of messages the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_notification_message_count` | How many Notification messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_update_message_count` | How many Update messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_open_message_count` | How many Open messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_keepalive_message_count` | How many messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_refresh_message_count` | How many Refresh messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_withdraw_update_message_count` | How many WithdrawUpdate messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_received_withdraw_prefix_message_count` | How many messages did the BGP peer sent to this router (limited to IPv4). | `name` |\n| `gobgp_peer_sent_message_total_count` | The total number of messages this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_notification_message_count` | How many Notification messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_update_message_count` | How many Update messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_open_message_count` | How many Open messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_keepalive_message_count` | How many messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_refresh_message_count` | How many Refresh messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_withdraw_update_message_count` | How many WithdrawUpdate messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_sent_withdraw_prefix_message_count` | How many messages did this router sent to this BGP peer (limited to IPv4). | `name` |\n| `gobgp_peer_out_queue_count` | PeerState.OutQ | `name` |\n| `gobgp_peer_flop_count` | PeerState.Flops | `name` |\n| `gobgp_peer_send_community` | PeerState.SendCommunity | `name` |\n| `gobgp_peer_remove_private_as` | PeerState.RemovePrivateAs | `name` |\n| `gobgp_peer_password_set` | Whether the GoBGP peer has been configured (1) for authentication or not (0) | `name` |\n| `gobgp_peer_type` | PeerState.PeerType | `name` |\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%85%89%E5%A4%A7-calico-bgp-%E6%96%AD%E8%81%94%E5%8E%9F%E5%9B%A0":{"title":"","content":"## 背景 + 分析\n行内在进行 http 短连接性能测试时，calico 意外重启，而 calico 重启导致了节点与交换机 bgp 断连，触发行内交换机监控告警。\n重启时查看之前容器日志发现并没有明显的错误日志，查看系统日志发现同一时间段 kubelet 探针超时失败，并且也有其他 pod 发生重启的日志。\n由于是针对与网络的测试，所有分析并提出以下解决方案：\n![upgit_20230302_1677736682.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230302_1677736682.png)\n\n## 排查路由数量\n对于路由聚合\n- 交换机侧：先讨论交换机上可行性，但因为两会期间，行内封网无法进行交换机配置的改动，没有进行尝试\n- bird 配置：临时修改了 calico bird 配置（进入 docker merge 读写层修改 bird 配置文件，并手动创建/删除 ippool，让 confd 重新刷新配置并生效，注意重启 calico 后，bird 配置会复原），让其只导入集群相关的路由，将路由数量由5600多减少到 100 左右。\n\n**减少路由后测试，calico 仍然会触发重启，排除路由数量的因素。**\n\n\n## 排查其他因素\n后续交流 http 短连接方式后发现，测试吞吐量时没有影响但是在测试新建连接数时会触发重启。而 calico Liveness 探针分为2部分：\n- 向 localhost 发起 http 请求，获取 felix 的状态\n- 使用命令检测 bird + confd 进程是否存在\n可以看出 calico 探针会创建一个新的连接，并且测试的过程是在并发量上来之后发生重启，可能是打开的连接数到达了 linux 限制的最大值，使用 ulimit -a 查看 os 限制时，发现 open file 最大为 1024（master 为 65535且配置到系统文件； node 为 1024 未做持久化配置）\n![upgit_20230309_1678344865.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230309_1678344865.png)\n\n![upgit_20230309_1678344974.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230309_1678344974.png)\n\n修改 /etc/security/limits.conf 将 node 节点 limit 设置为 65535，继续测试发现数轮测试后触发重启，相对于之前的必现情况有所改善，继续修改 node 节点 limit 为 100w，经过 30 轮测试后没有发生重启。\n\n## 结论\n**因此断定由于 limit 值太小，并发新建连接测试时无法创建新的连接，导致 calico 探针失败重启。**\n建议在业务进程启动之前，根据可能的并发连接量评估后设置 ulimit 大小，如果不设置，会取宿主机的 ulimit 默认的值，同时 KK 提供 ulimit 配置\n\n**修改 ulimit**：通过修改 /etc/security/limits.conf 添加以下内容，将 limit 设置为 100w \n`* soft nofile` `1000000`\n`* hard nofile` `1000000`\n\n注：\n1.  `nofile`不能设置 `unlimited`\n2.  `nofile`可以设置的最大值为 1048576(2**20)，设置的值大于该数，就会进行登录不了。\n3.  soft 设置的值 一定要小于或等于 hard 的值。","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/%E5%85%AC%E6%9C%89%E4%BA%91-ccm":{"title":"公有云 - ccm","content":"https://cwiki.yunify.com/pages/viewpage.action?pageId=23659614\u0026src=contextnavpagetreemode\n\nhttps://cwiki.yunify.com/pages/viewpage.action?pageId=96318071\u0026src=contextnavpagetreemode\n\n\n[yunify/qingcloud-cloud-controller-manager: A kubernetes cloud-controller-manager for the qingcloud (github.com)](https://github.com/yunify/qingcloud-cloud-controller-manager)\n\n[yunify/qingcloud-cloud-controller-manager: A kubernetes cloud-controller-manager for the qingcloud (github.com)](https://github.com/yunify/qingcloud-cloud-controller-manager)","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%85%B1%E4%BA%ABPod%E7%BA%A7-volume":{"title":"共享Pod级 volume","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/7281bfb07371a171ae43bbc28bae4002.png)\n\n在Pod内包含两个容器：tomcat和busybox，在**Pod级别设置Volume**“app-logs”，用于tomcat向其中写日志文件，busybox读日志文件。\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: volume-pod\nspec:\n  containers:\n  - name: tomcat\n    image: kubeguide/tomcat-app:v1\n    ports:\n    - containerPort: 8080\n    volumeMounts:\n    - name: app-logs\n      mountPath: /usr/local/tomcat/logs\n  - name: Ubuntu\n    image: Ubuntu:latest\n    command: [\"sh\", \"-c\", \"tail -f /logs/catalina*.log\"]\n    volumeMounts:\n    - name: app-logs\n      mountPath: /logs\n  volumes:\n  - name: app-logs\n    emptyDir: {}\n```\n\n```yaml\nroot@orange:/home/orange/kubernetes/orange-test# kubectl logs volume-pod\nerror: a container name must be specified for pod volume-pod, choose one of: [tomcat busybox]\n\n\nroot@orange:/home/orange/kubernetes/orange-test# kubectl logs volume-pod -c busybox\n16-Nov-2021 14:39:03.368 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/docs\n16-Nov-2021 14:39:03.489 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/docs has finished in 121 ms\n16-Nov-2021 14:39:03.490 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/examples\n16-Nov-2021 14:39:05.116 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/examples has finished in 1,627 ms\n16-Nov-2021 14:39:05.116 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/demo\n16-Nov-2021 14:39:05.927 INFO [localhost-startStop-1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n16-Nov-2021 14:39:05.962 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/demo has finished in 846 ms\n16-Nov-2021 14:39:06.074 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-apr-8080\"]\n16-Nov-2021 14:39:06.115 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-apr-8009\"]\n16-Nov-2021 14:39:06.123 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 5028 ms\n\n\nroot@orange:/home/orange/kubernetes/orange-test# \nroot@orange:/home/orange/kubernetes/orange-test# kubectl logs volume-pod -c tomcat\n16-Nov-2021 14:39:00.794 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.0.35\n16-Nov-2021 14:39:00.804 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          May 11 2016 21:57:08 UTC\n16-Nov-2021 14:39:00.804 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.0.35.0\n16-Nov-2021 14:39:00.805 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\n16-Nov-2021 14:39:00.805 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            5.4.0-90-generic\n16-Nov-2021 14:39:00.805 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\n16-Nov-2021 14:39:00.805 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/lib/jvm/java-7-openjdk-amd64/jre\n16-Nov-2021 14:39:00.805 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.7.0_101-b00\n16-Nov-2021 14:39:00.806 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\n16-Nov-2021 14:39:00.806 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat\n16-Nov-2021 14:39:00.806 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat\n16-Nov-2021 14:39:00.807 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties\n16-Nov-2021 14:39:00.808 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n16-Nov-2021 14:39:00.808 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n16-Nov-2021 14:39:00.808 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.endorsed.dirs=/usr/local/tomcat/endorsed\n16-Nov-2021 14:39:00.808 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat\n16-Nov-2021 14:39:00.809 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat\n16-Nov-2021 14:39:00.809 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp\n16-Nov-2021 14:39:00.809 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library 1.2.7 using APR version 1.5.1.\n16-Nov-2021 14:39:00.809 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n16-Nov-2021 14:39:00.814 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized (OpenSSL 1.0.2h  3 May 2016)\n16-Nov-2021 14:39:01.059 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-apr-8080\"]\n16-Nov-2021 14:39:01.088 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-apr-8009\"]\n16-Nov-2021 14:39:01.094 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1600 ms\n16-Nov-2021 14:39:01.197 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service Catalina\n16-Nov-2021 14:39:01.215 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.0.35\n16-Nov-2021 14:39:01.322 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/host-manager\n16-Nov-2021 14:39:03.154 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/host-manager has finished in 1,831 ms\n16-Nov-2021 14:39:03.154 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/manager\n16-Nov-2021 14:39:03.271 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/manager has finished in 115 ms\n16-Nov-2021 14:39:03.274 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/ROOT\n16-Nov-2021 14:39:03.368 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/ROOT has finished in 95 ms\n16-Nov-2021 14:39:03.368 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/docs\n16-Nov-2021 14:39:03.489 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/docs has finished in 121 ms\n16-Nov-2021 14:39:03.490 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/examples\n16-Nov-2021 14:39:05.116 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/examples has finished in 1,627 ms\n16-Nov-2021 14:39:05.116 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/demo\n16-Nov-2021 14:39:05.927 INFO [localhost-startStop-1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n16-Nov-2021 14:39:05.962 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/demo has finished in 846 ms\n16-Nov-2021 14:39:06.074 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-apr-8080\"]\n16-Nov-2021 14:39:06.115 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-apr-8009\"]\n16-Nov-2021 14:39:06.123 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 5028 ms\n```\n","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3":{"title":"其他相关","content":"\ncilium 相关网卡\n- lxcxxxxx - 总长为 8 ??? - 之前的 cilium ？\n- 拥有 cilium_ 前缀\n\n\ntc maps : /sys/fs/bpf/tc/globals\ncilium map 名称包含 cilium_； tunnel map 名称 cilium_tunnel_map\n\n","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99-%E5%B7%A5%E5%85%B7":{"title":"其他资料-工具","content":"\n\n- [xdp-project/xdp-tools: Utilities and example programs for use with XDP](https://github.com/xdp-project/xdp-tools)\n- ","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0":{"title":"内核参数","content":"![upgit_20230209_1675936379.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230209_1675936379.png)\n\n![upgit_20230209_1675936414.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230209_1675936414.png)\n\n\nipvs warn 关闭 - 当ipvs连不上后端时会打印相关的报错信息\nsysctl -w net.ipv4.vs.ignore_no_rs_error=1\n[IPVS no destination available - Kubernetes 实践指南 (imroc.cc)](https://imroc.cc/kubernetes/troubleshooting/node/ipvs-no-destination-available.html)","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%86%85%E6%A0%B8%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0":{"title":"","content":"\n![upgit_20230110_1673315215.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230110_1673315215.png)\n","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8":{"title":"","content":"CGO技术不仅可以在Go语言中调用C语言函数，也可以将Go语言函数导出为C语言函数\n## go调用C函数\n启用CGO特性后，CGO会构造一个虚拟的C包。通过这个虚拟的C包可以调用C语言函数。\n## C函数的返回值\nC语言不支持返回多个结果，因此`\u003cerrno.h\u003e`标准库提供了一个`errno`宏用于返回错误状态。我们可以近似地将`errno`看着一个线程安全的全局变量，可以用于记录最近一次错误的状态码。\nCGO也针对`\u003cerrno.h\u003e`标准库的`errno`宏做的特殊支持：在CGO调用C函数时如果有两个返回值，那么第二个返回值将对应`errno`错误状态。\n```go\n/*\n#include \u003cerrno.h\u003e\nstatic int div(int a, int b) {\n\tif(b == 0) {\n\t\terrno = EINVAL;\n\t\treturn 0;\n\t}\n\treturn a/b;\n}\n*/\nimport \"C\"\nimport \"fmt\"\nfunc main() {\n\tv0, err0 := C.div(2, 1)\n\tfmt.Println(v0, err0)\n    \n\tv1, err1 := C.div(1, 0)\n\tfmt.Println(v1, err1)\n}\n```\n运行这个代码将会产生以下输出：\n```\n2 \u003cnil\u003e\n0 invalid argument\n```\n## void函数的返回值\ncgo对errno做了特殊处理，可以通过第二个返回值来获取C语言的错误状态。对于void类型函数，这个特性依然有效。\n```go\n//static void noreturn() {}\nimport \"C\"\nimport \"fmt\"\nfunc main() {\n\t_, err := C.noreturn()\n\tfmt.Println(err)\n}\n```\n我们也可以尝试获取第一个返回值，它对应的是C语言的void对应的Go语言类型：\n```go\n//static void noreturn() {}\nimport \"C\"\nimport \"fmt\"\nfunc main() {\n\tv, _ := C.noreturn()\n\tfmt.Printf(\"%#v\", v)\n}\n// 代码输出：main._Ctype_void{}\n```\n运行这个代码将会产生以下输出：我们可以看出C语言的void类型对应的是当前的main包中的`_Ctype_void`类型。其实也将C语言的noreturn函数看作是返回`_Ctype_void`类型的函数，而`_Ctype_void`类型对应一个0长的数组类型`[0]byte`\n```go\n//static void noreturn() {}\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(C.noreturn())\n}\n//代码输出：[]\n```\n## C调用GO导出函数\nCGO还有一个强大的特性：将Go函数导出为C语言函数。这样的话我们可以定义好C语言接口，然后通过Go语言实现。\n```go\nimport \"C\"\n//export add\nfunc add(a, b C.int) C.int {\n\treturn a+b\n}\n```\nadd函数名以小写字母开头，对于Go语言来说是包内的私有函数。但是从C语言角度来看，导出的add函数是一个可全局访问的C语言函数。如果在两个不同的Go语言包内，都存在一个同名的要导出为C语言函数的add函数，那么在最终的链接阶段将会出现**符号重名**的问题。\n当导出C语言接口时，需要保证函数的参数和返回值类型都是C语言友好的类型，同时返回值不得直接或间接包含Go语言内存空间的指针。\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E5%88%9D%E5%A7%8Bnginx":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/%E5%89%96%E6%9E%90":{"title":"","content":"[Calico eBPF Data Plane Deep-Dive (tigera.io)](https://www.tigera.io/blog/calico-ebpf-data-plane-deep-dive/)\n\nnodeport 流量到来之后如何处理的\n\n\nhost ip update ？\n\n\nkube-proxy ： 用于处理高级的问题，如重启、配置等\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-hybridnet-%E5%8E%9F%E7%90%86":{"title":"动手实现 hybridnet - 原理","content":"\n默认路由表\n```bash\n~# ip rule\n0:  from all lookup local\n32766: from all lookup main\n32767: from all lookup default\n```\n\n```bash\n~# ip rule\n0: from all lookup local\n1: from all lookup 39999\n2: from all lookup 40000\n3: from all fwmark 0x20/0x20 lookup 40001\n4: from 172.24.0.0/16 fwmark 0x0/0x4040 lookup 10000\n5: from 192.168.56.0/24 fwmark 0x0/0x4040 lookup 10001\n32766: from all lookup main\n32767: from all lookup default\n```\n\n```bash\n~# ip route show table 39999\n172.24.0.1 dev hybr6b3adcd7e1e\n172.24.0.4 dev hybr1b7a9ed1883\n172.24.0.7 dev hybr6809d4b1e0e\n\n~# ip route show table 40000\n172.24.0.0/16 dev eth0.vxlan4\n\n~# ip route show table 40001\ndefault dev eth0.vxlan4\n\n~# ip route show table 10000\n192.168.56.0/24 dev eth0.vxlan4\nthrow 192.168.56.1\n192.168.57.0/24 dev eth0.vxlan4\n\n~# ip route show table 10001\ndefault via 192.168.56.1 dev eth0\n192.168.56.0/24 dev eth0 scope link\n```\n\n\n- 39999 路由表\n\t- 目标网段为本节点上 pod 的 ip 地址、出口设备为 pod 对应的 veth 设备\n- 40000 路由表\n\t- 目标网段为集群内的 overlay 网段、出口设备为 vxlan 设备。所有发往 overlay pod 的流量会经过 vxlan 设备进行隧道封装。\n- **40001 路由表**\n\t- 只有一条 default 路由。让 “其他节点访问本节点上 overlay pod” 的反向流量经过 overlay 设备，达到 “集群内节点访问 overlay pod 的流量为隧道流量（不经过 NAT）” 的效果\n\n- 10000 路由表\n\t只有源 ip 在 xxx 网段中并且没有相关 mark 的流量才会进入 10000 表处理，描述从本节点上对应该容器网段 pod 中发出的流量应该如何处理\n\t- vxlan\n\t\t- 路由条目代表发送到某个 underlay 网段的流量，用 throw 类型的条目忽略\n\t\t- 上述的例子中 192.168.56.0/24 为 vlan；192.168.57.0/24 为 bgp 的 subnet\n\t- vlan\n\t\t- 目标地址为本网段 CIDR 的直接路由，一条下一跳为网段网关 ip 的默认路由（同网段的流量直接走物理网卡发送出去，跨网段的流量走外部网关路由进行转发）\n\t- bgp\n\t\t- 一条下一跳为 BGP 网关 ip 的默认路由（让所有流量走外部网关路由进行转发）\n\t\t- 注意：网关 ip 地址需要是当前节点路由可达的\n\n[CNStack 网络插件：hybridnet 的设计与实现 (qq.com)](https://mp.weixin.qq.com/s/d_7GdrIHgPEVESXd6Rn1dA)\n\n","lastmodified":"2025-03-26T03:48:44.143315145Z","tags":null},"/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-hybridnet-%E5%AE%9E%E8%B7%B5":{"title":"动手实现 hybridnet - 实践","content":"\n[[vlan 配置]]\n[[网卡 vlan]]\n[[手动创建 netns + 跨主机通信]]\n[[动手实现 hybirdnet.svg]]\n\n规划的网段：\n- overlay：10.233.100.0/24\n- vlan：\n\t- 10.10.11.0/24\n\t- 10.10.20.0/24\n\n**添加 vlan 子接口**\n- ip link add link eth1 name eth1.10 type vlan id 10\n\n**添加 vxlan 接口**\n\n\n**ip rule**\n```bash\nip link add  eth1.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1\nip addr add 10.10.0.2/24 dev eth1.vxlan4\nip link set eth1.vxlan4 up\n\nip link add  eth1.10.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1.10\nip addr add 10.10.10.2/24 dev eth1.10.vxlan4\nip link set eth1.10.vxlan4 up\n\nip link add  eth1.11.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1.11\nip addr add 10.10.11.2/24 dev eth1.11.vxlan4\nip link set eth1.11.vxlan4 up\n```\n\n创建 overlay 网络\n```bash\nip netns add ns0\nip link add name veth02 type veth peer name port02\nip link set dev veth02 netns ns0\nip netns exec ns0 ip link set veth02 up\nip netns exec ns0 ip link set lo up\nip netns exec ns0 ip addr add 10.233.100.10/24 dev veth02\nip link set port02 up\nip netns exec ns0 ip route add 169.254.1.1 dev  veth02 scope link \nip netns exec ns0 ip route add default via 169.254.1.1 dev veth02\necho 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\n```\n\n打通网络：\n```\nip rule add priority 1 table 39999\nip route add 10.233.100.10 dev port02  table 39999\n\nip rule add priority 2 table 40000\nip route add 10.233.100.0/24 dev eth1.11.vxlan4 table 40000\n\nip rule add priority 3 fwmark 0x20/0x20 table 40001\nip route add default dev eth1.11.vxlan4 table 40001\n\nip rule add priority 4 from 10.233.100.0/24 fwmark 0x0/0x4040 table 10000\nip route add 10.10.11.0/24 dev eth1.11.vxlan4 table 10000\nip route add throw 10.10.11.1 table 10000\nip route add 10.10.20.0/24 dev eth1.11.vxlan4 table 10000\nip route add throw 10.10.20.1 table 10000\n\nip rule add priority 5 from 10.10.20.0/24 fwmark 0x0/0x4040 table 10001\nip route add default via 10.10.20.1 dev eth1.20 table 10001\nip route add 10.10.20.0/24 dev eth1.20 scope link table 10001\n```\n\n\nhybridnet 如何更新 vtep fdb 信息的\n\n```yaml\nroot@node:~/clab# cat clab.yaml \nname: cluster\nmgmt:\n  network: bridge\ntopology:\n  nodes:\n    leaf:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n        - vyos/config:/opt/vyatta/etc/config\n\n    server1:\n      kind: linux\n      image: rykren/nettools:latest\n      network-mode: none\n      exec:\n      - ip link set dev eth1 address aa:c1:ab:9f:49:82\n      - ip addr add 10.10.0.2/24 dev eth1\n      - ip route replace default via 10.10.0.1\n      # add vlan20\n      - ip link add link eth1 name eth1.20 type vlan id 20\n      - ip addr add 10.10.20.10/24 dev eth1.20 noprefixroute\n      - ip link set dev eth1.20 up\n      # add vxlan\n      - ip link add eth1.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1 learning\n      # - ip link add eth1.vxlan4 type vxlan id 4 dstport 4789 remote 10.10.10.2 local 10.10.0.2 dev eth1 learning\n      # - ip link add eth1.vxlan4 type vxlan id 4 dstport 4789 local 10.10.0.2 dev eth1\n      - ip link set eth1.vxlan4 address aa:c1:ab:9f:49:82\n      - ip addr add 10.10.0.2/24 brd 10.10.10.255 dev eth1.vxlan4 noprefixroute\n      - ip link set eth1.vxlan4 up\n      # add container 1\n      - ip netns add ns1\n      - ip link add name veth01 type veth peer name port01\n      - ip link set dev veth01 netns ns1\n      - ip netns exec ns1 ip addr add 10.233.100.10/24 dev veth01\n      - ip netns exec ns1 ip link set dev veth01 address 32:d1:ae:e8:8e:10\n      - ip netns exec ns1 ip link set lo up\n      - ip netns exec ns1 ip link set veth01 up\n      - ip link set port01 up\n      - ip netns exec ns1 ip route add 169.254.1.1 dev  veth01 scope link \n      - ip netns exec ns1 ip route add default via 169.254.1.1 dev veth01\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/route_localnet\"\n      # add container 2\n      - ip netns add ns2\n      - ip link add name veth02 type veth peer name port02\n      - ip link set dev veth02 netns ns2\n      - ip netns exec ns2 ip link set veth02 up\n      - ip netns exec ns2 ip link set lo up\n      - ip netns exec ns2 ip addr add 10.10.20.10/24 dev veth02\n      - ip link set port02 up\n      - ip netns exec ns2 ip route add 169.254.1.1 dev  veth02 scope link \n      - ip netns exec ns2 ip route add default via 169.254.1.1 dev veth02\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/route_localnet\"\n      # add router\n      - ip rule add priority 1 table 39999\n      - ip route add 10.233.100.10 dev port01  table 39999\n      - ip route add 10.10.20.10 dev port02  table 39999\n      - ip rule add priority 2 table 40000\n      - ip route add 10.233.100.0/24 dev eth1.vxlan4 table 40000\n      - ip rule add priority 3 fwmark 0x20/0x20 table 40001\n      - ip route add default dev eth1.vxlan4 table 40001\n      - ip rule add priority 4 from 10.233.100.0/24 fwmark 0x0/0x4040 table 10000\n      - ip route add 10.10.20.0/24 dev eth1.vxlan4 table 10000\n      - ip route add throw 10.10.20.1 table 10000\n      - ip rule add priority 5 from 10.10.20.0/24 fwmark 0x0/0x4040 table 10001\n      - ip route add 10.10.20.0/24 dev eth1.20 scope link table 10001\n      - ip route add default via 10.10.20.1 dev eth1.20 table 10001\n      # add fdb\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.11.2 self permanent\n      - bridge fdb append aa:c1:ab:9f:49:82 dev eth1.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append aa:c1:ab:f9:13:8a dev eth1.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append aa:c1:ab:d5:62:23 dev eth1.vxlan4 dst 10.10.11.2 self permanent\n      # add neigh proxy\n      - ip neighbor add proxy 10.233.100.10 lladdr 32:d1:ae:e8:8e:10 dev eth1.vxlan4\n\n    server2:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      # add vlan10\n      - ip link set dev eth1 address aa:c1:ab:f9:13:8a\n      - ip link add link eth1 name eth1.10 type vlan id 10\n      - ip link set dev eth1.10 up\n      - ip addr add 10.10.10.2/24 dev eth1.10\n      - ip route replace default via 10.10.10.1 dev eth1.10\n      # add vlan20\n      - ip link add link eth1 name eth1.20 type vlan id 20\n      - ip addr add 10.10.20.20/24 dev eth1.20 noprefixroute\n      - ip link set dev eth1.20 up\n      # add vxlan\n      #- ip link add  eth1.10.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1.10\n      - ip link add eth1.10.vxlan4 type vxlan id 4 dstport 4789 remote 10.10.0.2 local 10.10.10.2 dev eth1.10\n      - ip link set eth1.10.vxlan4 address aa:c1:ab:f9:13:8a\n      - ip addr add 10.10.10.2/24  brd 10.10.10.255 dev eth1.10.vxlan4 noprefixroute\n      - ip link set eth1.10.vxlan4 up\n      # add container 1\n      - ip netns add ns1\n      - ip link add name veth01 type veth peer name port01\n      - ip link set dev veth01 netns ns1\n      - ip netns exec ns1 ip addr add 10.233.100.20/24 dev veth01\n      - ip netns exec ns1 ip link set dev veth01 address 32:d1:ae:e8:8e:20\n      - ip netns exec ns1 ip link set lo up\n      - ip netns exec ns1 ip link set veth01 up\n      - ip link set port01 up\n      - ip netns exec ns1 ip route add 169.254.1.1 dev  veth01 scope link \n      - ip netns exec ns1 ip route add default via 169.254.1.1 dev veth01\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/route_localnet\"\n      # add container 2\n      - ip netns add ns2\n      - ip link add name veth02 type veth peer name port02\n      - ip link set dev veth02 netns ns2\n      - ip netns exec ns2 ip link set veth02 up\n      - ip netns exec ns2 ip link set lo up\n      - ip netns exec ns2 ip addr add 10.10.20.20/24 dev veth02\n      - ip link set port02 up\n      - ip netns exec ns2 ip route add 169.254.1.1 dev  veth02 scope link \n      - ip netns exec ns2 ip route add default via 169.254.1.1 dev veth02\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/route_localnet\"\n      # add router\n      - ip rule add priority 1 table 39999\n      - ip route add 10.233.100.20 dev port01  table 39999\n      - ip route add 10.10.20.20 dev port02  table 39999\n      - ip rule add priority 2 table 40000\n      - ip route add 10.233.100.0/24 dev eth1.10.vxlan4 table 40000\n      - ip rule add priority 3 fwmark 0x20/0x20 table 40001\n      - ip route add default dev eth1.10.vxlan4 table 40001\n      - ip rule add priority 4 from 10.233.100.0/24 fwmark 0x0/0x4040 table 10000\n      - ip route add 10.10.20.0/24 dev eth1.10.vxlan4 table 10000\n      - ip route add throw 10.10.20.1 table 10000\n      - ip rule add priority 5 from 10.10.20.0/24 fwmark 0x0/0x4040 table 10001\n      - ip route add 10.10.20.0/24 dev eth1.20 scope link table 10001\n      - ip route add default via 10.10.20.1 dev eth1.20 table 10001\n      # add fdb\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.11.2 self permanent\n      - bridge fdb append aa:c1:ab:9f:49:82 dev eth1.10.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append aa:c1:ab:f9:13:8a dev eth1.10.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append aa:c1:ab:d5:62:23 dev eth1.10.vxlan4 dst 10.10.11.2 self permanent\n      # add neigh proxy\n      - ip neighbor add proxy 10.233.100.20 lladdr 32:d1:ae:e8:8e:20 dev eth1.10.vxlan4\n\n    server3:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      # add vlan11\n      - ip link set dev eth1 address aa:c1:ab:d5:62:23\n      - ip link add link eth1 name eth1.11 type vlan id 11\n      - ip link set dev eth1.11 up\n      - ip addr add 10.10.11.2/24 dev eth1.11\n      - ip route replace default via 10.10.11.1 dev eth1.11\n      # add vlan20\n      - ip link add link eth1 name eth1.20 type vlan id 20\n      - ip addr add 10.10.20.30/24 dev eth1.20 noprefixroute\n      - ip link set dev eth1.20 up\n      # add vxlan\n      - ip link add  eth1.11.vxlan4 type vxlan id 4 dstport 4789 group 239.1.1.1 dev eth1.11\n      - ip addr add 10.10.11.2/24 brd 10.10.10.255 dev eth1.11.vxlan4 noprefixroute\n      - ip link set eth1.11.vxlan4 address aa:c1:ab:d5:62:23\n      - ip link set eth1.11.vxlan4 up\n      # add container 1\n      - ip netns add ns1\n      - ip link add name veth01 type veth peer name port01\n      - ip link set dev veth01 netns ns1\n      - ip netns exec ns1 ip addr add 10.233.100.30/24 dev veth01\n      - ip netns exec ns1 ip link set dev veth01 address 32:d1:ae:e8:8e:30\n      - ip netns exec ns1 ip link set lo up\n      - ip netns exec ns1 ip link set veth01 up\n      - ip link set port01 up\n      - ip netns exec ns1 ip route add 169.254.1.1 dev  veth01 scope link \n      - ip netns exec ns1 ip route add default via 169.254.1.1 dev veth01\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port01/route_localnet\"\n      # add container 2\n      - ip netns add ns2\n      - ip link add name veth02 type veth peer name port02\n      - ip link set dev veth02 netns ns2\n      - ip netns exec ns2 ip link set veth02 up\n      - ip netns exec ns2 ip link set lo up\n      - ip netns exec ns2 ip addr add 10.10.20.30/24 dev veth02\n      - ip link set port02 up\n      - ip netns exec ns2 ip route add 169.254.1.1 dev  veth02 scope link \n      - ip netns exec ns2 ip route add default via 169.254.1.1 dev veth02\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/forwarding\"\n      - bash -c \"echo 1 \u003e /proc/sys/net/ipv4/conf/port02/route_localnet\"\n      # add router\n      - ip rule add priority 1 table 39999\n      - ip route add 10.233.100.30 dev port01  table 39999\n      - ip route add 10.10.20.10 dev port02  table 39999\n      - ip rule add priority 2 table 40000\n      - ip route add 10.233.100.0/24 dev eth1.11.vxlan4 table 40000\n      - ip rule add priority 3 fwmark 0x20/0x20 table 40001\n      - ip route add default dev eth1.11.vxlan4 table 40001\n      - ip rule add priority 4 from 10.233.100.0/24 fwmark 0x0/0x4040 table 10000\n      - ip route add 10.10.20.0/24 dev eth1.11.vxlan4 table 10000\n      - ip route add throw 10.10.20.1 table 10000\n      - ip rule add priority 5 from 10.10.20.0/24 fwmark 0x0/0x4040 table 10001\n      - ip route add 10.10.20.0/24 dev eth1.20 scope link table 10001\n      - ip route add default via 10.10.20.1 dev eth1.20 table 10001\n      # add fdb\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append 00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.11.2 self permanent\n      - bridge fdb append aa:c1:ab:9f:49:82 dev eth1.11.vxlan4 dst 10.10.0.2 self permanent\n      - bridge fdb append aa:c1:ab:f9:13:8a dev eth1.11.vxlan4 dst 10.10.10.2 self permanent\n      - bridge fdb append aa:c1:ab:d5:62:23 dev eth1.11.vxlan4 dst 10.10.11.2 self permanent\n      # add neigh proxy\n      - ip neighbor add proxy 10.233.100.30 lladdr 32:d1:ae:e8:8e:30 dev eth1.11.vxlan4\n      \n  links:\n  - endpoints: [\"leaf:eth1\", \"server1:eth1\"]\n  - endpoints: [\"leaf:eth2\", \"server2:eth1\"]\n  - endpoints: [\"leaf:eth3\", \"server3:eth1\"]\n```\n\n\n\n```yaml\nbridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.0.2 self permanent\nbridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.10.2 self permanent\nbridge fdb append 00:00:00:00:00:00 dev eth1.vxlan4 dst 10.10.11.2 self permanent\nbridge fdb append aa:c1:ab:9f:49:82 dev eth1.vxlan4 dst 10.10.0.2 self permanent\nbridge fdb append aa:c1:ab:f9:13:8a dev eth1.vxlan4 dst 10.10.10.2 self permanent\nbridge fdb append aa:c1:ab:d5:62:23 dev eth1.vxlan4 dst 10.10.11.2 self permanent\n\n00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.0.2 self permanent\n00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.10.2 self permanent\n00:00:00:00:00:00 dev eth1.10.vxlan4 dst 10.10.11.2 self permanent\naa:c1:ab:5a:9b:3c dev eth1.10.vxlan4 dst 10.10.0.2 self permanent\naa:c1:ab:f9:e7:9c dev eth1.10.vxlan4 dst 10.10.10.2 self permanent\naa:c1:ab:c8:e2:5b dev eth1.10.vxlan4 dst 10.10.11.2 self permanent\n\n00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.0.2 self permanent\n00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.10.2 self permanent\n00:00:00:00:00:00 dev eth1.11.vxlan4 dst 10.10.11.2 self permanent\naa:c1:ab:5a:9b:3c dev eth1.11.vxlan4 dst 10.10.0.2 self permanent\naa:c1:ab:f9:e7:9c dev eth1.11.vxlan4 dst 10.10.10.2 self permanent\naa:c1:ab:c8:e2:5b dev eth1.11.vxlan4 dst 10.10.11.2 self permanent\n```\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%8D%87%E7%BA%A7":{"title":"升级","content":"\n3.26.1 - 客户端TLS握手可能会无限期阻止服务器，导致拒绝服务\n3.26.3\n3.26.4\n3.27.0","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%8D%87%E7%BA%A7-calico-+-calico-bgp-filter-%E9%85%8D%E7%BD%AE":{"title":"升级 calico + calico bgp filter 配置","content":"\n## 升级 calico\n官方文档： [Upgrade Calico on Kubernetes | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/latest/operations/upgrading/kubernetes-upgrade#upgrading-an-installation-that-uses-manifests-and-the-kubernetes-api-datastore)\n\n对于 kk 安装的集群，默认使用 calico manifest 安装，因此依照官方文档的使用 manifest 的方案升级： \n- https://docs.tigera.io/calico/latest/operations/upgrading/kubernetes-upgrade#upgrading-an-installation-that-uses-manifests-and-the-kubernetes-api-datastore\n\n### 1. 下载相应升级版本的 manifest 文件并编辑相关的配置\n\n节点数少于 50 的 manfiest：\n- curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml -o upgrade.yaml\n节点数大于 50 的，需要/已经安装 typha 的 manifest：\n- curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico-typha.yaml -o upgrade.yaml\n\n根据需要编辑 upgrade.yaml 中 calico-daemonset 的环境变量配置：\n- ippool cidr\n- 是否启用 default ippool\n- ippool 默认模式选择(ipipmode)\n- 是否开启 natOutgoing\n- ... ...\n\n即修改对应 upgrade.yaml 文件中 calico-node daemonset container 的环境变量，下面的环境变量主要针对与默认的 default-ipv4-ippool 生效，如果客户对于该 ippool 有定制修改，即修改相应的环境变量（定制了哪些修改哪些）；没有额外的定制修改则修改 CALICO_IPV4POOL_CIDR 即可\n\n```bash\n1. CALICO_IPV4POOL_CIDR\n2. CALICO_IPV4POOL_IPIP\n3. CALICO_IPV4POOL_VXLAN\n4. CALICO_IPV4POOL_BLOCK_SIZE\n5. CALICO_IPV4POOL_NODE_SELECTOR\n6. CALICO_IPV4POOL_NAT_OUTGOING\n```\n\n对于需要 typha 的还需要编辑 upgrade.yaml 中 calico-typha Deployment 副本数量：\n- 建议每 200 个节点至少有 1 个副本，并且不超过 20 个副本。在生产中，我们建议至少三个副本，以减少滚动升级和故障的影响。副本数量应始终小于节点数量，否则滚动升级将停止。\n### 2. 滚动更新\n- kubectl apply --server-ide --force-conflicts -f upgrade.yaml\n\n### 3. 观察更新状态，并等待 calico-node pods 最终为 ready\n- watch kubectl get pods -n kube-system\n\n### 4. 删除旧的 calicoctl，下载安装新的 calicoctl\n如果有额外配置的需要同步配置（连接外部datastore）；替换相应的版本进行下载，如果路径不正确的话，可以到官方 github release 页面下载： [https://github.com/projectcalico/calico/releases](https://github.com/projectcalico/calico/releases)\n- curl -L https://github.com/projectcalico/calico/releases/v3.26.1/download/calicoctl-linux-amd64 -o calicoctl\n\n查看 calicoctl 的安装以及配置： [https://docs.tigera.io/calico/latest/operations/calicoctl/install](https://docs.tigera.io/calico/latest/operations/calicoctl/install)\n\n### 5. 使用 calicoctl 验证  \n- calicoctl version\n\n\n## 配置 bgpfilter\n官方文档链接：[BGP Filter | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/latest/reference/resources/bgpfilter#bgp-filter-definition)\n\n配置 bgpfilter 分为两部分：\n- 创建 bgpfilter 规则\n- 为特定 bgppeer 指定使用的 bgpfilter\n\n示例：\n```yaml\napiVersion: crd.projectcalico.org/v1\nkind: BGPPeer\nmetadata:\n  name: rack1-to-leaf1\nspec:\n  peerIP: 10.1.5.1\n  asNumber: 65005\n  filters:\n  - rack-to-leaf-filter\n  nodeSelector: rack == 'rack1'\n---\napiVersion: crd.projectcalico.org/v1\nkind: BGPPeer\nmetadata:\n  name: rack2-to-leaf2\nspec:\n  peerIP: 10.1.8.1\n  asNumber: 65008\n  filters:\n  - rack-to-leaf-filter\n  nodeSelector: rack == 'rack2'\n\n---\napiVersion: crd.projectcalico.org/v1\nkind: BGPFilter\nmetadata:\n  name: rack-to-leaf-filter\nspec:\n  importV4:\n    - action: Reject\n      matchOperator: NotIn\n      cidr: 10.233.64.0/18\n```\n\n官方示例：\n```\napiVersion: crd.projectcalico.org/v1\nkind: BGPFilter\nmetadata:\n  name: my-filter\nspec:\n  exportV4:\n    - action: Accept\n      matchOperator: In\n      cidr: 77.0.0.0/16\n    - action: Reject\n      matchOperator: NotIn\n      cidr: 88.0.0.0/16\n  importV4:\n    - action: Reject\n      matchOperator: NotIn\n      cidr: 44.0.0.0/16\n  exportV6:\n    - action: Reject\n      matchOperator: NotEqual\n      cidr: 9000::0/64\n  importV6:\n    - action: Accept\n      matchOperator: Equal\n      cidr: 5000::0/64\n    - action: Reject\n      matchOperator: NotIn\n      cidr: 5000::0/64\n```\n\n- importV4: 表示导入到本机的路由过滤规则，当建立 RR/TOR 模式时可以在该字段下添加一些规则。\n\t- cidr: IPv4 range\n\t- matchOperator: 匹配路由的方法，取值：In, NotIn, Equal, NotEqual\n\t- action: 对匹配路由采取的行为，取值：Accept, Reject\n- exportV4: 表示将本机本身的路由导入到 bird 进行宣告的过滤规则","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%8F%8C%E6%A0%88":{"title":"双栈","content":"\n#### kubekey 开发需求\n- 检测主机是否支持 ipv6\n- 修正 ipv6 相关的内核参数\n- 支持开启 ipv6 以及 ipv6 的配置项（编辑 cni 配置文件）\n- 安装 calico 并开启 ipv6 （添加 calico-node daemonset 的 ipv6 相关的环境变量）\n- 配置 ipv6 (添加默认的 ipv6 ippool)\n- 初始化 kubernetes 需要开启 ipv6 (使用 kubeadm 配置 kube-apiserver、kube-controller-manager、kube-proxy、kubelet 来开启 ipv6)\n\n#### ks 内部组件开发需求\n**ks 内部组件 ippool 支持 ipv6**\n- 支持创建、修改、删除 ipv6 ippool\n- 设定 ipv6 ippool 与企业空间的绑定关系\n- 支持创建负载时选中 ipv6 的 ippool\n- 查看 ipv6 ippool详情、分配情况\n\n**ks service 支持 ipv6 的配置**\n- 创建服务时，指定使用的协议栈\n- 支持服务协议栈的动态切换\n\n**ks 网络隔离 ipv6 支持**\n**ks 自身的组件和插件 ipv6 支持**\n- devops\n- 可观测\n- 微服务\n- gateway\n- ... ...\n\n#### ks-installer 组件开发需求\n- 添加 ks 是否启用 ipv6 相关的配置（默认不启用。支持用户的动态修改，停用 ipv6 时，无法在 ks 页面上操作和管理 ipv6 相关，但是底层的 kubernetes ipv6 仍可用）\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%8F%8C%E6%A0%88%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B":{"title":"双栈测试用例","content":"### 1. POD双栈IP：\n已创建默认的 ipv4、ipv6 ippool\n- 直接创建负载，查看负载 ip\n\n未创建默认 ipv6 ippool\n- 创建自定义 ipv4、ipv6 ippool\n- 创建负载，查看负载 ip\n\n示例 yaml：\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: netools\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: netools\n  template:\n    metadata:\n      labels:\n        app: netools\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/renyunkang/netools\n          imagePullPolicy: IfNotPresent\n          name: netools\n          ports:\n            - containerPort: 80\n```\n\n\n### 2. IPPool 绑定：\nns 绑定使用的注解为：\n```yaml\nannotations:\n  'cni.projectcalico.org/ipv4pools': '[\"default-ipv4-ippool\"]'\n\nannotations:\n  'cni.projectcalico.org/ipv6pools': '[\"default-ipv6-ippool\"]'\n```\n\n**正常绑定**\n创建多个 ipv4、ipv6 的 ippool\n- ippool 绑定到 namespace\n\t- 创建新的namespace，并在该 namespace 下创建负载，查看 podip\n- ippool 绑定到负载， 创建负载 podip\n\n\u003e 如果绑定关系在负载和 namespace 上均有设置，则以负载上的为准\n\n**绑定失败**\n- 没有可用 ippool，或者通过 nodeSelector 为 !all() 进行限制\n```bash\nnetworkPlugin cni failed to set up pod \"xxxx\" network: no configured Calico pools for node nodex\n```\n- 注解写错（ipv4 绑定 ipv6 的地址池）\n```bash\nnetworkPlugin cni failed to set up pod \"xxxx\" network: \"10.233.64.0\" isn't a IPv6 address\n```\n```bash\nnetworkPlugin cni failed to set up pod \"xxxx\" network: \"fd8f:e6b7:6ea9::\" isn't a IPv4 address\n```\n\n### 3. BGP 连接测试：\n\n- v4 bgp peer断了，不影响v6 bpg peer  \n- v6 bgp peer断了，不影响v4 bgp peer  （测试方式同理）\n\n以 gobgp 模拟外部交换机，与 calico 建立 bgp 连接，查看其接受到的路由情况。运行 gobgp 的节点位于集群外。gobpg 需要额外 frr 搭配才可以导入路由到内核。这里为了验证只需要验证其收到的路由表即可。\n\n参考配置：\n```toml\n[global.config]\n  as = 65000\n  router-id = \"192.168.0.4\"\n\n[global.use-multiple-paths.config]\n  enabled = true\n\n[[neighbors]]\n  [neighbors.config]\n    neighbor-address = \"2402:e7c0:400:c000:ffff:ffff:fffe:fffc\"\n    peer-as = 64512\n     [neighbors.add-paths.config]\n      send-max = 8\n      receive = true\n\n[[neighbors]]\n  [neighbors.config]\n    neighbor-address = \"2402:e7c0:400:c000:ffff:ffff:fffe:fffe\"\n    peer-as = 64512\n     [neighbors.add-paths.config]\n      send-max = 8\n      receive = true\n\n\n[[neighbors]]\n  [neighbors.config]\n    neighbor-address = \"192.168.0.2\"\n    peer-as = 64512\n     [neighbors.add-paths.config]\n      send-max = 8\n      receive = true\n\n[[neighbors]]\n  [neighbors.config]\n    neighbor-address = \"192.168.0.3\"\n    peer-as = 64512\n     [neighbors.add-paths.config]\n      send-max = 8\n      receive = true\n```\n\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: bgp-peer-ipv4\nspec:\n  peerIP: 192.168.0.4\n  asNumber: 65000\n---\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: bgp-peer-ipv6\nspec:\n  peerIP: 2402:e7c0:400:c000:ffff:ffff:fffe:fffd\n  asNumber: 65000\n```\n\n\ngobgp 查看状态、邻居情况以及传入的路由：\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/11/e75f49df932b2cadc0a3cdd042796c6d.png)\n\n**模拟失败：**\n```bash\n~# ps -elf | grep bird\n0 S root       588  1548  0  80   0 -  1751 pipe_r 14:06 pts/0    00:00:00 grep --color=auto bird\n4 S root       616   356  0  80   0 -  1062 do_pol 13:57 ?        00:00:00 runsv bird\n4 S root       619   356  0  80   0 -  1062 do_pol 13:57 ?        00:00:00 runsv bird6\n4 S root      1092   616  0  80   0 -   461 do_pol 13:57 ?        00:00:00 bird -R -s /var/run/calico/bird.ctl -d -c /etc/calico/confd/config/bird.cfg\n4 S root      1093   619  0  80   0 -   465 do_pol 13:57 ?        00:00:00 bird6 -R -s /var/run/calico/bird6.ctl -d -c /etc/calico/confd/config/bird6.cfg\n```\n\n可以看到 bird 启动的命令。容器中 bird 启动时会根据配置文件进行启动、创建一个用于通信的 unix socket 文件，同时监听 179 端口用于建立 bgp 邻居。\n\n我们可以通过停掉 bird 进程，模拟意外退出。但是直接 kill 掉进程，可能会被 runsv bird 重新拉起来一个新的进程，因此我们可以通过删除其配置文件后 kill 掉 bird 进程。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/11/21c71fdb0e2c4ff2e42ded1dd779f5e1.png)\n\n\nbgp 连接断掉后，各个 bgp peer 状态\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/11/5bfd0cfd357e38da2251b326f6f0447e.png)\n\n这个方法会触发 calico 健康异常，进而导致其自动重启，重启后配置文件会从镜像中重新生成，所以 bgp 连接会自动恢复，如果想长时间测试，可以拉长 calico 健康检查的时长。\n\n### 4. service 双栈IP：\nkubectl expose deploy netools，编辑 service netools 或者新建新的 service\n- 创建 svc，并指定 ipFamilyPolicy: PreferDualStack （当双栈不支持时，会退回单栈）\n- 创建 svc，并指定 ipFamilyPolicy: RequireDualStack\n\n新建/修改后查看 service yaml，查看 spec.clusterIPs 下已分配的 ipv6 的地址以及 ipFamilies 为 `[IPv4, IPv6]`\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: netools\n  namespace: default\nspec:\n  clusterIP: 10.233.47.157\n  clusterIPs:\n  - 10.233.47.157\n  - fd8f:e6b7:6eaa::72dc\n  internalTrafficPolicy: Cluster\n  ipFamilies:\n  - IPv4\n  - IPv6\n  ipFamilyPolicy: PreferDualStack\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: netools\n  sessionAffinity: None\n  type: ClusterIP\nstatus:\n  loadBalancer: {}\n\n```\n\n\n### 5. 跨节点联通性测试：\n- pod-pod\n\t进入 pod 内部查看已分配的 ip，或者查看 pod yaml 中的注解获取 podip；\n\t在 pod 中访问另一个节点的 podip\n- pod-node\n\t查看调度到其他节点的 pod，检查相应的路由 ip -6 r，访问 podip\n- pod-service\n\t进入 pod 内部使用 service name（域名） 访问 service\n\t进入 pod 内部使用 service ip 访问 service\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%90%AF%E5%8A%A8-startup":{"title":"启动 startup","content":"\nstartup 启动流程：\n- 检测 ip 地址和 bgp 使用的网络\n- 使用环境中提供的或自动检测到的 IP/AS 信息配置节点资源\n- 创建默认的 ippool\n\n\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%86%85%E8%8E%B7%E5%8F%96Pod%E4%BF%A1%E6%81%AF":{"title":"","content":"每个Pod在被成功创建出来之后，都会被系统分配唯一的名字、IP地址，并且处于某个Namespace中，那么我们如何在Pod的容器内获取Pod的这些重要信息呢？答案就是**使用Downward API**。\n### Downward API有什么价值\n在某些集群中，集群中的每个节点都需要将自身的标识（ID）及进程绑定的IP地址等信息事先写入配置文件中，进程在启动时会读取这些信息，然后将这些信息发布到某个类似服务注册中心的地方，以实现集群节点的自动发现功能。此时Downward API就可以派上用场了，具体做法是先编写一个预启动脚本或Init Container，通过环境变量或文件方式获取Pod自身的名称、IP地址等信息，然后将这些信息写入主程序的配置文件中，最后启动主程序。\n\nDownward API可以通过以下两种方式将Pod信息注入容器内部。\n\n   - 环境变量：用于单个变量，可以将Pod信息和Container信息注入容器内部。\n   - Volume挂载：将数组类信息生成为文件并挂载到容器内部。\n### 环境变量注入容器内部【pod信息+container信息】\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n  - name: test-container\n    image: busybox\n    command: [\"/bin/sh\", \"-c\", \"env\"]\n    env:\n    - name: MY_POD_NAME\n      valueFrom:\n        fieldRef:\n          fieldPath: metadata.name\n    - name: MY_POD_NAMESPACE\n      valueFrom:\n        fieldRef:\n          fieldPath: metadata.namespace\n    - name: MY_POD_IP\n      valueFrom:\n        fieldRef:\n          fieldPath: status.podIP\n```\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod-container-vars\nspec:\n  restartPolicy: Never\n  containers:\n  - name: test-container\n    image: busybox\n    imagePullPolicy: Never\n    command: [\"sh\", \"-c\"]\n    args:\n    - while true; do\n        echo -en '\\n';\n        printenv MY_CPU_REQUEST MY_CPU_LIMIT;\n        printenv MY_MEM_REQUEST MY_MEM_LIMIT;\n        sleep 3600;\n      done;\n    resources:\n      requests:\n        memory: \"32Mi\"\n        cpu: \"125m\"\n      limits:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n    env:\n    - name: MY_CPU_REQUEST\n      valueFrom:\n        resourceFieldRef:\n          containerName: test-container\n          resource: requests.cpu\n    - name: MY_CPU_LIMIT\n      valueFrom:\n        resourceFieldRef:\n          containerName: test-container\n          resource: limits.cpu\n    - name: MY_MEM_REQUEST\n      valueFrom:\n        resourceFieldRef:\n          containerName: test-container\n          resource: requests.memory\n    - name: MY_MEM_LIMIT\n      valueFrom:\n        resourceFieldRef:\n          containerName: test-container\n          resource: limits.memory\n```\n\n```powershell\n~ # kubectl create -f dapi-test-pod.yaml \npod/dapi-test-pod created\n\n~ # kubectl get pod\nNAME                     READY   STATUS              RESTARTS         AGE\ndapi-test-pod            0/1     ContainerCreating   0                5s\n\n~ # kubectl logs dapi-test-pod | grep MY_POD\nMY_POD_NAMESPACE=default\nMY_POD_IP=10.244.0.68\nMY_POD_NAME=dapi-test-pod\n\n~ # kubectl describe pod dapi-test-pod\nName:         dapi-test-pod\nNamespace:    default\nPriority:     0\nNode:         orange/192.168.1.107\nStart Time:   Thu, 18 Nov 2021 02:15:14 +0000\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\nStatus:       Running\nIP:           10.244.0.68\nIPs:\n  IP:  10.244.0.68\nContainers:\n  test-container:\n    Container ID:  docker://03e4fa11b80667003a531b92c4f6e62944371ce893104d184b6133c8c9c7ce5a\n    Image:         busybox\n    Image ID:      docker-pullable://busybox@sha256:e7157b6d7ebbe2cce5eaa8cfe8aa4fa82d173999b9f90a9ec42e57323546c353\n    Port:          \u003cnone\u003e\n    Host Port:     \u003cnone\u003e\n    Command:\n      /bin/sh\n      -c\n      env\n    State:          Terminated\n      Reason:       Completed\n      Exit Code:    0\n      Started:      Thu, 18 Nov 2021 02:16:29 +0000\n      Finished:     Thu, 18 Nov 2021 02:16:29 +0000\n    Last State:     Terminated\n      Reason:       Completed\n      Exit Code:    0\n      Started:      Thu, 18 Nov 2021 02:16:00 +0000\n      Finished:     Thu, 18 Nov 2021 02:16:00 +0000\n    Ready:          False\n    Restart Count:  3\n    Environment:\n      MY_POD_NAME:       dapi-test-pod (v1:metadata.name)\n      MY_POD_NAMESPACE:  default (v1:metadata.namespace)\n      MY_POD_IP:          (v1:status.podIP)\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-5ldhf (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             False \n  ContainersReady   False \n  PodScheduled      True \nVolumes:\n  kube-api-access-5ldhf:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       \u003cnil\u003e\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              \u003cnone\u003e\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type     Reason     Age               From               Message\n  ----     ------     ----              ----               -------\n  Normal   Scheduled  77s               default-scheduler  Successfully assigned default/dapi-test-pod to orange\n  Normal   Pulled     63s               kubelet            Successfully pulled image \"busybox\" in 13.163616577s\n  Normal   Pulled     48s               kubelet            Successfully pulled image \"busybox\" in 13.565965729s\n  Normal   Pulled     32s               kubelet            Successfully pulled image \"busybox\" in 869.96154ms\n  Normal   Created    3s (x4 over 63s)  kubelet            Created container test-container\n  Normal   Pulling    3s (x4 over 76s)  kubelet            Pulling image \"busybox\"\n  Normal   Pulled     3s                kubelet            Successfully pulled image \"busybox\" in 866.929615ms\n  Normal   Started    2s (x4 over 63s)  kubelet            Started container test-container\n  Warning  BackOff    2s (x5 over 48s)  kubelet            Back-off restarting failed container\n```\n\n```yaml\n    # 获取pod信息\n    - name: MY_POD_IP\n      valueFrom:\n        fieldRef:\n          fieldPath: status.podIP\n    # 获取container资源信息   \n    - name: MY_MEM_LIMIT\n      valueFrom:\n        resourceFieldRef:\n          containerName: test-container\n          resource: limits.memory\n```\nvalueFrom这种特殊的语法是Downward API的写法。目前Downward API提供了以下变量。\n\n   - **metadata.name**：Pod的名称，当Pod通过RC生成时，其名称是RC随机产生的唯一名称。\n   - **metadata.namespace**：Pod所在的Namespace。\n   - **status.podIP**：Pod的IP地址，之所以叫作status.podIP而非metadata.IP，是因为Pod的IP属于状态数据，而非元数据。\n\n目前resourceFieldRef可以将容器的资源请求和资源限制等配置设置为容器内部的环境变量。\n\n   - requests.cpu：容器的CPU请求值。\n   - limits.cpu：容器的CPU限制值。\n   - requests.memory：容器的内存请求值。\n   - limits.memory：容器的内存限制值。\n### volume 挂载\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod-volume\n  labels:\n    zone: us-est-coast\n    cluster: test-cluster1\n    rack: rack-22\n  annotations:\n    build: two\n    builder: john-doe\nspec:\n  containers:\n  - name: test-container\n    image: busybox\n    imagePullPolicy: Never\n    command: [\"sh\", \"-c\"]\n    args:\n    - while true; do\n        if [[ -e /etc/podinfo/labels ]]; then\n          echo -en '\\n\\n'; cat /etc/podinfo/labels; fi;\n        if [[ -e /etc/podinfo/annotations ]]; then\n          echo -en '\\n\\n'; cat /etc/podinfo/annotations; fi;\n        sleep 3600;\n      done;\n    volumeMounts:\n      - name: podinfo\n        mountPath: /etc/podinfo\n        readOnly: false\n  volumes:\n    - name: podinfo\n      downwardAPI:\n        items:\n          - path: \"labels\"\n            fieldRef:\n              fieldPath: metadata.labels\n          - path: \"annotations\"\n            fieldRef:\n              fieldPath: metadata.annotations\n```\n这里要注意“volumes”字段中downwardAPI的特殊语法，通过items的设置，系统会根据path的名称生成文件。根据上例的设置，系统将在容器内生成/etc/labels和/etc/annotations两个文件。在/etc/labels文件中将包含metadata.labels的全部Label列表，在/etc/annotations文件中将包含metadata.annotations的全部Label列表。\n\n","lastmodified":"2025-03-26T03:48:43.170318574Z","tags":null},"/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8":{"title":"安装 calico","content":"\n官网[About Calico (tigera.io)](https://projectcalico.docs.tigera.io/about/about-calico)\n# 安装 calico\n\n\n# calicoctl\n\n使用calicoctl 可以使用calico 的更多的功能，calicoctl 用于管理 Calico 策略和配置，以及查看详细的集群状态。\n\n-   **API groups**\n所有 Kubernetes 资源都属于一个 API 组。 API 组由资源的 apiVersion 指定。Calico 使用 projectcalico.org/v3 API 组中的资源进行配置，operator 使用 operator.tigera.io/v1 API 组中的资源。\n\n-   **calicoctl 和 kubectl**\n应该使用 calicoctl 管理 projectcalico.org/v3 中的资源，calicoctl 为这些 kubectl 中不可用的资源提供了验证和默认设置。同时新的版本中建议使用安装 calico api server 并使用 kubectl 来管理 calico projectcalico.org/v3 中的资源。对于openstack 以及一些 calicoctl ipam/node/convert/version 子命令还是需要calicoctl。\n\n-   **数据存储**\nCalico 对象存储在 etcd 或 Kubernetes 中。数据存储是在安装 Calico 时确定的。通常对于 Kubernetes 安装，默认是存储在 Kubernetes 中。\n\n## 1.  安装\n\n安装手册中有4种安装使用方法，安装 calicoctl 时最好与 calico 的版本一致：\n[https://projectcalico.docs.tigera.io/master/maintenance/clis/calicoctl/install](https://projectcalico.docs.tigera.io/master/maintenance/clis/calicoctl/install)\n（安装二进制、安装为 kubectl 插件、运行为一个 container、运行为一个 pod）\n\n- 安装二进制\n\trelease address：[https://github.com/projectcalico/calicoctl/releases](https://github.com/projectcalico/calicoctl/releases)：：q\n- 配置calicoctl\n\t大多数 calicoctl 命令需要访问 Calico 数据存储。默认情况下，calicoctl 会根据默认的 kubeconfig 从 Kubernetes API 中读取数据。如果没有找到对应的配置文件会去检查是否有指定的环境变量集。\n\t[https://projectcalico.docs.tigera.io/master/maintenance/clis/calicoctl/configure](https://projectcalico.docs.tigera.io/master/maintenance/clis/calicoctl/configure)\n```yaml\n# cat /etc/calico/calicoctl.cfg\napiVersion: projectcalico.org/v3\nkind: CalicoAPIConfig\nmetadata:\nspec:\n  datastoreType: \"kubernetes\"\n  kubeconfig: \"/etc/kubernetes/admin.conf\"\n  # datastoreType: \"etcdv3\"\n  # etcdEndpoints: \"http://etcd1:2379,http://etcd2:2379\"\n```\n\n## 2.  使用\n[https://projectcalico.docs.tigera.io/master/reference/calicoctl/overview](https://projectcalico.docs.tigera.io/master/reference/calicoctl/overview)\n- calicoctl get workloadendpoints --allow-version-mismatch\n- calicoctl get node -o wide --allow-version-mismatch\n- calicoctl get bgppeer\n- calicoctl node status\n\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95":{"title":"","content":"## Q1 `=` 和 `:=` 的区别？\n`:=` 声明+赋值； `=` 仅赋值\n简短声明模式的限制：\n\n- 定义变量同时显示初始化\n- 不能提供数据类型\n- 只能在函数内部使用\n```go\nvar foo int\nfoo = 10\n// 等价于\nfoo := 10\n```\n## 编译执行下面代码的结果\n```go\npackage main\nvar(\n    size :=1024\n    max_size = size*2\n)\nfunc main()  {\n    println(size,max_size)\n}\n\n// syntax error: unexpected :=\n```\n## Q2 常量\n常量不同于变量，变量在运行时分配内存，常量通常在被编译器在预处理阶段直接展开，作为指令数据直接使用。\n```go\npackage main\nconst cl  = 100\nvar bl    = 123\n\nfunc main()  {\n    println(\u0026bl,bl)\n    println(\u0026cl,cl)\n}\n// cannot take the address of cl\n```\n## Q3 goto\ngoto 不能跳转到其他函数或者内层代码\n```go\npackage main\n\nfunc main()  {\n\n    for i:=0;i\u003c10 ;i++  {\n    loop:\n        println(i)\n    }\n    goto loop\n}\n// goto loop jumps into block starting at\n```\n## Q4 golang 类型\n\n- defintion：基于一个类型创建一个新类型\n- alias：基于一个类型创建一个别名\n### 1. type Alias\n```go\ntype MyInt1 int\ntype MyInt2 = int\n\nfunc main()  {\n\tvar i int =9\n\tvar i1 MyInt1 = i\n\tvar i2 MyInt2 = i\n\tfmt.Println(i1,i2)\n}\n// cannot use i (type int) as type MyInt1 in assignment\n// MyInt1 为defintion，虽然底层类型为int类型，但是不能直接赋值，需要强转\n// MyInt2 为alias\n```\n\n```go\ntype User struct {\n}\ntype MyUser1 User\ntype MyUser2 = User\n\nfunc (i MyUser1) m1(){\n    fmt.Println(\"MyUser1.m1\")\n}\nfunc (i User) m2(){\n    fmt.Println(\"User.m2\")\n}\n\nfunc main() {\n    var i1 MyUser1\n    var i2 MyUser2\n    i1.m1()\n    i2.m2()\n}\n// MyUser1.m1\n// User.m2\n```\n## \n## Q5 闭包延迟求值、引用相同变量\n```go\nfunc test() []func()  {\n    var funs []func()\n    for i:=0;i\u003c2 ;i++  {\n        funs = append(funs, func() {\n            println(\u0026i,i)\n        })\n    }\n    return funs\n}\n\nfunc test1() []func()  {\n    var funs []func()\n    for i:=0;i\u003c2 ;i++  {\n        x:=i\n        funs = append(funs, func() {\n            println(\u0026x,x)\n        })\n    }\n    return funs\n}\n\nfunc main(){\n    funs:=test()\n    for _,f:=range funs{\n        f()\n    }\n}\n// 0xc042046000 2\n// 0xc042046000 2\n循环使用局部变量，每一次放入匿名函数所用的都是一个变量，若想不一样则使用test1()\n```\n```go\nfunc test(x int) (func(),func())  {\n    return func() {\n        println(x)\n        x+=10\n    }, func() {\n        println(x)\n    }\n}\n\nfunc main()  {\n    a,b:=test(100)\n    a()\n    b()\n}\n// 100\n// 110\n```\n## \n## Q6 type\n```go\n\nfunc main() {\n\ti := GetValue()\n\n\tswitch i.(type) {\n\tcase int:\n\t\tprintln(\"int\")\n\tcase string:\n\t\tprintln(\"string\")\n\tcase interface{}:\n\t\tprintln(\"interface\")\n\tdefault:\n\t\tprintln(\"unknown\")\n\t}\n\n}\n\nfunc GetValue() int {\n\treturn 1\n}\nfunc GetValueInterface() interface{} {\n\treturn 1\n}\n// type只能使用在interface上\n// 使用GetValue() 编译不通过，输出：cannot type switch on non-interface value i (type int)\n// GetValueInterface()输出：int\n```\n## Q7 golang 函数返回值\n在函数有多个返回值时，只要有一个返回值有指定命名，其他的也必须有命名。 如果返回值有有多个返回值必须加上括号； 如果只有一个返回值并且有命名也需要加上括号；\n\n## Q8 append\nappend切片时候别漏了'...'\n```go\nfunc main() {\n\ts1 := []int{1, 2, 3}\n\ts2 := []int{4, 5}\n\ts1 = append(s1, s2)\n\tfmt.Println(s1)\n}\n// cannot use s2 (type []int) as type int in append\n// 修改为s1 = append(s1, s2...)\n```\n## Q9 各个类型的空值\nnil 可以用作 interface、function、pointer、map、slice 和 channel 的“空值”。string的空值为\"\"\n在Go中所有变量都初始化为其零值。\n\n- 数值类型：0\n- 字符串类型：空字符串\n- 布尔类型：false\n- 指针：nil\n- 引用类型：引用的底层数据结构会被初始化为对应的零值，但是被声明为零值的引用类型的变量，会返回nil作为其值\n## Q10 go枚举 itoa\ngolang中没有枚举类型，一般使用itoa简化定义\n**itoa是golang语言的常量计数器，只能在常量表达式中使用，具有以下特性：**\n\n1. **itoa只能在常量表达式中使用**\n| fmt.Println(iota)\n// 编译错误： undefined: iota |\n| --- |\n\n2. **每次const出现，都会让itoa初始化为0**\n| const a = iota // a=0\nconst (\n  b = iota          //b=0\n  c                      //c=1\n) |\n| --- |\n\n3. **自定义类型，并在const每增长一行常量声明 itoa便计数一次**\n| type Weekday int\nconst (\n    Sunday Weekday = iota  // 0\n    Monday                           // 1\n    Tuesday                           // 2\n    Wednesday                     // 3\n    Thursday\n    Friday\n    Saturday\n) |\n| --- |\n\n4. **可跳过的值  (**使用下划线跳过不想要的值**)**\n| type AudioOutput int\nconst (\n    OutMute AudioOutput = iota // 0\n    OutMono                       // 1\n    OutStereo                     // 2\n    _\n    _\n    OutSurround                // 5\n) |\n| --- |\n\n5. **位掩码表达式**\n| type Flags uint\nconst (\n    FlagUp Flags = 1 \u003c\u003c iota // 1 \u003c\u003c 0 up\n    FlagBroadcast            // 1 \u003c\u003c 1 supports broadcast access capability\n    FlagLoopback             // 1 \u003c\u003c 2 is a loopback interface\n    FlagPointToPoint         // 1 \u003c\u003c 3 belongs to a point-to-point link\n    FlagMulticast            // 1 \u003c\u003c 4 supports multicast access capability\n)\nconst (    _ = 1 \u003c\u003c (10 * iota)\n    KiB // 1024\n    MiB // 1048576\n    GiB // 1073741824\n    TiB // 1099511627776             (exceeds 1 \u003c\u003c 32)\n    PiB // 1125899906842624\n    EiB // 1152921504606846976\n    ZiB // 1180591620717411303424    (exceeds 1 \u003c\u003c 64)\n    YiB // 1208925819614629174706176\n) |\n| --- |\n\n6. **定义在一行的情况**\n| const (\n    Apple, Banana = iota + 1, iota + 2\n    Cherimoya, Durian\n    Elderberry, Fig\n)\n// itoa 在下一行增长，而不是立即取得它的引用\n// Apple: 1  \n// Banana: 2  \n// Cherimoya: 2  \n// Durian: 3  \n// Elderberry: 3  \n// Fig: 4 |\n| --- |\n\n7. **中间插队情况**\n| const(\n    a = iota\n\t    b = 5\n\t    c = iota\n\t    d = 6\n\t    e\n\t    f  \n)\n// 0 5 2 6 6 6 |\n| --- |\n\n[https://www.cnblogs.com/zsy/p/5370052.html](https://www.cnblogs.com/zsy/p/5370052.html)\n\n## Q11 结构体比较\n```go\nfunc main() {\n\tsn1 := struct {\n\t\tage  int\n\t\tname string\n\t}{age: 11, name: \"qq\"}\n\tsn2 := struct {\n\t\tage  int\n\t\tname string\n\t}{age: 11, name: \"qq\"}\n\n\tif sn1 == sn2 {\n\t\tfmt.Println(\"sn1 == sn2\")\n\t}\n\n\tsm1 := struct {\n\t\tage int\n\t\tm   map[string]string\n\t}{age: 11, m: map[string]string{\"a\": \"1\"}}\n\tsm2 := struct {\n\t\tage int\n\t\tm   map[string]string\n\t}{age: 11, m: map[string]string{\"a\": \"1\"}}\n\n\tif sm1 == sm2 {\n\t\tfmt.Println(\"sm1 == sm2\")\n\t}\n}\n// 编译不通过： invalid operation: sm1 == sm2\n```\n进行结构体比较时候，只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。\n```\nsn3:= struct {\n    name string\n    age  int\n}{age:11,name:\"qq\"}\n```\nsn3与sn1就不是相同的结构体了，不能比较。 还有一点需要注意的是结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice。 如果该结构属性都是可以比较的，那么就可以使用“==”进行比较操作。\n可以使用reflect.DeepEqual进行比较\n```\nif reflect.DeepEqual(sn1, sm) {\n    fmt.Println(\"sn1 ==sm\")\n}else {\n    fmt.Println(\"sn1 !=sm\")\n}\n```\n\n## Q12 interface 内部结构\n\n## Q3 Go 有异常类型吗？\nGo 没有异常类型，只有错误类型（Error），通常使用返回值来表示异常状态。\n\n## Q4 什么是协程\n## \n## Q5 如何高效地拼接字符串  以及为什么\n## \n## Q6 什么是runc类型\n## \n## \n## Q7 golang中的map相关包含操作\nsync.map\n判断map中是否包含某个key\n\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E5%A4%9A%E7%BD%91%E5%8D%A1%E8%8A%82%E7%82%B9%E7%BC%BA%E5%B0%91%E8%B7%AF%E7%94%B1":{"title":"多网卡节点缺少路由","content":"### 背景\n多节点集群中 10.168.50.60 和 10.168.50.61 节点上的 pod 访问不通，且没有相关的路由；同样的在节点 10.168.50.60 上没有 calico 相关的路由，该节点路由情况如下：\n![1696735131480.png](https://images.cherryfloris.eu.org/ryken/2023/10/b04dbbc09da43dbb22515533eb30e9e3.png)\n\n正常节点路由如下：\n![1696735147605.png](https://images.cherryfloris.eu.org/ryken/2023/10/1a10e19433c350ba2599849ef9ff3457.png)\n\n且所有节点为多网卡：\n![企业微信截图_16967358511795.png](https://images.cherryfloris.eu.org/ryken/2023/10/a099dfbf0943ec6869d23651da4117a3.png)\n\n## 排查解决\n#### bgp 连接\n节点上没有路由，多半是 bgp 出现了问题，查看各个节点的 bgp 状态之后发现，确实有一部分 bgp 没有建立连接，一直卡在 passive、passive on 状态。而该状态是为了避免节点间同时向对方连接导致的路由抖动，采用一方被动一方主动方式。\n\n那谁主动谁被动呢？ip地址小的被动，ip地址大的主动。\n\n![企业微信截图_16967341513729.png](https://images.cherryfloris.eu.org/ryken/2023/10/bb4a661e5b0e205cfedb094b4ca74c16.png)\n\n![企业微信截图_16967343071783.png](https://images.cherryfloris.eu.org/ryken/2023/10/359adae792ac01d2e11315de6b87043d.png)\n\n根据 bgp 状态可以看出有的节点是使用 10.168.100.60 建立的连接、有的是使用 10.168.50.60；\n对于 10.168.50.60 与 10.168.50.76 两个节点来说：\n- 10.168.50.60：自身使用 10.168.100.60 获取到 peer ip 为 10.168.100.76，字符串比较后，自身 ip 地址小 - 被动等待连接\n- 10.168.50.76：自身使用 10.168.100.76 获取到  peer ip 为 10.168.50.60，字符串比较后，自身 ip 地址小 - 被动等待连接\n因此两者均为被动连接状态，连接无法正常建立。\n\n因此使用环境变量 `IP_AUTODETECTION_METHOD` 来指定网卡，解决了 bgp 连接问题。\n\n#### 节点路由\n解决之后，其余节点路由正常，但是 10.168.50.60 上的 pod 依旧不通，10.168.50.60 节点上依旧没有 calico 其他节点的相关路由\n\n最后排查到与 NetworkManager 相关，关闭 NetworkManager 之后，路由恢复\n- [bird: Netlink: Network is down · Issue #3134](https://github.com/projectcalico/calico/issues/3134)\n- [bird: Netlink: Network is down, The new node cannot work](https://github.com/projectcalico/calico/issues/4273)\nsystemctl status NetworkManager\n![企业微信截图_16967543775979.png](https://images.cherryfloris.eu.org/ryken/2023/10/26467ff5a00076251feab4fcb826390b.png)\n\n","lastmodified":"2025-03-26T03:48:44.144315141Z","tags":null},"/%E5%A6%82%E4%BD%95%E6%9C%AC%E6%9C%BA-debug-Cilium":{"title":"如何本机 debug Cilium","content":"\n\n开发者文档： https://docs.cilium.io/en/stable/contributing/development/\n\n使用 kind\nmake kind：根据传递的参数创建一个 kind 集群\nmake kind-down：关闭并删除 kind 集群\n\n- `make kind-image`: 构建所有的 Cilium 镜像并将其加载到集群中\n- `make kind-image-agent`: 仅构建 Cilium Agent 镜像并将其加载到集群中\n- `make kind-image-operator`: 仅构建 Cilium Operator (generic) 镜像并将其加载到集群中\n- `make kind-debug`: 构建禁用优化并嵌入 dlv 以进行实时调试的所有 Cilium 镜像并将其加载到集群中\n- `make kind-debug-agent`: 像 `kind-debug`, 但只针对cilium agent.  可以用于仅需要重建 agent 镜像以加快迭代速度\n- `make kind-install-cilium`: 使用 cilium cli 将 Cilium 安装到集群\n\n在 Linux 环境或可以编译和运行 Cilium 的环境中，可以使用带有“fast”的目标。这些将在本地环境中构建 Cilium，并将该二进制文件以及 bpf 源代码安装在预先存在的正在运行的 Cilium 容器中。\n- `make kind-install-cilium-fast`: 使用 Cilium CLI 将 Cilium 安装到集群中并定义卷挂载。\n- `make kind-image-fast`: 构建所有 Cilium 二进制文件并将它们加载到主机中可用的所有类型的集群中。\n\n- `make kind-debug-agent` 生成一个容器镜像，该镜像通过 Delve (dlv) 调用包装 Cilium 代理。agent 进程在端口 2345 上侦听来自调试器前端的连接。镜像会自动导入集群，但是需要手动删除 pod，让你使用新镜像启动：kubectl delete pods -n kube-system -l app.kubernetes.io/name=cilium-agent\n\nARCH=amd64 DOCKER_REGISTRY=docker.io DOCKER_DEV_ACCOUNT=rykren DOCKER_IMAGE_TAG=test make dev-docker-image\n\n\nCONTAINER_ENGINE=\"docker buildx\" DOCKER_FLAGS=\"--push --platform=linux/arm64,linux/amd64\" make image\n\n**配置 Cilium**\n\n安装 Cilium 的 Makefile 目标将以下 Helm 值列表（YAML 文件）传递到 Cilium CLI。\n- `contrib/testing/kind-common.yaml`: normal and fast installation 模式共同使用.\n- `contrib/testing/kind-values.yaml`: normal installation 模式使用\n- `contrib/testing/kind-fast.yaml`: fast installation 模式使用\n- `contrib/testing/kind-custom.yaml`: 如果文件存在，将应用用户自定义 values。 The file is ignored by Git as specified in `contrib/testing/.gitignore`.\n\n\n**相关的环境变量参数设置**：\n(更多详见 contrib/scripts/kind.sh)\n- CONTROLPLANES：控制面节点数量\n- WORKERS： worker 节点数量\n- CLUSTER_NAME： 集群名称\n- IMAGE：kind-node 使用的镜像 `kindest/node:v1.11.10`.\n- KUBEPROXY_MODE： kube-proxy 模式\n\n### Debug\n\nhttps://docs.cilium.io/en/stable/contributing/development/dev_setup/#debugging\ncilium-dbg monitor 工具还可用于从基于 eBPF 的数据路径检索调试信息。\n要启用所有日志消息： \n- 使用 --debug-verbose=datapath 启动 cilium-agent，\n- 或者 从已运行的代理运行 cilium-dbg config debug=true debugLB=true 。\n这些选项启用数据路径中的日志记录功能：cilium_dbg()、cilium_dbg_lb() 和 printk()。\n\n\n可以通过运行 cilium-dbg 端点配置 ID debug=true 来启用单个端点的调试。\n运行 cilium-dbg monitor -v 将打印正常形式的监视器输出以及调试消息, -vv 会输出更详细的调式消息\n```bash\n$ cilium-dbg endpoint config 731 debug=true\nEndpoint 731 configuration updated successfully\n$ cilium-dbg monitor -v\n... ...\n$ cilium-dbg monitor -vv --hex\n... ...\n$ cilium-dbg monitor -h # 查看帮助\n# --related-to  {endpointid} 过滤关联的 eid\n# --from  {endpointid}  过滤流量来源为 eid\n# --to {endpointid}  过滤流量终点为 eid \n```\n\n对其中一个端点运行 cilium-dbg endpoint get 将提供有关该端点的已知状态的描述，其中包括 eBPF 验证日志。\n\n/var/run/cilium/state 下的文件提供了有关如何管理和设置 eBPF 数据路径的上下文。 .h 文件描述了用于 eBPF 程序编译的特定配置。编号目录描述端点特定的状态，包括头配置文件和 eBPF 二进制文件。\n\nbpftool map 可以查看 map 信息\ncilium map 路径：`/sys/fs/bpf/`   `/sys/fs/bpf/tc/globals/`\n\n\n\n\n\nDOCKER_DEV_ACCOUNT=rykren DOCKER_IMAGE_TAG=test make dev-docker-image\n\nhttps://github.com/llvm/llvm-project.git\n\n```bash\n[docker|quay].io/cilium/cilium\n depends on:\n  quay.io/cilium/cilium-builder\n   depends on:\n    quay.io/cilium/cilium-runtime\n     depends on:\n      docker.io/cilium/cilium-bpftool\n      docker.io/cilium/cilium-llvm\n  quay.io/cilium/cilium-envoy\n   depends on:\n    quay.io/cilium/cilium-envoy-builder\n     depends on:\n      quay.io/cilium/cilium-builder\n       depends on:\n        quay.io/cilium/cilium-runtime\n         depends on:\n          docker.io/cilium/cilium-bpftool\n          docker.io/cilium/cilium-llvm\n\n```\n\n\n官方链接\n- https://github.com/cilium/cilium/issues/16033\n- https://docs.cilium.io/en/latest/contributing/development/images/#developer-images\n- https://docs.cilium.io/en/stable/contributing/development/dev_setup/#dev-env\n\n\n本机调试 - 暂不可用\n```json\n,\n        {\n            \"name\": \"debug daemon\",\n            \"type\": \"go\",\n            \"debugAdapter\": \"dlv-dap\", // the default\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 12345,\n            \"cwd\": \"/root/program/cloudnative/ryken/cilium\",\n            \"program\": \"/root/program/cloudnative/ryken/cilium/daemon/main.go\",\n            // \"args\":[\n            // ],\n            \"env\": { \"NODE_NAME\": \"test\" }\n        },\n```\n\n编译 bpf 程序\n```bash\nclang -I/root/program/cloudnative/ryken/cilium-compile/global -I/root/program/cloudnative/ryken/cilium-compile/state -I/root/program/cloudnative/ryken/cilium/bpf/include -I/root/program/cloudnative/ryken/cilium/bpf -D__NR_CPUS__=4 -O2 -g --target=bpf -std=gnu89 -nostdinc -Wall -Wextra -Werror -Wshadow -Wno-address-of-packed-member -Wno-unknown-warning-option -Wno-gnu-variable-sized-type-not-at-end -Wdeclaration-after-statement -Wimplicit-int-conversion -Wenum-conversion -Wimplicit-fallthrough -mcpu=v3 -c bpf_lxc.c -o bpf_lxc.o\n```\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/d79200b37f0744066ba6ae8171671217.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/dda9808415f06b7f90a96b5b2abd0be2.png)\n\nbpf 程序加载到内核中，使用 fd 来操作\n\n可以使用 bpftool 打开程序并获取文件描述符：\n`bpftool prog pin id \u003cprog_id\u003e /sys/fs/bpf/\u003cprog_name\u003e`\n\nbpfmap 也可以 pin 到 bpf 文件系统中","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%A0%E5%85%A5%E4%BC%A0%E5%87%BA%E5%8F%82%E6%95%B0":{"title":"","content":"```go\n//#include \u003cstring.h\u003e\n//int splitStr(const char* src, int index, char* str1, int len1, char* str2, int len2, int* result)\n//{\n//\t  *result = 1;\n//    if (src == NULL || str1 == NULL || str2 == NULL)\n//        return -1;\n//\n//    if (strlen(src) \u003c index)\n//        return -1;\n//\n//    if (index \u003c 0 || len1 \u003c 0 || len2 \u003c 0)\n//        return -1;\n//\n//    int minIndex = index \u003c len1 ? index : len1;\n//    int len = strlen(src) - minIndex;\n//    strncpy(str1, src, minIndex);\n//    str1[minIndex] = '\\0';\n//    strncpy(str2, src + minIndex, len);\n//    str2[len] = '\\0';\n//\n//    return 0;\n//}\nimport \"C\"\nfunc main()  {\n\tvar res = 2\n\tstr := \"hello world\"\n\tstr1 := make([]byte, 100)\n\tstr2 := make([]byte, 100)\n\tresult, _ := C.splitStr(C.CString(str), 5, (*C.char)(unsafe.Pointer(\u0026str1[0])), 24, (*C.char)(unsafe.Pointer(\u0026str2[0])) ,24, (*C.int)(unsafe.Pointer(\u0026res)))\n\t// result, _ := C.splitStr((*C.char)(unsafe.Pointer(str)), 5, (*C.char)(unsafe.Pointer(nil)), 24, (*C.char)(unsafe.Pointer(\u0026str2[0])) ,24, (*C.int)(unsafe.Pointer(\u0026res)))\n\tif result != 0 {\n\t\tfmt.Printf(\"result %d\\n\", result)\n\t}\n\tfmt.Printf(\"%s  --- %s  -- %d\\n\", string(str1), string(str2), res)\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E5%AE%89%E8%A3%85":{"title":"安装","content":"\n\nhelm repo add hybridnet https://alibaba.github.io/hybridnet/\nhelm repo update\nhelm install hybridnet hybridnet/hybridnet -n kube-system --set init.cidr=10.233.64.0/18\n\n\nkubectl label node hybridnet-worker hybridnet-worker2 hybridnet-worker8 hybridnet-control-plane  node-role.kubernetes.io/master=\"\"\nkubectl scale deployment -n kube-system hybridnet-webhook --replicas=2\nkubectl scale deployment -n kube-system hybridnet-manager --replicas=1\nkubectl scale deployment -n kube-system calico-typha --replicas=1\n\n更换 daemonset 镜像为 rykren/hybridnet:release-amd64\n\n\n主机上添加路由：\nip r add 10.0.0.0/8 dev br-82a5b2d18678 proto kernel scope link src 172.18.0.1\n\n\n\nkubectl label node hybridnet-worker3 hybridnet-worker4 hybridnet-worker7 hybridnet-worker8  network=\"network1\"\n\n\n","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%AE%89%E8%A3%85-bcc-%E5%B7%A5%E5%85%B7%E5%8C%85":{"title":"安装 bcc 工具包","content":"\neunomia-bpf 是一个开源的 eBPF 动态加载运行时和开发工具链，它的目的是简化 eBPF 程序的开发、构建、分发、运行。它基于 libbpf 的 CO-RE 轻量级开发框架，支持通过用户态 WASM 虚拟机控制 eBPF 程序的加载和执行，并将预编译的 eBPF 程序打包为通用的 JSON 或 WASM 模块进行分发。\n\n安装 eunomia-bpf\n- wget https://aka.pw/bpf-ecli -O ecli \u0026\u0026 chmod +x ./ecli\n- wget https://github.com/eunomia-bpf/eunomia-bpf/releases/latest/download/ecc \u0026\u0026 chmod +x ./ecc\n\n安装编译工具：\n- apt install clang llvm\n\n\n5.15 ubuntu 22.04.1 使用全局变量错误：\n- [bpf-developer-tutorial/src/4-opensnoop](https://github.com/eunomia-bpf/bpf-developer-tutorial/blob/main/src/4-opensnoop/README.md)\n- 修改为 ecli run package.json -- --pid_target 2111\n```bash\nroot@i-o7v5rwmf:~bpf-developer-tutorial/src/4-opensnoop# ecli run package.json --pid_target 618\nerror: unexpected argument '--pid_target' found\n\n  tip: to pass '--pid_target' as a value, use '-- --pid_target'\n\nUsage: ecli run \u003c--json|PROG|EXTRA_ARGS|--prog-type \u003cPROG_TYPE\u003e\u003e\n\nFor more information, try '--help'.\n```\n\n\n\n","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B":{"title":"官方示例","content":"```yaml\nkubeProxyReplacement: true\nk8sServiceHost: kind-control-plane\nk8sServicePort: 6443\n\noperator:\n  # only 1 replica needed on a single node setup\n  replicas: 1\n  prometheus:\n    enabled: true\n    serviceMonitor:\n      enabled: true\n\nhubble:\n  relay:\n    # enable relay in 02\n    # enabled: true\n    service:\n      type: NodePort\n    prometheus:\n      enabled: true\n      serviceMonitor:\n        enabled: true\n\n  metrics:\n    serviceMonitor:\n      enabled: true\n    enableOpenMetrics: true\n    enabled:\n      - dns\n      - drop\n      - tcp\n      - icmp\n      - \"flow:sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\"\n      - \"kafka:labelsContext=source_namespace,source_workload,destination_namespace,destination_workload,traffic_direction;sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\"\n      - \"httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction;sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\"\n    dashboards:\n      enabled: true\n      namespace: monitoring\n      annotations:\n        grafana_folder: \"Hubble\"\n\n  ui:\n    # enable UI in 02\n    # enabled: true\n    service:\n      type: NodePort\n\nprometheus:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n```\n\n四个环境信号\n\n对任何系统（尤其是 Kubernetes 环境）都很重要的 4 类信号，包括延迟、吞吐量、错误和饱和度。每个人都有自己的健康定义，以及哪些指标和分析定义了这些阈值。\n\n## Latency\n\n最常表示为应用层的响应时间（以毫秒 (ms) 为单位）。 \n应用程序响应时间受到所有核心系统资源（包括网络、存储、处理器 (CPU) 和内存）延迟的影响。 \n应用程序层的延迟还需要与应用程序进程内部、pod/服务之间、网络/网格等内部可能发生的延迟和资源使用相关。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/b215cb711de1dcdbd78aedc645062bf3.png)\n\n## Throughput\n\n吞吐量有时称为流量，是指服务和应用程序从 Kubernetes 环境内部和外部发送和接收的请求的数量和类型。 \n吞吐量指标包括 Web 请求、API 调用等示例，并被描述为通常表示为每秒请求数的需求。 \n应该跨所有层进行测量，以识别发往和来自服务的请求，以及哪些 I/O 进一步向下到达节点。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/8c7f5067502f4d53355e6581d871ccb4.png)\n\n## Errors\n失败的请求（流量）数量，通常以绝对数字或错误请求与请求总数的百分比表示。 \n由于应用程序问题、可能的配置错误以及策略定义的某些错误，可能会发生错误。 \n策略驱动的错误可能表示意外的错误配置或潜在的恶意进程。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/73423b581f0dd0e40edb7f2fbc1124c7.png)\n\n## Saturation\n资源的总体利用率，包括 CPU（容量、配额、限制）、内存（容量、分配）、存储（容量、分配和 I/O 吞吐量）和网络。\n一些资源线性饱和（例如存储容量），而其他资源（内存、CPU 和网络）则随着容器化应用程序的短暂性而波动更大。 \n网络饱和是监控 Kubernetes 复杂性的一个很好的例子，因为存在节点网络、服务到服务的网络吞吐量，并且一旦服务网格到位，就会有更多的路径，并且可能有更多的瓶颈可能会饱和。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/f90a1b21419c7f88149be23aaa0f9a90.png)\n\n可观察性是指能够向系统提出问题，而不是仅仅堆积监控数据来尝试将其关联起来。 \n为了了解当前状态，我们可以向系统询问哪些问题？例如， \n- 是什么导致应用程序 X 缓慢？ \n- 哪些服务正在影响我的前端应用程序中的错误？ \n- 是什么导致我的集群节点出现拥塞？ \n- 为什么我的应用程序无法联系两个云中的消息服务？\n\nexamplelars=true 将使我们能够将应用程序跟踪中的 OpenTelemetry 跟踪点显示为 Grafana 图表上的叠加层 \nlabelsContext 设置为向指标添加额外标签，包括源/目标 IP、源/目标命名空间、源/目标工作负载以及流量方向（入口或出口） \nsourceContext 设置源标签的构建方式，在这种情况下，尽可能使用工作负载名称，否则使用保留标识（例如世界） \ndestinationContext 对目的地执行相同的操作","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E7%96%91%E9%9A%BE%E6%8E%92%E6%9F%A5%E6%A1%88%E4%BE%8B":{"title":"容器网络疑难排查案例","content":"\n### **问题一：calico特定场景下的网络性能问题**\n- `iptraf-ng`命令观察网卡流量\n- ip linkx show devname\n- `sysctl -a`查询网卡相关的系统参数\n- `ethool`查询网卡配置\n- `ethtool -K vxlan.calico tx on`修改参数\n\n**结论：**\ncalico默认关掉了 checksum 这个配置项\nchecksum和offload是关联的配置项，真正影响我们测试性能的应该是offload这个配置，添加以下环境变量后恢复\n```yaml\n- name: FELIX_FEATUREDETECTOVERRIDE  \n  value: ChecksumOffloadBroken=false\n```\n\n### **问题二：强制删除pod引起tcp连接异常**\n如果在生产中，执行了类似于`kubectl delete pod --force --grace-period=0`的操作，而不是优雅的删除pod，pod会无法处理完正在交互的连接，可能导致数据的丢失或者访问的失效，要等到新的pod启动后才能正常的返回RST终止连接（假设新的pod保持IP不变），如果新的pod无法启动，可能要等待大约15分钟的重传超时客户端才能断开连接。\n\n\u003e ESTABLISHED状态的tcp连接的重传超时时间受到参数net.ipv4.tcp_retries2的影响，该参数默认是15，超时时间约为924.6秒。\n\n当 pod 删除时，kubernetes ipvs 不会直接删除后端服务器，而只是将它的权重置为0，这样如果有新建立的连接也会不会发送请求到已经下线的真实服务器，旧的连接还在，那么如果pod是优雅的被删除，pod中的业务进程完全关闭前大概可以正常的处理掉自身的tcp连接。可是由于pod被强制删除，一个tcp连接要在约15分钟后才能正常关闭。\n\n我们在pod 的配置中应该设置合理的`deleteGracePeriodSeconds、terminationGracePeriodSeconds`，根据需求配置服务的`preStop`清理资源。\n\n**结论**\n此处特别强调一下，优雅删除需要关注的两项配置：\n`terminationGracePeriodSeconds` 字段定义在Pod的Spec中，用于指定当Pod被删除时，容器应该等待多长时间（以秒为单位）来完成其停止过程。这个字段的主要目的是给容器一个机会来优雅地关闭，完成任何必要的清理工作，比如关闭文件、释放资源等。\n\n**使用场景**：\n1. **优雅关闭**：当你的应用需要一些时间来关闭连接、保存状态或完成其他清理工作时，你可以通过设置`terminationGracePeriodSeconds`来确保容器有足够的时间来完成这些操作。\n2. **资源释放**：对于占用大量资源（如内存、CPU或文件描述符）的容器，优雅关闭可以确保这些资源在容器终止前得到妥善释放，从而避免资源泄漏。\n3. **无状态应用与有状态应用**：对于无状态应用，通常可以设置较短的优雅关闭时间。而对于有状态应用，可能需要更长的时间来确保数据的完整性和一致性。\n\n`deleteGracePeriodSeconds` 是一个在删除Pod时可选的参数，用于指定在API服务器上标记Pod为“已删除”后，还要等待多长时间（以秒为单位）才真正从etcd中删除Pod的记录。这个字段的目的是为了处理网络分区或其他可能导致kubelet无法立即观察到Pod删除事件的情况。\n**使用场景**：\n1. **网络分区**：当kubelet与API服务器之间的网络连接不稳定或断开时，设置`deleteGracePeriodSeconds`可以确保Pod在kubelet重新建立连接并观察到删除事件之前不会被从etcd中删除。\n2. **跨集群操作**：在跨多个Kubernetes集群进行操作时，网络延迟或中断可能更为常见。使用`deleteGracePeriodSeconds`可以提供额外的保障，确保Pod的删除操作能够在所有集群中一致地执行。\n3. **数据恢复**：在某些情况下，你可能希望在Pod被误删除后能够恢复其数据。通过设置较长的`deleteGracePeriodSeconds`值，你可以为数据恢复操作提供足够的时间窗口。\n    \n\n需要注意的是，`terminationGracePeriodSeconds` 和 `deleteGracePeriodSeconds` 虽然都与Pod的删除有关，但它们解决的问题和使用的场景是不同的。前者关注于容器内部的优雅关闭和资源释放，而后者关注于跨网络、跨集群的删除操作一致性和数据恢复能力。\n\n\n### **问题三：小概率的三次握手失败问题**\n客户发现业务迁移至云上容器服务后，压测出现读写超时和链接超时问题，超时比例约万分之二。\n\n抓包对比nginx与应用pod数据包，发现有大量应用pod返回的syn+ack报文在nginx上未抓到。客户应用容器化部署在k8s集群，采用calico vxlan模式。\n\nnginx尝试转发，但是在建立握手过程中失败了。应用pod没有正确应答syn+ack，而是回了一个错误的ack。Nginx收到错误报文后，回了一个rst报文，握手失败。\n\n先怀疑是ipvs链接复用导致应用pod回包异常。在内核参数conn_reuse_mod=0的情况下，当client ip: client port发生复用时，会复用ipvs 链接，kcs云主机内核默认conn_reuse_mod=0，猜测复用了time_wait状态的链接，导致回包错误。\n\n服务端主动断开链接，导致tcp链接残留。继续排查服务端为什么会主动断开链接。\n\n**结论：**\n业务nginx转发到应用pod的http报文头里携带了connetion:close，这会导致服务端主动关闭链接。查看云主机转发到nginx报文，发现没有携带这个请求头。至此，问题定位到nginx这里。\n\n查询后发现nginx使用http1.0协议，默认的connection为close。而云主机上使用的http1.1，connection:keep_alive长连接。验证一下，建议客户修改nginx为长连接，重新压测。\n\n链接：\n- [容器网络下小概率的三次握手失败问题](https://mp.weixin.qq.com/s/KjiG9ndMWCFQB7aiEj69dw)\n- [Calico特定场景下的网络性能问题和强制删除Pod引起TCP连接异常](https://mp.weixin.qq.com/s/xolN1-1kXppY2x8WphHZ9g)","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%AE%B9%E6%98%93%E5%AF%BC%E8%87%B4%E4%B8%A2%E5%8C%85%E7%9A%84%E5%86%85%E6%A0%B8%E9%85%8D%E7%BD%AE%E9%A1%B9":{"title":"容易导致丢包的内核配置项","content":"\n- [[arp proxy | arp_ignore]]  ---- [[arp 相关内核参数]]\n- [[rp_filter 问题 | rp_filter]]\n- ","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%B0%81%E8%A3%85qsort":{"title":"","content":"qsort快速排序函数有`\u003cstdlib.h\u003e`标准库提供，函数的声明如下：\n```c\nvoid qsort(\n\tvoid* base, size_t num, size_t size,\n\tint (*cmp)(const void*, const void*)\n);\n```\n其中base参数是要排序数组的首个元素的地址，num是数组中元素的个数，size是数组中每个元素的大小。最关键是cmp比较函数，用于对数组中任意两个元素进行排序。cmp排序函数的两个指针参数分别是要比较的两个元素的地址，如果第一个参数对应元素大于第二个参数对应的元素将返回结果大于0，如果两个元素相等则返回0，如果第一个元素小于第二个元素则返回结果小于0。\n\nGo语言sort包自带的排序函数的接口：\n```\nfunc Slice(slice interface{}, less func(i, j int) bool)\n```\n\n封装结果：\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"test/testCgo/qsort\"\n)\n\nfunc main()  {\n\tvalues := []int32{42, 9, 101, 95, 27, 25}\n\tqsort.MySort(values, func (a,b int) bool {\n\t\treturn values[a] \u003c values[b]\n\t})\n\tfmt.Println(values)\n}\n```\n```go\n// sort.go\npackage qsort\n\n/*\n#include \u003cstdlib.h\u003e\ntypedef int (*qsort_cmp_func_t)(const void* a, const void* b);\nextern int _cgo_qsort_compare(void* a, void* b);\n */\nimport \"C\"\nimport (\n\t\"reflect\"\n\t\"sync\"\n\t\"unsafe\"\n)\n\nvar go_qsort_compare_info struct {\n\tbase     unsafe.Pointer\n\tless     func(a, b int) bool\n\telemnum  int\n\telemsize int\n\tsync.Mutex\n}\n\n//export _cgo_qsort_compare\nfunc _cgo_qsort_compare(a, b unsafe.Pointer) C.int {\n\tvar base = uintptr(go_qsort_compare_info.base)\n\tvar size = uintptr(go_qsort_compare_info.elemsize)\n\n\ti := int((uintptr(a) - base) / size)\n\tj := int((uintptr(b) - base) / size)\n\n\tswitch {\n\tcase go_qsort_compare_info.less(i, j): // v[i] \u003c v[j]\n\t\treturn -1\n\tcase go_qsort_compare_info.less(j, i): // v[i] \u003e v[j]\n\t\treturn +1\n\tdefault:\n\t\treturn 0\n\t}\n}\n\nfunc MySort(value interface{}, cmp func(a, b int) bool) {\n\tsv := reflect.ValueOf(value)\n\tif sv.Kind() != reflect.Slice {\n\t\treturn\n\t}\n\n\tif sv.Len() == 0 {\n\t\treturn\n\t}\n\n\tgo_qsort_compare_info.Lock()\n\tdefer go_qsort_compare_info.Unlock()\n\n\tdefer func() {\n\t\tgo_qsort_compare_info.base = nil\n\t\tgo_qsort_compare_info.elemnum = 0\n\t\tgo_qsort_compare_info.elemsize = 0\n\t\tgo_qsort_compare_info.less = nil\n\t}()\n\n\tgo_qsort_compare_info.base = unsafe.Pointer(sv.Index(0).Addr().Pointer())\n\tgo_qsort_compare_info.elemnum = sv.Len()\n\tgo_qsort_compare_info.elemsize = int(sv.Type().Elem().Size())\n\tgo_qsort_compare_info.less = cmp\n\n\tC.qsort(\n\t\tgo_qsort_compare_info.base,\n\t\tC.size_t(go_qsort_compare_info.elemnum),\n\t\tC.size_t(go_qsort_compare_info.elemsize),\n\t\tC.qsort_cmp_func_t(C._cgo_qsort_compare),\n\t)\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8":{"title":"","content":"#tool #linux #network \n\n- \n- 工具包 [[网络工具包]]\n- ebpf 相关 [[ebpf 排查工具]]\n- iptables 相关 [[iptables 转发]]\n- conntrack/netstats/ss/lsof [[Network/Tools/conntrack]]\n- 网卡多队列、中断绑定 [[网卡多队列 + 中断绑定]]\n\n\n\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/%E5%B8%B8%E7%94%A8-cni-%E6%8F%92%E4%BB%B6":{"title":"常用 cni 插件","content":"\n- Flannel：Flannel 是最常用的 k8s 网络插件之一，它使用了虚拟网络技术来实现容器之间的通信，支持多种网络后端，如 VXLAN、UDP 和 Host-GW。\n- Calico：Calico 是一种基于 BGP 的网络插件，它使用路由表来路由容器之间的流量，支持多种网络拓扑结构，并提供了安全性和网络策略功能。\n- Canal：Canal 是一个组合了 Flannel 和 Calico 的网络插件，它使用 Flannel 来提供容器之间的通信，同时使用 Calico 来提供网络策略和安全性功能。\n- Weave Net：Weave Net 是一种轻量级的网络插件，它使用虚拟网络技术来为容器提供 IP 地址，并支持多种网络后端，如 VXLAN、UDP 和 TCP/IP，同时还提供了网络策略和安全性功能。\n- Cilium：Cilium 是一种基于 eBPF (Extended Berkeley Packet Filter) 技术的网络插件，它使用 Linux 内核的动态插件来提供网络功能，如路由、负载均衡、安全性和网络策略等。\n- Contiv：Contiv 是一种基于 SDN 技术的网络插件，它提供了多种网络功能，如虚拟网络、网络隔离、负载均衡和安全策略等。\n- Antrea：Antrea 是一种基于 OVS (Open vSwitch) 技术的网络插件，它提供了容器之间的通信、网络策略和安全性等功能，还支持多种网络拓扑结构。\n- openshift-sdn\n- ovn-kubernetes\n- kube-ovn","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98":{"title":"常见问题","content":"\n- 部署之后网络不通\n    1. 检查Calico IPPool网段是否与节点网段重叠\n    2. 检查rp_filter, arp_ignore等参数是否配置正确\n    3. 执行下iptables -t filter -F 查看是否是防火墙影响\n    4. 检查是否iptables FORWARD默认规则是否是ACCEPT\n    5. 检查IAAS是否放开安全组， 是否支持IPIP（azure就不支持IPIP）\n- 部署之后Calico Node启动失败\n    1. 检查是否节点配置多个网卡， 如果是那么修改`IP_AUTODETECTION_METHOD`   [https://docs.projectcalico.org/reference/node/configuration](https://docs.projectcalico.org/reference/node/configuration)\n- Calico暴露Pod，Service网络\n    - [https://kubesphere.com.cn/forum/d/3740-kubernetescalico](https://kubesphere.com.cn/forum/d/3740-kubernetescalico)","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF":{"title":"","content":"#开机自启 #linux \n\n最简单的方法是使用 rc.local 实现开机自启，不过由于系统版本更替，很多新版本都没有 rc.local 文件了，需要手动设置\n![upgit_20221122_1669101206.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221122_1669101206.png)\n\n![upgit_20221122_1669101380.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221122_1669101380.png)\n\n添加 /etc/rc.local 文件\n```bash\ncat \u003c\u003cEOF \u003e/etc/rc.local\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\n\nexit 0\nEOF\n```\n\n```bash\nchmod +x /etc/rc.local\nsystemctl enable rc-local\nsystemctl start rc-local.service\nsystemctl status rc-local.service\n```\n\n![upgit_20221122_1669101580.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221122_1669101580.png)\n\n指定执行的命令放在 **exit 0 前面** 才行。","lastmodified":"2025-03-26T03:48:43.177318549Z","tags":null},"/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9":{"title":"","content":"- [ ] 总结interface与reflect -- go类型\n- [ ] sync/atomic\n- [ ] golang相关的面试题\n- [ ] 7days相关的总结 -- rpc值类型与指针类型处理有些许差异   反射映射为服务并完成函数的调用的实现比较巧妙\n\n类型 组合\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E6%88%91%E7%9A%84%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD%E6%9D%A5%E5%8E%86":{"title":"数字花园来历","content":"\u003e 仅为个人看法，不喜勿喷，谢谢！！！若有侵犯到你，纯属偶然，请联系我删除。\n\n看了这篇[《语雀困住了多少人》](https://www.jianshu.com/p/376105ef32e0)有感，来讲讲我和语雀的交集。\n\n之前我一直使用的笔记软件是OneNote，它的功能非常强大，一块画布可以无限放大，支持图片、文件、绘图、录音等各种内容的插入。但是同步和共享方面存在一些问题，速度也比较慢。后来了解到了语雀，并逐步将笔记增量记录到语雀上(不得不说语雀的知识库管理还是可以的)。直到2022年10月份左右，语雀推出了一个付费计划。当笔记数量超过100篇时就需要收费。当时有很多用户的笔记数量已经超过了这个数字，也不得不说语雀这波调整吃相难看。过了一段时间，语雀重新调整了收费标准，普通用户一个月可以创建100篇文章，知识库上限是10篇，且不能公开共享知识库。刚开始会通过一些活动免费赠送3个月或6个月的会员资格，等用户逐渐接受后开始正常收费来购买会员了。\n\n- [语雀个人定价调整的致歉](https://www.yuque.com/yubo/morning/thinking-of-yuque-price?view=doc_embed)\n- [语雀个人版新定价的细则和思考](https://www.yuque.com/kebayi/yuebao/vcm8d0?view=doc_embed)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/1d446cfd191e675577bb89855712a91d.png)\n\n\n不过在他第一次调整收费标准的时候，我就已经下定决心换用其他的软件了，因为我之前不知道从哪里了解到语雀会开源，但是语雀的行动告诉我他要收费了，这个落差有点大。⊙_⊙ 算了算了\n\n确实公司也是要吃饭的，但是我还是喜欢白嫖，如于是乎就开始找一些容错率高、方便迁移、方便共享、风格类似的笔记软件以及发布平台。\n\n其实我一直想搭建一个属于自己的笔记库，而不是博客那种形式。相较于博客检索不太方便，我更倾向于使用笔记库或数字花园来记录和管理笔记，因为它采用正反链的关系图、发散的方式进行管理。这种关系图更能符合我当初记录笔记时的初衷。并且在发布很久之后回头查看，可以很快地找到当初的那种感觉。另外笔记库也可以使用文件夹的方式来管理文档(类似归档)，使用 tag 进行分类。\n\n\u003e 对于数字花园，你可以去以下链接中了解更多信息：\n\u003e - [常青笔记 (oldwinter.top)](https://garden.oldwinter.top/%E5%B8%B8%E9%9D%92%E7%AC%94%E8%AE%B0)\n\u003e - [常青笔记 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/416319260)\n\u003e - [🍀 花园导览 (oldwinter.top)](https://garden.oldwinter.top/-%E8%8A%B1%E5%9B%AD%E5%AF%BC%E8%A7%88)\n\n最后我采用了 obsidian(笔记) + github(同步) + gitee(图传) + Quartz(发布) +  vercel(部署)的方案，中间哪一个环节出了问题都可以换用其他平台替换\n可以简单举例相关的替换的产品\n- 笔记编辑器：obsidian - logSeq - vscode\n- 笔记同步平台：github - gitee - gitlab - 苹果大家族的可以使用 icloud\n- 图床工具：gitee - github - 对象存储(backblaze、七牛云等)\n- 发布工具：官方发布工具(money) - 开源发布工具+vercel等 - 服务器部署博客(最下下策)\n\n\u003e 发布的方案参考地址：[obsidian 目前最完美的免费发布方案 - 渐进式教程 (oldwinter.top)](https://garden.oldwinter.top/obsidian-%E7%9B%AE%E5%89%8D%E6%9C%80%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88-%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%95%99%E7%A8%8B)\n\n\n我之前共享的需求不是很大，主要采取的是 obsidian(笔记) + github(同步) + gitee(图传)的一个方案，至于为什么不使用 github 作为图床，主要是 obsidian 没有办法设置代理，只能通过设置系统代理的方式来访问 github，对于 git 可以配置 gitconfig 使用本机的代理，但是如果是图片就是直接访问的 https://raw.githubusercontent.com.xxxx ，所以访问不到（可能是我的操作、配置的问题），然后就把图床放到了 gitee 上面，这样在国内环境可以很好的访问，刚好前几天在想搭建一个可以共享的笔记库，搭建起来的时候发现 gitee 有防盗链，搭建的笔记库访问不了图片，于是乎使用了 backblaze 替换了gitee（免费10G的空间用作图床够够的） 并且在所有文档里面全局替换了 url 前缀。\n\n\u003e 现在采用了自定义域名的方式，因此之后如果再更换对象存储的话，可以配置到对应的域名就可以了，无需再全局替换笔记中图片的 url\n\n\n正当我使用 obsidian 得心应手并想把语雀中的知识库整体迁移出来的时候，忽然发现：语雀不支持整个知识库的导出(支持导出格式为 lakebook、pdf，在我看来就等于不支持导出)，但是他支持单个文档的导出。(不支持批量导出，支持单个的导出，这波操作可以，既能不让人走又能堵人嘴)\n搜索了全网其他相关的导出方式有官方的导出工具或者其他三方的工具，无一例外需要 token 才能操作，而 token 是需要开超级会员才能申请的(想走可以，先交波钱... ...)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/8aa76d6a3485152911d14fd904fc5cb6.png)\n\n最后的最后，问了问神奇的 chatgpt，用 puppeteer 模拟用户操作一篇一篇地导出了(真就一篇一篇的导出了)，有相似的需求可以看一下[renyunkang/yuque-exporter](https://github.com/renyunkang/yuque-exporter)工具，具体的功能以及不足都在readme 里面写明了，当然也可以看看这篇 [[语雀导出小工具]]。\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.145315138Z","tags":null},"/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA-netns-+-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1":{"title":"","content":"#network  #netns \n\n1. 使用 arp-proxy，并在主机上添加对应的路由联通\n```bash\n# echo 1 \u003e /proc/sys/net/ipv4/ip_forward\necho 'net.ipv4.ip_forward = 1' \u003e\u003e /etc/sysctl.conf\nsysctl -p\n\nip netns add ns0\nip link add name veth02 type veth peer name port02\nip link set dev veth02 netns ns0\nip netns exec ns0 ip link set veth02 up\nip netns exec ns0 ip link set lo up\nip netns exec ns0 ip addr add 10.233.92.200/24 dev veth02\nip link set port02 up\nip netns exec ns0 ip route add 169.254.1.1 dev  veth02 scope link \nip netns exec ns0 ip route add default via 169.254.1.1 dev veth02\necho 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\nip route add 10.233.92.200 dev port02 scope link\nip route add 10.233.128.3 via 172.31.73.13\n# iptables -t nat -A POSTROUTING -s 10.233.128.2/32 -j MASQUERADE\n\nip netns add ns0\nip link add name veth02 type veth peer name port02\nip link set dev veth02 netns ns0\nip netns exec ns0 ip link set veth02 up\nip netns exec ns0 ip link set lo up\nip netns exec ns0 ip addr add 10.233.128.3/24 dev veth02\nip link set port02 up\nip netns exec ns0 ip route add 169.254.1.1 dev  veth02 scope link \nip netns exec ns0 ip route add default via 169.254.1.1 dev veth02\necho 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\nip route add 10.233.128.2 via 172.31.73.12\nip route add 10.233.128.3 dev port02 scope link\n# iptables -t nat -A POSTROUTING -s 10.233.128.3/32 -j MASQUERADE\n\nip netns exec ns0 bash\n```\n\n2. 带有网桥 - 使用网桥作为网关，需要开启 NAT 转换，但是无需开启 arp-proxy\n```bash\n# 工具准备\napt install bridge-utils\nmodprobe br_netfilter\necho 'net.ipv4.ip_forward = 1' \u003e\u003e /etc/sysctl.conf\nsysctl -p\n\n# 设备准备\nbrctl addbr bridge0\n\nip netns add ns10\nip link add name veth10 type veth peer name port10\nip link set dev veth10 netns ns10\nip netns exec ns10 ip addr add 172.18.0.2/24 dev veth10\nip netns exec ns10 ip link set lo up\nip netns exec ns10 ip link set veth10 up\nip netns exec ns10 ip route add default via 172.18.0.1 dev veth10\n\nbrctl addif bridge0 port10\nip addr add 172.18.0.1/24 dev bridge0\nip link set bridge0 up\nip link set dev port10 up\nip route add 172.18.10.0/24 via 172.30.10.3\niptables -t nat -A POSTROUTING -s 172.18.0.0/24 ! -o bridge0 -j MASQUERADE\n\n===\nbrctl addbr bridge0\n\nip netns add ns10\nip link add name veth10 type veth peer name port10\nip link set dev veth10 netns ns10\nip netns exec ns10 ip addr add 172.18.10.2/24 dev veth10\nip netns exec ns10 ip link set lo up\nip netns exec ns10 ip link set veth10 up\nip netns exec ns10 ip route add default via 172.18.10.1 dev veth10\nbrctl addif bridge0 port10\n\nip addr add 172.18.10.1/24 dev bridge0\nip link set bridge0 up\nip link set dev port10 up\nip route add 172.18.0.0/24 via 172.30.10.2\niptables -t nat -A POSTROUTING -s 172.18.10.0/24 ! -o bridge0 -j MASQUERADE\n```\n\n\n遇到的问题以及解决方法：\n- 直接使用以上命令发现不通，network namespace 无法与外界通信，只能与本机通信\n- 安装 docker 之后仍然不行，使用 kk 安装集群之后可行，并且卸载集群之后仍然可行\n\n结论：kk 在安装时修改了部分系统参数，其实就是启用了 br_netfilter，并开启了 ipv4 的转发\n```bash\n# 没有启用  br_netfilter 的报错\nsysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such file or directory\n\n# 解决方法\nmodprobe br_netfilter  # 自动处理可载入模块\nsysctl -p /etc/sysctl.conf#\nsudo bash -c 'echo 1 \u003e /proc/sys/net/ipv4/ip_forward'\n\n# 其他相关 - 移除模块\nmodprobe -r 模块名\n```\n\n\n### vxlan 模式\n```\nip netns add docker1\nip link add veth0 type veth peer name veth1\nip link set veth0 netns docker1\n\nbrctl addbr br0\nbrctl addif br0 veth1\nip netns exec docker1 ip addr add 172.18.0.2/24 dev veth0\nip netns exec docker1 ip route add default via 172.18.0.1 dev veth0\nip netns exec docker1 ip link set veth0 up\nip link set veth1 up\nip addr add 172.18.0.1/24 dev br0\nip link set br0 up\n\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    local 172.30.10.3 \\\n    dev eth0 \\\n    nolearning\n\nip addr add 172.18.0.0/24 dev vxlan0\nip link set vxlan0 up\nip route add 172.18.0.0/24 dev vxlan0\n\nip neighbor add 10.244.2.3 lladdr 2e:0e:84:db:30:0e dev vxlan0 bridge fdb append 2e:0e:84:db:30:0e dev vxlan0 dst 172.19.216.118\n```\n\n\n```\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    remote 172.30.10.4 \\\n    local 172.30.10.2 \\\n    dev eth0 \\\n    nolearning\nip addr add 10.20.1.2/24 dev vxlan0\nip link set vxlan0 up\n\n\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    remote 172.30.10.2 \\\n    local 172.30.10.4 \\\n    dev eth0 \\\n    nolearning\nip addr add 10.20.1.3/24 dev vxlan0\nip link set vxlan0 up\n\n\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    remote 15.58.3.30 \\\n    local 15.58.3.26 \\\n    dev vlan135p0 \\\n    nolearning\nip addr add 172.18.10.2/24 dev vxlan0\nip link set vxlan0 up\n\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    remote 15.58.3.26 \\\n    local 15.58.3.30 \\\n    dev vlan135p0 \\\n    nolearning\nip addr add 172.18.10.3/24 dev vxlan0\nip link set vxlan0 up\n```\n\n```\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    group 239.1.1.1 \\\n    local 172.30.10.3 \\\n    dev eth0 \nip addr add 10.128.1.0/24 dev vxlan0\nip link set vxlan0 up\nip route add 10.128.1.0/24 dev vxlan0\n\nip link add br0 type bridge\nip link set vxlan0 master br0\nip addr add 10.128.1.1/24 dev br0\nip link set br0 up\n\n\nip netns add container1\nip link add veth0 type veth peer name veth1\nip link set dev veth0 master br0\nip link set dev veth0 up\n\nip link set dev veth1 netns container1\nip netns exec container1 ip link set lo up\nip netns exec container1 ip link set veth1 name eth0\nip netns exec container1 ip link set eth0 up\nip netns exec container1 ip addr add 10.128.1.2/24 dev eth0\nip netns exec container1 ip route add default via 10.128.1.1 dev eth0\n\n\n\nip link add vxlan0 type vxlan \\\n    id 42 \\\n    dstport 4789 \\\n    group 239.1.1.1 \\\n    local 172.30.10.5 \\\n    dev eth0 \nip link set vxlan0 up\nip addr add 10.128.2.0/24 dev vxlan0\nip route add 10.128.2.0/24 dev vxlan0\n\nip link add br0 type bridge\nip link set vxlan0 master br0\nip addr add 10.128.2.1/24 dev br0\nip link set br0 up\n\nip netns add container1\nip link add veth0 type veth peer name veth1\nip link set dev veth0 master br0\nip link set dev veth0 up\n\nip link set dev veth1 netns container1\nip netns exec container1 ip link set lo up\nip netns exec container1 ip link set veth1 name eth0\nip netns exec container1 ip link set eth0 up\nip netns exec container1 ip addr add 10.128.2.2/24 dev eth0\nip netns exec container1 ip route add default via 10.128.2.1 dev eth0\n```\n\n\n---\n```\n$ ip link add br0 type bridge $ ip link set vxlan0 master br0 $ ip link add vrf0 type vrf table 10 $ ip link set br0 master vrf0 $ ip link set vxlan0 up $ ip link set br0 up $ ip link set vrf0 up\n```\n\n\nip netns add ns0\nip link add name veth02 type veth peer name port02\nip link set dev veth02 netns ns0\nip netns exec ns0 ip link set veth02 up\nip netns exec ns0 ip link set lo up\nip netns exec ns0 ip addr add 10.233.128.2/24 dev veth02\nip link set port02 up\nip netns exec ns0 ip route add 169.254.1.1 dev  veth02 scope link \nip netns exec ns0 ip route add default via 169.254.1.1 dev veth02\necho 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\nip route add 10.233.128.3 via 172.31.50.25\nip route add 10.233.128.2 dev port02 scope link\n\nip netns add ns0\nip link add name veth02 type veth peer name port02\nip link set dev veth02 netns ns0\nip netns exec ns0 ip link set veth02 up\nip netns exec ns0 ip link set lo up\nip netns exec ns0 ip addr add 10.233.128.3/24 dev veth02\nip link set port02 up\nip netns exec ns0 ip route add 169.254.1.1 dev  veth02 scope link \nip netns exec ns0 ip route add default via 169.254.1.1 dev veth02\necho 1 \u003e /proc/sys/net/ipv4/conf/port02/proxy_arp\nip route add 10.233.128.2 via 172.31.50.24\nip route add 10.233.128.3 dev port02 scope link\n","lastmodified":"2025-03-26T03:48:43.169318577Z","tags":null},"/%E6%8E%92%E6%9F%A5-calico-ebpf":{"title":"","content":"#calico #ebpf\n\n配置 kube-proxy\n```bash\nkubectl patch ds -n kube-system kube-proxy -p '{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"non-calico\": \"true\"}}}}}'\nkubectl patch felixconfiguration default --type merge  --patch='{\"spec\": {\"bpfEnabled\": true}}'\n\n# 如果无法禁用 kube-proxy ，配置 Felix\nkubectl patch felixconfiguration default --type merge --patch='{\"spec\": {\"bpfKubeProxyIptablesCleanupEnabled\": false}}'\n```\n\n取消设置 - 回滚\n```bash\nkubectl patch felixconfiguration default --patch='{\"spec\": {\"bpfEnabled\": false}}' --type merge\nkubectl patch ds -n kube-system kube-proxy --type merge -p '{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"non-calico\": null}}}}}'\n```\n\n1. calico 版本 - 3.20.0\n2. bpf endpoint manager + bpf map manager\n3. bpfKubeProxyIptablesCleanupEnabled：if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy''s iptables chains\n\n\n排查工具\n\n\ntc 队列规则分为四大类：ingress，clsact，classless和classful。\n\n\n1. calico 切换为 ebpf 在重启时，可能无法连接 9090\n\t主机无法与 pod 通信\n\n2. calico 跨主机通信失败 - 不能使用 ipip 模式？\n\nkubectl scale deploy -n kubesphere-system ks-console --replicas=1\nkubectl scale deploy -n kubesphere-system ks-controller-manager --replicas=1\nkubectl scale deploy -n kubesphere-system ks-apiserver --replicas=1\n\n\n\nkubectl scale deploy -n kubesphere-system ks-console --replicas=3\nkubectl scale deploy -n kubesphere-system ks-controller-manager --replicas=3\nkubectl scale deploy -n kubesphere-system ks-apiserver --replicas=3\n\ncalico ebpf 转发\n[About eBPF (tigera.io)](https://projectcalico.docs.tigera.io/about/about-ebpf)\n\nkubectl exec -n calico-system calico-node-XXXX -- calico-node -bpf conntrack dump  \nkubectl exec -n calico-system calico-node-XXXX -- calico-node -bpf routes dump     \nkubectl exec -n calico-system calico-node-XXXX -- calico-node -bpf nat dump\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/%E6%90%AD%E5%BB%BA%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD":{"title":"搭建数字花园","content":"发布的方案：\n[obsidian 目前最完美的免费发布方案 - 渐进式教程 (oldwinter.top)](https://garden.oldwinter.top/obsidian-%E7%9B%AE%E5%89%8D%E6%9C%80%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88-%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%95%99%E7%A8%8B)\n\n参考发布的花园 + 搭建方案：\n- quartz + obsidian-export(添加.export-ignore)+github\n- [jackyzha0/quartz: 🌱 host your own second brain and digital garden for free (github.com)](https://github.com/jackyzha0/quartz)\n- [oldwinter/knowledge-garden: 我的数字花园 digital garden](https://github.com/oldwinter/knowledge-garden)\n- [Jekyll-Garden/jekyll-garden.github.io: A Digital Garden Theme for Jekyll.](https://github.com/Jekyll-Garden/jekyll-garden.github.io)\n- [oleeskild/obsidian-digital-garden (github.com)](https://github.com/oleeskild/obsidian-digital-garden)\n\n一个老外的花园搭建方法：\n使用 quartz + obsidian-export + obsidian-hugo\n[Publishing your Obsidian Vault Online with Quartz (brandonkboswell.com)](https://brandonkboswell.com/blog/Publishing-your-Obsidian-Vault-Online-with-Quartz/)\n\n\n别人的花园：\n- 花园地址：[AboutTheGarden (oldwinter.top)](https://garden.oldwinter.top/)\n- 花园 obsidian 仓库：[oldwinter/knowledge-garden](https://github.com/oldwinter/knowledge-garden)\n- 花园构建仓库：[oldwinter/dg3: quartz](https://github.com/oldwinter/dg3)\n- [🎁首页 (abser.top)](https://notes.abser.top/)\n- 我参考的花园：[知识Cool😊 (tianzhongs.ml)](https://ob.tianzhongs.ml/)\n- [ReeceMcMillin/garden: ](https://github.com/ReeceMcMillin/garden)\n","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%97%A0%E6%A0%87%E9%A2%98":{"title":"","content":"内存  tcmalloc - 大小对象分级、多核缓冲\n\ngc策略：\n标记-清扫 === 内存碎片\n标记-压缩 === 计算位置、forward指针，实现复杂\n半空间复制\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E6%97%A5%E5%BF%97":{"title":"日志","content":"\n### calico 日志\ncalico 主要运行组件为：calico-node 以及 calico-kube-controller-manager\n- calico-node 主要有 felix、bird、cni\n- 对于 kube-controller-manager 日志没有特殊配置\n\n#### node 实例的日志：\nkubectl logs -n kube-system calico-node-xxxx\n\n#### cni 日志：\n无法通过 kubectl 获取到，但是会输出到磁盘或者 stdout\n日志默认会存储在宿主机节点的 /var/log/calico/cni/ \n\n#### BGP 日志：\nBGP 的日志等级通过 BGPConfiguration.spec.logSeverityScreen 修改，值可以设置为：Debug、Info、Warning、Error、Fatal\n- 对于全局更改，name 为“default”。\n- 修改特定节点，name 为以“node.”为前缀的节点名称，如“node.node-1”。\n[BGP configuration | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/reference/resources/bgpconfig)\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPConfiguration\nmetadata:\n  name: default\nspec:\n  logSeverityScreen: Info\n```\n\n#### Felix 日志：\nFelix 的日志等级通过 FelixConfiguration.spec.logSeverityScreen 修改，值可以设置为：Debug、Info、Warning、Error、Fatal\n- 对于全局更改，name 为“default”。\n- 修改特定节点，name 为节点名称，例如“node-1”。\n[Felix configuration | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/reference/resources/felixconfig)\n\n#### 其他配置日志\n- 通过环境变量在启动时设置日志等级\n\tCALICO_DISABLE_FILE_LOGGING: Debug\n- 配置日志输出到文件\n\tCALICO_DISABLE_FILE_LOGGING: \"false\"\n\t\n\t组件记录到 /var/log/calico 中的磁盘、标准输出或两者。对于记录到磁盘的组件，文件会自动轮换，默认情况下会保留 10 个 1MB 的文件。 当前日志文件称为 current，旋转文件带有 @ 后跟时间戳，详细说明文件何时以 tai64n 格式旋转。\n\t*写入到容器的文件中*\n[Configuring calico/node | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/reference/configure-calico-node#configuring-logging)\n\n#### kse 收集日志\nkubesphere 提供日志收集、查询和管理的功能\n通过以下链接方式开启日志功能：[KubeSphere 日志系统](https://kubesphere.io/zh/docs/v3.3/pluggable-components/logging/#%E5%9C%A8%E5%AE%89%E8%A3%85%E5%89%8D%E5%90%AF%E7%94%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F)\n通过以下链接方式来查询日志：[日志查询 (kubesphere.io)](https://kubesphere.io/zh/docs/v3.3/toolbox/log-query/)\n\n\u003e 默认存储最近七天内的日志。\n\n\n### calicoctl node diags\n![upgit_20230130_1675069910.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230130_1675069910.png)\n```\nroot@node1:/tmp/calico018546275/diagnostics# ls\ndate  hostname  ipset_container  ipsets  ipv4_addr  ipv4_route  ipv4_tables  ipv6_addr  ipv6_route  ipv6_tables  journalctl_calico_node  logs  netsta\n```\n为 Calico 节点收集当前网络信息包并压缩\n\n\n### 系统日志\n对于 calico 来说，还需要分析系统日志。系统日志位于 /var/log/syslog，可以通过 /etc/logrotate.conf 查看系统日志的切割时间、保存时间\n```bash\nroot@node:~# cat /etc/logrotate.conf \n# see \"man logrotate\" for details\n# rotate log files weekly\nweekly\n\n# use the adm group by default, since this is the owning group\n# of /var/log/syslog.\nsu root adm\n\n# keep 4 weeks worth of backlogs\nrotate 4\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# use date as a suffix of the rotated file\n#dateext\n\n# uncomment this if you want your log files compressed\n#compress\n\n# packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# system-specific logs may be also be configured here.\nroot@node:~# \nroot@node:~# cat /etc/logrotate.d/rsyslog \n/var/log/syslog\n{\n        rotate 7\n        daily\n        missingok\n        notifempty\n        delaycompress\n        compress\n        postrotate\n                /usr/lib/rsyslog/rsyslog-rotate\n        endscript\n}\n\n/var/log/mail.info\n... ...\n```\n*展示的主机配置为：对于每天的日志生成一个记录，保存 7 天*\n\n参考链接：\n- [Component logs | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/operations/troubleshoot/component-logs)\n\n\n![upgit_20230210_1676006186.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230210_1676006186.png)\n\n查看系统日志：\nsystemd-analyze set-log-level debug\n/var/log/syslog\n","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%97%B6%E5%8C%BA-%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4":{"title":"","content":"#### 查看系统时区\ntimedatectl\n\n#### 修改系统时区\n```bash\ntimedatectl list-timezones | grep -i shang\nAsia/Shanghai\n\ntimedatectl set-timezone Asia/Shanghai\n```\n\n#### 软连接修改时区\n```\n```shell\nroot@node1:~#ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\nroot@node1:~# ls -l /etc/localtime\nlrwxrwxrwx 1 root root 33 May 20  2022 /etc/localtime -\u003e /usr/share/zoneinfo/Asia/Shanghai\n```\n\n","lastmodified":"2025-03-26T03:48:43.177318549Z","tags":null},"/%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C":{"title":"","content":"## 计算2个时间差\n```go\npackage main\nimport (\n  \"fmt\"\n  \"time\"\n)\nfunc main() {\n    //Add方法和Sub方法是相反的，获取t0和t1的时间距离d是使用Sub\n    //将t0加d获取t1就是使用Add方法\n    k := time.Now()\n    //一天之前\n    d, _ := time.ParseDuration(\"-24h\")\n    fmt.Println(k.Add(d))\n    //一周之前\n    fmt.Println(k.Add(d * 7))\n    //一月之前\n    fmt.Println(k.Add(d * 30))\n    \n    endTime, _ := time.Parse(\"2006-01-02 15:04:05\", \"2013-01-02 15:04:05\")\n    restHour := endTime.Sub(time.Now()).Hours()\n}\n```\n\n\n## 将时间转换为时间戳\n```go\n// string转化为时间，layout必须为 \"2006-01-02 15:04:05\"\ntimeLayout := \"2006-01-02 15:04:05\" \ntimes, _ := time.Parse(timeLayout, \"2014-06-15 08:37:18\")  \ntimeUnix := times.Unix()  \nfmt.Printf(\"times is %+v \\n, timeUnix is %+v\", times, timeUnix)\n```\n\n## go 时间戳和时间格式的相互转换\n```go\npackage main\n\nimport(\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    datetime := \"2015-01-01 00:00:00\"  //待转化为时间戳的字符串\n\n    //日期转化为时间戳\n    timeLayout := \"2006-01-02 15:04:05\"  //转化所需模板  \n    loc, _ := time.LoadLocation(\"Local\")    //获取时区  \n    tmp, _ := time.ParseInLocation(timeLayout, datetime, loc) \n    timestamp := tmp.Unix()    //转化为时间戳 类型是int64\n    fmt.Println(timestamp) \n\n    //时间戳转化为日期  \n    datetime = time.Unix(timestamp, 0).Format(timeLayout)\n    fmt.Println(datetime)    \n}\n```\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E6%9C%AA%E5%91%BD%E5%90%8D":{"title":"未命名","content":"\nloxilb 构建的两个目标文件\n```bash\nllb@nd2:~/loxilb$ ls -l /opt/loxilb/\ntotal 396\ndrwxrwxrwt 3 root root    0  6?? 20 11:17 dp\n-rw-rw-r-- 1 llb llb 305536  6?? 29 09:39 llb_ebpf_main.o\n-rw-rw-r-- 1 llb llb  95192  6?? 29 09:39 llb_xdp_main.o\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/48094bcbaadf811f0d5f14d264d655f4.png)\n\n\n挂载：\n\nllb_ebpf_main.o tc_packet_hook0\n\nntc filter add dev eth1 ingress bpf da obj /opt/loxilb/llb_ebpf_main.o sec tc_packet_hook0\n\n取消挂载： ntc filter del dev eth1 ingress\n\n检查挂载：\n```bash\nroot@nd2:/home/llb# ntc filter show dev eth1 ingress\nfilter protocol all pref 49152 bpf chain 0 \nfilter protocol all pref 49152 bpf chain 0 handle 0x1 llb_ebpf_main.o:[tc_packet_hook0] direct-action not_in_hw id 8715 tag 43a829222e969bce jited \n```\n\n\n挂载点：\n- tc_packet_func\n- tc_packet_func_slow\n- xdp_packet_func\n\n\nMap 列表：\n```bash\nroot@nd2:/home/llb/loxilb# ls -lart /opt/loxilb/dp/\ntotal 4\ndrwxrwxrwt 3 root root    0  6?? 20 11:17 .\ndrwxr-xr-x 3 root root 4096  6?? 29 10:19 ..\ndrwx------ 3 root root    0  6?? 29 10:19 bpf\nroot@nd2:/home/llb/loxilb# mount | grep bpf\nnone on /opt/netlox/loxilb type bpf (rw,relatime)\n\nroot@nd2:/home/llb/loxilb# ls -lart /opt/loxilb/dp/bpf/\ntotal 0\ndrwxrwxrwt 3 root root 0  6?? 20 11:17 ..\nlrwxrwxrwx 1 root root 0  6?? 20 11:17 xdp -\u003e /opt/loxilb/dp/bpf//tc/\ndrwx------ 3 root root 0  6?? 20 11:17 tc\nlrwxrwxrwx 1 root root 0  6?? 20 11:17 ip -\u003e /opt/loxilb/dp/bpf//tc/\n-rw------- 1 root root 0  6?? 29 10:19 xfis\n-rw------- 1 root root 0  6?? 29 10:19 xfck\n-rw------- 1 root root 0  6?? 29 10:19 xctk\n-rw------- 1 root root 0  6?? 29 10:19 tx_intf_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 tx_intf_map\n-rw------- 1 root root 0  6?? 29 10:19 tx_bd_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 tmac_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 tmac_map\n-rw------- 1 root root 0  6?? 29 10:19 smac_map\n-rw------- 1 root root 0  6?? 29 10:19 rt_v6_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 rt_v4_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 rt_v4_map\n-rw------- 1 root root 0  6?? 29 10:19 polx_map\n-rw------- 1 root root 0  6?? 29 10:19 pkts\n-rw------- 1 root root 0  6?? 29 10:19 pkt_ring\n-rw------- 1 root root 0  6?? 29 10:19 pgm_tbl\n-rw------- 1 root root 0  6?? 29 10:19 nh_map\n-rw------- 1 root root 0  6?? 29 10:19 nat_v4_map\n-rw------- 1 root root 0  6?? 29 10:19 mirr_map\n-rw------- 1 root root 0  6?? 29 10:19 intf_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 intf_map\n-rw------- 1 root root 0  6?? 29 10:19 fc_v4_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 fc_v4_map\n-rw------- 1 root root 0  6?? 29 10:19 fcas\n-rw------- 1 root root 0  6?? 29 10:19 dmac_map\n-rw------- 1 root root 0  6?? 29 10:19 ct_v4_map\n-rw------- 1 root root 0  6?? 29 10:19 bd_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 acl_v6_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 acl_v4_stats_map\n-rw------- 1 root root 0  6?? 29 10:19 acl_v4_map\n```\n\n\n使用 bpftool 可以查看 map 的一些信息：\nbpftool map dump pinned /opt/loxilb/dp/bpf/intf_map\n\n\n\n loxilb eBPF 管道的数据包流\n ![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/894cf53636e69c3f4a3afb10759c86d4.png)\n","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E9%93%BE%E6%8E%A5":{"title":"本地仓库与远程仓库链接","content":"1. 设置远程仓库地址\ngit remote add origin https://gitee.com/Stark-Gs/copter-4.0.7.git\n\n2. 拉取远程代码\ngit pull origin master --allow-unrelated-histories\n\n3. 提交到远程仓库\ngit push origin master \n\n---\n**修改远程仓库地址**\n\n1. 直接修改：git remote set-url origin [url]\n2. 先删除后新增：git remote rm origin \u0026\u0026 git remote add origin [url]\n3. 修改 config 文件：vim .git/config","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%9E%84%E5%BB%BA%E7%BA%A6%E6%9D%9F%E9%97%AE%E9%A2%98":{"title":"","content":"### go构建约束问题，Build constraints exclude all Go files in ？\n我的情况是使用了CGO，但是编译的时候没有加上CGO_ENABLED=1\n有的情况下，也有可能是GOOS环境的问题 // +build linux,amd64,go1.15,!cgo\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E6%9E%B6%E6%9E%84.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nKube-loxilb ^doQa7FVc\n\nloxilb ^FoxFTTiM\n\nloxilb-cmd ^XiPhINRP\n\nloxilib ^v6TCojVs\n\nloxilb-ebpf ^wo3Yy03S\n\nlibbpf ^49ODvFsg\n\nrpc ^cZEUJ3ab\n\nrestful api ^Bkw36K2e\n\napi server ^nO1vivFs\n\nservice ^uTJSfXdD\n\nbgppeer ^IrFOGRMs\n\nrpc server ^I7RK7rJT\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.4\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 169,\n\t\t\t\"versionNonce\": 779206172,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SJHpZJpghjb-fl0FVfpMB\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 12.5,\n\t\t\t\"y\": -45.9921875,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#ffec99\",\n\t\t\t\"width\": 171,\n\t\t\t\"height\": 71,\n\t\t\t\"seed\": 279719964,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"doQa7FVc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"WCYJM4ku5QYGQFVjQIyEx\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"3OxlESHNdsQBhAu4H-poT\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 135,\n\t\t\t\"versionNonce\": 2032517540,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"doQa7FVc\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 47.840057373046875,\n\t\t\t\"y\": -22.9921875,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 100.31988525390625,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1173569052,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"Kube-loxilb\",\n\t\t\t\"rawText\": \"Kube-loxilb\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"SJHpZJpghjb-fl0FVfpMB\",\n\t\t\t\"originalText\": \"Kube-loxilb\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 395,\n\t\t\t\"versionNonce\": 1716230812,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"PgqobqTibOQYzxnhgQ1at\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -282.9230769230769,\n\t\t\t\"y\": 146.04627403846155,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#ffc9c9\",\n\t\t\t\"width\": 319,\n\t\t\t\"height\": 236.07692307692312,\n\t\t\t\"seed\": 806719652,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"FoxFTTiM\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"WCYJM4ku5QYGQFVjQIyEx\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UCJn-uUIBuwgk-r3IIUMo\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 364,\n\t\t\t\"versionNonce\": 700837156,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FoxFTTiM\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -277.9230769230769,\n\t\t\t\"y\": 151.04627403846155,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 85.28395080566406,\n\t\t\t\"height\": 45,\n\t\t\t\"seed\": 803462180,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 36,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"loxilb\",\n\t\t\t\"rawText\": \"loxilb\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": \"PgqobqTibOQYzxnhgQ1at\",\n\t\t\t\"originalText\": \"loxilb\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 385,\n\t\t\t\"versionNonce\": 800450332,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"6lIUrjrhSxjVpP1jslrC4\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 199.0769230769231,\n\t\t\t\"y\": 199.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#a5d8ff\",\n\t\t\t\"width\": 171,\n\t\t\t\"height\": 71,\n\t\t\t\"seed\": 1149617052,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"XiPhINRP\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UCJn-uUIBuwgk-r3IIUMo\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 365,\n\t\t\t\"versionNonce\": 1012181156,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"XiPhINRP\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 239.73697251539966,\n\t\t\t\"y\": 222.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 89.67990112304688,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1992486940,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"loxilb-cmd\",\n\t\t\t\"rawText\": \"loxilb-cmd\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"6lIUrjrhSxjVpP1jslrC4\",\n\t\t\t\"originalText\": \"loxilb-cmd\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 477,\n\t\t\t\"versionNonce\": 1596105628,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3VWX8eAaMOCCVMwlUxZsL\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -273.9230769230769,\n\t\t\t\"y\": 314.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#d0bfff\",\n\t\t\t\"width\": 130,\n\t\t\t\"height\": 57,\n\t\t\t\"seed\": 1798222116,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"v6TCojVs\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 462,\n\t\t\t\"versionNonce\": 343929892,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"v6TCojVs\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -234.80304365891675,\n\t\t\t\"y\": 330.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.75993347167969,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1543826596,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"loxilib\",\n\t\t\t\"rawText\": \"loxilib\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"3VWX8eAaMOCCVMwlUxZsL\",\n\t\t\t\"originalText\": \"loxilib\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 523,\n\t\t\t\"versionNonce\": 1791217692,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"2AYrXfs1M4EfDZIzZIxCX\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -121.4230769230769,\n\t\t\t\"y\": 279.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#d0bfff\",\n\t\t\t\"width\": 145,\n\t\t\t\"height\": 94,\n\t\t\t\"seed\": 1920879524,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"wo3Yy03S\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 514,\n\t\t\t\"versionNonce\": 1882574756,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wo3Yy03S\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -97.0630152775691,\n\t\t\t\"y\": 284.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 96.27987670898438,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 998061860,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"loxilb-ebpf\",\n\t\t\t\"rawText\": \"loxilb-ebpf\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": \"2AYrXfs1M4EfDZIzZIxCX\",\n\t\t\t\"originalText\": \"loxilb-ebpf\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 505,\n\t\t\t\"versionNonce\": 847998108,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"W99fhhD2TKi6IGdpvhWES\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -112.4230769230769,\n\t\t\t\"y\": 311.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 130,\n\t\t\t\"height\": 57,\n\t\t\t\"seed\": 1668875420,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"49ODvFsg\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 494,\n\t\t\t\"versionNonce\": 530856740,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"49ODvFsg\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -72.19304304856519,\n\t\t\t\"y\": 327.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49.53993225097656,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 933630236,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"libbpf\",\n\t\t\t\"rawText\": \"libbpf\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"W99fhhD2TKi6IGdpvhWES\",\n\t\t\t\"originalText\": \"libbpf\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 552,\n\t\t\t\"versionNonce\": 191616676,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"WCYJM4ku5QYGQFVjQIyEx\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 24.969639779051988,\n\t\t\t\"y\": 38.0078125,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 67.52052749658205,\n\t\t\t\"height\": 110.15384615384619,\n\t\t\t\"seed\": 1084058788,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907466489,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"SJHpZJpghjb-fl0FVfpMB\",\n\t\t\t\t\"focus\": 0.4037051172784754,\n\t\t\t\t\"gap\": 13\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3G4Kd_BWYohcIQAt6Kukl\",\n\t\t\t\t\"focus\": -0.11779180839965152,\n\t\t\t\t\"gap\": 4.9098557692308304\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"arrow\",\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-67.52052749658205,\n\t\t\t\t\t110.15384615384619\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 532,\n\t\t\t\"versionNonce\": 1047255452,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UCJn-uUIBuwgk-r3IIUMo\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 189.5769230769231,\n\t\t\t\"y\": 234.8555953529363,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 164.9038461538462,\n\t\t\t\"height\": 3.656575066292163,\n\t\t\t\"seed\": 1792391708,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907460414,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"Bkw36K2e\",\n\t\t\t\t\"focus\": 1.5716154725957339,\n\t\t\t\t\"gap\": 10.344524839371445\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"jhbPElClUdXmsNc7tmN0T\",\n\t\t\t\t\"focus\": 0.11550691944152063,\n\t\t\t\t\"gap\": 10.096153846153811\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": \"arrow\",\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-164.9038461538462,\n\t\t\t\t\t3.656575066292163\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 73,\n\t\t\t\"versionNonce\": 924186012,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cZEUJ3ab\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -52.346153846153925,\n\t\t\t\"y\": 61.39242788461536,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 28.499969482421875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1024348196,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"rpc\",\n\t\t\t\"rawText\": \"rpc\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"rpc\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 172,\n\t\t\t\"versionNonce\": 1705165348,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Bkw36K2e\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 75.48078448955835,\n\t\t\t\"y\": 245.20012019230774,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 105.61988830566406,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1621066908,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UCJn-uUIBuwgk-r3IIUMo\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"restful api\",\n\t\t\t\"rawText\": \"restful api\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"restful api\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 561,\n\t\t\t\"versionNonce\": 2022650908,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jhbPElClUdXmsNc7tmN0T\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -115.4230769230769,\n\t\t\t\"y\": 212.12319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#d0bfff\",\n\t\t\t\"width\": 130,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1367243036,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"nO1vivFs\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"WCYJM4ku5QYGQFVjQIyEx\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UCJn-uUIBuwgk-r3IIUMo\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907460084,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 554,\n\t\t\t\"versionNonce\": 1875828132,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"nO1vivFs\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -99.41302901047925,\n\t\t\t\"y\": 224.62319711538464,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 97.97990417480469,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 503903644,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907439047,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"api server\",\n\t\t\t\"rawText\": \"api server\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"jhbPElClUdXmsNc7tmN0T\",\n\t\t\t\"originalText\": \"api server\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 348,\n\t\t\t\"versionNonce\": 593963548,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sgLCMoAnn9J0GyZKAS93v\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"dotted\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 149.23076923076928,\n\t\t\t\"y\": -180.5054086538463,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#96f2d7\",\n\t\t\t\"width\": 111,\n\t\t\t\"height\": 55.61538461538461,\n\t\t\t\"seed\": 1894923804,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"uTJSfXdD\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"3OxlESHNdsQBhAu4H-poT\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 318,\n\t\t\t\"versionNonce\": 176131996,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"uTJSfXdD\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 171.62080676739038,\n\t\t\t\"y\": -165.19771634615398,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 66.21992492675781,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 79436444,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"service\",\n\t\t\t\"rawText\": \"service\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"sgLCMoAnn9J0GyZKAS93v\",\n\t\t\t\"originalText\": \"service\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 391,\n\t\t\t\"versionNonce\": 1940077596,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hxcBdJqZ1Xa7tBPn9xs4D\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"dotted\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -23.076923076923094,\n\t\t\t\"y\": -175.89002403846172,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#96f2d7\",\n\t\t\t\"width\": 111,\n\t\t\t\"height\": 55.61538461538461,\n\t\t\t\"seed\": 56646556,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"IrFOGRMs\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"AYTkkMBq8orcvHv4Cnbj3\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 364,\n\t\t\t\"versionNonce\": 421520668,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"IrFOGRMs\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -2.766879741962157,\n\t\t\t\"y\": -160.5823317307694,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.37991333007812,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 780830748,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"bgppeer\",\n\t\t\t\"rawText\": \"bgppeer\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"hxcBdJqZ1Xa7tBPn9xs4D\",\n\t\t\t\"originalText\": \"bgppeer\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"id\": \"AYTkkMBq8orcvHv4Cnbj3\",\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"x\": 40.11538461538463,\n\t\t\t\"y\": -111.92848557692312,\n\t\t\t\"width\": 63.07692307692311,\n\t\t\t\"height\": 66.15384615384616,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#96f2d7\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"dashed\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"seed\": 1330684828,\n\t\t\t\"version\": 130,\n\t\t\t\"versionNonce\": 1151162524,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t63.07692307692311,\n\t\t\t\t\t66.15384615384616\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t27.692307692307622,\n\t\t\t\t58.46153846153848\n\t\t\t],\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"hxcBdJqZ1Xa7tBPn9xs4D\",\n\t\t\t\t\"gap\": 8.346153846153967,\n\t\t\t\t\"focus\": 0.32652794136893176\n\t\t\t},\n\t\t\t\"endBinding\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 194,\n\t\t\t\"versionNonce\": 1598051100,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3OxlESHNdsQBhAu4H-poT\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"dashed\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 198.5769230769232,\n\t\t\t\"y\": -112.69771634615387,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#96f2d7\",\n\t\t\t\"width\": 93.84615384615404,\n\t\t\t\"height\": 65.38461538461536,\n\t\t\t\"seed\": 1246972316,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907440653,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"sgLCMoAnn9J0GyZKAS93v\",\n\t\t\t\t\"gap\": 12.192307692307807,\n\t\t\t\t\"focus\": -0.5372259450538541\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"SJHpZJpghjb-fl0FVfpMB\",\n\t\t\t\t\"gap\": 1.3209134615385096,\n\t\t\t\t\"focus\": -0.33797784693644234\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-93.84615384615404,\n\t\t\t\t\t65.38461538461536\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 591,\n\t\t\t\"versionNonce\": 479236508,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3G4Kd_BWYohcIQAt6Kukl\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -116.42307692307696,\n\t\t\t\"y\": 153.07151442307702,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"#d0bfff\",\n\t\t\t\"width\": 130,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 22893220,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 3\n\t\t\t},\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"I7RK7rJT\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"WCYJM4ku5QYGQFVjQIyEx\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1719907454264,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 586,\n\t\t\t\"versionNonce\": 1503440796,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"I7RK7rJT\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -100.87302809495196,\n\t\t\t\"y\": 165.57151442307702,\n\t\t\t\"strokeColor\": \"#1e1e1e\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 98.89990234375,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1189305892,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1719907448426,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"rpc server\",\n\t\t\t\"rawText\": \"rpc server\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"3G4Kd_BWYohcIQAt6Kukl\",\n\t\t\t\"originalText\": \"rpc server\",\n\t\t\t\"lineHeight\": 1.25\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#1e1e1e\",\n\t\t\"currentItemBackgroundColor\": \"#96f2d7\",\n\t\t\"currentItemFillStyle\": \"solid\",\n\t\t\"currentItemStrokeWidth\": 2,\n\t\t\"currentItemStrokeStyle\": \"dashed\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 36,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": null,\n\t\t\"scrollX\": 508.7307692307695,\n\t\t\"scrollY\": 259.6328125000001,\n\t\t\"zoom\": {\n\t\t\t\"value\": 1.2999999999999994\n\t\t},\n\t\t\"currentItemRoundness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"gridColor\": {\n\t\t\t\"Bold\": \"#C9C9C9FF\",\n\t\t\t\"Regular\": \"#EDEDEDFF\"\n\t\t},\n\t\t\"currentStrokeOptions\": null,\n\t\t\"previousGridSize\": null,\n\t\t\"frameRendering\": {\n\t\t\t\"enabled\": true,\n\t\t\t\"clip\": true,\n\t\t\t\"name\": true,\n\t\t\t\"outline\": true\n\t\t}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2025-03-26T03:48:43.128318722Z","tags":null},"/%E6%9F%A5%E7%9C%8B-CPU%E5%86%85%E5%AD%98":{"title":"","content":"查看 cpu 信息： cat /proc/cpuinfo\n\n```bash\n# 总核数 = 物理CPU个数 X 每颗物理CPU的核数 \n# 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数\n\n# 查看物理CPU个数\ncat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l\n\n# 查看每个物理CPU中core的个数(即核数)\ncat /proc/cpuinfo| grep \"cpu cores\"| uniq\n\n# 查看逻辑CPU的个数\ncat /proc/cpuinfo| grep \"processor\"| wc -l\n\n# 查看CPU信息（型号）  \ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n```\n\n查看 mem 信息： cat /proc/meminfo","lastmodified":"2025-03-26T03:48:43.177318549Z","tags":null},"/%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E6%8E%92%E6%9F%A5":{"title":"根据系统日志排查","content":"\n## calico 意外重启\n![企业微信截图_16789375243108.png](https://images.cherryfloris.eu.org/ryken/2023/04/fd76b4c7d89c7721c88a34ead4fd75b0.png)\n位于 master2 的 calico-node 在 3d2h 前意外重启，现在使用 kubectl logs查看日志为现运行时的日志，没有参考价值。可以在日志组件中检索对应 pod且在对应时间段的日志；另外可以通过 `kubectl logs -p xxx` 获取到重启前的日志\n\n本次排查在日志没有明显的报错，之后查看系统日志（注意系统日志默认保留时间为 7 天）\n\n系统日志存储位置为： /var/log/syslog  之前的日志会压缩为 syslog.x.gz，找到对应天数的日志并解压后，查看 kubelet 相关的日志(重启发生是因为 kubelet 对 pod 的 liveness 探针失败)，找到重启发生的时间段可以看出来由于 oom-killer 导致的。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/3e418e6640a31a84dab3ffd5838e7f83.png)\n\n日志\n`journalctl -u kubelet -S '2023-04-09' | grep '2023-04-19'`","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE":{"title":"","content":"#blockbox #exporter #prometheus\n\n## 简单介绍\nBlackbox Exporter 是 Prometheus 社区提供的 官方黑盒监控解决方案,其允许用户通过: `http\\HTTPS\\DNS\\TCP\\ICMP\\gRPC`的方式对网络进行探测.\n\n支持的协议：HTTP, HTTPS, DNS, TCP, ICMP, gRPC.\n\n各个模块的配置：[blackbox_exporter/CONFIGURATION.md at master · prometheus/blackbox_exporter (github.com)](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md)\n\n示例配置：\n[https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/example.yml](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md)\n\n## 示例演示\n以下用一个示例简单的 icmp 探测介绍安装部署：\n### 安装部署 blockbox\n```yaml\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring-system\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: blackbox-config\n  namespace: monitoring-system\ndata:\n  blackbox.yml: |-\n    modules:\n      icmp:\n        prober: icmp\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blackbox\n  namespace: monitoring-system\nspec:\n  selector:\n    matchLabels:\n      app: blackbox\n  template:\n    metadata:\n      labels:\n        app: blackbox\n    spec:\n      containers:\n      - image: quay.io/prometheus/blackbox-exporter:v0.22.0\n        name: blackbox\n        args:\n        - --config.file=/etc/blackbox_exporter/blackbox.yml\n        - --log.level=error\n        - --web.listen-address=:9115\n        ports:\n        - containerPort: 9115\n        volumeMounts:\n        - name: config\n          mountPath: /etc/blackbox_exporter\n      volumes:\n      - name: config\n        configMap:\n          name: blackbox-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: blackbox\n  namespace: monitoring-system\nspec:\n  selector:\n    app: blackbox\n  ports:\n  - port: 9115\n    targetPort: 9115\n```\n\n### 使用 blockbox 探测：\n```bash\nroot@node1:~# curl 10.233.102.164:9115/probe?module=icmp\\\u0026target=www.baidu.com\n# HELP probe_dns_lookup_time_seconds Returns the time taken for probe dns lookup in seconds\n# TYPE probe_dns_lookup_time_seconds gauge\nprobe_dns_lookup_time_seconds 0.097182057\n# HELP probe_duration_seconds Returns how long the probe took to complete in seconds\n# TYPE probe_duration_seconds gauge\nprobe_duration_seconds 0.130861304\n# HELP probe_icmp_duration_seconds Duration of icmp request by phase\n# TYPE probe_icmp_duration_seconds gauge\nprobe_icmp_duration_seconds{phase=\"resolve\"} 0.097182057\nprobe_icmp_duration_seconds{phase=\"rtt\"} 0.032648941\nprobe_icmp_duration_seconds{phase=\"setup\"} 7.1581e-05\n# HELP probe_icmp_reply_hop_limit Replied packet hop limit (TTL for ipv4)\n# TYPE probe_icmp_reply_hop_limit gauge\nprobe_icmp_reply_hop_limit 46\n# HELP probe_ip_addr_hash Specifies the hash of IP address. It's useful to detect if the IP address changes.\n# TYPE probe_ip_addr_hash gauge\nprobe_ip_addr_hash 3.780294358e+09\n# HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6\n# TYPE probe_ip_protocol gauge\nprobe_ip_protocol 4\n# HELP probe_success Displays whether or not the probe was a success\n# TYPE probe_success gauge\nprobe_success 1\n```\n\n输出结果为 prometheus 的标准 metrics。其中 probe_success 表示探测结果。\n### 结合 prometheus\n#### 安装 prometheus\n```\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus-user\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - endpoints\n  - services\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus-user\nsubjects:\n- kind: ServiceAccount\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: monitoring-system\n  labels:\n    app: prometheus-pod\nspec:\n  progressDeadlineSeconds: 600\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-pod\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: prometheus-pod\n    spec:\n      containers:\n      - image: prom/prometheus\n        name: prometheus-pod\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        resources: \n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/prometheus/prometheus.yml\n          subPath: prometheus.yml\n      volumes:\n      - name: config-volume\n        configMap:\n          name: prometheus-config\n      restartPolicy: Always\n      serviceAccountName: prometheus-user\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-dashboard-svc\n  namespace: monitoring-system\nspec:\n  selector:\n    app: prometheus-pod\n  ports:\n  - nodePort: 31000\n    port: 9090\n    targetPort: 9090\n    protocol: TCP\n  type: NodePort\n```\n\n#### 配置 icmp job\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring-system\ndata:\n  prometheus.yml: |-\n    global:\n      scrape_interval: 15s\n      scrape_timeout: 15s \n    scrape_configs:\n    - job_name: 'blackbox_http_ping\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [icmp]\n      static_configs:\n      - targets:\n        - www.baidu.com\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement:  blackbox:9115\n```\n\n![upgit_20230105_1672910441.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230105_1672910441.png)\n\n\n![upgit_20230105_1672908283.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230105_1672908283.png)\n\n\n### 暴露/采集的 metrics \n1. 通用的 metrics\nscrape采集\n- scrape_duration_seconds\n- scrape_samples_post_metric_relabeling\n- scrape_samples_scraped\n- scrape_series_added\n\nprobe 探测\n- up 探测是否启用\n- probe_success 是否探测成功\n- probe_ip_protocol 4 指定探测的 ip 协议 ipv4/ipv6\n- probe_dns_lookup_time_seconds  DNS 查找所花费的时间（以秒为单位）\n- probe_duration_seconds 探测完成所花费的时间（以秒为单位）\n- probe_ip_addr_hash 指定 IP 地址的哈希值。 可用于检测 IP 地址是否更改\n\n\n2. icmp\n| metrics | 取值 | 解释 |\n|--|--|--|\n| probe_icmp_duration_seconds{phase=\"resolve\"} |  0.097182057 |  icmp 请求的持续时间 （DNS 解析） |\n| probe_icmp_duration_seconds{phase=\"rtt\"} | 0.032648941 | icmp 请求的持续时间 （回路响应时间） |\n| probe_icmp_duration_seconds{phase=\"setup\"} | 7.1581e-05 | icmp 请求的持续时间 （setup） |\n| probe_icmp_reply_hop_limit | 46 | 回复的数据包跳数限制（ipv4 的 TTL）\n\n\n3. tcp\n| metrics | 取值 | 解释 |\n|--|--|--|\n| probe_failed_due_to_regex | 0 | 是否因为表达式探测失败 |\n\n4. http\n| metrics | 取值 | 解释 |\n|--|--|--|\n| probe_failed_due_to_regex | 0 | 是否因为表达式探测失败 |\n| probe_http_content_length | -1 | http content 响应的长度\n| probe_http_duration_seconds{phase=\"connect\"} | 0.011417546 | connect 阶段的 http 请求持续时间，对所有重定向求和 |\n| probe_http_duration_seconds{phase=\"processing\"} | 0.025588187 | processing 阶段的 http 请求持续时间，对所有重定向求和 |\n| probe_http_duration_seconds{phase=\"resolve\"} | 0.011763045 | resolve 阶段的 http 请求持续时间，对所有重定向求和 |\n| probe_http_duration_seconds{phase=\"tls\"} | 0 | tls 握手阶段的 http 请求持续时间，对所有重定向求和 |\n| probe_http_duration_seconds{phase=\"transfer\"} | 0.120212515 | transfer阶段的 http 请求持续时间，对所有重定向求和 |\n| probe_http_redirects | 0 | 重定向次数 |\n| probe_http_ssl | 0 |  最终重定向是否用 SSL |\n| probe_http_status_code | 200 | 响应 HTTP 状态码 |\n| probe_http_uncompressed_body_length | 370317 | 未压缩响应 body 的长度 |\n| probe_http_version | 1.1 | 探测响应的 HTTP 版本 |\n\n5. dns\n| metrics | 取值 | 解释 |\n|--|--|--|\n| probe_dns_additional_rrs  additional | 0 | 资源记录列表中的条目数 |\n| probe_dns_answer_rrs  answer | 0 | 资源记录列表中的条目数 |\n| probe_dns_authority_rrs | 0 | 规范资源记录列表中的条目数 |\n| probe_dns_duration_seconds{phase=\"connect\"} | 0.000340141 | connect 阶段 DNS 请求的持续时间 |\n| probe_dns_duration_seconds{phase=\"request\"} | 0.000257105 | request 阶段 DNS 请求的持续时间 |\n| probe_dns_duration_seconds{phase=\"resolve\"} | 0.002221205 | resolve 阶段 DNS 请求的持续时间 |\n\n6. grpc\n| metrics | 取值 | 解释 |\n|--|--|--|\n| probe_grpc_duration_seconds{phase=\"check\"} | 0.190904268 | check 阶段请求的持续时间 |\n| probe_grpc_duration_seconds{phase=\"resolve\"} | 0.008453133 | resolve 阶段请求的持续时间 |\n| probe_grpc_healthcheck_response{serving_status=\"NOT_SERVING\"} | 0 | 健康检查响应 NOT_SERVING |\n| probe_grpc_healthcheck_response{serving_status=\"SERVICE_UNKNOWN\"} | 0 | 健康检查响应 SERVICE_UNKNOWN |\n| probe_grpc_healthcheck_response{serving_status=\"SERVING\"} | 0 | 健康检查响应 SERVING |\n| probe_grpc_healthcheck_response{serving_status=\"UNKNOWN\"} | 0 | 健康检查响应 UNKNOWN |\n| probe_grpc_ssl | 0 | 指示 SSL 是否用于连接 |\n| probe_grpc_status_code | 14 | 响应 gRPC 状态码 |\n| probe_ssl_earliest_cert_expiry | 0 | 以 unixtime 返回最早的 SSL 证书到期时间 |\n\n\n## 其他使用配置\n### 使用 DNS\nblock 配置\n```\n    modules:\n      dns:\n        prober: dns\n        dns:\n          transport_protocol: \"tcp\"  # 默认是 udp\n          preferred_ip_protocol: \"ip4\"  # 默认是 ip6\n          query_name: \"kubernetes.default.svc.cluster.local\"\n```\nprometheus 配置\n```\n    - job_name: \"kubernetes-service-dns\"\n      metrics_path: /probe # 不是 metrics，是 probe\n      params:\n        module: [dns] # 使用 DNS 模块\n      static_configs:\n      - targets:\n        - coredns.kube-system:53  # 不要省略端口号\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n```\n### 使用 icmp 检测联通性\nblock 配置\n```\n      icmp:\n        prober: icmp\n      icmp_ttl5: # 设置 ttl\n        prober: icmp\n        timeout: 5s\n        icmp:\n          ttl: 5\n```\nprometheus 配置\n```\n    - job_name: \"blackbox_ping\"\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [icmp]\n      static_configs:\n      - targets:\n        - 223.5.5.5\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n```\n### 使用 tcp 检测指定端口是否在线\nblock 配置\n```\n      tcp_connect:\n        prober: tcp\n        tcp:\n          preferred_ip_protocol: \"ip4\"\n```\nprometheus 配置\n```\n    - job_name: 'blackbox_tcp_connect'\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [tcp_connect]\n      static_configs:\n      - targets:\n        - 172.30.10.2:179\n        - 172.30.10.4:179\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n```\n### 使用 http 探测\nblock 配置\n```\n      http_2xx:\n        prober: http\n```\nprometheus 配置\n```\n    - job_name: 'blackbox_http_2xx'\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [http_2xx]\n      static_configs:\n      - targets:\n        - www.baidu.com\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n```\n\n### 使用 grpc 探测\nblock 配置\n```\n      grpc:\n        prober: grpc\n        grpc:\n          tls: true\n          preferred_ip_protocol: \"ip4\"\n```\nprometheus 配置\n```\n    - job_name: 'blackbox_grpc'\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [grpc]\n      static_configs:\n      - targets:\n        - www.baidu.com\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n```\n\n\n### 小结\nblockbox 支持 `http\\HTTPS\\DNS\\TCP\\ICMP\\gRPC` 的方式对网络进行探测， https 是通过 http 配置其他参数实现的。同时也可以通过配置其他参数来实现自定义探测。\n针对光大对于 calico 监控的需求可以通过以下方面实现部分需求：\n- icmp 检测节点的联通性\n- tcp 检测 bgp 179 端口是否在线\n\n![upgit_20230106_1672995019.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230106_1672995019.png)\n\n![upgit_20230206_1675698167.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675698167.png)\n","lastmodified":"2025-03-26T03:48:43.135318697Z","tags":null},"/%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B":{"title":"","content":"1. **初识nginx**\n2. **nginx架构基础**\n- nginx的数据结构和进程模型\n3. **详解http模块**\n- nginx如何处理http请求\n- 常用的实例、变量\n4. **反向代理与负载均衡**\n5. **nginx的系统层优化**\n6. **从源码视角深入使用nginx与OpenResty**\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/%E6%B5%81%E9%87%8F%E8%B5%B0%E5%90%91":{"title":"","content":"![upgit_20221212_1670836558.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221212_1670836558.png)\n\n\n容器到主机的流量走向\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/dcb87b7c3c51438e8b6f1c8163a3ac74.png)\n","lastmodified":"2025-03-26T03:48:43.1343187Z","tags":null},"/%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91%E8%B7%AF%E5%BE%84":{"title":"流量转发路径","content":"","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA":{"title":"测试环境搭建","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2024/01/5d2247ea08385425de74632644c80316.png)\n\n\u003e ps：路由器可以使用 vxnet-xxx 并分配 172.30.10.6/24，同时配置 vpc 端口转发到 ssh 端口，在配置好 ssh 之后，可以方便操作\n\n使用自管网络以及 vpc 网络按照以上的网络架构连接好。之后开始下面的操作：\n1. 通过配置 vpc 端口转发，将公网的不同端口转发到各个节点的 ssh 端口，并添加到安全组\n2. 配置节点的第二张网卡 ip，此时使用 dhcp 是无法正常获取到 ip 的，因此需要配置为静态 ip。 ubuntu 配置文件如下：cat /etc/network/interfaces\n```bash\n# interfaces(5) file used by ifup(8) and ifdown(8)\n# Include files from /etc/network/interfaces.d:\nsource /etc/network/interfaces.d/*\n\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet dhcp\n\nauto eth1\niface eth1 inet static\n  address 192.168.1.2\n  netmask 255.255.255.0\n```\n3. 路由器配置 [[H3C 0519x64]]\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E7%89%A9%E7%90%86%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84":{"title":"物理网络架构","content":"针对 L2/L3 的一些讨论\n### 传统的数据中心网络结构\n\n传统的数据中心网络结构是三层的，一般包括接入交换机、汇聚交换机和核心交换机。\n\n**核心层**\n核心层主要设备是核心交换机，可采用双核心交换机备份部署方式，核心交换机采用模块化框式交换机，配备双电源、双引擎及支持热插拔功能。\n\n**汇聚层**\n汇聚层千兆光交换机，每栋楼宇部署千兆汇聚交换机，进行高密度接入、高性能汇聚，采用双汇聚备份设计，汇聚交换机与核心侧交换机与采用双链路保障，实现网络完全链接。\n\n**接入层**\n前端设备通过IP网络接入楼宇弱电机房进行汇聚。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/3b6c0f5697256f960025089a3b56fc6d.png)\n\n在这架构下又分为L3架构和大2层架构，区别就在于L2/L3的分隔层次。\n#### L3架构\n\n当L2/L3隔离在汇聚交换机时，是L3架构，每对汇聚交换机构成一个L2的广播域，跨汇聚层的流量需要通过核心交换机路由转发完成。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/5e810f8ce5113dcf7dada02ae2005413.png)\n\n\n**好处：**\n- 在一个L2的广播域中，有效的限制了BUM（Broadcase，Unknown Unicast，Multicast），如风暴等问题。\n**缺点：**\n- 由于L2广播域范围的限制，不利于服务的任意部署。如果要发生位置迁移，也就会导致相应二层网络的变化，包括网关等配置变化。\n- 在业务流量上，主要适应于南北向流量的转发，对于横向流量，特别是跨2层流量，服务器之间无直接路由交换的路径，需要经历接入-汇聚-核心-汇聚-接入，共5层的转发，所以无论是带宽还是延时性都不会有很好的支持。\n\n#### 大2层网络架构\n\n将L2/3向上移动一层，也就是在核心交换机的位置做分离，这也就是我们的大2层网络架构。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/d8249e6b13b92d9f50595aafa3e6d7e1.png)\n\n\n**好处：**\n- 接入交换机以下的服务位置在这个时候就可以任意部署，不会面临诸如IP地址，网关等问题。\n**缺点：**\n- 不可避免BUM非正常流量的问题\n- 大2层架构下的核心交换机需要维护庞大的MAC和ARP表，对核心交换机的能力提出很高的要求 ，另外接入交换机（TOR）也对整个网络的规模造成一定的限制。\n- 跨三层调度的时延问题\n\n### 存在的问题\n\n1. 如何解决时延过大问题\n    无论是大2层还是L3层架构，都是传统的三层架构，对业务特别是跨二层业务，需要经历5个层级的交换机。\n2. 如何解决服务器任意部署问题，同时还不会造成严重的BUM问题？  \n    L2/3的分离位置在核心交换机时，BUM风险过大，核心交换机能力要求高。L2/3的隔离位置在汇聚交换机时，服务器部署受限。\n\n### Spine-Leaf 网络架构\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/176654930102f3cf8dd60358bf360aed.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/cb52cb48032e43613ede2b878d058fa2.png)\n\n\n脊拓扑结构通过增加一层平行于主干纵向网络结构的横向网络结构，在这层横向结构上增加相应的交换网络在Spine/Leaf网络架构中，L2/L3的分隔通常在Leaf接入交换机。与传统三层网络架构类似，这样也能分隔L2广播域。同时还减少了架构层次，对跨2层业务的调度，也就是东西向的业务调度，更方便，时延能做到有效的降低。在叶脊拓扑结构，所有的链接都是用来转发流量， 也是使用通用的生成树协议，同样能保持保持一个无环路的网络拓扑结构。\n\n这种叶脊leaf-spine虽然有效解决了跨2层业务调度的层次与时延问题。但还是无法实现服务器的任意部署问题。\n\n假设两个服务器处于不同的VLAN中，服务器配置不同的VLAN号，通过Spine交换机的调度，业务承载是没有问题的。但对于这两个服务器来说，它们的位置归属也就确定了。又或者，我们将两个服务器的VLAN配置为一样的，那能解决这个问题吗？答案还是不能，简单解释如同个Spine出现相同的Vlan配置，Spine交换机就不知道应该转发到哪个服务器。但并不能很好的实现服务器的任意部署。\n\n想要解决任意部署问题需要使用 overlay 技术\n\n### Overlay 技术\n\nOverlay网络是在现有的IP网络（Underlay网络）基础上构建的一个虚拟网络，这个网络的主要功能就是用来作为服务器的通讯，也就是在不改变网络架构的基础上，使服务器之间可以无障碍通话。目前比较流行的是我们常听到的VXLAN技术。在以前的文章中我们说到，VXLAN的另一个作用就是可以解决VLAN ID不足的问题。在这里，VXLAN技术，更主要的作用是解决了一个L3层网络上L2网络的通讯问题。或者说，解决服务器之间通过Overlay网络实现了跨Leaf TOR交换机接入服务器的任意性。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/bea298835579e0858b192ad17acc1369.png)\n\n\n原文链接：\n- [叶脊leaf-spine结构与Overlay技术](https://zhuanlan.zhihu.com/p/92480383)","lastmodified":"2025-03-26T03:48:44.146315134Z","tags":null},"/%E7%96%91%E9%97%AE":{"title":"","content":"1. 生命周期 - 结构体使用 \u0026str 成员\n2. trait\n3. 类单元结构体 - unit 类型","lastmodified":"2025-03-26T03:48:43.203318457Z","tags":null},"/%E7%9B%91%E6%8E%A7%E6%96%87%E6%A1%A3":{"title":"监控文档","content":"### calicoctl node\n作用：\ncalicoctl node run：运行 calico-node 镜像\ncalicoctl node status： calico-node 的一些状态信息\ncalicoctl node diags：为 Calico 节点收集诊断包\ncalicoctl node checksystem：检测该节点能否运行 calico-node \n![upgit_20230130_1675069798.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230130_1675069798.png)\n\n![upgit_20230130_1675069777.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230130_1675069777.png)\n\n![upgit_20230130_1675069752.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230130_1675069752.png)\n\n![upgit_20230130_1675069910.png](https://images.cherryfloris.eu.org/ryken/2023/01/upgit_20230130_1675069910.png)\n\n \n缺陷：\n\t只能获取本节点的信息\n\n\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%9B%91%E6%8E%A7-monitor":{"title":"监控 - monitor","content":"\n[Monitor Calico component metrics (tigera.io)](https://projectcalico.docs.tigera.io/maintenance/monitor/monitor-component-metrics)\n\n1.  Configure Calico to enable the metrics reporting.\n2.  Create the namespace and service account that Prometheus will need.\n3.  Deploy and configure Prometheus.\n4.  View the metrics in the Prometheus dashboard and create a simple graph.\n\n### 1. Configure to enable\n#### **Felix configuration**\n**Enable prometheus metrics**\nFelix prometheus metrics are **disabled** by default. \n```\nkubectl patch felixconfiguration default --type merge --patch '{\"spec\":{\"prometheusMetricsEnabled\": true}}'\n```\n**Creating a service to expose Felix metrics**\n```yaml\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: felix-metrics-svc\n  namespace: kube-system\nspec:\n  clusterIP: None\n  selector:\n    k8s-app: calico-node\n  ports:\n  - port: 9091\n    targetPort: 9091\nEOF\n```\n\n#### **kube-controllers configuration**\nkube-controllers prometheus metrics are **enabled** by default on TCP port 9094\n```\nkubectl patch kubecontrollersconfiguration default --type=merge  --patch '{\"spec\":{\"prometheusMetricsPort\": 9095}}'\n```\n\n```yaml\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-controllers-metrics-svc\n  namespace: kube-system\nspec:\n  clusterIP: None\n  selector:\n    k8s-app: calico-kube-controllers\n  ports:\n  - port: 9094\n    targetPort: 9094\nEOF\n```\n\n### 2. Namespace + service account\n```\nkubectl create -f -\u003c\u003cEOF\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: calico-monitoring\n  labels:\n    app:  ns-calico-monitoring\n    role: monitoring\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: calico-prometheus-user\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - endpoints\n  - services\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-prometheus-user\n  namespace: calico-monitoring\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-prometheus-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-prometheus-user\nsubjects:\n- kind: ServiceAccount\n  name: calico-prometheus-user\n  namespace: calico-monitoring\nEOF\n```\n\n### 3. install prometheus\n使用 ConfigMap 配置 Prometheus 以持久存储所需的设置\n```\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: calico-monitoring\ndata:\n  prometheus.yml: |-\n    global:\n      scrape_interval:   15s\n      external_labels:\n        monitor: 'tutorial-monitor'\n    scrape_configs:\n    - job_name: 'prometheus'\n      scrape_interval: 5s\n      static_configs:\n      - targets: ['localhost:9090']\n    - job_name: 'felix_metrics'\n      scrape_interval: 5s\n      scheme: http\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        regex: felix-metrics-svc\n        replacement: $1\n        action: keep\n    - job_name: 'typha_metrics'\n      scrape_interval: 5s\n      scheme: http\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        regex: typha-metrics-svc\n        replacement: $1\n        action: keep\n    - job_name: 'kube_controllers_metrics'\n      scrape_interval: 5s\n      scheme: http\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        regex: kube-controllers-metrics-svc\n        replacement: $1\n        action: keep\nEOF\n```\n\n创建 pod 之后查看 pod 状态\n```\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: prometheus-pod\n  namespace: calico-monitoring\n  labels:\n    app: prometheus-pod\n    role: monitoring\nspec:\n  serviceAccountName: calico-prometheus-user\n  containers:\n  - name: prometheus-pod\n    image: prom/prometheus\n    resources:\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/prometheus/prometheus.yml\n      subPath: prometheus.yml\n    ports:\n    - containerPort: 9090\n  volumes:\n  - name: config-volume\n    configMap:\n      name: prometheus-config\nEOF\n```\n\n### 4. 查看 metrics\n```yaml\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-dashboard-svc\n  namespace: calico-monitoring\nspec:\n  selector:\n    app: prometheus-pod\n    role: monitoring\n  ports:\n  - port: 9090\n    targetPort: 9090\n    protocol: TCP\n  type: ClusterIP\nEOF\n```\n\n### 5. 删除\n```\nkubectl delete service felix-metrics-svc -n kube-system\nkubectl delete service typha-metrics-svc -n kube-system\nkubectl delete service kube-controllers-metrics-svc -n kube-system\n\nkubectl patch felixConfiguration default --type merge --patch '{\"spec\":{\"prometheusMetricsEnabled\": false}}'\nkubectl patch installation default --type=json -p '[{\"op\": \"remove\", \"path\":\"/spec/typhaMetricsPort\"}]'\n\nkubectl delete namespace calico-monitoring\nkubectl delete ClusterRole calico-prometheus-user\nkubectl delete clusterrolebinding calico-prometheus-user\n```\n\n\n- 使用可视化查看：[[grafana 可视化]]\n- metrics 详情：[[calico metrics]]","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%AB%AF%E5%8F%A3%E5%85%B3%E7%B3%BB":{"title":"端口关系","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/974ec56a15e06699f014d125cc475d05.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/c33390d3dec3c331cb30559f1fc31b3a.png)\n\ntype=NodePort和nodePort=30001的两个属性表明此Service开启了NodePort方式的外网访问模式。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/2bad21b499844d99b36912b2b5f3a846.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/0dc74bef8591c602b73f84b63c27787c.png)\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2":{"title":"","content":"1. **C中的类型**\n\n在Go语言中访问C语言的符号时，一般是通过虚拟的“C”包访问。Go语言中数值类型和C语言数据类型基本上是相似的，它们的对应关系表如下：\n\n| C语言类型 | CGO类型 | Go语言类型 |\n| --- | --- | --- |\n| char | C.char | byte |\n| singed char | C.schar | int8 |\n| unsigned char | C.uchar | uint8 |\n| short | C.short | int16 |\n| unsigned short | C.short | uint16 |\n| int | C.int | int32 |\n| unsigned int | C.uint | uint32 |\n| long | C.long | int32 |\n| unsigned long | C.ulong | uint32 |\n| long long int | C.longlong | int64 |\n| unsigned long long int | C.ulonglong | uint64 |\n| float | C.float | float32 |\n| double | C.double | float64 |\n| size_t | C.size_t | uint |\n\n需要注意的是，虽然在C语言中`int`、`short`等类型没有明确定义内存大小，但是在CGO中它们的内存大小是确定的。为了提高C语言的可移植性，在`\u003cstdint.h\u003e`文件中，不但每个数值类型都提供了明确内存大小，而且和Go语言的类型命名更加一致。\n\n| C语言类型 | CGO类型 | Go语言类型 |\n| --- | --- | --- |\n| int8_t | C.int8_t | int8 |\n| uint8_t | C.uint8_t | uint8 |\n| int16_t | C.int16_t | int16 |\n| uint16_t | C.uint16_t | uint16 |\n| int32_t | C.int32_t | int32 |\n| uint32_t | C.uint32_t | uint32 |\n| int64_t | C.int64_t | int64 |\n| uint64_t | C.uint64_t | uint64 |\n\n如果C语言的类型是由多个关键字组成，则无法通过虚拟的“C”包直接访问(比如C语言的`unsigned short`不能直接通过`C.unsigned short`访问)。对于比较复杂的C语言类型，推荐使用`typedef`关键字提供一个规则的类型命名，这样更利于在CGO中访问。\n\n2. **GO字符串和切片**\n\n在CGO生成的`_cgo_export.h`头文件中还会为Go语言的字符串、切片、字典、接口和管道等特有的数据类型生成对应的C语言类型：\n```c\ntypedef struct { const char *p; GoInt n; } GoString;\ntypedef void *GoMap;\ntypedef void *GoChan;\ntypedef struct { void *t; void *v; } GoInterface;\ntypedef struct { void *data; GoInt len; GoInt cap; } GoSlice;\n```\n不过需要注意的是，其中只有字符串和切片在CGO中有一定的使用价值，因为此二者可以在Go调用C语言函数时马上使用;而CGO并未针对其他的类型提供相关的辅助函数，且Go语言特有的内存模型导致我们无法保持这些由Go语言管理的内存指针，所以它们C语言环境并无使用的价值。\n\n3. **结构体、联合、枚举类型**\n\nC语言的结构体、联合、枚举类型不能作为匿名成员被嵌入到Go语言的结构体中。\n在Go语言中，我们可以通过`C.struct_xxx`来访问C语言中定义的`struct xxx`结构体类型。结构体的内存布局按照C语言的通用对齐规则。对于指定了特殊对齐规则的结构体，无法在CGO中访问。\n对于联合类型，我们可以通过`C.union_xxx`来访问C语言中定义的`union xxx`类型。但是Go语言中并不支持C语言联合类型，它们会被转为对应大小的字节数组。\n对于枚举类型，我们可以通过`C.enum_xxx`来访问C语言中定义的`enum xxx`结构体类型。\n在C语言中，我们无法直接访问Go语言定义的结构体类型。\n\n- 结构体\n   - 如果结构体的成员名字中碰巧是Go语言的关键字，可以通过在成员名开头添加下划线来访问\n   - 如果有2个成员：一个是以Go语言关键字命名，另一个刚好是以下划线和Go语言关键字命名，那么以Go语言关键字命名的成员将无法访问（被屏蔽）\n   - C语言结构体中位字段对应的成员无法在Go语言中访问，如果需要操作位字段成员，需要通过在C语言中定义辅助函数来完成\n   - 对应零长数组的成员，无法在Go语言中直接访问数组的元素，但其中零长的数组成员所在位置的偏移量依然可以通过`unsafe.Offsetof(a.arr)`来访问\n```go\n/*\nstruct A {\n\tint i;\n\tfloat f;\n    int   type;  // type 是 Go 语言的关键字\n\tfloat _type; // 将屏蔽CGO对 type 成员的访问\n\tint   size: 10; // 位字段无法访问\n\tfloat arr[];    // 零长的数组也无法访问\n};\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n\tvar a C.struct_A\n\tfmt.Println(a.i)\n\tfmt.Println(a.f)\n\tfmt.Println(a._type) // _type 对应 _type\n\tfmt.Println(a.size) // 错误: 位字段无法访问\n\tfmt.Println(a.arr)  // 错误: 零长的数组也无法访问\n}\n```\n\n\n- 联合体 -- 如果需要操作C语言的联合类型变量，一般有三种方法\n   - 第一种是在C语言中定义辅助函数；\n   - 第二种是通过Go语言的\"encoding/binary\"手工解码成员(需要注意大端小端问题)；\n   - 第三种是使用`unsafe`包强制转型为对应类型(这是性能最好的方式)。\n```go\n/*\n#include \u003cstdint.h\u003e\nunion B1 {\n\tint i;\n\tfloat f;\n};\n\nunion B2 {\n\tint8_t i8;\n\tint64_t i64;\n};\n\nunion B {\n\tint i;\n\tfloat f;\n};\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    var b1 C.union_B1;\n\tfmt.Printf(\"%T\\n\", b1) // [4]uint8 转为对应大小的字节数组\n\n\tvar b2 C.union_B2;\n\tfmt.Printf(\"%T\\n\", b2) // [8]uint8 转为对应大小的字节数组\n    \n\tvar b C.union_B; // unsafe包访问联合类型成员的\n\tfmt.Println(\"b.i:\", *(*C.int)(unsafe.Pointer(\u0026b)))\n\tfmt.Println(\"b.f:\", *(*C.float)(unsafe.Pointer(\u0026b)))\n}\n```\n但是对于有嵌套联合类型的情况处理使用`unsafe`包会导致问题复杂化。对于复杂的联合类型，推荐通过在C语言中定义辅助函数的方式处理。\n\n- 枚举 \n```go\n/*\nenum C {\n\tONE,\n\tTWO,\n}\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n\tvar c C.enum_C = C.TWO\n\tfmt.Println(c)\n\tfmt.Println(C.ONE)\n\tfmt.Println(C.TWO)\n}\n```\n在C语言中，枚举类型底层对应`int`类型，支持负数类型的值。我们可以通过`C.ONE`、`C.TWO`等直接访问定义的枚举值。\n\n4. **数组、字符串、切片**\n\nGo语言和C语言的数组、字符串和切片之间的相互转换可以简化为Go语言的切片和C语言中指向一定长度内存的指针之间的转换。CGO的C虚拟包提供了以下一组函数，用于Go语言和C语言之间数组、字符串的双向转换：\n```go\n// Go string to C string\n// The C string is allocated in the C heap using malloc.\n// It is the caller's responsibility to arrange for it to be\n// freed, such as by calling C.free (be sure to include stdlib.h\n// if C.free is needed).\nfunc C.CString(string) *C.char\n\n// Go []byte slice to C array\n// The C array is allocated in the C heap using malloc.\n// It is the caller's responsibility to arrange for it to be\n// freed, such as by calling C.free (be sure to include stdlib.h\n// if C.free is needed).\nfunc C.CBytes([]byte) unsafe.Pointer\n\n// C string to Go string\nfunc C.GoString(*C.char) string\n\n// C data with explicit length to Go string\nfunc C.GoStringN(*C.char, C.int) string\n\n// C data with explicit length to Go []byte\nfunc C.GoBytes(unsafe.Pointer, C.int) []byte\n```\n\n- `C.CString`针对输入的Go字符串，克隆一个C语言格式的字符串；返回的字符串由C语言的`malloc`函数分配，不使用时需要通过C语言的`free`函数释放。\n- `C.CBytes`函数的功能和`C.CString`类似，用于从输入的Go语言字节切片克隆一个C语言版本的字节数组，同样返回的数组需要在合适的时候释放。\n- `C.GoString`用于将从NULL结尾的C语言字符串克隆一个Go语言字符串。\n- `C.GoStringN`是另一个字符数组克隆函数。\n- `C.GoBytes`用于从C语言数组，克隆一个Go语言字节切片。\n\n该组辅助函数都是以克隆的方式运行。当Go语言字符串和切片向C语言转换时，克隆的内存由C语言的`malloc`函数分配，最终可以通过`free`函数释放。当C语言字符串或数组向Go语言转换时，克隆的内存由Go语言分配管理。通过该组转换函数，转换前和转换后的内存依然在各自的语言环境中，它们并没有跨越Go语言和C语言。克隆方式实现转换的优点是接口和内存管理都很简单，缺点是克隆需要分配新的内存和复制操作都会导致额外的开销。\n\n如果不希望单独分配内存，可以在Go语言中直接访问C语言的内存空间：\n```go\n/*\nstatic char arr[10];\nstatic char *s = \"Hello\";\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n\t// 通过 reflect.SliceHeader 转换\n\tvar arr0 []byte\n\tvar arr0Hdr = (*reflect.SliceHeader)(unsafe.Pointer(\u0026arr0))\n\tarr0Hdr.Data = uintptr(unsafe.Pointer(\u0026C.arr[0]))\n\tarr0Hdr.Len = 10\n\tarr0Hdr.Cap = 10\n\n\t// 通过切片语法转换\n\tarr1 := (*[31]byte)(unsafe.Pointer(\u0026C.arr[0]))[:10:10]\n\n\tvar s0 string\n\tvar s0Hdr := (*reflect.StringHeader)(unsafe.Pointer(\u0026s0))\n\ts0Hdr.Data = uintptr(unsafe.Pointer(C.s))\n\ts0Hdr.Len = int(C.strlen(C.s))\n\n\tsLen := int(C.strlen(C.s))\n\ts1 := string((*[31]byte)(unsafe.Pointer(\u0026C.s[0]))[:sLen:sLen])\n}\n```\n在C语言中可以通过`GoString`和`GoSlice`来访问Go语言的字符串和切片。如果是Go语言中数组类型，可以将数组转为切片后再行转换。如果字符串或切片对应的底层内存空间由Go语言的运行时管理，那么在C语言中不能长时间保存Go内存对象。\n\n5. **指针**\n\n在C语言中，不同类型的指针是可以显式或隐式转换的，如果是隐式只是会在编译时给出一些警告信息。但是Go语言对于不同类型的转换非常严格，任何C语言中可能出现的警告信息在Go语言中都可能是错误！指针是C语言的灵魂，指针间的自由转换也是cgo代码中经常要解决的第一个重要的问题。\n在Go语言中两个指针的类型完全一致则不需要转换可以直接通用。如果一个指针类型是用type命令在另一个指针类型基础之上构建的，换言之两个指针底层是相同完全结构的指针，那么我我们可以通过直接强制转换语法进行指针间的转换。但是cgo经常要面对的是2个完全不同类型的指针间的转换，原则上这种操作在纯Go语言代码是严格禁止的。\ncgo存在的一个目的就是打破Go语言的禁制，恢复C语言应有的指针的自由转换和指针运算。以下代码演示了如何将X类型的指针转化为Y类型的指针：\n```\nvar p *X\nvar q *Y\nq = (*Y)(unsafe.Pointer(p)) // *X =\u003e *Y\np = (*X)(unsafe.Pointer(q)) // *Y =\u003e *X\n```\n为了实现X类型指针到Y类型指针的转换，我们需要借助`unsafe.Pointer`作为中间桥接类型实现不同类型指针之间的转换。 **`unsafe.Pointer`指针类型类似C语言中的`void*`类型的指针。**\n下面是指针间的转换流程的示意图：\n[![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625553919754-0f454063-e695-4b61-bdb3-a73a450548bb.png#align=left\u0026display=inline\u0026height=330\u0026originHeight=330\u0026originWidth=356\u0026size=0\u0026status=done\u0026style=none\u0026width=356)](https://img.cntofu.com/book/advanced-go-programming-book/images/ch2-x-ptr-to-y-ptr.uml.png)\n任何类型的指针都可以通过强制转换为`unsafe.Pointer`指针类型去掉原有的类型信息，然后再重新赋予新的指针类型而达到指针间的转换的目的。\n\n6. **数值和指针的转换**\n\n不同类型指针间的转换看似复杂，但是在cgo中已经算是比较简单的了。在C语言中经常遇到用普通数值表示指针的场景，也就是说如何实现数值和指针的转换也是cgo需要面对的一个问题。\n为了严格控制指针的使用，Go语言禁止将数值类型直接转为指针类型！不过，Go语言针对`unsafe.Pointr`指针类型特别定义了一个uintptr类型。我们可以uintptr为中介，实现数值类型到`unsafe.Pointr`指针类型到转换。再结合前面提到的方法，就可以实现数值和指针的转换了。\n下面流程图演示了如何实现int32类型到C语言的`char*`字符串指针类型的相互转换：\n[![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625553919784-5ced2ca7-f5d4-43ee-a979-209ce120ccd9.png#align=left\u0026display=inline\u0026height=432\u0026originHeight=432\u0026originWidth=565\u0026size=0\u0026status=done\u0026style=none\u0026width=565)](https://img.cntofu.com/book/advanced-go-programming-book/images/ch2-int32-to-char-ptr.uml.png)\n转换分为几个阶段，在每个阶段实现一个小目标：首先是int32到uintptr类型，然后是uintptr到`unsafe.Pointr`指针类型，最后是`unsafe.Pointr`指针类型到`*C.char`类型。\n\n7. **切片间的转换**\n\n在C语言中数组也一种指针，因此两个不同类型数组之间到转换和指针间转换基本类似。但是在Go语言中，数组或数组对应到切片都不再是指针类型，因为我们也就无法直接实现不同类型到切片之间的转换。\n不过Go语言的reflect包提供了切片类型到底层结构，再结合前面讨论到不同类型之间到指针转换技术就可以实现`[]X`和`[]Y`类型的切片转换：\n```\nvar p []X\nvar q []Y\npHdr := (*reflect.SliceHeader)(unsafe.Pointer(\u0026p))\nqHdr := (*reflect.SliceHeader)(unsafe.Pointer(\u0026q))\npHdr.Data = qHdr.Data\npHdr.Len = qHdr.Len * unsafe.Sizeof(q[0]) / unsafe.Sizeof(p[0])\npHdr.Cap = qHdr.Cap * unsafe.Sizeof(q[0]) / unsafe.Sizeof(p[0])\n```\n不同切片类型之间转换到思路是先为构造一个空的目标切片，然后用原有的切片底层数据填充目标切片。如果X和Y类型的大小不同，需要重新设置Len和Cap属性。需要注意的是，如果X或Y是空类型，上述代码中可能导致除0错误，实际代码需要根据情况酌情处理。\n下面演示了切片间的转换的具体流程：\n[![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625553919828-5bb37a41-ff69-4cc8-8e11-e5e69fa03575.png#align=left\u0026display=inline\u0026height=418\u0026originHeight=418\u0026originWidth=453\u0026size=0\u0026status=done\u0026style=none\u0026width=453)](https://img.cntofu.com/book/advanced-go-programming-book/images/ch2-x-slice-to-y-slice.uml.png)\n针对CGO中常用的功能，作者封装了 \"github.com/chai2010/cgo\" 包，提供基本的转换功能，具体的细节可以参考实现代码。\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/%E7%BB%84%E4%BB%B6":{"title":"","content":"calico-node\ncalico-controller\n\n\n健康检查\n- ready\n- live\n\n![upgit_20221116_1668580016.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668580016.png)\n\n\ncalico-node 容器以runit 作为进程管理工具，运行多个进程\n\n## 进程树\n![upgit_20221116_1668569668.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668569668.png)\n\n``` bash\n# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 Jul28 ?        00:00:05 /usr/bin/runsvdir -P /etc/service/enabled\nroot        50     1  0 Jul28 ?        00:00:00 runsv felix\nroot        --     1  0 Jul28 ?        00:00:00 runsv monitor-addresses\nroot        --     1  0 Jul28 ?        00:00:00 runsv allocate-tunnel-addrs\nroot        --     1  0 Jul28 ?        00:00:00 runsv cni\nroot        51     1  0 Jul28 ?        00:00:00 runsv bird\nroot        52     1  0 Jul28 ?        00:00:00 runsv bird6\nroot        53     1  0 Jul28 ?        00:00:00 runsv confd\nroot        54    50  1 Jul28 ?        02:10:41 calico-node -felix\nroot        55    53  0 Jul28 ?        00:01:33 calico-node -confd\nroot        --    --  0 Jul28 ?        00:01:33 calico-node -allocate-tunnel-addrs\nroot        --    --  0 Jul28 ?        00:01:33 calico-node -monitor-addresses\nroot        --    --  0 Jul28 ?        00:01:33 calico-node -monitor-token\nroot       134    51  0 Jul28 ?        00:02:52 bird -R -s /var/run/calico/bird.ctl -d -c /etc/calico/confd/config/bird.cfg\nroot       135    52  0 Jul28 ?        00:02:53 bird6 -R -s /var/run/calico/bird6.ctl -d -c /etc/calico/confd/config/bird6.cfg\n```\n\n### 启动脚本\n\n#### /sbin/start_runit 脚本\ncalico-node 容器的启动脚本为 `/sbin/start_runit`\n\n-   输出环境变量到 `/etc/envvars`\n-   执行 `/etc/rc.local`\n-   执行 `runsvdir -P /etc/service/enabled`\n```bash\n~#: cat ./sbin/start_runit \n#!/bin/sh\n# From https://github.com/faisyl/alpine-runit\nenv \u003e /etc/envvars\n\n/etc/rc.local\nretval=$?\nif [ $retval -ne 0 ];\nthen\n    echo \u003e\u00262 \"Calico node failed to start\"\n    exit $retval\nfi\n# Export the nodename set by the startup procedure. \nexport NODENAME=$(cat /var/lib/calico/nodename)\n\nRUNSVDIR=$(/usr/bin/which runsvdir)\nexec ${RUNSVDIR} -P /etc/service/enabled\n```\n\n\n#### /etc/rc.local 文件\n\n-   处理环境变量，涉及到的环境变量：\n\n-   `CALICO_NETWORKING` 替换为 `CALICO_NETWORKING_BACKEND`，取值：none、bird、gobgp、vxlan\n-   `CALICO_DISABLE_FELIX`不启动 felix\n-   `CALICO_MANAGE_CNI`是否启用 cni 配置管理\n-   `CALICO_DISABLE_FILE_LOGGING` 是否禁用日志，日志启动命令在 `/etc/service/enabled/felix/log/run` 日志存储文件`/var/log/calico/felix/current`\n\n-   启动安装命令`calico-node -startup`\n-   提前申请 tunl 设备 ip 地址`calico-node -allocate-tunnel-addrs -allocate-tunnel-addrs-run-once`\n-   拷贝要启动组件的配置到 `/etc/service/enabled` 目录下\n\n~#: cat ./etc/rc.local \n```shell\n# Handle old CALICO_NETWORKING environment by converting to the new config.\nif [ -n \"$CALICO_NETWORKING\" ]; then\n        echo \"WARNING: $CALICO_NETWORKING will be deprecated: use $CALICO_NETWORKING_BACKEND instead\"\n        if [ \"$CALICO_NETWORKING\" = \"false\" ]; then\n                export CALICO_NETWORKING_BACKEND=none\n        else\n                export CALICO_NETWORKING_BACKEND=bird\n        fi\nfi\n\n# Run the startup initialisation script.\n# These ensure the node is correctly configured to run.\ncalico-node -startup || exit 1\n\n# Set the nodename based on the value picked by the startup procedure.\nif [ ! -f \"/var/lib/calico/nodename\" ]; then\n        echo \"/var/lib/calico/nodename does not exist, exiting\"\n        exit 1\nfi\nNODENAME=$(cat /var/lib/calico/nodename)\nexport NODENAME\n\n# If possible pre-allocate any tunnel addresses.\ncalico-node -allocate-tunnel-addrs -allocate-tunnel-addrs-run-once || exit 1\n\n# Create a directly to put enabled service files\nmkdir /etc/service/enabled\n\n# XXX: Here and below we do all manipulations on /etc/service avoiding rm'ing\n# dirs contained in Docker image. This is due to bug in Docker with graphdriver\n# overlay on CentOS 7.X kernels (https://github.com/docker/docker/issues/15314)\n\n# Allow felix to be disabled, for example, if the user is running Felix\n# outside the container.\nif [ -z \"$CALICO_DISABLE_FELIX\" ]; then\n  cp -a /etc/service/available/felix /etc/service/enabled/\nfi\n\n# Monitor change in node IP addresses and subnets.\ncp -a /etc/service/available/monitor-addresses  /etc/service/enabled/\n\n# Enable the allocate tunnel IP service\ncp -a /etc/service/available/allocate-tunnel-addrs  /etc/service/enabled/\n\ncase \"$CALICO_NETWORKING_BACKEND\" in\n        \"none\" )\n        # If running in policy only mode, we don't need to run BIRD / Confd.\n        echo \"CALICO_NETWORKING_BACKEND is none - no BGP daemon running\"\n        ;;\n        \"vxlan\" )\n        # If running in VXLAN-only mode, we don't need to run BIRD / Confd.\n        echo \"CALICO_NETWORKING_BACKEND is vxlan - no need to run a BGP daemon\"\n        ;;\n        \"gobgp\" )\n        # Run calico-bgp-daemon instead of BIRD / Confd.\n        echo \"CALICO_NETWORKING_BACKEND is gobgp - run calico-bgp-daemon\"\n        cp -a /etc/service/available/calico-bgp-daemon /etc/service/enabled/\n        sh -c 'for file in `find /etc/calico/confd/conf.d/ -not -name 'tunl-ip.toml' -type f`; do rm $file; done'\n        cp -a /etc/service/available/confd /etc/service/enabled/\n        ;;\n        * )\n\n        # Enable the confd and bird services\n        cp -a /etc/service/available/bird  /etc/service/enabled/\n        cp -a /etc/service/available/bird6 /etc/service/enabled/\n        cp -a /etc/service/available/confd /etc/service/enabled/\n        ;;\nesac\n\nif [ \"$CALICO_MANAGE_CNI\" != \"false\" ]; then\n        # Enable management of the CNI configuration unless otherwise instructed.\n        cp -a /etc/service/available/cni  /etc/service/enabled/\nfi\n\nif [ \"$CALICO_DISABLE_FILE_LOGGING\" = \"true\" ]; then\n        rm -rf /etc/service/enabled/allocate-tunnel-addrs/log\n        rm -rf /etc/service/enabled/bird/log\n        rm -rf /etc/service/enabled/bird6/log\n        rm -rf /etc/service/enabled/confd/log\n        rm -rf /etc/service/enabled/felix/log\n        rm -rf /etc/service/enabled/calico-bgp-daemon/log\n        rm -rf /etc/service/enabled/cni/log\n        rm -rf /etc/service/enabled/monitor-addresses/log\nfi\n\necho \"Calico node started successfully\"\n```\n\n\n#### /etc/service/enabled 目录\n```bash\n~#: ls ./etc/service/enabled\nallocate-tunnel-addrs  bird  bird6  cni  confd  felix  monitor-addresses\n~#: tree ./etc/service/enabled\n./etc/service/enabled\n├── allocate-tunnel-addrs\n│   ├── run \t\t\t# calico-node -allocate-tunnel-addrs\n│   └── supervise\n├── bird\t\t\t\t\t# bird -R -s /var/run/calico/bird.ctl -d -c /etc/calico/confd/config/bird.cfg\n│   ├── run\n│   └── supervise\n├── bird6\n│   ├── run\t\t\t\t# bird6 -R -s /var/run/calico/bird6.ctl -d -c /etc/calico/confd/config/bird6.cfg\n│   └── supervise\n├── cni\n│   ├── run\t\t\t\t# calico-node -monitor-token\n│   └── supervise\n├── confd\n│   ├── run\t\t\t\t# calico-node -confd\n│   └── supervise\n├── felix\n│   ├── run\n│   └── supervise\n└── monitor-addresses\n    ├── run\t\t\t\t# calico-node -monitor-addresses\n    └── supervise\n    │   ├── control\n    │   ├── lock\n    │   ├── ok\n    │   ├── pid\n    │   ├── stat\n    │   └── status\n    └── log\n        ├── run\t\t\t\t# exec svlogd /var/log/calico/felix\n        └── supervise\n            ├── control\n            ├── lock\n            ├── ok\n            ├── pid\n            ├── stat\n            └── status\n```\n\n\nfelix 执行命令：\n```shell\n~#: cat /etc/service/enabled/felix/run\n#!/bin/sh\nexec 2\u003e\u00261\n# Felix doesn't understand NODENAME, but the container exports it as a common\n# interface. This ensures Felix gets the right name for the node.\nif [ ! -z $NODENAME ]; then\n    export FELIX_FELIXHOSTNAME=$NODENAME\nfi\nexport FELIX_ETCDADDR=$ETCD_AUTHORITY\nexport FELIX_ETCDENDPOINTS=$ETCD_ENDPOINTS\nexport FELIX_ETCDSCHEME=$ETCD_SCHEME\nexport FELIX_ETCDCAFILE=$ETCD_CA_CERT_FILE\nexport FELIX_ETCDKEYFILE=$ETCD_KEY_FILE\nexport FELIX_ETCDCERTFILE=$ETCD_CERT_FILE\n# Felix hangs if DATASTORETYPE is empty: see projectcalico/felix issue #1156.\nif [ ! -z $DATASTORE_TYPE ]; then\n    export FELIX_DATASTORETYPE=$DATASTORE_TYPE\nfi\nexec calico-node -felix\n```\n\n## calico 架构\n![upgit_20221116_1668569857.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668569857.png)\n\n可以看到容器中运行的四个主要进程为：\n-   `calico-node -felix`\n-   `calico-node -confd`\n-   `bird -R -s /var/run/calico/bird.ctl -d -c /etc/calico/confd/config/bird.cfg`\n-   `bird6 -R -s /var/run/calico/bird6.ctl -d -c /etc/calico/confd/config/bird6.cfg`\n\n1.  bird 作为 BGP Client，主要负责路由信息分发，当 Felix 将路由插入Linux内核 FIB 时，BGP 客户端将接收它们并将它们分发到集群中的其他工作节点\n2.  felix 作为 Calico 的核心 agent，运行在每台 workload 节点，主要负责配置路由及 ACLs 等信息，确保 endpoint 的连通状态\n3.  k8s 中的 calico 的存储配为 \"datastore_type\": \"kubernetes\"，因此就没有 etcd 组件\n4.  架构图中少了 confd 组件，confd 负责读取配置，并将配置写入 bird，比如 `/etc/calico/confd/config/` 文件中的 bird.cfg、bird_aggr.cfg、bird_ipam.cfg 文件都是 confd 组件写进去的\n\n## 启动命令分析\n\n### calico-node -startup\n\n### calico-node -felix\n\n### calico-node -confd\n\n### calico-node -allocate-tunnel-addrs\n\n### calico-node -monitor-addresses\n\n### calico-node -monitor-token\n\n  \n\n参考： [http://www.asznl.com/post/86](http://www.asznl.com/post/86)\n","lastmodified":"2025-03-26T03:48:43.136318693Z","tags":null},"/%E7%BB%84%E4%BB%B6+%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86":{"title":"组件+实现原理","content":"loxilb 起初是一个旨在简化边缘云原生/Kubernetes工作负载部署的项目。当我们在 AWS/GCP 等公共云中部署服务时，这些服务变得容易被外界访问或导出。公共云提供商通常默认会为这些服务分配负载均衡器实例，以确保一切运行顺畅。\n\n然而，对于本地和边缘部署，默认情况下并没有提供外部负载均衡器类型的服务。长期以来，源自谷歌的 MetalLB 是唯一的选择。但边缘服务完全是另一回事，因为存在许多不同的协议，如 GTP、SCTP、SRv6 等，将所有这些集成到一个无缝工作的解决方案中一直非常困难。\n\nloxilb 开发团队接到了许多希望解决此问题的人的请求。解决问题的第一步显而易见：虽然 Linux 内核提供的网络堆栈非常稳固，但在快速支持各种协议和状态负载均衡的多种组合方面，开发过程的敏捷性却显得不足。我们的搜索引导我们发现了由 Linux 社区开发的优秀技术——eBPF。将新功能引入操作系统内核作为安全沙箱程序的灵活性完全符合我们的设计理念。它也不需要任何专用的 CPU 核心，非常适合设计节能的边缘架构。\n\nloxilb 是什么 \nloxilb 是一个基于 GoLang/eBPF 的开源云原生负载均衡器，旨在实现跨本地、公有云或混合 K8s 环境的广泛兼容性。\n\n\nKubernetes 为 pod 到 pod、pod 到 service 以及来自外部的 service 定义了许多服务结构，例如 cluster-ip、node-port、负载均衡器等。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/e3a232836a2dc482db1faddd91e44360.png)\n\n\n所有这些服务都是由在第4层/第7层运行的负载均衡器/代理提供的。由于 Kubernetes 的高度模块化架构，这些服务可以由不同的软件模块提供。例如，kube-proxy 默认用于提供 cluster-ip 和 node-port 服务。\n\n负载均衡器类型的服务通常由公共云提供商作为托管服务提供。但是，对于本地和自管理集群，只有少数几个好的选择。loxilb 提供负载均衡器类型的服务作为其主要用例。\n\n此外，loxilb 还可以支持 cluster-ip 和 node-port 服务，从而为 Kubernetes 提供端到端的连接。\n\n包含的组件：\n- loxilb\n- kube-loxilb  ccm\n\n\n\n\n实现原理：\n\n\n不适合用于生产，代码上有一些缺陷，没有覆盖到大部分的 os 或者版本兼容性，也没有经过大规模的生产实践。出现问题也不方便排查\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BB%84%E7%BD%91.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\n45.120.216.46 ^ZNmnY1tc\n\n192.168.0.1 ^8cHK23kk\n\n192.168.0.2 ^oyruRy74\n\n169.254.1.250/30 ^6e3LvA2F\n\n169.254.1.249/30 ^3zAp35zx\n\ncloud ^omv5kiNm\n\nAS 100000  10.10.10.10 ^hqh4ITJZ\n\nAS 200000 10.10.10.11 ^FwDCDFHz\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 86,\n\t\t\t\"versionNonce\": 2035406036,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ZNmnY1tc\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -167.25,\n\t\t\t\"y\": -319.49218749999994,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 134,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1525454410,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941058389,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"45.120.216.46\",\n\t\t\t\"rawText\": \"45.120.216.46\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"45.120.216.46\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 3263,\n\t\t\t\"versionNonce\": 906440556,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"t5lRr2TUpGx4AbBtHcHlR\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 4,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -108.68535438014408,\n\t\t\t\"y\": -358.3320777739163,\n\t\t\t\"strokeColor\": \"transparent\",\n\t\t\t\"backgroundColor\": \"#4c6ef5\",\n\t\t\t\"width\": 113.79045745285958,\n\t\t\t\"height\": 50.176544402543314,\n\t\t\t\"seed\": 622327916,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941253694,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.216730742334619,\n\t\t\t\t\t2.288350097457297\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9.8029550721742,\n\t\t\t\t\t3.508398846569264\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16.162114055095657,\n\t\t\t\t\t3.376704768607482\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.403530245666076,\n\t\t\t\t\t1.7865286394877415\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-26.159832835981263,\n\t\t\t\t\t-1.4421975526654478\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28.50159629837151,\n\t\t\t\t\t-5.195787694602615\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-29.47626562952803,\n\t\t\t\t\t-4.3375843267167795\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32.92862056361761,\n\t\t\t\t\t-3.124893758405136\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-36.78804795894365,\n\t\t\t\t\t-3.0732658668884056\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-40.930226967621195,\n\t\t\t\t\t-4.23409611814013\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-43.11486917172556,\n\t\t\t\t\t-5.606789607140641\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44.79637832945903,\n\t\t\t\t\t-7.650978142648697\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-45.15242313812925,\n\t\t\t\t\t-8.835736456454981\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44.89237579222248,\n\t\t\t\t\t-9.996263620099512\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46.13415304454463,\n\t\t\t\t\t-8.716011909774537\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-50.46666354212337,\n\t\t\t\t\t-8.814540265940664\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-55.323882973413504,\n\t\t\t\t\t-10.686409156620527\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-57.62191317804525,\n\t\t\t\t\t-13.385388727932863\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-58.2417969950975,\n\t\t\t\t\t-16.19155141482767\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-57.718930873348654,\n\t\t\t\t\t-18.47808580349684\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-55.79839911061083,\n\t\t\t\t\t-20.35591229199808\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-53.99292791978374,\n\t\t\t\t\t-21.755086476494043\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.068405193130644,\n\t\t\t\t\t-22.755545670024375\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-47.86546694018983,\n\t\t\t\t\t-22.927874924065307\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46.11156271169358,\n\t\t\t\t\t-22.271117565830068\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-47.18532634922474,\n\t\t\t\t\t-23.65045792666352\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46.55637144915008,\n\t\t\t\t\t-26.87583850307952\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44.63468395735822,\n\t\t\t\t\t-30.11736777574133\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-41.63514210320449,\n\t\t\t\t\t-33.153558112786456\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-37.85635291301446,\n\t\t\t\t\t-34.91935404555686\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-33.936127904700015,\n\t\t\t\t\t-35.70407756510126\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28.772481410976155,\n\t\t\t\t\t-35.768296833663484\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-24.98238116805058,\n\t\t\t\t\t-35.08667641398502\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.623745162163203,\n\t\t\t\t\t-33.69431218998021\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20.21451031590078,\n\t\t\t\t\t-32.23764524931964\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20.21105504347105,\n\t\t\t\t\t-33.66217424295307\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18.636006836355733,\n\t\t\t\t\t-36.143530127163004\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.474861493504733,\n\t\t\t\t\t-38.9399502491364\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.339396370804167,\n\t\t\t\t\t-41.14772155865377\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.398161717485863,\n\t\t\t\t\t-43.090364863672804\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.102908588485803,\n\t\t\t\t\t-44.38308759354935\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.3082620302106136,\n\t\t\t\t\t-45.242422649591575\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.511937582134351,\n\t\t\t\t\t-44.643809240679516\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.550745008651376,\n\t\t\t\t\t-43.17324521215441\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.846700635392153,\n\t\t\t\t\t-40.572132372837885\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.45789369790694,\n\t\t\t\t\t-38.711698851262994\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.78263276126296,\n\t\t\t\t\t-36.64500250446427\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.36564445275448,\n\t\t\t\t\t-34.74674166405582\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26.62592925625205,\n\t\t\t\t\t-35.63317499833282\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.36057833404641,\n\t\t\t\t\t-36.300107063402564\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.865308346994425,\n\t\t\t\t\t-36.03096907998044\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.7588602407822,\n\t\t\t\t\t-34.59340281187487\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.3937830074144,\n\t\t\t\t\t-32.19228823018811\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.08390370117297,\n\t\t\t\t\t-29.029337258756655\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.64508363111706,\n\t\t\t\t\t-26.958325453405607\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.12782537680593,\n\t\t\t\t\t-23.89530804442977\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45.071122693282746,\n\t\t\t\t\t-24.75713909255576\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47.5565517825097,\n\t\t\t\t\t-24.609811483399213\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51.29971592247571,\n\t\t\t\t\t-23.39171668161036\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.11465885417563,\n\t\t\t\t\t-21.219071058897995\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t55.54866045776208,\n\t\t\t\t\t-18.10812017090224\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t55.19207634301182,\n\t\t\t\t\t-15.159443041675075\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.62393868075601,\n\t\t\t\t\t-13.204492633002431\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.24687361228784,\n\t\t\t\t\t-12.090517209647274\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50.731200488879125,\n\t\t\t\t\t-12.068212726357856\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.936188547290485,\n\t\t\t\t\t-11.25540445290143\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.43305227963336,\n\t\t\t\t\t-10.052279643036982\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.51548634233667,\n\t\t\t\t\t-7.861227755119515\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.09774437705761,\n\t\t\t\t\t-5.990094995836287\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51.2499758857973,\n\t\t\t\t\t-5.177960267706354\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49.097396764148,\n\t\t\t\t\t-5.041424285218838\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47.24804758504055,\n\t\t\t\t\t-5.378036012851538\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.92048870165567,\n\t\t\t\t\t-7.189479542936468\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45.58031070210281,\n\t\t\t\t\t-5.654585975154021\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.56535421269493,\n\t\t\t\t\t-3.5269814609334844\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43.90110390332923,\n\t\t\t\t\t-2.2750067331647585\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.58553918401084,\n\t\t\t\t\t0.37935791099063465\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.37021708093023,\n\t\t\t\t\t2.051422262829334\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.16990498367596,\n\t\t\t\t\t4.361036009942225\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29.252265943795265,\n\t\t\t\t\t4.934121752951739\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.85777547914401,\n\t\t\t\t\t4.3974432210410015\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.640075815570867,\n\t\t\t\t\t2.9140639495783915\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.790778738448722,\n\t\t\t\t\t0.4431182150383961\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.644553197852673,\n\t\t\t\t\t1.6294908201233511\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.441229701893803,\n\t\t\t\t\t3.0649917479136377\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.47601466359751,\n\t\t\t\t\t3.569003331489867\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.7335376065398975,\n\t\t\t\t\t3.056745288097801\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.0887772424266586,\n\t\t\t\t\t1.377400090097126\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 439,\n\t\t\t\"versionNonce\": 1527182036,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"atlDc8M1LPtq2qq3jEp6L\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -248.409090909091,\n\t\t\t\"y\": -162.8804577989623,\n\t\t\t\"strokeColor\": \"#0000\",\n\t\t\t\"backgroundColor\": \"#0000\",\n\t\t\t\"width\": 77.318181818182,\n\t\t\t\"height\": 97.48814229249031,\n\t\t\t\"seed\": 682218580,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 679,\n\t\t\t\"versionNonce\": 1932874860,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"LEj0bdJjKE9wzBzsNMX26\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -244.72790631236288,\n\t\t\t\"y\": -101.75212983368856,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 71.48422388079133,\n\t\t\t\"height\": 58.52509557491687,\n\t\t\t\"seed\": 1858816748,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"Ny_vezFBqFPEMwWQXauUI\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.2090181984818818,\n\t\t\t\t\t14.840292092211069\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.36916653584128,\n\t\t\t\t\t36.78720293280486\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.23011468990043,\n\t\t\t\t\t16.72145587854774\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71.48422388079133,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.11505734495016,\n\t\t\t\t\t-21.73789264211201\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 529,\n\t\t\t\"versionNonce\": 80312404,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"CcKZUJILA_JD2rSBoeM5W\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -208.56775797499978,\n\t\t\t\"y\": -66.42805429025456,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 8.792168664317967e-14,\n\t\t\t\"height\": 14.213237496765503,\n\t\t\t\"seed\": 781461972,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"Ny_vezFBqFPEMwWQXauUI\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.792168664317967e-14,\n\t\t\t\t\t-14.213237496765503\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 545,\n\t\t\t\"versionNonce\": 552068844,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FckJq6aEWNsR3moPT8fo1\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -244.30986991539746,\n\t\t\t\"y\": -101.3340934367249,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 70.02109649141835,\n\t\t\t\"height\": 20.483783451220813,\n\t\t\t\"seed\": 1400573292,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"Ny_vezFBqFPEMwWQXauUI\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.74211194039572,\n\t\t\t\t\t20.483783451220813\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.02109649141835,\n\t\t\t\t\t1.0450909924092335\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 478,\n\t\t\t\"versionNonce\": 790580692,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"l4rFExipXTIa4jXD11JM6\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -205.43248499777349,\n\t\t\t\"y\": -73.74369123711963,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 16.79997147156209,\n\t\t\t\"height\": 9.405818931683031,\n\t\t\t\"seed\": 2140655444,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"Ny_vezFBqFPEMwWQXauUI\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16.79997147156209,\n\t\t\t\t\t-9.405818931683031\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 791,\n\t\t\t\"versionNonce\": 1336158572,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"MAgZ9iB1ileuXPSPHXBUh\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -185.43833234294289,\n\t\t\t\"y\": -86.72195120969687,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 8.738046505364371,\n\t\t\t\"height\": 8.838483821518082,\n\t\t\t\"seed\": 1108246508,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"Ny_vezFBqFPEMwWQXauUI\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.10043731615362356,\n\t\t\t\t\t3.8166180138373464\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.08092662060516,\n\t\t\t\t\t-1.3716664299134897\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.738046505364371,\n\t\t\t\t\t-5.0218658076807365\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 730,\n\t\t\t\"versionNonce\": 186544980,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Jkb_370HXIjsAIkA4W76D\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -244.88573638059813,\n\t\t\t\"y\": -121.45752469878295,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 71.48422388079133,\n\t\t\t\"height\": 58.525095574916875,\n\t\t\t\"seed\": 202032340,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0Ty8APAjoznHnfjBbXNwC\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.2090181984818818,\n\t\t\t\t\t14.840292092211074\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.36916653584128,\n\t\t\t\t\t36.78720293280485\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.23011468990043,\n\t\t\t\t\t16.721455878547747\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71.48422388079133,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.11505734495016,\n\t\t\t\t\t-21.737892642112026\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 606,\n\t\t\t\"versionNonce\": 313793516,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3SEQP9KNcsnFrWA9TF-p6\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -208.72558804324825,\n\t\t\t\"y\": -86.13344915535251,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 8.792168664317967e-14,\n\t\t\t\"height\": 14.213237496765503,\n\t\t\t\"seed\": 579838572,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0Ty8APAjoznHnfjBbXNwC\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.792168664317967e-14,\n\t\t\t\t\t-14.213237496765503\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 622,\n\t\t\t\"versionNonce\": 924641492,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0J1ehAkH8yfvxyrY9gAZY\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -244.4676999836403,\n\t\t\t\"y\": -121.0394883018198,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 70.02109649141835,\n\t\t\t\"height\": 20.483783451220813,\n\t\t\t\"seed\": 1233324628,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0Ty8APAjoznHnfjBbXNwC\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.74211194039572,\n\t\t\t\t\t20.483783451220813\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.02109649141835,\n\t\t\t\t\t1.0450909924092335\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 552,\n\t\t\t\"versionNonce\": 69320300,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mrNLxxQkf7E4RsGNzD8id\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -205.59031506601684,\n\t\t\t\"y\": -93.44908610221543,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 17.55752867247509,\n\t\t\t\"height\": 9.405818931683012,\n\t\t\t\"seed\": 1271428332,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0Ty8APAjoznHnfjBbXNwC\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.55752867247509,\n\t\t\t\t\t-9.405818931683012\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 864,\n\t\t\t\"versionNonce\": 380677716,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"TcYNEkJev-iRdOyclm9Zx\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -185.02799451049972,\n\t\t\t\"y\": -106.9955139754768,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 7.393382473743931,\n\t\t\t\"height\": 8.435084612031666,\n\t\t\t\"seed\": 181837780,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0Ty8APAjoznHnfjBbXNwC\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.10043731615362356,\n\t\t\t\t\t3.8166180138373447\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.224886983573539,\n\t\t\t\t\t-0.4000993197426678\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.393382473743931,\n\t\t\t\t\t-4.618466598194321\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 761,\n\t\t\t\"versionNonce\": 1823936748,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"_E0LISrulU0SbPVqj6X-q\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -245.04356644884606,\n\t\t\t\"y\": -140.89398675755382,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 71.48422388079133,\n\t\t\t\"height\": 58.525095574916875,\n\t\t\t\"seed\": 725809004,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"2k3I4xMp3c4a0Ddz36NSx\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.2090181984818818,\n\t\t\t\t\t14.840292092211074\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.36916653584128,\n\t\t\t\t\t36.78720293280485\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.23011468990043,\n\t\t\t\t\t16.721455878547747\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71.48422388079133,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.11505734495016,\n\t\t\t\t\t-21.737892642112026\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 637,\n\t\t\t\"versionNonce\": 716162004,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ejbgJQTIAkZp4g6khRMuY\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -208.88341811148172,\n\t\t\t\"y\": -105.5699112141244,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 8.792168664317967e-14,\n\t\t\t\"height\": 14.213237496765503,\n\t\t\t\"seed\": 1478198612,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"2k3I4xMp3c4a0Ddz36NSx\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.792168664317967e-14,\n\t\t\t\t\t-14.213237496765503\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 653,\n\t\t\t\"versionNonce\": 1811813228,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mcYZx4WrFeYfzpVnPS9Mx\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -244.6255300518743,\n\t\t\t\"y\": -140.47595036059144,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 70.02109649141835,\n\t\t\t\"height\": 20.483783451220813,\n\t\t\t\"seed\": 1833511404,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"2k3I4xMp3c4a0Ddz36NSx\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.74211194039572,\n\t\t\t\t\t20.483783451220813\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.02109649141835,\n\t\t\t\t\t1.0450909924092335\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 583,\n\t\t\t\"versionNonce\": 1764763988,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5fMlXHpUR31CyA7qPEKTh\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -205.7481451342549,\n\t\t\t\"y\": -112.88554816098872,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 17.55752867247509,\n\t\t\t\"height\": 9.405818931683012,\n\t\t\t\"seed\": 1185397460,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"2k3I4xMp3c4a0Ddz36NSx\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.55752867247509,\n\t\t\t\t\t-9.405818931683012\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 889,\n\t\t\t\"versionNonce\": 541115884,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"VZFFecSn46YrXT-nfT8YG\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -185.18582457874209,\n\t\t\t\"y\": -126.4319760342483,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 8.065714489554056,\n\t\t\t\"height\": 8.300618208869732,\n\t\t\t\"seed\": 618990700,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"2k3I4xMp3c4a0Ddz36NSx\",\n\t\t\t\t\"X07Z7xMtD857_pZPFTL4l\",\n\t\t\t\t\"zZ4Yb0W5GxSWQ4fXF29jr\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.10043731615362356,\n\t\t\t\t\t3.8166180138373447\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.628286193059492,\n\t\t\t\t\t-0.26563291658042865\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.065714489554056,\n\t\t\t\t\t-4.4840001950323884\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2940,\n\t\t\t\"versionNonce\": 361225940,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"PzriWDv1TErBRNZQLxBMD\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -142.85383040006124,\n\t\t\t\"y\": -271.8691348307059,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 82.41909999259038,\n\t\t\t\"height\": 51.90458747264764,\n\t\t\t\"seed\": 925794516,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.263056896168563,\n\t\t\t\t\t3.8891045368552253\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.562218783618921,\n\t\t\t\t\t9.236623275031508\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.965683602947778,\n\t\t\t\t\t21.6144463682926\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.393295099603462,\n\t\t\t\t\t28.121217420339203\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.4597556469928976,\n\t\t\t\t\t33.132179035134115\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.080554203367185,\n\t\t\t\t\t38.27385113113785\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.979975232692777,\n\t\t\t\t\t41.57298494550241\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.98839872760582,\n\t\t\t\t\t43.82721651148629\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.254036113072715,\n\t\t\t\t\t45.32302594873841\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46.220511611089634,\n\t\t\t\t\t44.799492645700276\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t59.60800607449558,\n\t\t\t\t\t41.36248591466106\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.34178023245198,\n\t\t\t\t\t35.33536791517793\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76.88371077764185,\n\t\t\t\t\t27.483262666719778\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.85688120897144,\n\t\t\t\t\t21.46486542456771\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.8194859730401,\n\t\t\t\t\t3.851709300923967\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74.94005280632962,\n\t\t\t\t\t0.07479047186251794\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65.06771052046592,\n\t\t\t\t\t-1.4958094372521877\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.032884844383384,\n\t\t\t\t\t-6.581561523909226\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 1105,\n\t\t\t\"versionNonce\": 1317611628,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mzClvEaxHJVV4EUwSfN2G\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -147.73831448232846,\n\t\t\t\"y\": -293.4112579713444,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 82.97662896465694,\n\t\t\t\"height\": 52.13575802204088,\n\t\t\t\"seed\": 2039850604,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2330,\n\t\t\t\"versionNonce\": 407692372,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"HWDc8U2e5QGQKQvsk9h4C\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 3.141592653589793,\n\t\t\t\"x\": -117.34430136663107,\n\t\t\t\"y\": -270.94289346377406,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 20.360567490766464,\n\t\t\t\"height\": 15.469957396649688,\n\t\t\t\"seed\": 1355761236,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"bEBs2N3l0Ee-9wfi5xdLo\",\n\t\t\t\t\"uHe9CFzqgvpNdAYm3NcZ0\",\n\t\t\t\t\"EpyvbSzAnYgz0MbQ9WghX\",\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9.455704368768428,\n\t\t\t\t\t-7.66384686585188\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.245371220763152,\n\t\t\t\t\t-4.88690867413981\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.35050952124113,\n\t\t\t\t\t-15.469957396649688\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.0190934898237074,\n\t\t\t\t\t-14.49729280245051\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5.500521587033855,\n\t\t\t\t\t-11.041970772852789\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.010057969525337,\n\t\t\t\t\t-2.8750268125880125\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2185,\n\t\t\t\"versionNonce\": 178338540,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"4iGJHUfU2OiCmVrtH5znu\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -88.455916009366,\n\t\t\t\"y\": -248.8422294941729,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464995,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 1533933804,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"_MYhwIAfuK8PvFLSVIbWl\",\n\t\t\t\t\"MDDsEuPHSTpmZcDWoE_C6\",\n\t\t\t\t\"ao96_OyQnLBWCfUwcf63H\",\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.415734979873523,\n\t\t\t\t\t-8.170334762499595\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.116199399576256,\n\t\t\t\t\t-3.958813102304104\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.21937961143986,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.136246972718653,\n\t\t\t\t\t-14.876515063028718\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.53421325540915,\n\t\t\t\t\t-11.485544717779163\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.452348007025134,\n\t\t\t\t\t-4.089993444974253\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2399,\n\t\t\t\"versionNonce\": 1465203156,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wl2yr0BvQ-vsHYv3Djce-\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 3.141592653589793,\n\t\t\t\"x\": -126.06027604189823,\n\t\t\t\"y\": -249.64311994331234,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464992,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 1429953492,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"jd6jlioR3UQkucGmbQVsD\",\n\t\t\t\t\"TpT8C3UMxKlXygsUrqmkC\",\n\t\t\t\t\"Sis5DAdI64aiokDIZ6G9G\",\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.415734979873497,\n\t\t\t\t\t-8.170334762499614\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.11619939957623,\n\t\t\t\t\t-3.9588131023041018\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.219379611439848,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.1362469727186317,\n\t\t\t\t\t-14.876515063028702\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.534213255409135,\n\t\t\t\t\t-11.485544717779138\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.4523480070251455,\n\t\t\t\t\t-4.089993444974279\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2444,\n\t\t\t\"versionNonce\": 1595080044,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"m0Qb15zETBQd4ywldh_7x\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -101.00023727225046,\n\t\t\t\"y\": -269.42439829939997,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464992,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 865598316,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"0p08aln1cOPYu7-L_qd3i\",\n\t\t\t\t\"mYCh0p1nOajhnb9pJ8DRI\",\n\t\t\t\t\"yvAhcy5YjkzwQDcJEIHF2\",\n\t\t\t\t\"QRmwbehXftGGUjrpC_AgC\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.415734979873497,\n\t\t\t\t\t-8.170334762499614\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.11619939957623,\n\t\t\t\t\t-3.9588131023041018\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.219379611439848,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.1362469727186317,\n\t\t\t\t\t-14.876515063028702\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.534213255409135,\n\t\t\t\t\t-11.485544717779138\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.4523480070251455,\n\t\t\t\t\t-4.089993444974279\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2972,\n\t\t\t\"versionNonce\": 230088532,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"P0ZVq0HJRwAdYraahcWX_\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -12.853830400061241,\n\t\t\t\"y\": -127.92040064198994,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 82.41909999259038,\n\t\t\t\"height\": 51.90458747264764,\n\t\t\t\"seed\": 1329102828,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.263056896168563,\n\t\t\t\t\t3.8891045368552253\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.562218783618921,\n\t\t\t\t\t9.236623275031508\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.965683602947778,\n\t\t\t\t\t21.6144463682926\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.393295099603462,\n\t\t\t\t\t28.121217420339203\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.4597556469928976,\n\t\t\t\t\t33.132179035134115\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.080554203367185,\n\t\t\t\t\t38.27385113113785\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.979975232692777,\n\t\t\t\t\t41.57298494550241\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.98839872760582,\n\t\t\t\t\t43.82721651148629\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.254036113072715,\n\t\t\t\t\t45.32302594873841\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46.220511611089634,\n\t\t\t\t\t44.799492645700276\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t59.60800607449558,\n\t\t\t\t\t41.36248591466106\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.34178023245198,\n\t\t\t\t\t35.33536791517793\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76.88371077764185,\n\t\t\t\t\t27.483262666719778\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.85688120897144,\n\t\t\t\t\t21.46486542456771\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.8194859730401,\n\t\t\t\t\t3.851709300923967\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74.94005280632962,\n\t\t\t\t\t0.07479047186251794\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65.06771052046592,\n\t\t\t\t\t-1.4958094372521877\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.032884844383384,\n\t\t\t\t\t-6.581561523909226\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ellipse\",\n\t\t\t\"version\": 1137,\n\t\t\t\"versionNonce\": 1965584364,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"NAyZzkykTo_JisCMT5vTq\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 2,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -17.738314482328462,\n\t\t\t\"y\": -149.46252378262847,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#ced4da\",\n\t\t\t\"width\": 82.97662896465694,\n\t\t\t\"height\": 52.13575802204088,\n\t\t\t\"seed\": 1048626388,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2362,\n\t\t\t\"versionNonce\": 600298708,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3Iav5nH6tIeTRk6nooZcP\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 3.141592653589793,\n\t\t\t\"x\": 12.655698633368928,\n\t\t\t\"y\": -126.99415927505805,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 20.360567490766464,\n\t\t\t\"height\": 15.469957396649688,\n\t\t\t\"seed\": 2054791788,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"rZ88gk7bv4OByaugeXqDP\",\n\t\t\t\t\"SE0RLSOeZw7ZKf5iUEo-h\",\n\t\t\t\t\"7WrbKbApIpOcpCJ-OwGLX\",\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9.455704368768428,\n\t\t\t\t\t-7.66384686585188\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.245371220763152,\n\t\t\t\t\t-4.88690867413981\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.35050952124113,\n\t\t\t\t\t-15.469957396649688\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.0190934898237074,\n\t\t\t\t\t-14.49729280245051\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5.500521587033855,\n\t\t\t\t\t-11.041970772852789\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.010057969525337,\n\t\t\t\t\t-2.8750268125880125\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2216,\n\t\t\t\"versionNonce\": 1022071404,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mOZ_1NgxYaRZPMaHJ2B8c\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 41.54408399063399,\n\t\t\t\"y\": -104.89349530545695,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464992,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 1027148372,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"wwti91XQeHXkERTGId1Dz\",\n\t\t\t\t\"WkSDaxY_yHtlQyxcPw_yy\",\n\t\t\t\t\"PWL8ossu2Bqlgj9LCF3Jv\",\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.415734979873523,\n\t\t\t\t\t-8.170334762499595\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.116199399576256,\n\t\t\t\t\t-3.958813102304104\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.21937961143986,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.136246972718653,\n\t\t\t\t\t-14.876515063028718\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.53421325540915,\n\t\t\t\t\t-11.485544717779163\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.452348007025134,\n\t\t\t\t\t-4.089993444974253\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2431,\n\t\t\t\"versionNonce\": 119413332,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"I20CxGSHxJMcz9hy6ccgc\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 3.141592653589793,\n\t\t\t\"x\": 3.939723958101766,\n\t\t\t\"y\": -105.69438575459634,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464992,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 376599788,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"72ENXDfSNdkY4YMhLXIbU\",\n\t\t\t\t\"yTULtFAM2bPAOyymKAh4R\",\n\t\t\t\t\"Mh6baXZUmyVB4MLs4ygtf\",\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.415734979873497,\n\t\t\t\t\t-8.170334762499614\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.11619939957623,\n\t\t\t\t\t-3.9588131023041018\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.219379611439848,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.1362469727186317,\n\t\t\t\t\t-14.876515063028702\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.534213255409135,\n\t\t\t\t\t-11.485544717779138\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.4523480070251455,\n\t\t\t\t\t-4.089993444974279\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 2476,\n\t\t\t\"versionNonce\": 354837740,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ECz4q8W2VGb2d4TYnbarT\",\n\t\t\t\"fillStyle\": \"solid\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 28.999762727749555,\n\t\t\t\"y\": -125.47566411068402,\n\t\t\t\"strokeColor\": \"#495057\",\n\t\t\t\"backgroundColor\": \"#495057\",\n\t\t\t\"width\": 19.671727618464992,\n\t\t\t\"height\": 15.831064817451434,\n\t\t\t\"seed\": 399286228,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"SHbLSte5xCdNtCoSKGRPy\",\n\t\t\t\t\"g24NALUJAQXt3txaQd5yP\",\n\t\t\t\t\"pAE2G6RlgnBWIzq3EezHc\",\n\t\t\t\t\"fwzSJmLOjzIwAXg-dWws7\",\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.415734979873497,\n\t\t\t\t\t-8.170334762499614\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.11619939957623,\n\t\t\t\t\t-3.9588131023041018\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.219379611439848,\n\t\t\t\t\t-15.831064817451434\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.1362469727186317,\n\t\t\t\t\t-14.876515063028702\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.534213255409135,\n\t\t\t\t\t-11.485544717779138\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.4523480070251455,\n\t\t\t\t\t-4.089993444974279\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 231,\n\t\t\t\"versionNonce\": 42971092,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jboZH5XOzBHmzP2A9Rc7r\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -179.75,\n\t\t\t\"y\": -151.48828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56,\n\t\t\t\"height\": 71,\n\t\t\t\"seed\": 747190380,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56,\n\t\t\t\t\t-71\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 299,\n\t\t\t\"versionNonce\": 1935861612,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GC0yOQUbVU2o3vVW4aeXa\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -5.634477272504,\n\t\t\t\"y\": -148.11070229103322,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 73.5,\n\t\t\t\"height\": 78.5,\n\t\t\t\"seed\": 1421800020,\n\t\t\t\"groupIds\": [\n\t\t\t\t\"_ey7TpMD_urvrH9WoVlLd\"\n\t\t\t],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941237269,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-73.5,\n\t\t\t\t\t-78.5\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 369,\n\t\t\t\"versionNonce\": 1174967892,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8cHK23kk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -185.25,\n\t\t\t\"y\": -231.98828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 60,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 1344836716,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675955898318,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"192.168.0.1\",\n\t\t\t\"rawText\": \"192.168.0.1\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.1\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 530,\n\t\t\t\"versionNonce\": 1831971052,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"oyruRy74\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -242.25,\n\t\t\t\"y\": -174.48828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 65,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 1836470252,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675955898320,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"192.168.0.2\",\n\t\t\t\"rawText\": \"192.168.0.2\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.2\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 419,\n\t\t\t\"versionNonce\": 1992993748,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"6e3LvA2F\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -76.25,\n\t\t\t\"y\": -236.48828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 99,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 396743380,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675955898322,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.250/30\",\n\t\t\t\"rawText\": \"169.254.1.250/30\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.250/30\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 464,\n\t\t\t\"versionNonce\": 828746604,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3zAp35zx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -1.25,\n\t\t\t\"y\": -163.98828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 99,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 768367188,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675955898323,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.249/30\",\n\t\t\t\"rawText\": \"169.254.1.249/30\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.249/30\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"line\",\n\t\t\t\"version\": 65,\n\t\t\t\"versionNonce\": 465900012,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0LNpt5_30wfb7gugWmI0T\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -106.5795454545455,\n\t\t\t\"y\": -321.2679256453449,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 2.5,\n\t\t\t\"height\": 34,\n\t\t\t\"seed\": 1266926060,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941250049,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": null,\n\t\t\t\"endBinding\": null,\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t-34\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 31,\n\t\t\t\"versionNonce\": 1215607788,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"omv5kiNm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -133.0795454545455,\n\t\t\t\"y\": -387.7679256453449,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 50,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 250315604,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1675941261876,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"cloud\",\n\t\t\t\"rawText\": \"cloud\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"cloud\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 567,\n\t\t\t\"versionNonce\": 1688368492,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hqh4ITJZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -53.454545454545496,\n\t\t\t\"y\": -272.7679256453449,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 130,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 1610953556,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676021766993,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"AS 100000  10.10.10.10\",\n\t\t\t\"rawText\": \"AS 100000  10.10.10.10\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 100000  10.10.10.10\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 516,\n\t\t\t\"versionNonce\": 888190932,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FwDCDFHz\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 73.5454545454545,\n\t\t\t\"y\": -128.26792564534492,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 125,\n\t\t\t\"height\": 14,\n\t\t\t\"seed\": 387335764,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676021771348,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 11.621621621621623,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"AS 200000 10.10.10.11\",\n\t\t\t\"rawText\": \"AS 200000 10.10.10.11\",\n\t\t\t\"baseline\": 10,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 200000 10.10.10.11\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#c92a2a\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 1,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"scrollX\": 372.05681818181824,\n\t\t\"scrollY\": 476.2757381453449,\n\t\t\"zoom\": {\n\t\t\t\"value\": 2\n\t\t},\n\t\t\"currentItemRoundness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {},\n\t\t\"currentStrokeOptions\": null,\n\t\t\"previousGridSize\": null\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/%E7%BD%91%E5%8D%A1%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99":{"title":"网卡命名规则","content":"\nGRUB_CMDLINE_LINUX_DEFAULT 有2个参数，决定网卡名字怎么显示：\n- biosdevname=1:\n\t- em1 板载网卡\n\t- p3p4 pci网卡\n- net.ifnames=1\n\t- eno1 板载网卡\n\t- enp51s0f1  pci网卡\n\t- ens1 能热插拔的网卡\n\n**组合的情况**\n\n| |biosdevname=1|biosdevname=0|\n|---|---|---|\n|net.ifnames=1|enp51s0f1|enp51s0f1|\n|net.ifnames=0|p3p4|eth0|\n通过修改 grub 来修改网卡命名：\n```bash\nvim /etc/default/grub\n\tGRUB_CMDLINE_LINUX=\"\"\n\tto\n\tGRUB_CMDLINE_LINUX=\"net.ifnames=0 biosdevname=0\"\nupdate-grub\n```\n\n\n**自定义网卡名称：**\n自定义的方式， 覆盖上述规则，自己根据mac地址命名：\ncat /etc/udev/rules.d/70-persistent-net.rules\n\nSUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"24:6e:96:31:32:c0\", KERNEL==\"*\", NAME=\"eth10\"\n\n配置静态 ip\n```bash\ncat /etc/network/interfaces\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n\nsource /etc/network/interfaces.d/*\n \n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# mgmt network\nauto eth0\niface eth0 inet static\n  address 172.31.50.50\n  netmask 255.255.255.0\n  gateway 172.31.50.1\n\nauto eth1\niface eth1 inet static\n  address 172.31.11.10\n  netmask 255.255.255.0\n#  gateway 172.31.11.254\n```\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BD%91%E5%8D%A1%E5%A4%9A%E9%98%9F%E5%88%97-+-%E4%B8%AD%E6%96%AD%E7%BB%91%E5%AE%9A":{"title":"","content":"#网卡多队列 #network #irqbalance\n\n单CPU处理网络IO存在瓶颈, 目前经常使用网卡多队列提高性能.\n\n通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.  \n一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈. 所以网卡开发了多队列功能, 即一个网卡有多个队列, 收到的包根据TCP四元组信息hash后放入其中一个队列, 后面该链接的所有包都放入该队列. 每个队列对应不同的中断, 使用irqbalance将不同的中断绑定到不同的核. 充分利用了多核并行处理特性. 提高了效率.\n\n### 环形队列\nringbuffer是网卡收发报文的缓冲区。ring的意思就是环形，数据往环里可以不停写入，如果到了头，就会再写一圈，把老的数据覆盖了。\n报文到达这个缓冲区后，如果没有及时被cpu处理，就会积累，超过buffer大小后，就会覆盖之前的数据，导致丢包。\nringbuffer越大越不容易写满，丢包概率就越低，但是cpu处理到报文的响应时间就越长，所以网络延时就会变高。\n\nethtool -G eth0 rx 8192  tx 8192\n```bash\nroot@pekt3dr01n07:~# ethtool -g enp3s0f0\nRing parameters for enp3s0f0:\nPre-set maximums:\nRX:     8192\nRX Mini:    0\nRX Jumbo:   0\nTX:     8192\nCurrent hardware settings:\nRX:     8192\nRX Mini:    0\nRX Jumbo:   0\nTX:     8192\n\nroot@pekt3dr01n08:~# ethtool -g enp66s0f0\nRing parameters for enp66s0f0:\nPre-set maximums:\nRX:     8192\nRX Mini:    0\nRX Jumbo:   0\nTX:     8192\nCurrent hardware settings:\nRX:     1024\nRX Mini:    0\nRX Jumbo:   0\nTX:     1024\n\n\nroot@pekt3dr01n07:~# iperf -c pekt3dr01n08 -i 1 -t 3 -P 1\n------------------------------------------------------------\nClient connecting to pekt3dr01n08, TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  3] local 10.16.13.25 port 41378 connected with 10.16.13.26 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0- 1.0 sec   285 MBytes  2.39 Gbits/sec\n[  3]  1.0- 2.0 sec  62.2 MBytes   522 Mbits/sec\n[  3]  2.0- 3.0 sec  32.9 MBytes   276 Mbits/sec\n[  3]  0.0- 3.0 sec   381 MBytes  1.06 Gbits/sec\n# 调整大小后再测试，速度恢复正常\n\nroot@pekt3dr01n08:~# ethtool -G enp66s0f0 rx 8192 tx 8192\n# 虽然是25G网卡，由于这台服务器比较老（E5-2620），而且主频低，所以只能到12G带宽\nroot@pekt3dr01n07:~# iperf -c pekt3dr01n08 -i 1 -t 3 -P 1\n------------------------------------------------------------\nClient connecting to pekt3dr01n08, TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  3] local 10.16.13.25 port 42686 connected with 10.16.13.26 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0- 1.0 sec  1.42 GBytes  12.2 Gbits/sec\n[  3]  1.0- 2.0 sec  1.41 GBytes  12.2 Gbits/sec\n[  3]  2.0- 3.0 sec  1.27 GBytes  10.9 Gbits/sec\n[  3]  0.0- 3.0 sec  4.11 GBytes  11.8 Gbits/sec\n```\n\n\n### 网卡多队列\nethtool -l eth0 查看主网卡支持多队列的情况\nethtool -L eth0 combined 2\n\n### 网络中断 - 中断绑定\n对于实时环境，我们需要消除或者最小化事件响应的延迟。要想做到这一点，需要将不同的中断响应（IRQs）和用户进程绑定到不同的CPU核心上，使他们彼此隔离。\n网卡与操作系统的交互一般有两种方式：\n- IRQ（Interrupt Request 中断请求）：网卡在收到了网络信号之后，主动发送中断到CPU。而CPU将会立即停下手边的活以便对这个中断信号进行分析；\n- DMA（Direct Memory Access 直接存储器访问）：允许硬件在无 CPU 干预的情况下将数据缓存在指定的内存空间内，在CPU合适的时候才处理；\n现在的对称多核处理器（SMP）上，一块网卡的IRQ还是只有一个CPU来响应，其它CPU无法参与，如果这个CPU还要忙其它的中断（其它网卡或者其它使用中断的外设（比如磁盘）），那么就会形成瓶颈。\n\n\u003e 默认情况下，Linux的中断响应会被平均分配到所有CPU核心上，这样势必会发生写新的数据和指令缓存，而且还会与CPU核心上原来存在的进程产生冲突。\n\n这就会延迟中断响应，影响程序的处理时间。\n\n\u003e解决方案：\n\t\t为了解决这个问题，可以将中断（或进程）绑定到指定的CPU核心上，这样该中断（或进程）所需要的代码和数据结构就有更高的可能性位于本地CPU的数据和指令缓存内，而不必进行新的写缓存，从而提高中断响应（或进程）的处理速度。\n\t\t此外，将某一个进程及其相关的中断绑定在同一个CPU核心上，使它们共享缓存线路，可以提高程序性能。还有，将彼此不相关的中断与进程绑定到不同的CPU核心上，可以避免冲突，也可以提高程序性能。\n\n#### 关闭 irqbalance 服务\nirqbalance - 中断平衡守护进程会周期性地将中断平均地公平地分配给各个CPU核心，它默认是开启的。为了实现中断绑定，首先需要将这个守护进程关闭。这样中断响应默认都会由 **CPU0** 核心处理。\n**systemctl stop irqbalance**\n**systemctl disable irqbalance**\n查看 irqbalance 服务：systemctl status irqbalance\n设置亲和性：set_irq_affinity -x local eth10\n\n\n#### 检查中断与CPU 关系\n- [Linux 网卡多队列介绍 | xixiliguo](https://xixiliguo.github.io/linux/multi-queue.html)\n- [[Linux 性能调优] 网卡中断与CPU的绑定问题 - 巴蛮子 - 博客园 (cnblogs.com)](https://www.cnblogs.com/bamanzi/p/linux-irq-and-cpu-affinity.html)\n\n\n![upgit_20221208_1670493746.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221208_1670493746.png)\n\n![upgit_20221208_1670494679.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221208_1670494679.png)\n\n![upgit_20221208_1670494855.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221208_1670494855.png)\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/%E7%BD%91%E5%8D%A1-vlan":{"title":"网卡 vlan","content":"\n#### 添加 vlan 子接口\n##### **使用 ip 命令**\n\tip link add link enp125s0f0 name enp125s0f0.100 type vlan id 100\n##### **使用 vconfig 命令**\n- 相关模块\n\tlsmod |grep -i 8021q\n- 相关工具包\n\tapt-get install vlan or yum install vconfig\n\tmodprobe 8021q \n- 添加 vlan \n\tvconfig add enp8s0f1 100\n- 在enp8s0f1接口上配置两个VLAN\n\tvconfig set_flag enp8s0f1.100 1 1\n\tvconfig set_flag enp8s0f1.200 1 1\n- 删除\n\tvconfig rem enp8s0f1.100\n\n\n#### 重启网络\n- /etc/init.d/network restart\n- service network restart\n- netplan apply\n\n\n#### 查看网段内未使用的 ip 地址\n```bash\n#!/bin/bash\nip=192.168.1.\nfor((a=1;a\u003c=254;a++))\ndo\n  b=${ip}${a}\n  ping -c 3 -i 0.2 -w 3  $b  \u0026\u003e\u003e /dev/null\nif [ $? -eq 0 ]\nthen\n    echo \"host $a is up\" \u0026\u003e\u003eup.txt\nelse\n    echo \"host $a is down\" \u0026\u003e\u003edown.txt\nfi\ndone\n```\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%8C%85":{"title":"网络工具包","content":"相关网络工具包：\n- ping包：`apt-get install inetutils-ping`\n- ifconfig/netstat：`apt-get install net-tools`\n- ip 命令：`apt-get install iproute2`\n- 抓包：`sudo apt-get install wireshark` + `sudo usermod -a -G wireshark $USER`\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E8%AF%8A%E6%96%AD":{"title":"网络工具诊断","content":"\n### 定位问题\n出现问题时先定位是哪一部分发生了问题，dns 解析、kube-proxy、cni、底层网络\n[[网络排查]]\n\n在 pod 内通过 service name 进行访问其他业务服务时，出现访问不了的问题的排查思路\n1. 排查 dns\n进入容器中使用 ping 或者 nslookup 查看域名解析是否正常，如果解析需要排查 DNS组件，有关 DNS 调试参考[调试 DNS 问题 | Kubernetes](https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/dns-debugging-resolution/)；如果解析正常进一步检查2\n\n2. 排查 kube-proxy\n\n3. 排查 cni \n\n4. 排查操作系统以及底层网络\n\n### 排查问题\n\n需要用到的网络排查工具：\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/970fc812d4503e7157e5511a3095590e.png)\n\n\n#### 使用工具进行网络诊断\n- 使用 ping 命令检测 icmp 是否可通\n- 使用 nc、curl 检测四层是否可通\n- 使用 dig/nsloopup 检测 dns 是否可用\n- 使用 tcpdump 抓包分析\n\n如果对应 pod 容器中，没有相关的网络工具，可以在宿主机上进入到对应 pod 容器的网络空间操作\n1. kubectl get pod -n xxx -o wide 获取到对应 pod 调度到的节点信息\n2. ssh 进入对应的节点中，docker ps | grep xxx 获取对应docker容器id\n3. docker inspect xxx | grep Pid 获取到对应容器的 pid\n4. nsenter -u -n -t xxx bash 进入对应容器的网络空间，相当于在容器中使用主机上提供的网络工具\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/c5b4e83904fd14c1c4264a6ecbb49fc3.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/59e4e34f6a3ee03c64416e170924be5a.png)\n\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A5":{"title":"网络问题","content":"\n# 网络问题定位\n\n## dns 解析\n\n### svc-pod 转发不通(使用svcname 访问)\n\n#### 使用 svcip 可以访问\n- 检查 dns 组件问题\n\n#### 使用 svcip 也不能访问\n- 进一步检查 kube-proxy\n\n## kube-proxy\n\n### svc-pod 转发不通(直接使用 svc ip访问)\n\n#### 直接访问后端 pod-ip 可通\n- 进一步检查 kube-proxy 规则问题\n\n#### 直接访问后端 pod-ip 不通\n- 进一步检查 cni 问题\n\n#### 注意：不要使用 ping 命令测试 svcip icmp 是否连通，应该测试 svc 的四层转发是否连通\n\n## cni\n\n### 跨节点pod-pod不通，pod-node不通\n\n#### 1. 检查 node-node 联通性\n\n#### 2. 如果有的 pod 通，有的不通；排查 networkpolicy\n\n#### 3. cni 查看路由，排查 bgp、calico配置\n- 可以进入calico容器使用 birdcl查看路由等信息\n\n### 同节点 pod-pod不通，pod-node不通\n\n#### cni 查看路由，并且抓包分析","lastmodified":"2025-03-26T03:48:44.147315131Z","tags":null},"/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E8%B7%AF%E5%BE%84":{"title":"网络数据路径","content":"分三类\n- native route\n- tunnel\n- endpoint route\n\n\n### Native Route\n\n主机路由：\n```bash\ndefault via 172.18.0.1 dev eth0 \n10.0.0.0/24 via 172.18.0.3 dev eth0 proto kernel \n10.0.1.0/24 via 10.0.1.236 dev cilium_host proto kernel src 10.0.1.236 \n10.0.1.236 dev cilium_host proto kernel scope link \n172.18.0.0/16 dev eth0 proto kernel scope link src 172.18.0.2 \n```\n\n解释：\n```bash\n# 默认路由 - 到网关\ndefault via 172.18.0.1 dev eth0 \n\n# 到集群其他节点的路由\n10.0.0.0/24 via 172.18.0.3 dev eth0 proto kernel \n\n# 到本地 pod 的路由\n10.0.1.0/24 via 10.0.1.236 dev cilium_host proto kernel src 10.0.1.236 \n10.0.1.236 dev cilium_host proto kernel scope link \n\n# 节点 cidr 路由\n172.18.0.0/16 dev eth0 proto kernel scope link src 172.18.0.2 \n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/3446780407403d41b8b90449b420e3ed.png)\n\n相应容器中的路由以及arp表\n```bash\nbash-5.1# ip r\ndefault via 10.0.1.236 dev eth0 mtu 1500 \n10.0.1.236 dev eth0 scope link\nbash-5.1# \nbash-5.1# ip neigh\n10.0.1.236 dev eth0 lladdr 4a:f4:ca:ee:8d:80 STALE\n```\n### Native Route + enable EndpointRoute\n\n主机路由：\n```bash\ndefault via 172.18.0.1 dev eth0 \n10.0.0.51 dev lxcf5d17172539c proto kernel scope link \n10.0.0.116 dev lxcbe3a9edcc8dd proto kernel scope link \n10.0.0.149 dev lxc219e6218d1fb proto kernel scope link \n10.0.0.192 dev lxc5d7691d16d53 proto kernel scope link \n10.0.0.230 dev lxc888c783463a8 proto kernel scope link \n10.0.0.240 dev lxc_health proto kernel scope link \n\n10.0.1.0/24 via 172.18.0.7 dev eth0 proto kernel \n\n172.18.0.0/16 dev eth0 proto kernel scope link src 172.18.0.6 \n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/faf30707f429d32b637e0e4f852bac84.png)\n\n\n相应容器中的路由以及arp表\n```bash\nbash-5.1# ip r\ndefault via 10.0.0.173 dev eth0 mtu 1500 \n10.0.0.173 dev eth0 scope link \nbash-5.1# \nbash-5.1# ip neigh\n10.0.0.173 dev eth0 lladdr 0a:ed:93:9e:e6:1f STALE\n172.18.0.6 dev eth0 lladdr 0a:ed:93:9e:e6:1f STALE\n```\n### Tunnel Mode\n\n主机路由：\n```bash\ndefault via 172.18.0.1 dev eth0 \n10.0.0.0/24 via 10.0.0.51 dev cilium_host proto kernel src 10.0.0.51 \n10.0.0.51 dev cilium_host proto kernel scope link \n\n10.0.1.0/24 via 10.0.0.51 dev cilium_host proto kernel src 10.0.0.51 mtu 1450\n\n172.18.0.0/16 dev eth0 proto kernel scope link src 172.18.0.4 \n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/820b304df8e96eb137ac2c037f6ad2bc.png)\n\n\n\n相应容器中的路由以及arp表\n```bash\nbash-5.1# ip r\ndefault via 10.0.0.51 dev eth0 mtu 1450 \n10.0.0.51 dev eth0 scope link \nbash-5.1# \nbash-5.1# ip neigh\n10.0.0.51 dev eth0 lladdr 32:a6:25:86:01:1c STALE\n```\n\n\n### Q\u0026A\n1. 容器中的路由表怎么解释？ cilium-host\n2.  arp表项是谁写入的，为什么 endpoint route 开启会多一条到主机的 arp 表项\n3. 可能相关 lxc 网卡的 arp 参数被修改了，arp表项不会删除和新增","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7":{"title":"网络监控工具","content":"\n1. [google/cadvisor: Analyzes resource usage and performance characteristics of running containers. (github.com)](https://github.com/google/cadvisor)\n\t网络资源的使用率\n\n2. [yingyan003/netChecker: netChecker是一个检查k8s集群网络连通性的工具。测试对象是pod-\u003epod，pod-\u003enode，pod-\u003esvc的网络状况 (github.com)](https://github.com/yingyan003/netChecker)\n\t检测网络联通性。测试pod-\u003epod / pod-\u003enode / pod-\u003eservice的网络\n\n3. Sematext - kubernetes 监测工具\n\t可以监测网络吞吐\n\n4. DataDog - kubernetes 可观测性 - 类比 grafana\n[Network Performance Monitoring | Datadog (datadoghq.com)](https://www.datadoghq.com/product/network-monitoring/network-performance-monitoring/)\n\n5. BGPalerter - bgp 检测工具\n\n\n[litmuschaos/litmus: Litmus helps SREs and developers practice chaos engineering in a Cloud-native way. Chaos experiments are published at the ChaosHub (https://hub.litmuschaos.io). Community notes is at https://hackmd.io/a4Zu_sH4TZGeih-xCimi3Q (github.com)](https://github.com/litmuschaos/litmus)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB%E7%9A%84%E6%9C%80%E5%B0%8F%E9%85%8D%E7%BD%AE":{"title":"网络隔离的最小配置","content":"客户的疑问：(项目下的网络隔离)\n### 网络隔离的最小配置\n1.这里的网络隔离是针对Pod的吗？\n2.网络隔离的最小配置是什么？\n①如果只通过ingress暴露服务，最小配置是什么？\n②如果只通过LB类型的Service，最小配置？\n③如果只通过NodePort类型的Service，最小配置？\n④上述最小配置后，哪些是可以访问的，哪些是不可访问的，有没有一个表格（类似数据库隔离级别那样的）\n⑤上述暴露方式的流量的具体链路是什么样的，必须包含但不限于以下概念，SLB，Node节点，网关，Ingress，Service，Pod，有没有示意图片。\n\n\n### ks 中网络策略的实现思路\n先介绍一下 ks 中网络策略的实现思路：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/a9a0306c23fa5bc6873e903b0e5ca976.png)\n\nkubesphere 对于 networkpolicy 的实现中主要包含：\n**集群网络策略管理**：主要提供一个原生的 networkpolicy 资源的管理，当 ks 租户网络隔离无法满足用户的全部需求时，可以在此通过 yaml 管理原生的 network policy\n\n**租户网络隔离管理**：分为企业空间网络隔离和项目空间的网络隔离\n- 当开启企业空间网络隔离时，会自动为该企业空间的所有项目创建一条只允许本企业空间访问的入站规则的网络策略，默认不限制出站流量\n- 当开启项目网络隔离时，会自动为该项目创建一条只允许项目访问的入站规则的网络策略\n\t- 项目网络隔离下可以配置白名单列表，内部白名单允许当前项目中的容器组与当前企业空间其他项目中的服务进行通信，外部白名单允许当前项目中的容器组与企业空间外部的特定网段和端口进行通信\n\t- 默认不限制出站流量；如果配置出站白名单，那只会放行白名单上的出站项\n\n出站：即对本项目下的 pod 是否可以访问本项目外的 pod/ip/port 的限制\n入站：即对本项目外的 pod/ip 是否可以访问本项目下的 pod 所提供的服务的限制\n\n### 问题解答\n回答：\n1. 网络隔离是针对与 pod 的，而项目网络隔离会匹配本项目下的所有 pod；也可以认为此处的网络隔离是针对项目的。\n2. 服务通过 ingress、nodeport、lb暴露，表明 service 要给集群外提供服务，如果使用 ks 项目网络隔离进行管理的话，需要配置外部白名单\n\n当我们通过 NodePort、LoadBalancer 暴露 Kubernetes 的 service 时，kube-proxy 会创建相应的 ipvs 和 iptables 规则来转发流量。然而，当外部流量进入集群并根据这些规则被转发时，如果目标 pod 不在本地节点上，就会进行一次源网络地址转换（SNAT），这将导致 TCP 包中的源 IP 地址被替换为节点 IP，从而丢失了客户端的原始 IP。\n\n为了保留客户端的原始 IP，我们可以将 service 的外部访问策略设置为 Local。\n\n#### 配置 ingress 暴露\n当配置 ingress 访问时，集群内部不同的 service 需要注册相应的应用路由，同时 ingress svc 依旧需要通过 loadbalancer 或者 nodeport 对外暴露，访问流量如下图：\n后续我们继续展开对这两种暴露方式的探讨\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/aaa2985a672ee33a153561dae67fba73.png)\n\n#### 配置 NodePort 暴露\n当配置 service 为 NodePort 且配置外部访问策略为 Cluster 时，流量访问如下：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/25ddfe953a46613727ea5c05b9624fc7.png)\n\n当配置 service 为 NodePort 且配置外部访问策略为 Local 时，流量访问如下：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/8868aac8715ef4e08a72b60906420ff1.png)\n\n开启项目网络隔离后，\n- 当外部访问策略为 Cluster ，需要在外部白名单中放行集群的所有节点 ip，缺点是会丢失客户端ip，且由于 SNAT 的缘故无法拦截指定的 ip\n- 当外部访问策略为 Local ，需要在外部白名单中放行可以访问该服务的客户端 ip，缺点需要确保使用运行了 pod 的节点 IP 来访问 service，否则数据包会被丢弃，从而导致访问超时\n#### 配置 LoadBalancer 暴露\n当 service 设置为 LoadBalancer 时，你需要支持配置外部负载均衡器的环境，不同的环境技术实现也会有所不同，下面以 OpenELB 为例说明。\n\n当配置 service 为 LoadBalancer 且配置外部访问策略为 Cluster 时，流量访问如下：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/d6a7c16a22799887430e7aa9bd98e4f6.png)\n\n当配置 service 为 LoadBalancer 且配置外部访问策略为 Local 时，流量访问如下：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/04/9375aa8f402a589354b2bed8a2e1cb59.png)\n\n\n开启项目网络隔离后，\n- 当外部访问策略为 Cluster ，需要在外部白名单中放行集群的所有节点 ip，缺点是会丢失客户端 ip，且由于 SNAT 的缘故无法拦截指定的 ip\n- 当外部访问策略为 Local ，需要在外部白名单中放行可以访问该服务的客户端 ip，OpenELB 只会将访问 loadbalancer serviceip 的流量转发到已经运行了 pod 的节点上\n\n更多技术原理可参考 kubernetes networkpolicy：\n- https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/create-external-load-balancer/\n- https://kubernetes.io/zh-cn/docs/concepts/services-networking/network-policies/ ","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8":{"title":"","content":"#kubernetes  #tools\n\n1. 安装 bash-completion\n2. 应用 kubectl 的 completion\n```bash\nsource \u003c(kubectl completion bash)\necho \"source \u003c(kubectl completion bash)\" \u003e\u003e ~/.bashrc\n```\n","lastmodified":"2025-03-26T03:48:43.130318715Z","tags":null},"/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F":{"title":"自定义环境变量","content":"\n光大不想要 default-ipv4-ippool，他们想把所有的 ippool 命名都统一一下，现在有一个方法：可以通过设置 calico-node 跳过 default ippool 的创建 \n```yaml\nNO_DEFAULT_POOLS=\"true\"\nCALICO_IPV4POOL_CIDR=\"\"\nCALICO_IPV6POOL_CIDR=\"\"\n```\n\n通过设置可以修改默认 ippool 的 nodeSelector\nCALICO_IPV4POOL_NODE_SELECTOR","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E8%AF%AD%E9%9B%80%E5%AF%BC%E5%87%BA%E5%B0%8F%E5%B7%A5%E5%85%B7":{"title":"语雀导出文档小工具","content":"\n# 语雀导出文档小工具\n\n### 功能：\n- 模拟用户浏览器操作一篇一篇导出 markdown 文档\n- 支持将同名的文档导出\n- 支持导出失败重试\n\n我的知识库与导出文件目录\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/91804cc3646d6356cd7458c9a12444fc.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/4b3a4e4207ead71f15600806c12a5c1d.png)\n\n\n### 说明：\n这是一个基于puppeteer 来模拟用户在浏览器的操作一篇一篇的导出语雀文档的工具。\n关于语雀的导出可以详情说明见官方的文档：[如何导入导出知识库](https://www.yuque.com/yuque/thyzgp/import-lake-to-lark) \n\n首先语雀支持导出文档为 markdown 格式。\n单篇导出：支持导出为 markdown、word、pdf、lakebook等\n批量导出：支持导出为 lakebook、pdf 格式。对于超级用户是可以通过创建 token 来使用[官方的 exporter 工具](https://github.com/yuque/yuque-exporter)或者其他基于 api 的工具进行批量导出；超级用户的价格为 299/月。\n\nlakebook 格式为语雀私有的格式：[lakebook 格式说明](https://www.yuque.com/yuque/developer/lt69uo)，语雀也没有相应的工具去支持迁移/导入到其他笔记软件。pdf 估计也不能直接导入其他笔记软件(这个没有研究过就不展开了)。\n因此对于想要迁移自己文档的普通用户以及会员用户来说，你只能一篇一篇导出来完成你的迁移动作，这些用户也大多有上百篇文档，这无疑是劝退。所以我的迁移计划也一再搁置，同时也再等待其他的更友好的导出方式出现。最后还是不想等了，请教 GPT 写了这个工具，确实也怕像我这种白嫖用户之后的迁移的成本越来越大了。\n\n\u003e ps: 本人也不是专门写 nodejs 的，代码可能也是烂成狗屎，请大家不喜勿喷。谢谢！\n\n### 使用：\n\u003e 确保你的环境有 Chromium 浏览器\n\n#### 1. 获取个人文档访问路径\n访问个人账号管理： https://www.yuque.com/settings/account\n个人路径：账号设置 -\u003e 账号管理可以查看已经设置的个人路径 `https://www.yuque.com/xxx`\n\n#### 2. 安装 node 相关的工具\n建议使用 nvm 管理 node，选取下列适合自己的方式安装：\n- github 地址：[nvm-sh/nvm: Node Version Manager](https://github.com/nvm-sh/nvm)\n- gitee 地址：[nvm-cn: 🧊 nvm国内安装工具 (gitee.com)](https://gitee.com/RubyKids/nvm-cn)\n配置 npm 淘宝源：npm config set registry https://registry.npm.taobao.org\n安装 yarn：npm install -g yarn --registry=https://registry.npm.taobao.org\n\n#### 3. 下载代码并运行工具\n**ubuntu**\n```bash\ngit clone https://github.com/renyunkang/yuque-exporter.git\ncd yuque-exporter\nnpm install --registry=https://registry.npm.taobao.org\n# 安装 JSONStream：npm install JSONStream --registry=https://registry.npm.taobao.org\nyarn\n\n# 第一次是需要账号密码去登录的\nACCESSURL=xxx USER=xxx PASSWORD=xxx EXPORT_PATH=/path/to/exporter node main.js\n\n# 登录一次后会保存 cookie，之后会使用cookie登录\nACCESSURL=xxx EXPORT_PATH=/path/to/exporter node main.js\n```\n\nyarn 安装依赖如果下载报错的话，可以依据情况更换源。\n\n**windows**\n```bash\ngit clone https://github.com/renyunkang/yuque-exporter.git\ncd yuque-exporter\nnpm install --registry=https://registry.npm.taobao.org\n# 安装 JSONStream：npm install JSONStream --registry=https://registry.npm.taobao.org\nyarn\n\n# cmd\nset ACCESSURL=\"xxx\"\nset USER=\"xxx\"\nset PASSWORD=\"xxx\"\nset EXPORT_PATH=/path/to/exporter\nnode main.js\n\n# powershell\n$env:ACCESSURL=\"xxx\";$env:USER=\"xxx\";$env:PASSWORD=\"xxx\"; node .\\main.js\n```\n\n### 存在的问题：\n1. 无法获取知识库的目录信息，进一步做层级关系的文档导出存储\n现在普通用户无法获取知识库中的目录信息，因此知识库文档的导出后全部平铺保存到以知识库名称命名的文件夹中。同名的文档会在文档后面追加数字以区分，知识库目录的分级需要自己根据文档的内容进行调整。\n\n解决办法：访问目录的url为 https://www.yuque.com/r/renyunkang/kb/toc, 有兴趣的可以根据 html 的元素的特征来分析。（我个人没有这个需求也就没有太大关注了，如果你有兴趣或者有需求可以试试，类似自动登录时按照元素匹配数据）\n  \n2. 自动登录仅支持账号密码登录\n\n3. 无法保证兼容性，如果之后官方 api 修改后，可以自己根据 api 修改源码\n\n### Q\u0026A\n1.  Could not find Chromium 但是有 chorm 浏览器\n在不同的操作系统上，Puppeteer 默认调用的 Chrome 路径如下：\n-   Windows: C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\n-   macOS: /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\n-   Linux: /usr/bin/google-chrome\n如果主机上对应的可执行文件路径与默认一致但仍然运行失败，可以修改源码手动指定一下\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/eb093fe57cb0b6cc557a9616f5899445.png)\n```js\nconst browser = await puppeteer.launch({ headless: true });\n to\nconst browser = await puppeteer.launch({ headless: true, executablePath: '/usr/bin/google-chrome' });\n```\n\n### 其他\npuppeteer 可以更换为其他的同类型产品，自己动手开发：\n- selenium\n- puppeteer\n- chormdp","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E8%B0%83%E8%AF%95-BPF-%E7%A8%8B%E5%BA%8F":{"title":"调试 BPF 程序","content":"\nI use these three methods:\n1. bpf_printk - so far works best\n2. bpftool - to dump map entries\n3. bpfmon([https://github.com/CrowdStrike/bpfmon-example](https://github.com/CrowdStrike/bpfmon-example)) - to get notifications when map entries are updated.\n\n\n- [Is there a way to debug running eBPF programs?](https://www.reddit.com/r/eBPF/comments/110wpht/is_there_a_way_to_debug_running_ebpf_programs/)\n- [BPF 进阶笔记（四）：调试 BPF 程序](https://arthurchiao.art/blog/bpf-advanced-notes-4-zh/)\n","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8%E7%9A%84%E5%8F%8D%E5%B0%84%E8%A7%84%E5%88%99":{"title":"路由反射器的反射规则","content":"\n**路由反射器的反射规则：**\n\n1、**反射器接收到EBGP邻居通告的BGP路由时候**：当路由反射器接收到来自EBGP邻居通告的BGP路由，会把此路由同时通告给同一cluster内的client邻居，也通告给cluster之外的其他IBGP邻居。而路由中携带的Cluster list和Originator属性只发送给cluster内的client邻居。\n\n2、**反射器接收到cluster内的IBGP邻居发送来的路由时候**：当路由反射器接收到同一cluster内的IBGP邻居发送来的BGP路由时候，反射器把该路由通告给cluster内其他所有client邻居，也通告给cluster外的其他IBGP邻居，这个通告的路由包括了Originator 属性和修改后的Cluster ID属性。如果该反射器存在EBGP邻居的话，反射器同时把该路由通告给所有的EBGP邻居，但不携带任何反射器相关属性。\n\n3、**反射器接收到cluster外的其他IBGP邻居发送的BGP路由时候**：当反射器接收到cluster以外的其他IBGP邻居发送的路由时候，反射器会把该路由通告给自己cluster内所有的client邻居，添加合适的属性。如果该RR存在EBGP邻居的话，则RR同时也把该路由通告给自己所有的EBGP邻居，但不携带反射器相关属性。","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%93%BE%E6%8E%A5":{"title":"运行时链接","content":"\n## 链接\n现代连接器在处理动态库时将链接时路径（Link-time path）和运行时路径（Run-time path）分开，用户可以通过-L指定连接时库的路径，通过-R（或-rpath）指定程序运行时库的路径，大大提高了库应用的灵活性。\n\n\u003e **LIBRARY_PATH**环境变量用于在**程序编译期间**查找动态链接库时指定查找共享库的路径\n\u003e **LD_LIBRARY_PATH**环境变量用于在**程序加载运行期间**查找动态链接库时指定除了系统默认路径之外的其他路径，注意，LD_LIBRARY_PATH中指定的路径会在系统默认路径之前进行查找。\n\nworld.c\n```c\n#include\u003cstdio.h\u003e\nvoid world(void)\n{\n    printf(\"world.\\n\");\n}\n```\n\nhello.c\n```c\n#include \u003cstdio.h\u003e\nvoid world(void);\nvoid hello(void)\n{\n    printf(\"hello\\n\");\n    world();\n}\n```\n\ntest.c\n```c\nvoid main(void)\n{\n    hello();\n}\n```\n\n\n生成动态库 ldd 查看依赖，此时 libhello.so 并未依赖 libworld.so\n`gcc -c hello.c world.c`\n`gcc -shared -o libhello.so hello.o`\n`gcc -shared -o libworld.so world.o`\n\n让hello的动态库，依赖world的动态库\n`gcc -shared -o libhello.so hello.o -lworld -L .`\n\n编译test.c\n`gcc test.c -lhello -lworld -L .`但是此时ldd a.out发现libhello.so找不到，可以设置LD_LIBRARY_PATH可以找到，同时可以使用rpath链接找到\n\n`gcc test.c -lhello -L . -Wl,-rpath .`\n\n## -rpath-link\n-rpath-link和-rpath类似，只不过-rpath-link \u003cdir\u003e指定的是该程序需要的某个动态链接库，如果还需要其他的动态链接库（就象我们这里libalp_media.so还需要其他 的.so一样）的时候，到哪个/哪些目录下去查找需要的.so。而且，和-rpath不同，在-rpath-link中定义的目录，有可能在ldd \u003cexec\u003e的输出中看不见，因为这里定义的目录不是该执行程序本身所需要的。\n\n最后，不管使用了-rpath还是-rpath-link，LD_LIBRARY_PATH还是有效的。","lastmodified":"2025-03-26T03:48:44.148315127Z","tags":null},"/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86":{"title":"","content":"#kube-ovn \n\nkube-ovn 实现跨主机通信的原理\n在 泰山服务器、华为鲲鹏920cpu 的 arm\n\n1. kubectl ko 命令不起作用\n脚本会根据 pod 使用的镜像来筛选出对应的 pod 然后执行对应的命令，因此当命令无法使用时，尝试修改一下脚本中的 REGISTRY \n\n2. 组件\n- 底座 ovn 以及 ovs\ndaemonset：ovs-ovn  -  start-ovs\ndeployment：ovn-central  -  start-db\n\nkube-ovn-controller\nkube-ovn-daemon\n\n\n\n跨主机的通信\n先经过 genev 封装之后进入到 ovn0 网卡之后进入 ovn 中","lastmodified":"2025-03-26T03:48:43.169318577Z","tags":null},"/%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97%E6%8E%92%E6%9F%A5":{"title":"通过事件、日志排查","content":"\n\n## BIRD is not ready:\n输入命令：kubectl describe  pods calico-node-xxx -n kube-system\n```\nEvents:\n  Type     Reason     Age   From               Message\n  ----     ------     ----  ----               -------\n  Normal   Scheduled  36m   default-scheduler  Successfully assigned kube-system/calico-node-xxx to worker1\n  Normal   Pulled     36m   kubelet            Container image \"calico/node:v3.2x.0\" already present on machine\n  Normal   Created    36m   kubelet            Created container calico-node\n  Normal   Started    36m   kubelet            Started container calico-node\n  Warning  Unhealthy  36m   kubelet            Readiness probe failed: calico/node is not ready: BIRD is not ready: Error querying BIRD: unable to connect to BIRDv4 socket: dial unix /var/run/calico/bird.ctl: connect: connection refused\n  Warning  Unhealthy  40s   kubelet            Readiness probe failed: 2022-06-15 08:31:26.232 [INFO][16834] confd/health.go 180: Number of node(s) with BGP peering established = 0\ncalico/node is not ready: BIRD is not ready: BGP not established with xx.xx.xx.xx\n```\n\n出现 bgp peer 无法建立连接\n- 考虑网络联通性的问题\n- 确定 calico 筛选的网卡是否匹配\n\n网络联通性可以先使用 ping 命令检测 icmp 在 node 之间是否可达，使用 netstat 查看 calico 使用的端口有没有监听，或者是否被其他进程占用\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/7b50e44e9f05e4936d29164728629c9d.png)\n\n使用 telnet 或者 nc 连接对端的 179 端口是看是否可通，或者使用 nc 在一个节点上监听某一个端口，在另外一个节点上使用 nc 连接，看两节点是否四层可通。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/1f778e1de4d206a191c75b0c63706e0c.png)\n\n如果不通可能是底层网络的问题或者是防火墙的问题，请参照各自的平台的防火墙来进行检查\n```\n[root@controller ~]# firewall-cmd --permanent --add-port=179/tcp\nsuccess\n[root@controller ~]# firewall-cmd --reload\nsuccess\n[root@controller ~]# firewall-cmd --list-ports\n179/tcp\n```\n\n以上通信没问题，表示网络通信没有问题，进一步排查 calico 的问题\ncalico 默认安装时，使用的网卡是自动检测，因此在多网卡的情况下，calico 可能选择了一张错误的网卡，因此可以在多网卡的环境下通过设置环境变量 IP_AUTODETECTION_METHOD 指定 calico 使用的网卡，如果各个节点的网卡名称不同，可以使用正则表达式匹配，同时也支持其他的配置方法。[Configuring calico/node](https://docs.tigera.io/calico/latest/reference/configure-calico-node#ip-autodetection-methods)\n```\n- name: IP_AUTODETECTION_METHOD\n  value: \"interface=eth*\"\n```\n\n\n### ipam 报错\n具体的 ipam 过程参照：[[calico ipam 过程]]\npod 在调度完成之后，无法分配 ip，此时查看 pod 事件以及**调度到节点**上的 cni 日志如下：\n(cni 日志路径 /var/log/calico/cni/cni.log)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/9f1f252d49fa6a389abd6473f75446d4.png)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/391a92df0dc35e013c7c1f70f53269a1.png)\n\n本次报错为对应 ippool 中找不到可用的 ip，查看对应的 ippool 发现该 ippool 的掩码大小为 28，且未指定 blocksize，导致 calico 仍然使用默认的 26，因此无法进行创建 block、进行ipam，解决办法为创建掩码小于 26 的 ippool 指定 blocksize(该问题在kse已经解决，之后在手动操作底层calico ippool 时会出现)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/85795ae0343fe77c9c38f3360fa610e6.png)\n","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%83%A8%E7%BD%B2%E5%9C%A8%E9%9B%86%E7%BE%A4%E5%86%85":{"title":"部署在集群内","content":"\n--kubelet-arg=\"cgroup-driver=systemd\"\n\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server --write-kubeconfig ~/.kube/config --disable traefik --disable servicelb --disable-cloud-controller --kube-proxy-arg metrics-bind-address=0.0.0.0 --kubelet-arg cloud-provider=external --kubelet-arg cgroup-driver=systemd\" K3S_KUBECONFIG_MODE=\"644\" sh -\n\nkubectl taint nodes --all node.cloudprovider.kubernetes.io/uninitialized=false:NoSchedule-\n\nkubectl apply -f https://raw.githubusercontent.com/loxilb-io/loxilb/main/cicd/k3s-incluster/loxilb.yml\nkubectl apply -f kube-loxilb-inside.yml\nkubectl apply -f tcp-svc-lb.yml\n```\n\n\nloxilb\n\n```bash\n     - /root/loxilb-io/loxilb/loxilb\n     - --egr-hooks \n     - --blacklist=cni[0-9a-z]|veth.|flannel.|cali.|tunl.|vxlan[.]calico\n     - --localsockpolicy  \n```\n\n挂载主机 /opt/loxilb/cgroup\n\ninit container 报错 - \n\n```bash\nnsenter --cgroup=/hproc/1/ns/cgroup --mount=/hproc/1/ns/mnt /bin/mkllb_cgroup\n```\n\n```bash\n#!/bin/bash\nif [ \"$#\" -ne 0 ]; then\n  if [ ! -d /opt/loxilb/cgroup/ ]; then\n    mkdir -p /opt/loxilb/cgroup/ \u0026\u0026 mount -t cgroup2 -o rw,relatime,nsdelegate,memory_recursiveprot cgroup2 /opt/loxilb/cgroup/;\n  fi\n  exit 0\nfi\nif [ ! -d /opt/loxilb/cgroup/ ]; then\n  mkdir -p /opt/loxilb/cgroup/ \u0026\u0026 mount -t cgroup2 -o rw,relatime,nsdelegate,memory_recursiveprot cgroup2 /opt/loxilb/cgroup/;\nelse\n  umount /opt/loxilb/cgroup/;\n  # mount -t cgroup2 -o rw,relatime,nsdelegate,memory_recursiveprot none /opt/loxilb/cgroup/;\n  mount -t cgroup2 -o rw,relatime,nsdelegate none /opt/loxilb/cgroup/;\nfi\n```\n\n1. cgroup 挂载\n\n检查 stat -fc %T /sys/fs/cgroup/\n\n- 对于 cgroup v2，输出为 `cgroup2fs`。\n- 对于 cgroup v1，输出为 `tmpfs`。\n\n1. 挂载出错\n\n\nQ\u0026A\n1. 挂载的目的：\n\n\n\n\n卸载 k3s - 节点网络废了\n\n","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%83%A8%E7%BD%B2%E5%9C%A8%E9%9B%86%E7%BE%A4%E5%A4%96":{"title":"部署在集群外","content":"### 前置条件\n\n1. 节点多网卡；默认路由网卡 eth0 用于安装集群；额外 eth1 用于运行 macvlan \n\n### 部署\n\n#### 架构图\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/62342d00fb92c556ec3217b4c549b318.png)\n\nloxilb 作为 docker 运行，并将使用 macvlan 来处理传入流量。\n\n节点实际网卡 eth1 ip 为：172.30.200.110/24；macvlan ip 为 172.30.200.100/24\n\n#### 安装 loxilb\n\n```bash\n## Set underlying interface of the VM/cluster-node to promisc mode for mac-vlan to work\nsudo ifconfig eth1 promisc\n\n## Run loxilb\nsudo docker run -u root --cap-add SYS_ADMIN --restart unless-stopped --privileged --entrypoint /root/loxilb-io/loxilb/loxilb -dit -v /dev/log:/dev/log  --name loxilb ghcr.io/loxilb-io/loxilb:latest\n\n# Create mac-vlan on top of underlying eth1 interface\nsudo docker network create -d macvlan -o parent=eth1 --subnet 172.30.200.0/24   --gateway 172.30.200.1 --aux-address 'host=172.30.200.252' llbnet\n\n# Assign mac-vlan to loxilb docker with specified IP (which will be used as LB VIP)\n# Please note that this node should already have an IP assigned belonging to the same subnet on underlying interface\nsudo docker network connect llbnet loxilb --ip=172.30.200.100\n\n# Add iptables rule to allow traffic from source/host IP(172.30.200.1) to loxilb\nsudo iptables -A DOCKER -s 172.30.200.1 -j ACCEPT\n```\n\n#### 安装集群\n\n```bash\n# Install IPVS\nsudo apt-get -y install ipset ipvsadm\n\n# Install K3s with Calico and kube-proxy in IPVS mode\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--write-kubeconfig ~/.kube/config --disable traefik,metrics-server,servicelb --disable-cloud-controller --kubelet-arg cloud-provider=external --flannel-backend=none --disable-network-policy\" K3S_KUBECONFIG_MODE=\"644\" sh -s - server --kube-proxy-arg proxy-mode=ipvs\n# cp /etc/rancher/k3s/k3s.yaml /root/.kube/config\n\n# Install Calico\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/tigera-operator.yaml\n\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/custom-resources.yaml\n\n# Remove taints in k3s if any (usually happens if started without cloud-manager)\nsudo kubectl taint nodes --all node.cloudprovider.kubernetes.io/uninitialized=false:NoSchedule-\n```\n\n\n","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6":{"title":"配置文件","content":"\n```yaml\n  name: \"devops-apiserver\"\n  serviceType: \"deployment\"\n  containers: \n    - \n      name: \"apiserver\"\n      dev: \n        gitUrl: \"\"\n        image: \"rykren/golang:1.23\"\n        shell: \"zsh\"\n        workDir: \"/home/nocalhost-dev\"\n        storageClass: \"\"\n        resources: \n          limits: \n            memory: \"4Gi\"\n            cpu: \"2\"\n          requests: \n            memory: \"1Gi\"\n            cpu: \"0.5\"\n        persistentVolumeDirs: []\n        command: \n          run: \n            - \"go\"\n            - \"run\"\n            - \"cmd/apiserver/apiserver.go\"\n          debug: \n            - \"dlv\"\n            - \"--listen=:2345\"\n            - \"--headless=true\"\n            - \"--api-version=2\"\n            - \"--accept-multiclient\"\n            - \"debug\"\n            - \"cmd/apiserver/apiserver.go\"\n        debug: \n          language: \"go\"\n          remoteDebugPort: 2345\n        hotReload: false\n        sync: \n          type: \"send\"\n          mode: \"pattern\"\n          filePattern: \n            - \".\"\n          ignoreFilePattern: \n            - \".git\"\n          deleteProtection: true\n        env: []\n        sidecarImage: \"\"\n```","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86-configMap":{"title":"","content":"从Kubernetes 1.2开始提供了一种统一的应用配置管理方案—ConfigMap。ConfigMap以一个或多个key:value的形式保存在Kubernetes系统中供应用使用，既可以用于表示一个变量的值（例如apploglevel=info），也可以用于表示一个完整配置文件的内容。\n### configMap的使用场景\n\n1. 生成为容器内的环境变量。\n2. 设置容器启动命令的启动参数（需设置为环境变量）。\n3. 以Volume的形式挂载为容器内部的文件或目录。\n### 创建configMap\nkubectl通过yaml配置文件创建 `kubectl create -f cm-appvars.yaml`\n\n   1. 将应用所需要的变量定义为configMap\n   2. 将配置文件定义为configmap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cm-appvars\ndata:\n  apploglevel: info\n  appdatadir: /var/data\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cm-appconfigfiles\ndata:\n  key-serverxml: |\n    \u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n    \u003c!--  Copyright w3school.com.cn --\u003e\n      \u003cnote\u003e\n              \u003cto\u003eGeorge\u003c/to\u003e\n              \u003cfrom\u003eJohn\u003c/from\u003e\n              \u003cheading\u003eReminder\u003c/heading\u003e\n              \u003cbody\u003eDon't forget the meeting!\u003c/body\u003e\n      \u003c/note\u003e\n```\n\n```powershell\n~ # kubectl create -f app-config-map-vars.yaml \npod/cm-var-pod created\n\n~ # kubectl get cm\nNAME               DATA   AGE\ncm-appvars         2      34s\nkube-root-ca.crt   1      8d\n\n~ # kubectl describe cm cm-appvars\nName:         cm-appvars\nNamespace:    default\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\n\nData\n====\nappdatadir:\n----\n/var/data\napploglevel:\n----\ninfo\n\nBinaryData\n====\n\nEvents:  \u003cnone\u003e\n```\n```powershell\n~ # kubectl create -f config-map-file.yaml \nconfigmap/cm-appconfigfiles created\n\n~ # kubectl get cmNAME                DATA   AGE\ncm-appconfigfiles   1      3s\ncm-appvars          2      73m\nkube-root-ca.crt    1      8d\n\n~ # kubectl describe cm cm-appconfigfiles\nName:         cm-appconfigfiles\nNamespace:    default\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\n\nData\n====\nkey-serverxml:\n----\n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!--  Copyright w3school.com.cn --\u003e\n  \u003cnote\u003e\n          \u003cto\u003eGeorge\u003c/to\u003e\n          \u003cfrom\u003eJohn\u003c/from\u003e\n          \u003cheading\u003eReminder\u003c/heading\u003e\n          \u003cbody\u003eDon't forget the meeting!\u003c/body\u003e\n  \u003c/note\u003e\n\n\nBinaryData\n====\n\nEvents:  \u003cnone\u003e\n```\n### 使用kubectl创建\n使用参数--from-file或--from-literal指定内容，并且可以在一行命令中指定多个参数。\n\n1. 通过--from-file参数从文件中进行创建，可以指定key的名称，也可以在一个命令行中创建包含多个key的ConfigMap。\n\n`kubectl create configmap cm-server.xml --from-file=server.xml`\n```powershell\n~ # kubectl create configmap cm-server.xml --from-file=../xml/simple.xml\nconfigmap/cm-server.xml created\n\n~ # kubectl get cm\nNAME                DATA   AGE\ncm-server.xml       1      9s\n\n~ # kubectl describe cm cm-server.xml\nName:         cm-server.xml\nNamespace:    default\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\n\nData\n====\nsimple.xml:\n----\n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!-- Edited with XML Spy v2007 (http://www.altova.com) --\u003e\n\u003cbreakfast_menu\u003e\n  \u003cfood\u003e\n    \u003cname\u003eBelgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$5.95\u003c/price\u003e\n    \u003cdescription\u003etwo of our famous Belgian Waffles with plenty of real maple syrup\u003c/description\u003e\n    \u003ccalories\u003e650\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eStrawberry Belgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$7.95\u003c/price\u003e\n    \u003cdescription\u003elight Belgian waffles covered with strawberries and whipped cream\u003c/description\u003e\n    \u003ccalories\u003e900\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eBerry-Berry Belgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$8.95\u003c/price\u003e\n    \u003cdescription\u003elight Belgian waffles covered with an assortment of fresh berries and whipped cream\u003c/description\u003e\n    \u003ccalories\u003e900\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eFrench Toast\u003c/name\u003e\n    \u003cprice\u003e$4.50\u003c/price\u003e\n    \u003cdescription\u003ethick slices made from our homemade sourdough bread\u003c/description\u003e\n    \u003ccalories\u003e600\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eHomestyle Breakfast\u003c/name\u003e\n    \u003cprice\u003e$6.95\u003c/price\u003e\n    \u003cdescription\u003etwo eggs, bacon or sausage, toast, and our ever-popular hash browns\u003c/description\u003e\n    \u003ccalories\u003e950\u003c/calories\u003e\n  \u003c/food\u003e\n\u003c/breakfast_menu\u003e\n\n\nBinaryData\n====\n\nEvents:  \u003cnone\u003e\n```\n\n2. 通过--from-file参数从目录中进行创建，该目录下的每个配置文件名都被设置为key，文件的内容被设置为value。\n```powershell\n~ # kubectl create configmap cm-apptest --from-file=../xml\nconfigmap/cm-apptest created\n\n~ # kubectl get cm\nNAME                DATA   AGE\ncm-appconfigfiles   1      52m\ncm-apptest          2      8s\ncm-appvars          2      126m\ncm-server.xml       1      3m4s\n\n~ # kubectl describe cm cm-apptest\nName:         cm-apptest\nNamespace:    default\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\n\nData\n====\nnote.xml:\n----\n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!--  Copyright w3school.com.cn --\u003e\n\u003cnote\u003e\n  \u003cto\u003eGeorge\u003c/to\u003e\n  \u003cfrom\u003eJohn\u003c/from\u003e\n  \u003cheading\u003eReminder\u003c/heading\u003e\n  \u003cbody\u003eDon't forget the meeting!\u003c/body\u003e\n\u003c/note\u003e \n\nsimple.xml:\n----\n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!-- Edited with XML Spy v2007 (http://www.altova.com) --\u003e\n\u003cbreakfast_menu\u003e\n  \u003cfood\u003e\n    \u003cname\u003eBelgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$5.95\u003c/price\u003e\n    \u003cdescription\u003etwo of our famous Belgian Waffles with plenty of real maple syrup\u003c/description\u003e\n    \u003ccalories\u003e650\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eStrawberry Belgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$7.95\u003c/price\u003e\n    \u003cdescription\u003elight Belgian waffles covered with strawberries and whipped cream\u003c/description\u003e\n    \u003ccalories\u003e900\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eBerry-Berry Belgian Waffles\u003c/name\u003e\n    \u003cprice\u003e$8.95\u003c/price\u003e\n    \u003cdescription\u003elight Belgian waffles covered with an assortment of fresh berries and whipped cream\u003c/description\u003e\n    \u003ccalories\u003e900\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eFrench Toast\u003c/name\u003e\n    \u003cprice\u003e$4.50\u003c/price\u003e\n    \u003cdescription\u003ethick slices made from our homemade sourdough bread\u003c/description\u003e\n    \u003ccalories\u003e600\u003c/calories\u003e\n  \u003c/food\u003e\n  \u003cfood\u003e\n    \u003cname\u003eHomestyle Breakfast\u003c/name\u003e\n    \u003cprice\u003e$6.95\u003c/price\u003e\n    \u003cdescription\u003etwo eggs, bacon or sausage, toast, and our ever-popular hash browns\u003c/description\u003e\n    \u003ccalories\u003e950\u003c/calories\u003e\n  \u003c/food\u003e\n\u003c/breakfast_menu\u003e\n\n\nBinaryData\n====\n\nEvents:  \u003cnone\u003e\n```\n\n3. 使用--from-literal时会从文本中进行创建，直接将指定的key#=value#创建为ConfigMap的内容。\n```powershell\n~ # kubectl create configmap cm-appenv --from-literal=loglevel=info --from-literal=appdatadir=/var/data\nconfigmap/cm-appenv created\n\n~ # kubectl get cm\nNAME                DATA   AGE\ncm-appconfigfiles   1      59m\ncm-appenv           2      9s\n\n~ # kubectl describe cm cm-appenv\nName:         cm-appenv\nNamespace:    default\nLabels:       \u003cnone\u003e\nAnnotations:  \u003cnone\u003e\n\nData\n====\nappdatadir:\n----\n/var/data\nloglevel:\n----\ninfo\n\nBinaryData\n====\n\nEvents:  \u003cnone\u003e\n```\n### pod使用configMap\n#### 通过环境变量使用\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cm-var-pod\nspec:\n  containers:\n  - name: cm-test\n    image: busybox\n    command: [\"/bin/sh\", \"-c\", \"env | grep APP\"]\n    env: \n    - name: APP_LOG_LEVEL\n      valueFrom:\n        configMapKeyRef:\n          name: cm-appvars\n          key: apploglevel\n    - name: APP_DATA_DIR\n      valueFrom:\n        configMapKeyRef:\n          name: cm-appvars\n          key: appdatadir\n```\n```powershell\n~ # kubectl get pods\nNAME                     READY   STATUS             RESTARTS       AGE\ncm-var-pod               0/1     CrashLoopBackOff   3 (46s ago)    110s\n\n~ # kubectl logs cm-var-pod\nAPP_DATA_DIR=/var/data\nAPP_LOG_LEVEL=info\n```\nKubernetes从1.6版本开始，引入了一个新的字段envFrom，实现了在Pod环境中将ConfigMap（也可用于Secret资源对象）中所有定义的key=value自动生成为环境变量。需要说明的是，环境变量的名称受POSIX命名规范（[a-zA-Z_][a-zA-Z0-9_]*）约束，不能以数字开头。如果包含非法字符，则系统将跳过该条环境变量的创建，并记录一个Event来提示环境变量无法生成，但并不阻止Pod的启动。\n#### 通过挂载文件使用\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cm-file-pod\nspec:\n  containers:\n  - name: cm-test\n    image: kubeguide/tomcat-app:v1\n    ports:\n    - containerPort: 8080\n    volumeMounts:\n    - name: serverxml\n      mountPath: /configfiles\n  volumes:\n  - name: serverxml\n    configMap:\n      name: cm-appconfigfiles\n      items:\n      - key: key-serverxml\n        path: server.xml\n```\n```powershell\n~ # kubectl create -f app-config-map-file.yaml \npod/cm-file-pod created\n\n~ # kubectl get pod\nNAME                     READY   STATUS             RESTARTS         AGE\ncm-file-pod              1/1     Running            0                64s\ncm-var-pod               0/1     CrashLoopBackOff   14 (4m8s ago)    51m\n\n~ # kubectl exec -it cm-file-pod bash\nroot@cm-file-pod:/usr/local/tomcat# pwd\n/usr/local/tomcat\nroot@cm-file-pod:/usr/local/tomcat# cd /\nroot@cm-file-pod:/# ls\nbin   configfiles  etc   lib    media  opt   root  sbin  sys  usr\nboot  dev          home  lib64  mnt    proc  run   srv   tmp  var\nroot@cm-file-pod:/# cat /configfiles/\n..2021_11_17_13_38_23.779999358/ server.xml\n..data/                          \nroot@cm-file-pod:/# cat /configfiles/server.xml \n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!--  Copyright w3school.com.cn --\u003e\n  \u003cnote\u003e\n          \u003cto\u003eGeorge\u003c/to\u003e\n          \u003cfrom\u003eJohn\u003c/from\u003e\n          \u003cheading\u003eReminder\u003c/heading\u003e\n          \u003cbody\u003eDon't forget the meeting!\u003c/body\u003e\n  \u003c/note\u003e\n```\n登录容器，查看到在/configfiles目录下存在server.xml文件，它的内容就是ConfigMap“cm-appconfigfiles”中key定义的内容。如果在引用ConfigMap时不指定items，则使用volumeMount方式在容器内的目录下为每个item都生成一个文件名为key的文件。\n```powershell\nroot@cm-file-pod:/usr/local/tomcat# cd /configfiles/\nroot@cm-file-pod:/configfiles# ls\nkey-serverxml\nroot@cm-file-pod:/configfiles# cat key-serverxml \n\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!--  Copyright w3school.com.cn --\u003e\n  \u003cnote\u003e\n          \u003cto\u003eGeorge\u003c/to\u003e\n          \u003cfrom\u003eJohn\u003c/from\u003e\n          \u003cheading\u003eReminder\u003c/heading\u003e\n          \u003cbody\u003eDon't forget the meeting!\u003c/body\u003e\n  \u003c/note\u003e\n```\n### 使用configMap的限制条件\n\n- ConfigMap必须在Pod之前创建\n- ConfigMap受Namespace限制，只有处于相同Namespace中的Pod才可以引用它。\n- ConfigMap中的配额管理还未能实现。\n- kubelet只支持可以被API Server管理的Pod使用ConfigMap。kubelet在本Node上通过 --manifest-url或--config自动创建的静态Pod将无法引用ConfigMap。\n- 在Pod对ConfigMap进行挂载（volumeMount）操作时，在容器内部只能挂载为“目录”，无法挂载为“文件”。在挂载到容器内部后，在目录下将包含ConfigMap定义的每个item，如果在该目录下原来还有其他文件，则容器内的该目录将被挂载的ConfigMap覆盖。如果应用程序需要保留原来的其他文件，则需要进行额外的处理。可以将ConfigMap挂载到容器内部的临时目录，再通过启动脚本将配置文件复制或者链接到（cp或link命令）应用所用的实际配置目录下。\n","lastmodified":"2025-03-26T03:48:43.17131857Z","tags":null},"/%E9%85%8D%E7%BD%AE-%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE-cilium":{"title":"配置 - 动态配置 cilium","content":"https://docs.cilium.io/en/stable/helm-reference/#helm-reference\n\n上述为 cilium 安装时，helm 可配置的 values 值，这些 helm values 最终会转换为 cilium agent 和 cilium operator 等组件的配置并存储在 configmap 中\n\n你可以运行 `kubectl -n kube-system get configmap cilium-config -o yaml` 来查看具体的配置。\n\n可以通过三种方式更改正在运行的安装的配置： \n- 通过 helm 升级 \n\t通过向 Helm 提供新值并将其应用到现有安装来实现此目的。通过设置值 rollOutCiliumPods=true，代理 Pod 将逐渐重新启动。 \n\n- 通过 cilium 配置集 \n\tCilium CLI 能够更新 cilium-config ConfigMap 中的各个值。这不会影响正在运行的 pod；必须手动删除 Pod 才能使任何更改生效。 \n\n- 通过 CiliumNodeConfig 对象 \n\tCilium 还支持在节点组上进行配置。需要手动删除 Pod 才能使更改生效。","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%85%8D%E7%BD%AE-TOR":{"title":"","content":"#calico #tor\n\n\n2. 配置其他节点连接到 RR 节点\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: test\nspec:\n  nodeSelector: all()\n  peerSelector: has(routeReflector)\n```\n\n3. 禁止 BGP FullMesh\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPConfiguration\nmetadata:\n  name: default\nspec:\n  asNumber: 64512\n  logSeverityScreen: Info\n  nodeToNodeMeshEnabled: false\n```\n","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/%E9%85%8D%E7%BD%AE-git-%E6%8B%89%E5%8F%96":{"title":"配置 git 拉取","content":"1. 拷贝 ssh 密钥信息到远程开发机上\n2. chmod 600 ~/.ssh/id_rsa*\n3. 配置 git 邮箱、用户名、git拉取\n\n`git config --global --edit`\n\n```yaml\n[user]\n    name = renyunkang\n    email = rykren1998@gmail.com\n\n[url \"git@github.com:\"]\n    insteadOf = https://github.com/\n```\n","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%85%8D%E7%BD%AE-route-reflector":{"title":"","content":"#calico #rr\n\n[Configuring Route Reflectors in Calico (tigera.io)](https://www.tigera.io/blog/configuring-route-reflectors-in-calico/)\n\n1. 选择一个节点作为 RR，设置 lable 以及 routeReflectorClusterID\n```yaml\napiVersion: projectcalico.org/v3\nkind: Node\nmetadata:\n  labels:\n    beta.kubernetes.io/arch: amd64\n    beta.kubernetes.io/os: linux\n    kubernetes.io/arch: amd64\n    kubernetes.io/hostname: node3\n    kubernetes.io/os: linux\n    node-role.kubernetes.io/control-plane: \"\"\n    node-role.kubernetes.io/master: \"\"\n    node-role.kubernetes.io/worker: \"\"\n    node.kubernetes.io/exclude-from-external-load-balancers: \"\"\n    routeReflector: \"\"\n  name: node3\nspec:\n  addresses:\n  - address: 172.31.73.12/24\n    type: CalicoNodeIP\n  - address: 172.31.73.12\n    type: InternalIP\n  bgp:\n    asNumber: 64512\n    ipv4Address: 172.31.73.12/24\n    routeReflectorClusterID: 10.0.0.1\n  orchRefs:\n  - nodeName: node3\n    orchestrator: k8s\nstatus:\n  podCIDRs:\n  - 10.233.64.0/24\n```\n\n2. 配置其他节点连接到 RR 节点\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: test\nspec:\n  nodeSelector: all()\n  peerSelector: has(routeReflector)\n```\n\n3. 禁止 BGP FullMesh\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPConfiguration\nmetadata:\n  name: default\nspec:\n  asNumber: 64512\n  logSeverityScreen: Info\n  nodeToNodeMeshEnabled: false\n```\n\n4. 配置 RR 节点与交换机建立 BGP\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: baixing-rr\nspec:\n  nodeSelector: \"has(routeReflector)\"\n  peerIP: 172.16.0.254\n  asNumber: 65009\n```\n\n[如何在kubernetes中配置Calico路由反射器 - KubeSphere 开发者社区](https://kubesphere.com.cn/forum/d/3740-kubernetescalico)","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/%E9%97%AE%E9%A2%98":{"title":"","content":"1. 为什么引入网卡多队列。引入网卡多队列解决了什么问题，带来了什么其他问题\n2. 队列绑核\n3. 整个收/发包的流程是什么样的\n\n\n\n1.网卡多队列 -- 收包多队列 +发包多队列\n通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.  \n一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈. 所以网卡开发了多队列功能, 即一个网卡有多个队列, 收到的包根据TCP四元组信息hash后放入其中一个队列, 后面该链接的所有包都放入该队列. 每个队列对应不同的中断, 使用irqbalance将不同的中断绑定到不同的核. 充分利用了多核并行处理特性. 提高了效率.\n\n\n由于这块内存区域是有限的，如果数据包的速率非常快，单个 CPU 来不及取走这些包，新来的包就会被丢弃。\n\n\n\n单节点   开启、关闭网卡多队列  对于 veth 的影响","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5":{"title":"问题排查","content":"\n[[iptables 查看流向]]\n\n在裸金属环境中搭建时，设置默认模式为 underlay，安装完成 kubernetes 后，coredns 一直 not ready，抓包后发现一直\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/10/1d7bac3f6c3f2e0fe74466a0817f7321.png)\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/10/1f5f213a007a1288d7049581ddeb1072.png)\n\n将 local-pv 调度到本机后抓包，可以正常运行\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/10/634c9cca861cee671f856e9f212ce86c.png)\n\n\n再次定位问题\n当容器使用主机网络时，且使用 iptables 作为kube-proxy 转发时，通过 svc 访问会收到 reset 包\n\n\n我已经测试过了，当我只部署 underlay 并且将 kube-proxy 中的 clusterCIDR 设置为 underlay podCIDR时，他是正常可以通信的。\n\n我抓包对比过两种情况，两者主要的区别是在跨节点访问svc时，前一种会出现 SNAT 的情况，但是后者不会出现 SNAT\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/da24dce9fb110473ea715e55207baba2.png)\n","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%97%AE%E9%A2%981paused-deployment":{"title":"问题1：paused deployment","content":"暂停已经发布的 deployment，此时针对 PodTemplateSpec 的更新不会触发新的上线，重启时也会报：can't restart paused deployment (run rollout resume first)\n\n```\nkubectl rollout pause deployment busybox-deployment\ndeployment.extensions/busybox-deployment paused\n```\n\n当 resume deploy 资源之后，便会恢复\n```\nkubectl rollout resume deployment busybox-deployment\ndeployment.extensions/busybox-deployment resumed\n```","lastmodified":"2025-03-26T03:48:44.149315124Z","tags":null},"/%E9%9D%99%E6%80%81Pod":{"title":"","content":"## 特性\n静态Pod是由kubelet进行管理的仅存在于特定Node上的Pod。它们不能通过API Server进行管理，无法与ReplicationController、Deployment或者DaemonSet进行关联，并且kubelet无法对它们进行健康检查。静态Pod总是由kubelet创建的，并且总在kubelet所在的Node上运行。\n\n## 创建方式：配置文件创建和http方式创建\n### 配置文件创建：\n设置kubelet的启动参数“--config”，指定kubelet需要监控的配置文件所在的目录，kubelet会定期扫描该目录，并根据该目录下的.yaml或.json文件进行创建操作。\n\u003e 假设配置目录为/etc/kubelet.d/，配置启动参数为--config=/etc/kubelet.d/，然后重启kubelet服务。\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: static-web\n  labels: \n    name: static-web\nspec:\n  containers:\n  - name: static-web\n    images: nginx\n    ports:\n    - name: web\n      containerPort: 80\n```\n\n由于静态Pod无法通过API Server直接管理，所以在Master上尝试删除这个Pod时，会使其变成Pending状态，且不会被删除。删除该Pod的操作只能是到其所在Node上将其定义文件从指定的(/etc/kubelet.d)目录下删除。\n\n### http方式创建：\n通过设置kubelet的启动参数“--manifest-url”，kubelet将会定期从该URL地址下载Pod的定义文件，并以.yaml或.json文件的格式进行解析，然后创建Pod。其实现方式与配置文件方式是一致的。\n","lastmodified":"2025-03-26T03:48:43.17131857Z","tags":null},"/1-11":{"title":"1-11","content":"原文链接：[https://studygolang.com/articles/10065](https://studygolang.com/articles/10065)\n[https://studygolang.com/articles/11003](https://studygolang.com/articles/11003)\n[https://studygolang.com/articles/10746](https://studygolang.com/articles/10746)\n[https://studygolang.com/articles/10994](https://studygolang.com/articles/10994)\n### 1. defer执行顺序\n```go\nfunc defer_call() {\n\tdefer func() { fmt.Println(\"打印前\") }()\n\tdefer func() { fmt.Println(\"打印中\") }()\n\tdefer func() { fmt.Println(\"打印后\") }()\n\n\tfmt.Println(\"触发异常\")\n}\n// 执行结果\n// 触发异常\n// 打印后\n// 打印中\n// 打印前\n```\n### 2. for range 注意点\n```go\nfunc pase_student() {\n\tm := make(map[string]*student)\n\tstus := []student{\n\t\t{Name: \"zhou\", Age: 24},\n\t\t{Name: \"li\", Age: 23},\n\t\t{Name: \"wang\", Age: 22},\n\t}\n\tfor _, stu := range stus {\n\t\tm[stu.Name] = \u0026stu\n\t}\n\tptrMap(m)\n}\n\nfunc ptrMap(m map[string]*student) {\n\tfor key, value := range m {\n\t\tfmt.Printf(\"map[%v]=%v\\n\", key, *value)\n\t}\n}\n// 执行结果\n// map[zhou]={wang 22}\n// map[li]={wang 22}\n// map[wang]={wang 22}\n```\n### 3. goroutine golang并发\n```go\nfunc runWaitGroup() {\n\truntime.GOMAXPROCS(1)\n\twg := sync.WaitGroup{}\n\twg.Add(20)\n\tfor i := 0; i \u003c 10; i++ {\n\t\tgo func() {\n\t\t\tfmt.Printf(\"A:%d \", i)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\tfor i := 0; i \u003c 10; i++ {\n\t\tgo func(i int) {\n\t\t\tfmt.Printf(\"B:%d \", i)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}\n// 执行结果\n// B:9 A:10 A:10 A:10 A:10 A:10 A:10 A:10 A:10 A:10 A:10 B:0 B:1 B:2 B:3 B:4 B:5 B:6 B:7 B:8\n```\n### 4.类型组合\n```go\ntype People struct{}\n\nfunc (p *People) ShowA() {\n\tfmt.Println(\"showA\")\n\tp.ShowB()\n}\nfunc (p *People) ShowB() {\n\tfmt.Println(\"showB\")\n}\n\ntype Teacher struct {\n\tPeople\n}\n\nfunc (t *Teacher) ShowB() {\n\tfmt.Println(\"teacher showB\")\n}\n\nfunc main() {\n\tt := Teacher{}\n\tt.ShowA()\n}\n// 执行结果\n// showA\n// showB\n```\n### 5. select 并发\n```go\nfunc main() {\n\truntime.GOMAXPROCS(1)\n\tint_chan := make(chan int, 1)\n\tstring_chan := make(chan string, 1)\n\tint_chan \u003c- 1\n\tstring_chan \u003c- \"hello\"\n\tselect {\n\tcase value := \u003c-int_chan:\n\t\tfmt.Println(value)\n\tcase value := \u003c-string_chan:\n\t\tpanic(value)\n\t}\n}\n// 执行结果\n// 1\n```\n### 6. defer 参数传递\n```go\nfunc calc(index string, a, b int) int {\n\tret := a + b\n\tfmt.Println(index, a, b, ret)\n\treturn ret\n}\n\nfunc main() {\n\ta := 1\n\tb := 2\n\tdefer calc(\"1\", a, calc(\"10\", a, b))\n\ta = 0\n\tdefer calc(\"2\", a, calc(\"20\", a, b))\n\tb = 1\n}\n// 执行结果\n// 10 1 2 3\n// 20 0 2 2\n// 2 0 2 2\n// 1 1 3 4\n```\n### 7. make 切片\n```go\nfunc main() {\n\ts := make([]int, 5)\n\ts = append(s, 1, 2, 3)\n\tfmt.Println(s)\n}\n// 执行结果\n// [0 0 0 0 0 1 2 3]\n```\n### 8. 同步操作\n```go\ntype UserAges struct {\n\tages map[string]int\n\tsync.Mutex\n}\n\nfunc (ua *UserAges) Add(name string, age int) {\n\tua.Lock()\n\tdefer ua.Unlock()\n\tua.ages[name] = age\n}\n\nfunc (ua *UserAges) Get(name string) int {\n\tif age, ok := ua.ages[name]; ok {\n\t\treturn age\n\t}\n\treturn -1\n}\n```\n描述以上操作\n### 9. 管道的同步\n```go\nfunc (set *threadSafeSet) Iter() \u003c-chan interface{} {\n\tch := make(chan interface{})\n\tgo func() {\n\t\tset.RLock()\n\n\t\tfor elem := range set.s {\n\t\t\tch \u003c- elem\n\t\t}\n\n\t\tclose(ch)\n\t\tset.RUnlock()\n\n\t}()\n\treturn ch\n}\n```\n描述以上操作：死锁\n### 10. interface接口实现面向对象\n```go\ntype People interface {\n\tSpeak(string) string\n}\n\ntype Stduent struct{}\n\nfunc (stu *Stduent) Speak(think string) (talk string) {\n\tif think == \"bitch\" {\n\t\ttalk = \"You are a good boy\"\n\t} else {\n\t\ttalk = \"hi\"\n\t}\n\treturn\n}\n\nfunc main() {\n\tvar peo People = Stduent{}\n\tthink := \"bitch\"\n\tfmt.Println(peo.Speak(think))\n}\n// 编译不通过\n# command-line-arguments\n.\\main.go:16:6: cannot use Stduent{} (type Stduent) as type People in assignment:\n\tStduent does not implement People (Speak method has pointer receiver)\n// 在Student{}之前加上\u0026\n```\n\n### 11. interface 类型的概念\n```go\ntype People interface {\n\tShow()\n}\n\ntype Student struct{}\n\nfunc (stu *Student) Show() {\n\n}\n\nfunc live() People {\n\tvar stu *Student\n\treturn stu\n}\n\nfunc main() {\n\tif live() == nil {\n\t\tfmt.Println(\"AAAAAAA\")\n\t} else {\n\t\tfmt.Println(\"BBBBBBB\")\n\t}\n}\n// 执行结果\n// BBBBBBB\n```\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%97%A0%E6%B3%95%E6%BB%A1%E8%B6%B3%E6%9C%9F%E6%9C%9B-reuse":{"title":"1.性能测试无法满足期望 - reuse","content":"\n\n在高并发、短连接的场景下，kube-proxy ipvs存在rs删除失败或是延迟高的问题，社区也有不少Issue反馈，比如[kube-proxy ipvs conn_reuse_mode setting causes errors with high load from single client](https://github.com/kubernetes/kubernetes/issues/81775)。文本对这些问题进行了梳理，试图介绍产生这些问题的内部原因。由于能力有限，其中涉及内核部分，只能浅尝辄止。\n\n## 背景\n\n### 端口重用\n\n一切问题来源于端口重用。在TCP四次挥手中有个`TIME_WAIT`的状态，作为先发送`FIN`包的一端，在接收到对端发送的`FIN`包后进入`TIME_WAIT`，在经过`2MSL`后才会真正关闭连接。`TIME_WAIT`状态的存在，一来可以避免将之前连接的延迟报文，作为当前连接的报文处理；二是可以处理最后一个ACK丢失带来的问题。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/8405aacf3269254edde1ba0a96d4a027.png)\n\n而在短连接、高并发的场景下，会出现大量的`TIME-WAIT`连接，导致资源无法及时释放。Linux中内核参数`net.ipv4.tcp_tw_reuse`提供了一种减少`TIME-WAIT`连接的方式，可以将`TIME-WAIT`连接的端口分配给新的TCP连接，来复用端口。\n\n```\ntcp_tw_reuse - BOOLEAN\n\tAllow to reuse TIME-WAIT sockets for new connections when it is\n\tsafe from protocol viewpoint. Default value is 0.\n\tIt should not be changed without advice/request of technical\n\texperts.\n```\n\n### ipvs如何处理端口重用？\n\nipvs对端口的复用策略主要由内核参数`net.ipv4.vs.conn_reuse_mode`决定\n\n```\nconn_reuse_mode - INTEGER\n\t1 - default\n\n\tControls how ipvs will deal with connections that are detected\n\tport reuse. It is a bitmap, with the values being:\n\n\t0: disable any special handling on port reuse. The new\n\tconnection will be delivered to the same real server that was\n\tservicing the previous connection. This will effectively\n\tdisable expire_nodest_conn.\n\n\tbit 1: enable rescheduling of new connections when it is safe.\n\tThat is, whenever expire_nodest_conn and for TCP sockets, when\n\tthe connection is in TIME_WAIT state (which is only possible if\n\tyou use NAT mode).\n\n\tbit 2: it is bit 1 plus, for TCP connections, when connections\n\tare in FIN_WAIT state, as this is the last state seen by load\n\tbalancer in Direct Routing mode. This bit helps on adding new\n\treal servers to a very busy cluster.\n```\n\n当`net.ipv4.vs.conn_reuse_mode=0`时，ipvs不会对新连接进行重新负载，而是复用之前的负载结果，将新连接转发到原来的rs上；当`net.ipv4.vs.conn_reuse_mode=1`时，ipvs则会对新连接进行重新调度。\n\n相关的，还有一个内核参数`net.ipv4.vs.expire_nodest_conn`，用于控制连接的rs不可用时的处理。在开启时，如果后端rs不可用，会立即结束掉该连接，使客户端重新发起新的连接请求；否则将数据包**silently drop**，也就是DROP掉数据包但不结束连接，等待客户端的重试。\n\n另外，关于**destination 不可用**的判断，是在ipvs执行删除`vs`（在`__ip_vs_del_service()`中实现）或删除`rs`（在`ip_vs_del_dest()`中实现）时，会调用`__ip_vs_unlink_dest()`方法，将相应的destination置为不可用。\n\n```\nexpire_nodest_conn - BOOLEAN\n        0 - disabled (default)\n        not 0 - enabled\n\n        The default value is 0, the load balancer will silently drop\n        packets when its destination server is not available. It may\n        be useful, when user-space monitoring program deletes the\n        destination server (because of server overload or wrong\n        detection) and add back the server later, and the connections\n        to the server can continue.\n\n        If this feature is enabled, the load balancer will expire the\n        connection immediately when a packet arrives and its\n        destination server is not available, then the client program\n        will be notified that the connection is closed. This is\n        equivalent to the feature some people requires to flush\n        connections when its destination is not available.\n```\n\n关于ipvs如何处理端口复用的连接，这块主要实现逻辑在`net/netfilter/ipvs/ip_vs_core.c`的`ip_vs_in()`方法中：\n\n```\n/*\n * Check if the packet belongs to an existing connection entry\n */\ncp = pp-\u003econn_in_get(ipvs, af, skb, \u0026iph);  //找是属于某个已有的connection\n\nconn_reuse_mode = sysctl_conn_reuse_mode(ipvs);\n//当conn_reuse_mode开启，同时出现端口复用（例如收到TCP的SYN包，并且也属于已有的connection），进行处理\nif (conn_reuse_mode \u0026\u0026 !iph.fragoffs \u0026\u0026 is_new_conn(skb, \u0026iph) \u0026\u0026 cp) { \n\tbool uses_ct = false, resched = false;\n\n\t//如果开启了expire_nodest_conn、目标rs的weight为0\n\tif (unlikely(sysctl_expire_nodest_conn(ipvs)) \u0026\u0026 cp-\u003edest \u0026\u0026\n\t    unlikely(!atomic_read(\u0026cp-\u003edest-\u003eweight))) {\n\t\tresched = true;\n\t\t//查询是否用到了conntrack\n\t\tuses_ct = ip_vs_conn_uses_conntrack(cp, skb);\n\t} else if (is_new_conn_expected(cp, conn_reuse_mode)) {\n\t//连接是expected的情况，比如FTP\n\t\tuses_ct = ip_vs_conn_uses_conntrack(cp, skb);\n\t\tif (!atomic_read(\u0026cp-\u003en_control)) {\n\t\t\tresched = true;\n\t\t} else {\n\t\t\t/* Do not reschedule controlling connection\n\t\t\t * that uses conntrack while it is still\n\t\t\t * referenced by controlled connection(s).\n\t\t\t */\n\t\t\tresched = !uses_ct;\n\t\t}\n\t}\n\n\t//如果expire_nodest_conn未开启，并且也非期望连接，实际上直接跳出了\n\tif (resched) {\n\t\tif (!atomic_read(\u0026cp-\u003en_control))\n\t\t\tip_vs_conn_expire_now(cp);\n\t\t__ip_vs_conn_put(cp);\n\t\t//当开启了net.ipv4.vs.conntrack，SYN数据包会直接丢弃，等待客户端重新发送SYN\n\t\tif (uses_ct)\n\t\t\treturn NF_DROP;\n\t\t//未开启conntrack时，会进入下面ip_vs_try_to_schedule的流程\n\t\tcp = NULL;\n\t}\n}\n\nif (unlikely(!cp)) {\n\tint v;\n\n\tif (!ip_vs_try_to_schedule(ipvs, af, skb, pd, \u0026v, \u0026cp, \u0026iph))\n\t\treturn v;\n}\n\nIP_VS_DBG_PKT(11, af, pp, skb, iph.off, \"Incoming packet\");\n\n/* Check the server status */\nif (cp-\u003edest \u0026\u0026 !(cp-\u003edest-\u003eflags \u0026 IP_VS_DEST_F_AVAILABLE)) {\n\t/* the destination server is not available */\n\n\t__u32 flags = cp-\u003eflags;\n\n\t/* when timer already started, silently drop the packet.*/\n\tif (timer_pending(\u0026cp-\u003etimer))\n\t\t__ip_vs_conn_put(cp);\n\telse\n\t\tip_vs_conn_put(cp);\n\n\tif (sysctl_expire_nodest_conn(ipvs) \u0026\u0026\n\t    !(flags \u0026 IP_VS_CONN_F_ONE_PACKET)) {\n\t\t/* try to expire the connection immediately */\n\t\tip_vs_conn_expire_now(cp);\n\t}\n\n\treturn NF_DROP;\n}\n```\n\n### kube-proxy ipvs模式下的优雅删除\n\nKubernetes提供了Pod优雅删除机制。当我们决定干掉一个Pod时，我们可以通过`PreStop Hook`来做一些服务下线前的处理，同时Kubernetes也有个`grace period`，超过这个时间但未完成删除的Pod会被强制删除。\n\n而在Kubernetes 1.13之前，kube-proxy ipvs模式并不支持优雅删除，当Endpoint被删除时，kube-proxy会直接移除掉ipvs中对应的rs，这样会导致后续的数据包被丢掉。\n\n在1.13版本后，Kubernetes添加了[IPVS优雅删除](https://github.com/kubernetes/kubernetes/pull/66012)的逻辑，主要是两点：\n\n- 当Pod被删除时，kube-proxy会先将rs的`weight`置为0，以防止新连接的请求发送到此rs，由于不再直接删除rs，旧连接仍能与rs正常通信；\n- 当rs的`ActiveConn`数量为0（后面版本已改为`ActiveConn+InactiveConn==0`)，即不再有连接转发到此rs时，此rs才会真正被移除。\n\n## kube-proxy ipvs模式下的问题\n看上去kube-proxy ipvs的删除是优雅了，但当优雅删除正巧碰到端口重用，那问题就来了。\n\n首先，kube-proxy希望通过设置`weight`为0，来避免新连接转发到此rs。但当`net.ipv4.vs.conn_reuse_mode=0`时，对于端口复用的连接，ipvs不会主动进行新的调度（调用`ip_vs_try_to_schedule`方法）；同时，只是将`weight`置为0，也并不会触发由`expire_nodest_conn`控制的结束连接或DROP操作，就这样，新连接的数据包当做什么都没发生一样，发送给了正在删除的Pod。这样一来，只要不断的有端口复用的连接请求发来，rs就不会被kube-proxy删除，上面提到的优雅删除的两点均无法实现。\n\n而当`net.ipv4.vs.conn_reuse_mode=1`时，根据`ip_vs_in()`的处理逻辑，当开启了`net.ipv4.vs.conntrack`时，会DROP掉第一个SYN包，导致SYN的重传，有1S延迟。而Kube-proxy在IPVS模式下，使用了iptables进行`MASQUERADE`，也正好开启了`net.ipv4.vs.conntrack`。\n\n```\nconntrack - BOOLEAN\n\t0 - disabled (default)\n\tnot 0 - enabled\n\n\tIf set, maintain connection tracking entries for\n\tconnections handled by IPVS.\n\n\tThis should be enabled if connections handled by IPVS are to be\n\talso handled by stateful firewall rules. That is, iptables rules\n\tthat make use of connection tracking.  It is a performance\n\toptimisation to disable this setting otherwise.\n\n\tConnections handled by the IPVS FTP application module\n\twill have connection tracking entries regardless of this setting.\n\n\tOnly available when IPVS is compiled with CONFIG_IP_VS_NFCT enabled.\n```\n\n这样看来，目前的情况似乎是，如果你需要实现优雅删除中的“保持旧连接不变，调度新连接”能力，那就要付出1s的延迟代价；如果你要好的性能，那么就不能重新调度。\n\n## 如何解决\n从Kubernetes角度来说，Kube-proxy需要在保证性能的前提下，找到一种能让新连接重新调度的方式。但目前从内核代码中可以看到，需要将参数设置如下\n\n```\nnet.ipv4.vs.conntrack=0\nnet.ipv4.vs.conn_reuse_mode=1\nnet.ipv4.vs.expire_nodest_conn=1\n```\n\n但Kube-proxy ipvs模式目前无法摆脱iptables来完成k8s service的转发。此外，Kube-proxy只有在`ActiveConn+InactiveConn==0`时才会删除rs，除此之外，在新的Endpoint和`GracefulTerminationList`（保存了`weight`为0，但暂未删除的rs）中的rs冲突时，才会立即删除rs。这种逻辑似乎并不合理。目前Pod已有优雅删除的逻辑，而kube-proxy应基于Pod的优雅删除，在网络层面做好rs的优雅删除，因此在kubelet完全删除Pod后，Kube-proxy是否也应该考虑同时删除相应的rs？\n\n另外，从内核角度来说，ipvs需要提供一种方式，能在端口复用、同时使用conntrack的场景下，可以对新连接直接重新调度。\n\n## 即将到来\n\n这个问题在社区讨论一段时间后，目前出现的几个相关的解决如下：  \n**内核两个Patch**\n\n- [ipvs: allow connection reuse for unconfirmed conntrack](http://patchwork.ozlabs.org/project/netfilter-devel/patch/20200701151719.4751-1-ja@ssi.bg/)  \n    修改了`ip_vs_conn_uses_conntrack()`方法的逻辑，当使用`unconfirmed conntrack`时，返回false，这种修改针对了TIME_WAIT的conntrack。\n- [ipvs: queue delayed work to expire no destination connections if expire_nodest_conn=1](http://patchwork.ozlabs.org/project/netfilter-devel/patch/20200708161638.13584-1-kim.andrewsy@gmail.com/)  \n    提前了`expire connection`的操作，在destination被删除后，便开始将`expire connection`操作入队列。而不是等到数据包真正发过来时，才做`expire connection`，以此来减少数据包的丢失。\n\n**Kubernetes**  \n[Graceful Termination for External Traffic Policy Local](https://github.com/kubernetes/enhancements/pull/1607)  \n[Add Terminating Condition to EndpointSlice](https://github.com/kubernetes/kubernetes/pull/92968)  \n正如前面所说的，Kube-proxy需要能够感知到Pod的优雅删除过程，来同步进行rs的删除。目前，已有一个相应的KEP在进行中，通过在`Endpoint.EndpointConditions`中添加`terminating`字段，来为kube-proxy提供感知方式。\n\n## 补充\n- [深入kube-proxy ipvs模式的conn_reuse_mode问题](https://maao.cloud/2021/01/15/%E6%B7%B1%E5%85%A5kube-proxy%20ipvs%E6%A8%A1%E5%BC%8F%E7%9A%84conn_reuse_mode%E9%97%AE%E9%A2%98/)\n- [CCE集群IPVS转发模式下conn_reuse_mode问题说明](https://support.huaweicloud.com/cce_faq/cce_faq_00409.html)\n- [ipvs 连接复用引发的系列问题](https://imroc.cc/k8s/faq/ipvs-conn-reuse-mode/)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/9a2b711b9b6c9e73680234bc20b4f0e2.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/2ab9e6153213f00d44b895000a708970.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/96e7baf38359b88946a3e25e4445c6b3.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/6f50802fd1e56703e0d013652a247a24.png)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-%E5%8C%85+crate":{"title":"1. 包+crate","content":"### 包 + Crate\n\n包：提供一系列功能的一个或者多个 crate。一个包中会包含有一个 Cargo.toml 文件，用于阐述如何构建这些 crate。\n\ncrate：一个二进制项或者库。crate root 是一个源文件，Rust 编译器以它为起始点，并构成crate 的根模块\n\n包和 crate 关系：\n- 包中至多只能包含一个库 crate\n- 包中可以包含任意多个二进制 crate。\n- 包中至少包含一个 crate，无论是库的还是二进制的\n\n\n```bash\n~#: cargo new hello_world\n~#: tree hello_world/\nhello_world/\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── main.rs\n```\n\nCargo 遵循的一个约定：\n - _src/main.rs_ 就是一个与包同名的二进制 crate 的 crate 根。\n - 同样的 _src/lib.rs_ 表示包带有与其同名的库 crate，且 _src/lib.rs_ 是 crate 根。\ncrate 根文件将由 Cargo 传递给 `rustc` 来实际构建库或者二进制项目。\n\n**包中只有一个二进制 crate：**\n- 一个包只包含 _src/main.rs_ \n**包中有一个库和一个二进制项：**\n- 一个包同时含有 _src/main.rs_ 和 _src/lib.rs_，且名字都与包相同。\n**包中有多个二进制 crate：**\n- 通过将文件放在 _src/bin_ 目录下，可以让一个包拥有多个二进制 crate。每个 _src/bin_ 下的文件都会被编译成一个独立的二进制 crate。\n\n### 模块 + 路径\n\n\u003e 命名项的 _路径_（_paths_）；用来将路径引入作用域的 `use` 关键字；以及使项变为公有的 `pub` 关键字。 `as` 关键字、外部包和 glob 运算符。\n\n#### 模块\n模块：将 crate 中的代码进行分组，提高可读性和重用性。模块可以控制项的私有性(内部实现、public 可以被外部使用)。\n\n示例：`cargo new --lib restaurant`，来创建一个新的名为 restaurant 的库。 src/lib.rs 内容：\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n        fn server_order() {}\n        fn take_payment() {}\n    }\n}\n```\n\nmod 定义模块。\nmod + 模块名称。在模块内，还可以定义其他的模块，同时还可以定义一些其他项，如结构体、枚举、常量、特性、或者函数。\n\n模块数结构\n```bash\ncrate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment\n```\n\n#### 路径 + 可见性\n\n- **绝对路径**：从 crate 根开始，以 crate 名或者字面值 `crate` 开头\n- **相对路径**：从当前模块开始，以 `self`、`super` 或当前模块的标识符开头。\n绝对路径和相对路径都后跟一个或多个由双冒号（`::`）分割的标识符。\n\n选择使用相对路径还是绝对路径，取决于倾向于将项的定义代码与使用该项的代码分来移动，还是一起移动。建议使用绝对路径，因为它更适合移动代码定义和项调用的相互独立。\n\n**可见性：**\n- Rust 中默认所有项（函数、方法、结构体、枚举、模块和常量）都是私有的。\n- 父模块中的项不能使用子模块中的私有项，但是子模块中的项可以使用他们父模块中的项。\n\nRust 选择以这种方式来实现模块系统功能，因此默认隐藏内部实现细节。这样一来，你就知道可以更改内部代码的哪些部分而不会破坏外部代码。你还可以通过使用 `pub` 关键字来创建公共项，使子模块的内部部分暴露给上级模块。\n\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n需要注意使模块 `pub` 并不能使其内容也是成为 `pub` 的。模块上的 `pub` 关键字只允许其父模块引用它。同时在定义的结构体前面使用了 `pub` ，这个结构体会变成公有的，但是这个结构体的字段仍然是私有的。我们可以根据情况决定每个字段是否公有。与之相反，如果我们将枚举设为公有，则它的所有成员都将变为公有。\n私有性规则不但应用于模块，还应用于结构体、枚举、函数和方法。\n\n使用 `super` 开头来构建从父模块开始的相对路径。\n```rust\nfn serve_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::serve_order();\n    }\n\n    fn cook_order() {}\n}\n```\n\n带有公有、私有成员的结构体，以及构造私有成员的函数\n```rust\nmod back_of_house {\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        pub fn summer(toast: \u0026str) -\u003e Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from(\"peaches\"),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer(\"Rye\");\n    // Change our mind about what bread we'd like\n    meal.toast = String::from(\"Wheat\");\n    println!(\"I'd like {} toast please\", meal.toast);\n\n    // The next line won't compile if we uncomment it; we're not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from(\"blueberries\");\n}\n```\n\npub 的枚举\n```rust\nmod back_of_house {\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n```","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7":{"title":"1. 变量与可变性","content":"变量、基本类型、函数、注释和控制流\n\n## Rust 变量\n\nRust 变量不可变性的原因及方法，何时不使用不可变性\n### 变量不可变的原因\n在尝试改变预设为不可变的值时，产生编译时错误是很重要的，因为这种情况可能导致 bug。如果一部分代码假设一个值永远也不会改变，而另一部分代码改变了这个值，第一部分代码就有可能以不可预料的方式运行。不得不承认这种 bug 的起因难以跟踪，尤其是第二部分代码只是 **有时** 会改变值。\n\nRust 编译器保证，如果声明一个值不会变，它就真的不会变。这意味着当阅读和编写代码时，不需要追踪一个值如何和在哪可能会被改变，从而使得代码易于推导。\n\n### 变量可变与不可变\n- 变量默认是不可改变的，当变量不可变时，一旦值被绑定一个名称上，你就不能改变这个值。\n- 但是仍然可以使用可变变量，变量名之前加 `mut` 来使其可变。除了允许改变值之外，`mut` 向读者表明了其他代码将会改变这个变量值的意图。\n\n### 何时不使用不可变性\n很多地方需要权衡取舍。 如使用大型数据结构时，适当地使用可变变量，可能比复制和返回新分配的实例更快。对于较小的数据结构，总是创建新实例，采用更偏向函数式的编程风格，可能会使代码更易理解，为可读性而牺牲性能或许是值得的。\n\n### 不可变变量与常量的区别\n类似于不可变变量，常量是绑定到一个名称的不允许改变的值，不过常量与变量还是有一些区别。\n\n- 不允许对常量使用 `mut`。常量不光默认不能变，它总是不能变。\n- 声明常量使用 `const` 关键字而不是 `let`，且必须注明值的类型。\n- 常量可以在任何作用域中声明，包括全局作用域。\n- 常量只能被设置为常量表达式，而不能是函数调用的结果，或任何其他只能在运行时计算出的值。\n\n### 隐藏\n```rust\nfn main() {\n    let x = 5;\n    let x = x + 1;\n    let x = x * 2;\n    println!(\"The value of x is: {}\", x); // The value of x is: 12\n}\n```\n\n定义一个与之前变量同名的新变量，而新变量会 **隐藏** 之前的变量。\n\n隐藏与将变量标记为 `mut` 是有区别的。\n- 隐藏使用 `let` 关键字可以改变值的类型，但复用变量名字\n- 当不小心尝试对变量重新赋值时，如果没有使用 `let` 关键字，就会导致编译时错误。\n\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-%E6%89%80%E6%9C%89%E6%9D%83":{"title":"1. 所有权","content":"### 所有权\n\n所有运行的程序都必须管理其使用计算机内存的方式。\n- 一些语言中具有垃圾回收机制，在程序运行时不断地寻找不再使用的内存；\n- 一些语言中，程序员必须亲自分配和释放内存。\n- Rust 则选择通过所有权系统管理内存（编译器在编译时会根据一系列的规则进行检查。在运行时，所有权系统的任何功能都不会减慢程序）\n\n跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的。所有权的存在就是为了管理堆数据。\n\n所有权让 rust 无需垃圾回收即可保障内存安全。\n\n\n**所有权规则**\n1. Rust 中的每一个值都有一个被称为其 **所有者**（_owner_）的变量。\n2. 值有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\nRust 内存回收策略：内存在拥有它的变量离开作用域后就被自动释放。当变量离开作用域，Rust 为我们调用一个特殊的 `drop`函数，释放内存。\n\n**变量与数据交互方式 - 移动**\n**浅拷贝**\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/6244025086a9eed584dae63d1f3291a2.png)\n\n**深拷贝**\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/95af801b5314b4ba1129e6b96259b565.png)\n\n当浅拷贝的变量离开作用域时，调用释放清理函数清理堆内存时，因为两个数据指针指向了同一个位置，对同一内存进行了二次释放，会导致内存污染，它可能会导致潜在的安全漏洞。\n\n因此 rust 面对这种情况，在完成拷贝被分配的内存的同时，将第一个变量无效了。这个操作被称为 **移动**，而不是浅拷贝。因此离开作用域时，只有第二个变量会释放对应的内存。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/5cfa92e1b62d1426b9d45a45ba27f7ad.png)\n\n\n\nrust 的一个设计选择：Rust 永远也不会自动创建数据的 “深拷贝”。因此，任何 **自动** 的复制可以被认为对运行时性能影响较小。\n\n\n**变量与数据交互方式 - 克隆**\n当需要深度复制 `String` 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 `clone` 的通用函数。当出现 `clone` 调用时，这些代码可能相当消耗资源。\n```rust\nlet s1 = String::from(\"hello\");\nlet s2 = s1.clone();\n\nprintln!(\"s1 = {}, s2 = {}\", s1, s2);\n```\n\n**只在栈上的数据：拷贝**\n```rust\nlet x = 5;\nlet y = x;\n\nprintln!(\"x = {}, y = {}\", x, y);\n```\n\n没有调用 `clone`，不过 `x` 依然有效且没有被移动到 `y` 中。为什么呢？\n原因是像整型这样的在编译时已知大小的类型被整个存储在栈上，所以拷贝其实际的值是快速的。这意味着没有理由在创建变量 `y` 后使 `x` 无效。换句话说，这里没有深浅拷贝的区别，所以这里调用 `clone` 并不会与通常的浅拷贝有什么不同。\n\n如果一个类型拥有 `Copy` trait，一个旧的变量在将其赋值给其他变量后仍然可用。当类型或类型中的成员实现了 `Drop` trait 则不能在实现 `Copy` trait。\n\n如下是一些 `Copy` 的类型：\n- 所有整数类型，比如 `u32`。\n- 布尔类型，`bool`，它的值是 `true` 和 `false`。\n- 所有浮点数类型，比如 `f64`。\n- 字符类型，`char`。\n- 元组，当且仅当其包含的类型也都是 `Copy` 的时候。比如，`(i32, i32)` 是 `Copy` 的，但 `(i32, String)` 就不是。\n\n**总结**\n变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它(同样适用于参数以及返回值)。当持有堆中数据值的变量离开作用域时，其值将通过 `drop` 被清理掉，除非数据被移动为另一个变量所有。\n\n如果我们想要函数使用一个值但不获取所有权该怎么办呢？ 答案是**引用**\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-%E7%BD%91%E7%BB%9C-datapath-+-ebpfxdptc":{"title":"1. 网络 datapath + ebpf(xdp、tc)","content":"\n#### 网络包 Data Path\n![nic-rec-package.png](https://images.cherryfloris.eu.org/ryken/2024/05/037c30d7f26ebe6693f928385e36a109.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/05/65856481c7c370d39b1a201520e5d698.png)\n\n\n\nXDP hook作用于到**Ingress**流量，也就是**RX**流向。不会作用到 Egress 流量。\nTC hook作用于**Egress**流量，也就是**TX**流向。\n\n\n在没有引入XDP之前，原来的网络数据包传输路径是这样的：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/05/1385881673bf39c62fe517d2d68f73a8.png)\n\n启用XDP后，网络包传输路径是这样的：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/05/46d69e1dc64dbb6becbe5d3695af3cc0.png)\n\ncilium 中关于 xdp 三种模式的解释：\n- **Native：**\n\t这是默认模式，其中XDP BPF程序直接从网络驱动程序的早期接收路径运行。大多数用于10G及以上的广泛使用的NIC已经支持原生XDP。\n\n- **Offload**：\n\tXDP BPF程序直接卸载到NIC中，而不是在主机CPU上执行。因此，已经极低的每数据包成本完全从主机CPU上移开，并在NIC上执行，提供了比在本机XDP中运行更高的性能。此卸载通常由包含多线程、多核流处理器的SmartNIC实现，其中内核中的JIT编译器将BPF翻译成后者的本机指令。支持卸载XDP的驱动程序通常也支持Native XDP，以用于一些BPF辅助函数在Native模式下可能尚不可用或只在Native模式下可用的情况。\n\n- **Generic**：\n\t对于尚未实现原生或卸载XDP的驱动程序，内核提供了一个 Generic XDP的选项，该选项不需要任何驱动程序更改，因为它在网络堆栈的更晚些运行。\n\n对于在生产环境中使用XDP，原生或卸载模式更适合，也是运行XDP的推荐方式。\n\n\n\n\n\n\n\n\n\n### 参考链接：\n- [Program Types — XDP、TC](https://docs.cilium.io/en/latest/bpf/progtypes/#xdp)\n- [cilium中的datapth简解](https://podsbook.com/posts/cilium/xdp/#tctraffic-classifier)\n\n\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-Kubernetes-DNS":{"title":"1. Kubernetes DNS","content":"### Kubernetes DNS 规范\n\n#### Records for a Service with ClusterIP\n\n##### A/AAAA records \n- `kubernetes.default.svc.cluster.local. 4 IN A 10.3.0.1`\n- `kubernetes.default.svc.cluster.local. 4 IN AAAA 2001:db8::1`\n\n##### SRV records \n未命名的端口没有 SRV 记录\n- `_\u003cport\u003e._\u003cproto\u003e.\u003cservice\u003e.\u003cns\u003e.svc.\u003czone\u003e. \u003cttl\u003e IN SRV \u003cpriority\u003e \u003cweight\u003e \u003cport-number\u003e \u003cservice\u003e.\u003cns\u003e.svc.\u003czone\u003e.`\n- `_https._tcp.kubernetes.default.svc.cluster.local. 30 IN SRV 10 100 443 kubernetes.default.svc.cluster.local.`\n\n##### PTR records \n- `1.0.3.10.in-addr.arpa. 14 IN PTR kubernetes.default.svc.cluster.local.`\n- `1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa. 14 IN PTR kubernetes.default.svc.cluster.local.`\n\n#### Records for a Headless Service\n##### A/AAAA records \n\n对于具有 IPv4 地址 endpoint-ip 的无头服务的每个就绪端点，必须有一条 A/AAAA 记录\n如果无头服务没有现成的端点，则答案应该是 NXDOMAIN。\n- `\u003cservice\u003e.\u003cns\u003e.svc.\u003czone\u003e. \u003cttl\u003e IN A \u003cendpoint-ip\u003e`\n```bash\n    headless.default.svc.cluster.local. 4 IN A 10.3.0.1\n    headless.default.svc.cluster.local. 4 IN A 10.3.0.2\n    headless.default.svc.cluster.local. 4 IN A 10.3.0.3\n\n    headless.default.svc.cluster.local. 4 IN AAAA 2001:db8::1\n    headless.default.svc.cluster.local. 4 IN AAAA 2001:db8::2\n    headless.default.svc.cluster.local. 4 IN AAAA 2001:db8::3\n```\n\n对于主机名为 hostname 和 IPv4 地址 endpoint-ip 的每个就绪端点，还必须有一条以下形式的 A 记录。如果给定主机名有多个 IPv4 地址，则必须为每个 IP 返回一条这样的 A 记录。\n\n- `my-pet.headless.default.svc.cluster.local. 4 IN A 10.3.0.100`\n- `my-pet.headless.default.svc.cluster.local. 4 IN AAAA 2001:db8::1`\n\n##### SRV records \n\n这意味着如果有 N 个就绪端点并且服务定义了 M 个命名端口，则该服务将有 N ✖️ M 个 SRV RR。 未命名的端口没有 SRV 记录\n- `_\u003cport\u003e._\u003cproto\u003e.\u003cservice\u003e.\u003cns\u003e.svc.\u003czone\u003e. \u003cttl\u003e IN SRV \u003cpriority\u003e \u003cweight\u003e \u003cport-number\u003e \u003chostname\u003e.\u003cservice\u003e.\u003cns\u003e.svc.\u003czone\u003e.`\n```yaml\n    _https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 my-pet.headless.default.svc.cluster.local.\n    _https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 my-pet-2.headless.default.svc.cluster.local.\n    _https._tcp.headless.default.svc.cluster.local. 4 IN SRV 10 100 443 438934893.headless.default.svc.cluster.local.\n```\n\n\n##### PTR records \nhostname=my-pet    servicename=headless\n- `100.0.3.10.in-addr.arpa. 14 IN PTR my-pet.headless.default.svc.cluster.local.`\n- `1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa. 14 IN PTR my-pet.headless.default.svc.cluster.local.`\n#### Records for External Name Services\n\n给定命名空间 ns 中名为 service 且具有外部名称 extname 的服务，则必须存在指向 extname 的名为 service.ns.svc.zone 的 CNAME 记录。\n\n- `foo.default.svc.cluster.local. 10 IN CNAME www.example.com.`\n- `www.example.com. 28715 IN A 192.0.2.53`\n\n### Kubernetes DNS \n\n#### Service\n##### A/AAAA records \n\n**Normal Service**\n解析为Service 的 ClusterIP\n名称格式为：`my-svc.my-namespace.svc.cluster-domain.example`\n\n**Headless Service**\n解析为 Service 选择的所有 Pod IP 集\n名称格式为：`my-svc.my-namespace.svc.cluster-domain.example`\n##### srv-records\n为 normal 或 headless Service 一部分的命名端口创建的，每一个命名 port 都有记录\n名称格式为：`port-name.port-protocol.my-svc.my-namespace.svc.cluster-domain.example`\n\n**Normal Service**\n解析为端口号和域名`my-svc.my-namespace.svc.cluster-domain.example`\n\n**Headless Service**\n解析为所选中Pod 的端口号和域名 `hostname.my-svc.my-namespace.svc.cluster-domain.example`\n\n#### Pods\n##### A/AAAA records \n在实施 DNS 规范之前，kube-dns 有以下 dns 记录\n名称格式为：pod-ipv4-address.my-namespace.pod.cluster-domain.example\n\n使用 Service 提供服务的 Pod 具有以下记录：\n名称格式为：pod-ipv4-address.service-name.my-namespace.svc.cluster-domain.example\n##### Pod's hostname and subdomain fields\n一般情况 pod 的 hostname 为 pod 的 metadata.name 值，同时可以通过 spec.hostname 字段覆盖。\n\npod 还有一个可选的 subdomain 字段，用于指示 pod 是 namespace 子组的一部分\n假设 spec.hostname=foo  spec.subdomain=bar，pod 的完全限定域名 (FQDN ）设置为“foo.bar.my-namespace.svc.cluster.local”\n\n如果在与 Pod 相同的命名空间中存在与子域同名的无头服务，则集群的 DNS 服务器还会返回 Pod 完全限定主机名的 A 和/或 AAAA 记录。\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: busybox-subdomain\nspec:\n  selector:\n    name: busybox\n  clusterIP: None\n  ··· ···\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox1\n  labels:\n    name: busybox\nspec:\n  hostname: busybox-1\n  subdomain: busybox-subdomain\n  ··· ···\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox2\n  labels:\n    name: busybox\nspec:\n  hostname: busybox-2\n  subdomain: busybox-subdomain\n  ··· ···\n```\n\n- pod busybox1、busybox2 均拥有：`podip - pod-ipv4-address.my-namespace.pod.cluster-domain.example`\n- service：`podip - busybox-1.busybox-subdomain.my-namespace.svc.cluster-domain.example`\n\n\n\n相关文档链接：\n- kubernetes dns 规范：[dns/specification.md · kubernetes/dns](https://github.com/kubernetes/dns/blob/master/docs/specification.md)\n- service/pod dns 相关：[DNS for Services and Pods](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/)\n- coredns 配置介绍：[Customizing DNS Service | Kubernetes](https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/)\n- [Debugging DNS Resolution | Kubernetes](https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/)\n\n\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.-OFN-Overview":{"title":"1. OFN Overview","content":"\n```dataview\nlist from \"CloudNative/Faas-ofn\"\nsort file.name\n```\n\n### 架构图\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/7a32eb000ce2276b83ed9aeec2cd198d.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/77fb0eadcff5faaaf25f36885442113c.png)\n\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.-client-go":{"title":"1. client-go","content":"### client-go 中的客户端\n\n- RestClient\n- ClientSet\n- DynamicClient\n- DiscoveryClient\n\n其中 `ClientSet`，`DynamicClient`，`DiscoveryClient` 都 `RestClient` 上的封装\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/9ab4b76723a1f5b35d4fadad5ae984bd.png)\n\n\n\n\n### client-go 中的三个队列\n- 去重队列\n- 延时队列\n- 限频队列\n\n其中延时队列是基于去重队列实现，限频队列是基于延时队列实现。\n- **Interface**： 实现了基本的先进先出队列, 跟常规队列相比多了去重功能.\n- **DelayingInterface**：在 Interface 的基础上, 实现了延迟队里功能.\n- **RateLimitingInterface**： 又在 `DelayingInterface` 的基础上, 实现了 `RateLimiter` 限频器功能. 当插入元素的次数超过限频器规则时, 则把对象推到延迟队列中处理.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/d7d2fe710580f6f62b0006efc517fb27.png)\n\n\n**去重队列实现原理：**\n其中包含：\n- 一个 FIFO 切片，表示等待处理的数据\n- 一个数据的 setA，表示队列中含有的元素\n- 一个数据的 setB，表示正在处理的元素，避免并发处理\n\n当元素要 add 到队列时，先看 setA 中是否存在，没有时添加，看 setB 中是否存在，如果不存在则添加到待处理队列中，如果存在则等调用 done 之后再将其添加到队列中。\n\n\n**延时队列实现原理：**\n延时队列使用一个小根堆来对要添加到队列的数据进行存放，当要存放时循环弹出小根堆中已经达到预定时间的堆顶元素，当堆顶元素没有达到预定时间时，便设置一个数值为相差时间的定时器等待\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/e1e86499f02f901fe893ac51417ae47b.png)\n\n\n**限频队列实现原理：**\n限频队列通过限频器计算出需要等待的时长, 然后调用 `delayingQueue.AddAfter()` 方法来决定把对象扔到延迟队里还是队列里.\n\n下面是 workqueue 内置的几个 RateLimiter 限频器.\n- 令牌桶限速器  BucketRateLimiter \n\t- 通过 rate.Limiter 进行限速，通过 rate 获取新元素需要等待的时间\n- 基于 backoff 的限速器 ItemExponentialFailureRateLimiter\n\t- 使用一个 map 记录了各个元素的计数, 后通过经典 backoff 算法可以求出当前需要等待的时长. 默认为 1, 只要不 Forget 抹掉计数, 那么下次再入队时, 其等待的时长为上次的二次方.\n- ItemFastSlowRateLimiter\n\t- 超过阈值则使用 fastDelay, 否则使用 slowDelay 等待间隔.\n- MaxOfRateLimiter\n\t-  可以同时对多个 rateLimiter 实例进行计算, 最后用最大的时长.\n\n\n\n### informer 机制\n\nclient-go 中有 informer、sharedIndexInformer、sharedInformerFactory\n\n其中 Informer 是最基础的，基于内部的组件共同实现其功能，其中组件包括：\n- reflector 反射器：全责 list/watch 数据，并将增量数据放到 deltaFIFO 队列中\n- deltaFIFO 存放增量变动的队列\n- storeIndex：存放索引，加速数据的检索\n- threadSafeMap：本地缓存，用于存放数据\n- controller 控制器：实例化并启动 reflector，并调用 processLoop 来消费 deltaFifo 队列\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/cdc2ddc40356f7608d7950c699d7f4c4.png)\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/c3cf07a7ebeb7557fd6562c73a4eae3f.png)\n\n\nsharedIndexInformer 是共享reflector 反射器和 store ，业务可以注册多个 resourceEventHandler 方法, 无需重复创建 informer 做监听及事件注册. 避免同一个资源的不同 informer/listeners 重复存储数据 - （举例：多个 controller 同时监听 pods，使用一个 pod sharedIndexInformer，创建不同的监听器以及处理事件函数）\n\n下面是 shareIndexInformer \n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/6e40a19674a208dbbebd161eb9bd4eed.png)\n\n\n`HandleDeltas` 用来处理从 `DeltaFIFO` 拿到的 deltas 事件列表, 然后通知给所有的 lisenter 去处理.\n\n\u003e deltas 事件：Added、Updated、Deleted、Replaced、Sync。 `list-watch` 中 list 往队列写的 delta 类型是 Replaced\n\n- 当 delta 事件类型为 `sync/replaced/added/updated` 时, 判断在 store 是否存在该对象, 存在则执行 store.update 操作和 OnUpdate 回调, 反之则执行 store.add 和 OnAdd 回调.\n- 当 delta 事件类型为 deleted 时, 则执行 store.delete 方法. 执行注册方法的 OnDelete.\n`distribute` 收到变更的事件后, 遍历通知给所有的 listener 监听器, 这里的通知是把事件写到 listener 的 addCh 通道.\n\n在添加 listener 监听器时，会启动两个协程处理 run 和 pop 方法\n- `pop()` 监听 addCh 队列把 notification 对象扔到 nextCh 管道里.\n- `run()` 对 nextCh 进行监听, 然后根据不同类型调用不同的 `ResourceEventHandler` 方法.\n\n\n\n\nsharedInformerFactory 组合了多个不同资源的 sharedIndexInformer 对象\n\n\n\n\n参考链接：\n- https://www.cnblogs.com/daemon365/p/17162339.html\n- https://xiaorui.cc/archives/7363\n- https://github.com/rfyiamcool/notes/blob/main/kubernetes_client_go_shared_informer.md\n\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.-ebpf-map-%E7%B1%BB%E5%9E%8B":{"title":"1. ebpf map 类型","content":"内核目前支持 30 来种 BPF map 类型。v5.10 内核版本所有的 bpf map 类型如下：\n\n```bash\n// https://github.com/torvalds/linux/blob/v5.10/include/uapi/linux/bpf.h#L130\n\nenum bpf_map_type {\n    BPF_MAP_TYPE_UNSPEC,\n    BPF_MAP_TYPE_HASH,\n    BPF_MAP_TYPE_ARRAY,\n    BPF_MAP_TYPE_PROG_ARRAY,\n    BPF_MAP_TYPE_PERF_EVENT_ARRAY,\n    BPF_MAP_TYPE_PERCPU_HASH,\n    BPF_MAP_TYPE_PERCPU_ARRAY,\n    BPF_MAP_TYPE_STACK_TRACE,\n    BPF_MAP_TYPE_CGROUP_ARRAY,\n    BPF_MAP_TYPE_LRU_HASH,\n    BPF_MAP_TYPE_LRU_PERCPU_HASH,\n    BPF_MAP_TYPE_LPM_TRIE,\n    BPF_MAP_TYPE_ARRAY_OF_MAPS,\n    BPF_MAP_TYPE_HASH_OF_MAPS,\n    BPF_MAP_TYPE_DEVMAP,\n    BPF_MAP_TYPE_SOCKMAP,\n    BPF_MAP_TYPE_CPUMAP,\n    BPF_MAP_TYPE_XSKMAP,\n    BPF_MAP_TYPE_SOCKHASH,\n    BPF_MAP_TYPE_CGROUP_STORAGE,\n    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,\n    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,\n    BPF_MAP_TYPE_QUEUE,\n    BPF_MAP_TYPE_STACK,\n    BPF_MAP_TYPE_SK_STORAGE,\n    BPF_MAP_TYPE_DEVMAP_HASH,\n    BPF_MAP_TYPE_STRUCT_OPS,\n    BPF_MAP_TYPE_RINGBUF,\n    BPF_MAP_TYPE_INODE_STORAGE,\n};\n```\n\n每种 map 引入时的内核版本可见 bcc [维护的文档](https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md#tables-aka-maps)， 其记录了哪个内核版本引入的，以及对应的 patch。\n\n### Hash Maps\n\n### Array Maps\n\n**BPF_MAP_TYPE_ARRAY**\n\n**BPF_MAP_TYPE_PROG_ARRAY**\n- 使用场景：尾调用 - tail call\n- key：任意整型\n- value：bpf 程序的文件描述符\n\n### CGroup Maps\n\n### Tracing Maps\n\n### Socket Maps\n\n### XDP Maps\n\n### 其他 Maps\n\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.-helloworld":{"title":"1. helloworld","content":"### HelloWorld\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n1. rust 是预编译静态类型语言，将编译和运行分为两个独立的步骤； rustc 编译源文件\n2. `rustfmt` 的自动格式化代码工具\n3. `println!` 调用了 Rust 宏；符号 `!` 意味着调用的是宏而不是普通函数\n4. 行以分号结尾；代表一个表达式的结束和下一个表达式的开始\n\n### HelloCargo\nCargo：Rust 的构建系统和包管理器。（构建代码、下载依赖库、编译依赖库）\n\n1. 使用 cargo 创建项目\n```bash\n~#: cargo new ${projectName}\n~#: tree project/\nproject/\n├── .git/\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n\n```\nCargo 期望源文件存放在 _src_ 目录中。项目根目录只存放 README、license 信息、配置文件和其他跟代码无关的文件\n```toml\n~# cat Cargo.toml \n[package]\nname = \"project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n`[package]`，表明下面的语句用来配置一个包。项目的名称、版本、作者以及要使用的 Rust 版本/你的名字和 email 信息。\n`[dependencies]`，是罗列项目依赖的片段的开始。告诉 Cargo 本项目依赖了哪些外部 crate 及其版本。\n\n\n2. 构建并运行 cargo 项目\n- 构建项目 `cargo build` ，会在 target/debug/下创建可执行文件，也会使 Cargo 在项目根目录创建一个新文件：_Cargo.lock_。这个文件记录项目依赖的实际版本。\n- `cargo run` 编译并运行生成的可执行文件\n- `cargo check` 快速检查代码确保其可以编译，但并不产生可执行文件\n- `cargo doc --open` 查看文档\n\n3. 发布构建 - release\n`cargo build --release` 来优化编译项目。这会在 _target/release_ 而不是 _target/debug_ 下生成可执行文件。这些优化可以让 Rust 代码运行的更快，不过启用这些优化也需要消耗更长的编译时间。\n因此有两种不同的配置：\n - 一种是为了开发，你需要经常快速重新构建；\n - 另一种是为用户构建最终程序，它们不会经常重新构建，并且希望程序运行得越快越好。\n","lastmodified":"2025-03-26T03:48:44.11631524Z","tags":null},"/1.-spiderpool-%E4%BB%8B%E7%BB%8D":{"title":"1. spiderpool 介绍","content":"## 介绍\n**一个主要运用于 underlay ipam 的一个 cni 插件**\n\nSpiderpool 提供了一个 Kubernetes 的 underlay 和 RDMA 网络解决方案, 它能运行在裸金属、虚拟机和公有云上。\n\n## 组件 - 架构图\n\n**CNI 列表**\ncni 有三类 plugin [CNI](https://www.cni.dev/plugins/current/)：\n- Main: interface-creating - 创建相应的容器网卡，打通网络\n- IPAM: IP address allocation - ip 分配、回收\n- Meta: other plugins - 其他功能，如端口转换、防火墙\n\n针对 spiderpool 其一共有以下 cni 插件：\n- **ifacer**：作为 chain plugin，可自动创建 bond、vlan 虚拟接口，作为 macvlan、ipvlan 等插件的父接口使用。\n- **spiderpool**：供 main CNI 调用，实施 IP 分配\n- **coordinator**：作为 chain plugin，实施多网卡路由调谐、IP 冲突检查、宿主机联通、MAC 地址固定等。\n\t- 解决 underlay Pod 无法访问 ClusterIP 的问题\n\t- 在 Pod 多网卡时，调谐 Pod 的路由，确保数据包来回路径一致\n\t- 支持检测 Pod 的 IP 是否冲突\n\t- 支持检测 Pod 的网关是否可达\n\t- 支持固定 Pod 的 Mac 地址前缀\n\n如果单用这些插件是无法为容器创建联通的网络环境，因为 spiderpool 没有提供Main plugin，正如上面描述 spiderpool 供 main CNI 调用，实施 IP 分配。因此 spiderpool 需要和 ipvlan、macvlan 等 Main CNI一同使用。\n\n如果原集群已经有 Overlay 的网络或者想完全发挥 spiderpool 在 underlay 下的能力，应当配合使用 MultusCNI，可以将多个网络接口附加到 Kubernetes 中的 Pod。\n\n**MultusCNI** 可以作为 CNI plugin 的调度器，结合 multus 的 CNI 配置管理和 Spiderpool IPAM 的通用性，集群可同时运行一种 overlay CNI 和 多种 underlay CNI。\n\n\n**组件：**\n- Spiderpool-controller\n    一组 deployment，与 API-Server 交互, 管理多个 CRD 资源: 如 [SpiderIPPool](https://spidernet-io.github.io/spiderpool/v0.9/reference/crd-spiderippool/)、[SpiderSubnet](https://spidernet-io.github.io/spiderpool/v0.9/reference/crd-spidersubnet/)、[SpiderMultusConfig](https://spidernet-io.github.io/spiderpool/v0.9/reference/crd-spidermultusconfig/) 等, 实施这些 CRD 的校验、创建、状态。 并且响应来自 Spiderpool-agent Pod 的请求，分配、释放、回收、自动IP 池等功能。\n    \n- Spiderpool-agent\n    一组 daemonset，运行在每个节点。帮助安装 Multus、Coordinator、IPAM、CNI 等插件到每个节点。并响应 CNI 创建 Pod 时分配 IP 的请求，并与 Spiderpool-controller 交互，完成 Pod IP 的分配与释放。同时与 Coordinator 交互, 的其帮助 Spiderpool plugin 实施 IP 分配，帮助 coordinator plugin 实施配置同步。\n\n其整个架构如下：\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/01/87d86294f8ba1281214060ad0d13a707.png)\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/01/4594a542d5694eabb6aec16eae7d8a51.png)\n\n\n## 定义的 CRD 列表\n\n| 名称                 | 简介                                                |\n| ------------------ | ------------------------------------------------- |\n| SpiderSubnet       | IP 地址的集合                                          |\n| SpiderIPPool       | 为 Pod 分配 IP 的 IP 地址范围。                            |\n| SpiderMultusConfig | multus-cni 定义的 network-attachment-definitions 的封装 |\n| SpiderCoordinator  | 代表 cni 插件 coordinator 的全局默认配置                     |\n| SpiderEndpoint     | ip 分配记录信息                                         |\n| Spiderreservedips  | 为整个集群保留的一些 IP 地址，这些 IP 地址将不会被 IPAM 分配             |\n\n**SpiderSubnet 与 SpiderIPPool：**\n\n启用 Subnet 功能时，每一个 IPPool 实例都归属于子网号相同的 Subnet 实例，IPPool 实例中的 IP 地址必须是 Subnet 实例中 IP 地址的子集，IPPool 实例之间不出现重叠 IP 地址，创建 IPPool 实例时的各种路由属性，默认继承 Subnet 实例中的设置。\n\n在为应用分配固定的 IP 地址时，带来了如下两种实践手段，从而完成应用管理员和网络管理员的职责解耦：\n\n- 手动创建 IPPool : 应用管理员手动创建 IPPool 实例时，可基于对应的 Subnet 实例中的 IP 地址约束，来获知可使用哪些 IP 地址。\n    \n- 自动创建 IPPool : 应用管理员可在 Pod annotation 中注明使用的 Subnet 实例名，在应用创建时，Spiderpool 会自动根据 Subnet 实例中的可用 IP 地址来创建固定 IP 的 IPPool 实例，从中分配 IP 地址给 Pod。并且 Spiderpool 能够自动监控应用的扩缩容和删除事件，自动完成 IPPool 中的 IP 地址扩缩容和删除。\n\n\u003e注意：在 v0.7.0 版本之前，在启动 SpiderSubnet 功能下必须得先创建一个 SpiderSubnet 资源才可以创建 SpiderIPPool 资源。在v0.7.0版本开始，支持创建一个独立的 SpiderIPPool 资源而不依赖于 SpiderSubnet 资源。\n\n\n## 使用模式\n### underlay 模式\n\n**实现原理：**\n\n对于 calico/weave 这种插件可以直接替换 ipam 二进制\n对于 macvlan、ovs、SR-IOV 这种插件依旧使用 multus 进行管理\n\n\u003ecalico 依借 bgp 模式，可以实现 pod cidr 向外宣告。在安装 spiderpool 的时候需要创建一个 相同 cidr 的 ippool 用于向外宣告路由，之后替换 ipam 插件，使用 spiderpool 指定 spiderippool 分配即可。\n\n### overlay 模式\n\n**实现原理：**\n\n使用 multus 进行管理，即在容器网络中再插入一张额外的网卡搭建 underlay 网络。\n\n## IPAM 使用\n### 指定 subnet 分配\n指定 subnet 分配，从 subnet 中分配 ippool，自动创建 ippool 并实现 ippool 的自动扩缩容\n```yaml\nipam.spidernet.io/subnet: |-\n  {\n    \"ipv4\": [\"demo-v4-subnet1\"],\n    \"ipv6\": [\"demo-v6-subnet1\"]\n  }\n```\n\n在多个接口的情况下，需要指定字段接口来区分。\n```yaml\nipam.spidernet.io/subnets: |-\n  [{\n      \"interface\": \"eth0\",\n      \"ipv4\": [\"demo-v4-subnet1\"],\n      \"ipv6\": [\"demo-v6-subnet1\"]\n   },{\n      \"interface\": \"net1\",\n      \"ipv4\": [\"demo-v4-subnet2\"],\n      \"ipv6\": [\"demo-v6-subnet2\"]\n  }]\n```\n\n### 指定 ippool 分配\n```yaml\nipam.spidernet.io/ippool: |-\n  {\n    \"ipv4\": [\"demo-v4-ippool1\"],\n    \"ipv6\": [\"demo-v6-ippool1\", \"demo-v6-ippool2\"]\n  }\n```\n\nipam.spidernet.io/ippools 与 ipam.spidernet.io/ippool 类似，但可用于具有多个接口的情况。请注意，ipam.spidernet.io/ippools 优先于 ipam.spidernet.io/ippool。\n```yaml\nipam.spidernet.io/ippools: |-\n  [{\n      \"interface\": \"eth0\",\n      \"ipv4\": [\"demo-v4-ippool1\"],\n      \"ipv6\": [\"demo-v6-ippool1\"],\n      \"cleangateway\": true\n   },{\n      \"interface\": \"net1\",\n      \"ipv4\": [\"demo-v4-ippool2\"],\n      \"ipv6\": [\"demo-v6-ippool2\"],\n      \"cleangateway\": false\n  }]\n```\n\ncleangateway 如果设置为true，IPAM插件将不会返回IPPool中记录的默认路由（由spec.gateway生成）\n\n### 绑定 namespace \n```yaml\nipam.spidernet.io/default-ipv4-ippool: '[\"ns-v4-ippool1\",\"ns-v4-ippool2\"]'\nipam.spidernet.io/default-ipv6-ippool: '[\"ns-v6-ippool1\",\"ns-v6-ippool2\"]'\n```\n\n### 其余相关 annotation\n1. 附加路由 ipam.spidernet.io/routes\n2. 指定创建相应 spiderippool 的 ip 数量(动态创建的 ippool 的大小) ipam.spidernet.io/ippool-ip-number\n3. 删除应用之后是否清除 spiderippool ipam.spidernet.io/ippool-reclaim\n\n\n## 流量走向\n\n**Pod 接入一个 overlay CNI 和若干个 underlay CNI 网卡**\n  ![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/54d9c6ba64605b2a1b66ef3113358ccb.png)\n\n如上所示，Spiderpool 工作在 overlay 模式下，使用 multus 同时为为 Pod 插入一张 overlay 网卡（例如 [calico](https://github.com/projectcalico/calico), [cilium](https://github.com/cilium/cilium) ）和若干张 underlay 网卡（例如 [macvlan CNI](https://github.com/containernetworking/plugins/tree/main/plugins/main/macvlan), [sriov CNI](https://github.com/k8snetworkplumbingwg/sriov-cni) ）。\n* Spiderpool 为 Pod 的多个 underlay CNI 网卡和 overlay 网卡调谐路由，以实现请求向和回复向数据路径一致，确保网络通信畅通。\n* Spiderpool 以 overlay 网卡作为缺省网卡，并调谐路由，通过 overlay 网卡联通本地宿主机，实现 clusterIP 访问、应用的本地健康检测、overlay 网络流量通过 overlay 网络转发，而 underlay 网络流量通过 underlay 网卡转发。\n\n举例说明：\n\n等待 Pod ready，查看 IP 分配情况:\n```shell\n~#  kubectl get po -l app=nginx -o wide\nNAME                     READY   STATUS    RESTARTS   AGE   IP                NODE        NOMINATED NODE   READINESS GATES\nnginx-4653bc4f24-aswpm   1/1     Running   0          2m    10.233.105.167    controller  \u003cnone\u003e           \u003cnone\u003e\nnginx-4653bc4f24-rswak   1/1     Running   0          2m    10.233.73.210     worker01    \u003cnone\u003e           \u003cnone\u003e\n```\n\n```shell\n~# kubectl get se\nNAME                     INTERFACE   IPV4POOL            IPV4               IPV6POOL   IPV6   NODE\nnginx-4653bc4f24-rswak   net1        10-6-v4             10.6.212.145/16                      worker01\nnginx-4653bc4f24-aswpm   net1        10-6-v4             10.6.212.148/16                      controller\n```\n\n进入到 Pod 内部， 通过 `ip` 命令查看 Pod 中 IP、路由等信息:\n\n```shell\n[root@controller1 ~]# kubectl exec it nginx-4653bc4f24-rswak sh\n# ip a\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: \u003cNOARP\u003e mtu 1480 qdisc noop state DOWN group default qlen 1000\n    link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if3: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1430 qdisc noqueue state UP group default\n    link/ether a2:99:9d:04:01:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.233.73.210/32 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fd85:ee78:d8a6:8607::1:eb84/128 scope global\n       valid_lft forever preferred_lft forever\n    inet6 fe80::a099:9dff:fe04:180/64 scope link\n       valid_lft forever preferred_lft forever\n5: net1@if2: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default\n    link/ether 2a:1e:a1:db:2a:9a brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.6.212.145/16 brd 10.6.255.255 scope global net1\n       valid_lft forever preferred_lft forever\n    inet6 fd00:10:6::2e5/64 scope global\n       valid_lft forever preferred_lft forever\n    inet6 fe80::281e:a1ff:fedb:2a9a/64 scope link\n       valid_lft forever preferred_lft forever\n/# ip rule\n0: from all lookup local\n32760: from 10.6.212.132 lookup 100\n32766: from all lookup main\n32767: from all lookup default\n/# ip route\ndefault via 169.254.1.1 dev eth0\n10.6.0.0/16 dev net1 scope link  src 10.6.212.145\n10.6.212.132 dev eth0 scope link\n10.233.0.0/18 via 10.6.212.132 dev eth0 \n10.233.64.0/18 via 10.6.212.132 dev eth0\n169.254.1.1 dev eth0 scope link\n/ # ip route show table 100\ndefault via 10.6.0.1 dev net1\n10.6.0.0/16 dev net1 scope link  src 10.6.212.145\n10.6.212.132 dev eth0 scope link\n10.233.0.0/18 via 10.6.212.132 dev eth0 \n10.233.64.0/18 via 10.6.212.132 dev eth0\n```\n\n以上表项解释:\n\n\u003e Pod 中分配了 Calico(eth0) 和 Macvlan(net1) 两张网卡, IPv4 地址分别是: 10.233.73.210 和 10.6.212.145\n\u003e\n\u003e 10.233.0.0/18 和 10.233.64.0/18 是集群的 CIDR, Pod访问该子网时从 eth0 转发, 每个 route table 都会插入此路由\n\u003e\n\u003e 10.6.212.132 是 Pod 所在节点的地址，此路由确保 Pod 访问该主机时从 eth0 转发\n\u003e\n\u003e 这一系列的路由确保 Pod 访问集群内目标时从 eth0 转发，访问外部目标时从 net1 转发\n\u003e\n\u003e 在默认情况下，Pod 的默认路由保留在 eth0。如果想要保留在其他网卡(如 net1)，可以通过在 Pod 的 annotations 中注入: \"ipam.spidernet.io/default-route-nic: net1\" 实现。\n\n下面测试 Pod 基本网络连通性，以访问 CoreDNS 的 Pod 和 Service 为例:\n\n```shell\n~# kubectl  get all -n kube-system -l k8s-app=kube-dns -o wide\nNAME                           READY   STATUS    RESTARTS      AGE   IP               NODE          NOMINATED NODE   READINESS GATES\npod/coredns-57fbf68cf6-2z65h   1/1     Running   1 (91d ago)   91d   10.233.105.131   worker1       \u003cnone\u003e           \u003cnone\u003e\npod/coredns-57fbf68cf6-kvcwl   1/1     Running   3 (91d ago)   91d   10.233.73.195    controller    \u003cnone\u003e           \u003cnone\u003e\n\nNAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR\nservice/coredns   ClusterIP   10.233.0.3   \u003cnone\u003e        53/UDP,53/TCP,9153/TCP   91d   k8s-app=kube-dns\n\n~# 跨节点访问 CoreDNS 的 Pod\n~# kubectl  exec nginx-4653bc4f24-rswak -- ping 10.233.73.195 -c 2\nPING 10.233.73.195 (10.233.73.195): 56 data bytes\n64 bytes from 10.233.73.195: seq=0 ttl=62 time=2.348 ms\n64 bytes from 10.233.73.195: seq=1 ttl=62 time=0.586 ms\n\n--- 10.233.73.195 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.586/1.467/2.348 ms\n\n~# 访问 CoreDNS 的 service\n~# kubectl exec  nginx-4653bc4f24-rswak -- curl 10.233.0.3:53 -I\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0\ncurl: (52) Empty reply from server\n```\n\n测试 Pod 访问集群南北向流量的联通性，以访问其他网段目标(10.7.212.101)为例:\n\n```shell\n[root@controller1 cyclinder]# kubectl exec nginx-4653bc4f24-rswak -- ping 10.7.212.101 -c 2\nPING 10.7.212.101 (10.7.212.101): 56 data bytes\n64 bytes from 10.7.212.101: seq=0 ttl=61 time=4.349 ms\n64 bytes from 10.7.212.101: seq=1 ttl=61 time=0.877 ms\n\n--- 10.7.212.101 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.877/2.613/4.349 ms\n```\n\n**Pod 接入若干个 underlay CNI 网卡**\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/1621fcaa540b184cc71977bec8dddb58.png)\n\n\n如上所示，Spiderpool 工作在 underlay 模式下，可配合 underlay CNI （例如 [macvlan CNI](https://github.com/containernetworking/plugins/tree/main/plugins/main/macvlan), [SR-IOV CNI](https://github.com/k8snetworkplumbingwg/sriov-cni) ）。\n\n* Spiderpool 为 Pod 接入一个或者多个 underlay 网卡，并能调谐多个 underlay CNI 网卡间的路由，以实现请求向和回复向数据路径一致，确保网络通信畅通。\n\n* 通过额外接入 veth 网卡和路由控制，帮助开源 underlay CNI 联通宿主机，实现 clusterIP 访问、应用的本地健康检测等\n\n当以 Underlay 模式创建 Pod 后，我们进入到 Pod 内部，看看路由等信息:\n\n```shell\nroot@controller:~# kubectl exec -it macvlan-underlay-5496bb9c9b-c7rnp sh\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n#\n# ip a show veth0\n5: veth0@if428513: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default\n    link/ether 4a:fe:19:22:65:05 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::48fe:19ff:fe22:6505/64 scope link\n       valid_lft forever preferred_lft forever\n# ip r\ndefault via 10.6.0.1 dev eth0\n10.6.0.0/16 dev eth0 proto kernel scope link src 10.6.212.241\n10.6.212.101 dev veth0 scope link\n10.233.64.0/18 via 10.6.212.101 dev veth0\n```\n\n- **10.6.212.101 dev veth0 scope link**: 10.6.212.101 是节点的 IP,确保 Pod 访问本节点时从 `veth0` 转发。\n\n- **10.233.64.0/18 via 10.6.212.101 dev veth0**: 10.233.64.0/18 是集群 Service 的 CIDR, 确保 Pod 访问 ClusterIP 时从 `veth0` 转发。\n\n这个方案强烈依赖与 kube-proxy 的 MASQUERADE , 否则回复报文将直接转发给源 Pod, 如果经过一些安全设备，将会丢弃数据包。所以在一些特殊的场景下，我们需要设置 kube-proxy 的 `masqueradeAll` 为 true。\n\n\u003e 在默认情况下，Pod 的 underlay 子网与集群的 clusterCIDR 不同， 无需开启 `masqueradeAll`, 它们之间的访问将会被 SNAT。\n\u003e 如果 Pod 的 underlay 子网与集群的 clusterCIDR 相同，那我们必须要设置 `masqueradeAll` 为 true。\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/05d23d1dcc7b4a8948b74aeac9194328.png)\n\n[Underlay CNI 访问 Service - spiderpool (spidernet-io.github.io)](https://spidernet-io.github.io/spiderpool/v0.9/usage/underlay_cni_service-zh_CN/)\n\n\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/1.-vector-+-map":{"title":"1. vector + map","content":"### Vector\n\n\n\n### 字符串\n### Map\n","lastmodified":"2025-03-26T03:48:44.117315237Z","tags":null},"/2.-%E5%88%9D%E5%A7%8B%E5%8C%96-%E7%BB%84%E4%BB%B6":{"title":"2. 初始化 - 组件","content":"### 部署后组件总览\n- daemonset：spiderpool-agent\n- deployment：spiderpool-controller\n- pod：spiderpool-init\n\n### spiderpoolInit\npod：/usr/bin/spiderpool-init\n根据环境变量初始化 spiderpoolCoordinator、subnet、ippool、多集群资源，初始化完成之后退出。\n\n\n### daemonset - agent(hostnetwork)\n- init container\n\t- install plugins\n\t- multus-cni\n- containers\n\t- spiderpool-agent daemon --config-path=/tmp/spiderpool/config-map/conf.yml\n\t\t- ipam\n\t\t- openapi httpsServer\n\t\t- unix server\n\t\t- runtime manager - crd manager\n\t\t- metricsServer\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: spiderpool-conf\n  namespace: kube-system\ndata:\n  conf.yml: |\n    ipamUnixSocketPath: /var/run/spidernet/spiderpool.sock\n    enableIPv4: true\n    enableIPv6: true\n    enableStatefulSet: true\n    enableKubevirtStaticIP: true\n    enableSpiderSubnet: true\n    clusterSubnetDefaultFlexibleIPNumber: 1\n```\n\n### spiderpool-controller(hostnetwork)\n- 挂载主机 cni 的配置文件：/etc/cni/net.d\n- containers\n\t- spiderpool-controller daemon --config-path=/tmp/spiderpool/config-map/conf.yml --tls-server-cert=/etc/tls/tls.crt --tls-server-key=/etc/tls/tls.key\n\t\t- metrics-server\n\t\t- openapi-httpserver\n\t\t- gc-manager\n\t\t- runtime-manager\n\n\n### webhook\n- MutatingWebhookConfiguration\n\t- spidersubnet\n\t- spidermultusconfig\n\t- spiderippool\n\t- spiderreservedip\n\t- spidercoordinator\n- ValidatingWebhookConfiguration\n\t- spidersubnet\n\t- spiderippool\n\t- spiderreservedip\n\t- spidercoordinator\n\t- spidermultusconfig\n\n\n```yaml\napiVersion: spiderpool.spidernet.io/v2beta1\nkind: SpiderMultusConfig\nmetadata:\n  name: macvlan-vlan0\n  namespace: kube-system\nspec:\n  cniType: macvlan\n  coordinator:\n    detectGateway: false\n    detectIPConflict: false\n    mode: auto\n    podDefaultRouteNIC: \"\"\n    podMACPrefix: \"\"\n    tunePodRoutes: false\n    txQueueLen: 0\n  disableIPAM: false\n  enableCoordinator: true\n  macvlan:\n    ippools:\n      ipv4:\n      - default-v4-ippool\n      ipv6:\n      - default-v6-ippool\n    master:\n    - eth0\n    vlanID: 0\n```\n\n```yaml\napiVersion: k8s.cni.cncf.io/v1\nkind: NetworkAttachmentDefinition\nmetadata:\n  name: macvlan-vlan200\n  namespace: kube-system\n  ownerReferences:\n  - apiVersion: spiderpool.spidernet.io/v2beta1\n    blockOwnerDeletion: true\n    controller: true\n    kind: SpiderMultusConfig\n    name: macvlan-vlan200\n    uid: b2ea4d51-e101-4d0f-b307-6f2cf676ceb5\nspec:\n  config: '{\"cniVersion\":\"0.3.1\",\"name\":\"macvlan-vlan200\",\"plugins\":[{\"vlanID\":200,\"type\":\"ifacer\",\"interfaces\":[\"eth0\"]},{\"type\":\"macvlan\",\"master\":\"eth0.200\",\"mode\":\"bridge\",\"ipam\":{\"type\":\"spiderpool\",\"default_ipv4_ippool\":[\"vlan200-v4\"],\"default_ipv6_ippool\":[\"vlan200-v6\"]}},{\"detectIPConflict\":false,\"detectGateway\":false,\"mode\":\"auto\",\"type\":\"coordinator\"}]}'\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/01/648b37852e96892c06607ea25b6ece63.png)\n\n\n\nmultus-cni\n/bin/sh\n        - -c\n        - |\n          ITEM=\"multus\"\n          rm -f /host/opt/cni/bin/${ITEM}.old || true\n          ( [ -f \"/host/opt/cni/bin/${ITEM}\" ] \u0026\u0026 mv /host/opt/cni/bin/${ITEM} /host/opt/cni/bin/${ITEM}.old ) || true\n          cp /usr/src/multus-cni/bin/${ITEM} /host/opt/cni/bin/${ITEM}\n          rm -f /host/opt/cni/bin/${ITEM}.old \u0026\u003e/dev/null  || true\n          sed -i 's/sleep infinity/echo \\\"exit...\\\"/g'  entrypoint.sh\n          ./entrypoint.sh --multus-conf-file=/tmp/multus-conf/00-multus.conf \\\n            --cni-version=0.3.1\n\n","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8":{"title":"2. 引用与借用","content":"### 不可变引用\n`calculate_length` 函数，它以一个对象的引用作为参数而不是获取值的所有权\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let len = calculate_length(\u0026s1);\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: \u0026String) -\u003e usize {\n    s.len()\n}\n```\n\n引用：创建一个 **指向** 值 `s1` 的引用，但是并不拥有它。因为并不拥有这个值，当引用离开作用域时其指向的值也不会被丢弃。\n获取引用作为函数参数称为 **借用**。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/52485a0b4146d3c468c77869aab3703b.png)\n\n\u003e  1. `\u0026` 引用\n\u003e  2. `*` 解引用\n\n### 可变引用\n\n当尝试修改借用的变量时，应该使用可变引用。\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n    change(\u0026mut s);\n}\n\nfn change(some_string: \u0026mut String) {\n    some_string.push_str(\", world\");\n}\n```\n\n#### 可变引用的限制\n**可变引用有一个很大的限制：在特定作用域中的特定数据有且只有一个可变引用**。这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n- 不能在拥有不可变引用的同时拥有可变引用。不可变引用的用户可不希望在他们的眼皮底下值就被意外的改变了！\n- 多个不可变引用是可以的，因为没有哪个只能读取数据的人有能力影响其他人读取到的数据。\n\n数据竞争由这三个行为造成：\n- 两个或更多指针同时访问同一数据。\n- 至少有一个指针被用来写入数据。\n- 没有同步数据访问的机制。\n\n#### 可变引用的作用域\n**从声明的地方开始一直持续到最后一次使用为止**\n```rust\nlet mut s = String::from(\"hello\");\n\nlet r1 = \u0026s; // 没问题\nlet r2 = \u0026s; // 没问题\nprintln!(\"{} and {}\", r1, r2);\n// 此位置之后 r1 和 r2 不再使用\n\nlet r3 = \u0026mut s; // 没问题\nprintln!(\"{}\", r3);\n```\n\n### 悬垂引用\nC语言等有指针语言中，很容易通过释放内存让保留指向它的指针而错误地生成一个 **悬垂指针**。所谓悬垂指针是其指向的内存可能已经被分配给其它持有者。\nRust 编译器确保引用永远也不会变成悬垂状态：编译器确保数据不会在其引用之前离开作用域。\n\n在下面的例子中，因为 `s` 是在 `dangle` 函数内创建的，当 `dangle` 的代码执行完毕后，`s` 将被释放。不过我们尝试返回它的引用。这意味着这个引用会指向一个无效的 `String`，这可不对！Rust 不会允许我们这么做。\n```rust\n// 编译器报错\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -\u003e \u0026String {\n    let s = String::from(\"hello\");\n    \u0026s\n}\n```\n\n修改为下面的代码即可解决：所有权被移动出去，所以没有值被释放\n```rust\nfn no_dangle() -\u003e String {\n    let s = String::from(\"hello\");\n    s\n}\n```\n### 总结\n- 在任意给定时间，**要么** 只能有一个可变引用，**要么** 只能有多个不可变引用。\n- 引用必须总是有效的。","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B":{"title":"2. 数据类型","content":"Rust 是 **静态类型**（_statically typed_）语言，即在编译时就必须知道所有变量的类型。根据值及其使用方式，编译器通常可以推断出我们想要用的类型。当多种类型均有可能时，必须增加类型注解。\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\n\n两类数据类型子集：标量（scalar）和复合（compound）\n### 标量类型\n- 整型\n- 浮点型\n- 布尔型\n- 字符类型\n\n#### 整型\n\n|长度|有符号|无符号|\n|---|---|---|\n|8-bit|`i8`|`u8`|\n|16-bit|`i16`|`u16`|\n|32-bit|`i32`|`u32`|\n|64-bit|`i64`|`u64`|\n|128-bit|`i128`|`u128`|\n|arch|`isize`|`usize`|\n`isize` 和 `usize` 类型依赖运行程序的计算机架构：64 位架构上它们是 64 位的， 32 位架构上它们是 32 位的。`isize` 或 `usize` 主要作为某些集合的索引。\nRust 数字类型默认是 `i32`：它通常是最快的，甚至在 64 位系统上也是。\n\n**整数溢出**：\n- debug 模式：Rust 检查这类问题并使程序 panic\n- release 模式：Rust 不检测溢出，溢出后进行二进制补码包装\n\nRust 中的整型字面值。注意除 byte 以外的所有数字字面值允许使用类型后缀，例如 `57u8`，同时也允许使用 `_` 做为分隔符以方便读数，例如`1_000`。\n\n|数字字面值|例子|\n|---|---|\n|Decimal|`98_222`|\n|Hex|`0xff`|\n|Octal|`0o77`|\n|Binary|`0b1111_0000`|\n|Byte (`u8` only)|`b'A'`|\n\n#### 浮点型、布尔型、字符类型\n- **浮点型**\nRust 的浮点数类型是 `f32` 和 `f64`，分别占 32 位和 64 位。默认类型是 `f64`，因为在现代 CPU 中，它与 `f32` 速度几乎一样，不过精度更高。\n\n- **布尔型**\nRust 中的布尔类型有两个可能的值：`true` 和 `false`。Rust 中的布尔类型使用 `bool` 表示。\n```rust\nfn main() {\n    let t = true;\n    let f: bool = false; // 显式指定类型注解\n}\n```\n\n- **字符型**\nRust 的 `char` 类型的大小为四个字节，并代表了一个 Unicode 标量值，这意味着它可以比 ASCII 表示更多内容。Unicode 标量值包含从 `U+0000` 到 `U+D7FF` 和 `U+E000` 到 `U+10FFFF` 在内的值。\n在 Rust 中，拼音字母、中文、日文、韩文、emoji（绘文字）以及零长度的空白字符都是有效的 `char` 值。\n\n\u003e 注意 `char` 由单引号指定，不同于字符串使用双引号。\n\n#### 数值运算\n\nRust 中的所有数字类型都支持基本数学运算：加法、减法、乘法、除法和取余。\n```rust\nfn main() {\n    let sum = 5 + 10;    // 加法\n    let difference = 95.5 - 4.3;    // 减法\n    let product = 4 * 30;    // 乘法\n    let quotient = 56.7 / 32.2;    // 除法\n    let remainder = 43 % 5;    // 取余\n}\n```\n### 符合类型\n- 元组\n- 数组\n\n#### 元组类型\n元组是一个将多个其他类型的值组合进一个复合类型的主要方式。元组中的每一个位置都有一个类型，而且这些不同值的类型也不必是相同的。\n元组长度固定：一旦声明，其长度不会增大或缩小。\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\n从元组中获取单个值，可以使用模式匹配来解构元组值，也可以使用点号（`.`）后跟值的索引来直接访问它们。\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n    let (x, y, z) = tup;\n    println!(\"The value of y is: {}\", y);\n\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n    let five_hundred = x.0;\n    let six_point_four = x.1;\n    let one = x.2;\n}\n```\n\n#### 数组类型\n**与元组不同，数组中的每个元素的类型必须相同。**\n数组是固定长度的：一旦声明，它们的长度不能增长或缩小。\nvector 类型是标准库提供的一个 允许增长和缩小长度的类似数组的集合类型。\n\n数组是一整块分配在栈上的内存，使用索引来访问数组的元素；访问越界时，编译通过但会出现运行时错误， panic。\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n    // `i32` 是每个元素的类型。数字 `5` 表明该数组包含五个元素\n    let a: [i32; 5] = [1, 2, 3, 4, 5]; \n    // 每个元素都相同的数组 [初始值;数组长度]\n    let a = [3; 5];\n}\n```","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F":{"title":"2. 猜数游戏","content":"### 读取标准输入的数据\n```rust\nuse std::io;\n/*\n默认情况下，Rust 将 prelude 模块中少量的类型引入到每个程序的作用域中。\n如果需要的类型不在 prelude 中，你必须使用 use 语句显式地将其引入作用域\n*/\n\nfn main() {\n    let mut guess = String::new();    /*\n    1. let 创建变量， 默认为不可变；使用 mut，让变量成为可变变量\n    2. String 是一个标准库提供的字符串类型，它是 UTF-8 编码的可增长文本块。\n    3. ::new() 类型的关联函数/静态方法；很多类型都有 new 函数，因为它是创建类型实例的惯用函数名。\n     */\n\n    io::stdin().read_line(\u0026mut guess).expect(\"Failed to read line\");\n    /*\n    1. \u0026 表示这个参数是一个引用，它允许多处代码访问同一处数据，而无需在内存中多次拷贝。\n    2. Rust 的一个主要优势就是安全而简单的操纵引用。\n    3. 引用默认是不可变的。需要写成 \u0026mut来使其可变\n\n    4. io::Result 类型为 enums、枚举，作用是编码错误处理信息；io::Result 的实例拥有 expect 方法\n    5. Result 的成员是 Ok 和 Err：\n        Ok 成员表示操作成功，内部包含成功时产生的值；如果 io::Result 实例的值是 Ok，expect 会获取 Ok 中的值并原样返回\n        Err 成员则意味着操作失败，并且包含失败的前因后果。如果 io::Result 实例的值是 Err，expect 会导致程序崩溃，并显示当做参数传递给 expect 的信息。\n    6. 如果不调用 expect，程序也编译通过，但会出现一个警告；消除警告的正确做法是编写错误处理代码\n\n     */\n\n    println!(\"You guessed: {}\", guess);\n    /*\n    1. {} 是一个占位符。使用 {} 也可以打印多个值：\n     */\n}\n\n```\n\n### 引入随机数\ncrate 是一个 rust 代码包：\n- 二进制 crate - 生成一个可执行文件\n- 库 crate - 可以任意可以被程序使用的代码\n\n1. 编辑 Cargo.toml，添加 rand 依赖\n```toml\n[dependencies]\nrand = \"0.5.5\"\n#  语义化版本 0.5.5 来指定 rand crate\n#  0.5.5 事实上是 ^0.5.5 的简写，表示 “任何与 0.5.5 版本公有 API 相兼容的版本”\n```\n\n可能会出现不同的版本号（多亏了语义化版本，它们与代码是兼容的！），同时显示顺序也可能会有所不同。\n```bash\n~# cargo build\n    Blocking waiting for file lock on package cache\n    Updating crates.io index\n    Blocking waiting for file lock on package cache\n  Downloaded rand_core v0.4.2\n  Downloaded rand_core v0.3.1\n  Downloaded libc v0.2.149\n  Downloaded rand v0.5.6\n  Downloaded 4 crates (888.6 KB) in 1.91s\n    Blocking waiting for file lock on package cache\n   Compiling libc v0.2.149\n   Compiling rand_core v0.4.2\n   Compiling rand_core v0.3.1\n   Compiling rand v0.5.6\n   Compiling guessing_game v0.1.0 (/root/program/rust/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 8.00s\n```\n\nCargo.lock 文件确保构建是可重现的\n- 没有 Cargo.lock 时，运行`cargo build`时，Cargo 会计算出所有符合要求的依赖版本并写入 _Cargo.lock_ 文件\n- 当有 Cargo.lock 并再次构建时，Cargo 会发现 _Cargo.lock_ 已存在并使用其中指定的版本，不会再次计算所有的版本。这使得你拥有了一个自动化的可重现的构建。换句话说，项目会持续使用 `0.5.5` 直到你显式升级，多亏有了 _Cargo.lock_ 文件。\n\n更新依赖\n- `cargo update`；会忽略 _Cargo.lock_ 文件，并计算出所有符合 _Cargo.toml_ 声明的最新版本。如果成功了，Cargo 会把这些版本写入 _Cargo.lock_ 文件。\n- Cargo 默认只会寻找大于 `0.5.5` 而小于 `0.6.0` 的版本。\n- 如果想要使用 `0.6.0` 版本的 `rand` 或是任何 `0.6.x` 系列的版本，必须手动更新 _Cargo.toml_ 文件\n\n\n### 比较、循环\n\n```rust\nuse std::io;\n/*\n默认情况下，Rust 将 prelude 模块中少量的类型引入到每个程序的作用域中。\n如果需要的类型不在 prelude 中，你必须使用 use 语句显式地将其引入作用域\n*/\nuse rand::Rng;\n/*\nRng 是一个 trait；\n*/\nuse std::cmp::Ordering;\n\n\nfn main() {\n    println!(\"guess number game\");\n    let guess_number = rand::thread_rng().gen_range(1, 101); // 包含下限但不包含上限\n    println!(\"The random number is: {}\", guess_number);\n    /*\n    1. 注意：你不可能凭空就知道应该 use 哪个 trait 以及该从 crate 中调用哪个方法。\n    2. rand::thread_rng 函数提供实际使用的随机数生成器：它位于当前执行线程的本地环境中，并从操作系统获取 seed。\n    3. gen_range 函数是随机数生成器，该方法由刚才引入到作用域的 Rng trait 定义。\n    */\n\n    loop {    \n        println!(\"Please input your guess.\");\n        let mut guess = String::new();    /*\n        1. let 创建变量， 默认为不可变；使用 mut，让变量成为可变变量\n        2. String 是一个标准库提供的字符串类型，它是 UTF-8 编码的可增长文本块。\n        3. ::new() 类型的关联函数/静态方法；很多类型都有 new 函数，因为它是创建类型实例的惯用函数名。\n        */\n\n        io::stdin().read_line(\u0026mut guess).expect(\"Failed to read line\");\n        /*\n        1. \u0026 表示这个参数是一个引用，它允许多处代码访问同一处数据，而无需在内存中多次拷贝。\n        2. Rust 的一个主要优势就是安全而简单的操纵引用。\n        3. 引用默认是不可变的。需要写成 \u0026mut来使其可变\n\n        4. io::Result 类型为 enums、枚举，作用是编码错误处理信息；io::Result 的实例拥有 expect 方法\n        5. Result 的成员是 Ok 和 Err：\n            Ok 成员表示操作成功，内部包含成功时产生的值；如果 io::Result 实例的值是 Ok，expect 会获取 Ok 中的值并原样返回\n            Err 成员则意味着操作失败，并且包含失败的前因后果。如果 io::Result 实例的值是 Err，expect 会导致程序崩溃，并显示当做参数传递给 expect 的信息。\n        6. 如果不调用 expect，程序也编译通过，但会出现一个警告；消除警告的正确做法是编写错误处理代码\n        */\n\n        println!(\"You guessed: {}\", guess);\n        /*\n        1. {} 是一个占位符。使用 {} 也可以打印多个值：\n        */\n\n        // let guess: u32 = guess.trim().parse()\n        //     .expect(\"Please type a number!\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) =\u003e num,\n            Err(_) =\u003e continue,\n            // _ 是一个通配符值，本例中用来匹配所有 Err 值，不管其中有何种信息\n        };\n\n        match guess.cmp(\u0026guess_number) {\n            Ordering::Less =\u003e println!(\"Too small!\"),\n            Ordering::Greater =\u003e println!(\"Too big!\"),\n            Ordering::Equal =\u003e {\n                println!(\"You win!\"); \n                break;\n            }\n        }\n        /*\n        1. Ordering 也是一个枚举，成员有 Less、Greater 和 Equal\n        2. 这是一个 match 表达式，该表达式由 分支（arms） 构成；分支包含模式+匹配后执行的代码；\n        3. cmp 方法用来比较两个值的大小，可以在任何可以比较的值上调用。参数为一个被比较值的引用，返回一个 Ordering 成员\n        4. Rust 允许用一个新值来隐藏 （shadow） guess 之前的值。这个功能常用在需要转换值类型之类的场景,用于复用变量的名字\n        5. String 实例的 trim 方法会去除字符串开头和结尾的空白字符。\n        6. parse() 用于将字符串转换为数值。可以解析多种数字类型，因此需要告诉 Rust 具体的数字类型，这里通过 let guess: u32 指定。\n        7. parse() 很容易产生错误。因此返回一个 Result 类型\n        */\n    }\n}\n```\n\n\nRust 是一个静态强类型系统，同时也有类型推断。\n32 位数字 `i32`；32 位无符号数字 `u32`；64 位数字 `i64` 等等。Rust 默认使用 `i32`","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/2.-%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5":{"title":"","content":"预编译、编译、汇编、链接\n```c\n// hello.c\n#include \u003cstdio.h\u003e\nint main() \n{\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n| $ gcc hello.c\n$ ./a.out\nhello world |\n| --- |\n\n## 预编译\n预编译过程主要处理那些源代码文件中的以\"#\"开始的预编译指令：\n\n- 将所有#define删除，并且展开所有的宏定义\n- 处理所有条件编译指令#if、#ifdef、#elif、#else、#endif，这个过程是递归进行的。\n- 删除所有的//和/* */注释\n- 添加行号和文件标识，比如# 3 \"hello.c\" 2，以便于编译时编译器产生调试用的行号信息以及用于编译时产生的编译错误或警告能显示行号\n- 保留所有的#pragma编译器指令（编译器会使用它们）\n\n预编译指令：预编译后的文件扩展名为.i/.ii\n```bash\ngcc -E hello.c -o hello.i \ncpp hello.c \u003e hello.i\n```\nhello.i文件去掉中间一部分后展示\n```bash\norange@DESKTOP-GQM0ULL:~/program$ cat hello.i\n# 1 \"hello.c\"\n# 1 \"\u003cbuilt-in\u003e\"\n# 1 \"\u003ccommand-line\u003e\"\n# 31 \"\u003ccommand-line\u003e\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 32 \"\u003ccommand-line\u003e\" 2\n# 1 \"hello.c\"\n\n...\n\nextern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n# 858 \"/usr/include/stdio.h\" 3 4\nextern int __uflow (FILE *);\nextern int __overflow (FILE *, int);\n# 873 \"/usr/include/stdio.h\" 3 4\n\n# 3 \"hello.c\" 2\n\n# 3 \"hello.c\"\nint main()\n{\n    printf(\"hello world\\n\");\n    return 0;\n}\n\n```\n\n## 编译\n对预处理完的文件进行一系列的词法分析、语法分析、语义分析以及优化后生成相应的汇编代码文件。\n`gcc -S hello.i -o hello.s`\n```bash\norange@DESKTOP-GQM0ULL:~/program$ cat hello.s\n        .file   \"hello.c\"\n        .text\n        .section        .rodata\n.LC0:\n        .string \"hello world\"\n        .text\n        .globl  main\n        .type   main, @function\nmain:\n.LFB0:\n        .cfi_startproc\n        endbr64\n        pushq   %rbp\n        .cfi_def_cfa_offset 16\n        .cfi_offset 6, -16\n        movq    %rsp, %rbp\n        .cfi_def_cfa_register 6\n        leaq    .LC0(%rip), %rdi\n        call    puts@PLT\n        movl    $0, %eax\n        popq    %rbp\n        .cfi_def_cfa 7, 8\n        ret\n        .cfi_endproc\n.LFE0:\n        .size   main, .-main\n        .ident  \"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n        .section        .note.gnu.property,\"a\"\n        .align 8\n        .long    1f - 0f\n        .long    4f - 1f\n        .long    5\n0:\n        .string  \"GNU\"\n1:\n        .align 8\n        .long    0xc0000002\n        .long    3f - 2f\n2:\n        .long    0x3\n3:\n        .align 8\n4:\n\n```\n\n## 汇编\n汇编器将汇编代码转变为机器可以执行的命令，每一句汇编语句几乎都对应一条机器指令。\n`as hello.s -o hello.o`\n`gcc -c hello.s -o hello.o`\n`gcc -c hello.c -o hello.o`\n## 链接\n`ld -static /usr/lib/x86_64-linux-gnu/crt1.o /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/9/crtbeginT.o -L/usr/lib/gcc/x86_64-linux-gnu/9 -L/usr/lib/x86_64-linux-gnu -L/usr/lib -L/lib hello.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-linux-gnu/9/crtend.o /usr/lib/x86_64-linux-gnu/crtn.o`\n链接了一大堆文件链接起来才得到了\"a.out\"可执行文件，去掉目录之后\n`ld -static crt1.o crti.o crtbeginT.o hello.o --start-group -lgcc -lgcc_eh -lc --end-group crtend.o crtn.o`\n抛出问题：\n\n- `crt1.o crti.o crtbeginT.o crtend.o crtn.o`这些文件是干什么的\n- `-lgcc -lgcc_eh -lc`这些参数是什么参数\n- 为什么需要这些与hello.o链接才能得到可执行文件\n- 为什么汇编器不直接生成可执行文件而是输出一个目标文件，为什么需要链接\n\n## 编译器\n将高级语言翻译成机器语言的一个工具，高级语言的出现使得程序员更加关注程序逻辑本书身，尽量少考虑计算机本身的限制，如字长、内存大小、通信方式、存储方式等。\n编译过程一般分为6步：扫描、语法分析、语义分析、源代码优化、代码生成、目标代码优化。\n### 词法分析【lex工具】\n首先源码被程序输入到扫描器，扫描器的任务只是简单的进行词法分析，运用一种类似于**有限状态机的**算法可以轻松地将源代码的字符序列分割为一系列的记号。\n词法分析产生的记号一般可以分为如下几类：\n\n   - 关键字\n   - 标识符\n   - 字面量（包括数字、字符串）\n   - 特殊符号（加号、等号）\n\n在识别记号的同时，扫描器将标识符存放到符号表，将数字、字符串常量存放到文字表等。\n### 语法分析【yacc工具】\n语法分析器将对由扫描器产生的记号进行语法分析，从而产生语法树，整个分析过程采用了上下文无关语法的分析手段。由语法分析器生成的语法树就是以**表达式**为节点的树。\n\n   - 符号和数字是最小的表达式，它们不是由其他的表达式来组成，所以它们经常作为整个语法树的叶节点。\n   - 在语法分析的同时，很多运算符号的优先级和含义也被确定下来。\n   - 有些符号具有多重含义，语法分析阶段会对这些内容区分\n   - 如果出现表达式不合法、括号不匹配、缺少操作符等编译器就会报错\n## 语义分析\n语义分析器检测语句在语法上是否合法。\n\n   - 静态语义：编译器在编译期可以确定的语义；通常包括声明和类型的匹配、类型的转换\n   - 动态语义：只有在运行期可以确定的语义，0作为除数等情况。\n\n通过语义分析阶段后，整个语法树的表达式都被标识了类型，如果有些类型需要做隐式转换，语义分析程序会在语法树中插入对应的转换节点。语义分析器还对符号表中的符号类型也做了更新\n## 中间代码生成\n中间代码的生成是一种在源代码级别的优化过程，即源码级优化器。类似(2+6)这样的表达式可以直接在编译期间优化为8，其实直接在语法树上做优化比较困难，所以源代码优化器往往将整个语法树转换为中间代码，它是语法树的顺序表示其实他已经很接近目标代码了，但是他一般跟目标机器和运行时环境是无关的，如它不包含数据的尺寸、变量地址和寄存器的名字。\n中间代码使得编译器可以被分为前端和后端，编译器前端负责产生机器无关的中间代码，编译器后端将中间代码转换为目标机器代码\n## 目标代码生成与优化\n编译器后端代码生成器和目标代码优化器。代码生成器将中间代码转换为目标机器代码，这个过程十分依赖于目标机器，因为不同的机器有不同的字节、寄存器、整数类型和浮点数数据类型等。目标代码优化器会对目标代码进行优化，比如选择合适的选址方式、使用位运算来代替乘法运算、删除多余的指令等。\n现代编译器有着异常复杂的结构：\n\n   - 现代高级变编程语言十分复杂，如c++，现在没有一个编译器能完整的支持C++语言标准所规定的所有语言特性\n   - 现代计算机的CPU相当复杂，采用了如流水线、多发射等特性，使得编译器的机器指令优化过程变得十分复杂\n   - 有些编译器支持多种硬件平台，允许编译器编译出多种目标CPU的代码\n\n\n事实上，定义其他模块的全局变量和函数在最终运行时的绝对地址都要在最终链接的时候才能确定。现代编译器可以将一个源代码文件编译成一个未链接的目标文件，然后由链接器最终将这些目标文件链接在一起形成可执行文件。\n## 模块拼装 - 静态链接\n链接过程主要包括了**地址和空间分配、符号决议和重定位**。符号决议也叫符号绑定、地址绑定。\n每个模块的源文件通过编译器编译为目标文件，目标文件和库链接形成可执行文件，库是一组目标文件的包，就是一些最常用的代码编译成目标文件后打包存放。最常见的库就是**运行时**库，他是支持程序运行的基本函数的集合。\n**静态链接最基本的过程和作用**：使用链接器，你可以直接引用其他模块的函数和全局变量而无需知道其地址，因为链接器在链接的时候，会根据你所引用的符号fun，自动去相应的fun.c模块查找fun的地址，然后在main.c模块中所有引用到func的指令重新修正，让他们的目标地址成为真正的fun函数的地址。\n假设在B中定义var，在A中使用var = 42，汇编指令为**mov1 $0x2a, var，机器码C705 00000000 2a000000【指令码 目标地址 源常量】，**在编译A时编译器并不知道变量var的目标地址，编译器在不知var地址的情况下，将这条汇编指令mov的目标地址设为0，等待链接器在链接时修正。地址的修正的过程也被叫做重定位，每个要被修正的地方叫一个重定位入口。重定位所做的就是给程序中的每个这样的绝对地址引用的位置打补丁，使他们指向正确的地址。\n\n\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/2.-Coredns-%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B":{"title":"2. CoreDNS 解析过程","content":"## 抛出问题\n1. coredns 是个啥\n2. coredns 记录了些啥\n3. coredns 如何解析请求\n4. pod 如何给 coredns 发送 dns 查询请求\n5. 存在哪些问题\n\n## Coredns 是个啥\n项目地址： [coredns/coredns: CoreDNS is a DNS server that chains plugins](https://github.com/coredns/coredns)\n\n整个 CoreDNS 服务都建立在一个使用 Go 编写的 HTTP/2 Web 服务器 [Caddy · GitHub](https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fgithub.com%2Fmholt%2Fcaddy\u0026source=article\u0026objectId=1981388) 上，CoreDNS 整个项目可以作为一个 Caddy 的教科书用法。\n\nCoreDNS 是一个 Go 语言实现的 DNS Server，通过 **链式插件(chains plugins)** 实现的，因此用户可以很轻松的以添加插件的方式在实现自定义逻辑。同时 CoreDNS 也是一个 CNCF 的毕业项目，稳定性、可用性方面不用担心。\n\n**为什么需要 KubeDNS 组件**\n\nKubernetes 中由 pod 来运行实际的负载，但是 pod ip 可能因为 pod 的重启而发生改变，因此 Kubernetes 设计了 Service，Kubernetes Service 通过虚拟 IP 地址或者节点端口为用户应用提供访问入口，然而这些 IP 地址和端口是动态分配的，实际项目中无法把一个可变的入口发布出去供用户访问。为了解决这个问题，Kubernetes 提供了内置的域名服务，用户定义的服务会自动获取域名，通过域名解析，可以对外向用户提供一个固定的服务访问地址。\n\n最初 k8s 使用自定义组件 KubDNS 来实现，不过从 K8S 1.11 开始，K8S 已经使用 CoreDNS，替换 KubeDNS 来充当其 DNS 解析的重任。\n\n## Coredns 记录了些啥\n详见 [[1. Kubernetes DNS]]\n\n## Coredns 如何解析请求\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/c6b26912c659805685d1b2c2ce405108.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/332f774fdf4a1d8cf65a11f1b286c04d.png)\n\n`.:53` 表示在 53 端口监听服务,`.` 表示任意的域名都由该服务来处理\nCoreDNS 是链式插件组成的，而具体启动哪些插件则是由配置文件决定的。由上述配置文件看出最重要的是  kubernetes 的插件。这个就是 k8s 官方维护的一个 CoreDNS 插件，依靠该插件 CoreDNS 实现了 KubeDNS 需要的功能，项目地址：[coredns/plugin/kubernetes · coredns/coredns](https://github.com/coredns/coredns/tree/master/plugin/kubernetes)\n\nKubernetes 插件主要在插件启动时启动了 servide、endpoint、pod（根据配置文件可选）的 Controller，然后**复用了 client-go 中的 informer 机制以缓存数据**。\n\nDNS 请求时客户端按照`\u003cpodName\u003e.\u003cserviceName\u003e.\u003cnamesapce\u003e.svc.cluster.local`规范发起请求，Kubernetes插件则按照该规范解析出 podName、serviceName、namespace 等信息，然后**从 client-go 中的 Indexer 本地缓存里拿数据组装后响应给客户端**。\n\n## Pod 如何给 coredns 发送 dns 查询请求\n\n`/etc/resolv.conf` 文件是配置 DNS 客户端的重要文件。该文件包含了系统在进行域名解析时所需的信息，比如 DNS 服务器地址、搜索域名列表和解析选项。\n\npod 的`/etc/resolv.conf` 文件的内容如下：\n\n```yaml\n~#: cat /etc/resolv.conf\nnameserver 10.96.0.10\nsearch default.svc.cluster.local svc.cluster.local cluster.local ap2a.qingcloud.com\noptions ndots:5\n```\n\n- `search default.svc.cluster.local svc.cluster.local cluster.local`： 这一行定义了 DNS 搜索路径。当你在Pod内进行DNS查询时，系统会按照这个顺序逐个尝试，直到找到匹配的域名。例如，如果你在 Pod 内查询 example，系统首先尝试 example.default.svc.cluster.local，然后是 example.svc.cluster.local，最后是example.cluster.local。\n    \n- `nameserver 10.96.0.10`： 这一行指定了Pod中使用的DNS服务器的IP地址。\n    \n- `options ndots:5`： 这一行定义了一些DNS解析的选项。ndots:5表示在进行非全名（非绝对域名）的DNS查询时，系统会追加搜索路径，直到域名中包含5个点（.）为止。这有助于避免在短域名的查询中发生不必要的DNS搜索。\n\npod 里的 /etc/resolv.conf 中 nameserver 指向 10.96.0.10（coreDNS 默认 clusterIP），因此 pod 中的 DNS 请求会发送给 CoreDNS。\n\npod 的 `/etc/resolv.conf` 文件的内容由以下几个配置决定：\n### Kubelet\n\nkubelet 的配置文件中有关配置如下：\n```yaml\n~#:  cat /var/lib/kubelet/config.yaml \n··· ···\nclusterDNS:\n- 169.254.25.10\nresolvConf: /run/systemd/resolve/resolv.conf\n··· ···\n```\n\n- clusterDNS：集群 DNS 地址，这里为 nodelocaldns 绑定的地址，当没有安装 nodelocaldns 是，为 coredns 的 Service ip。\n- resolvConf：主机的 resolv.conf 路径\n\nkubelet 在启动 pod 并 mount rootfs 的时候，会根据 config 内容生成一个 /etc/resolv.conf 并替换进去。\n\n### Pod Policy\n\n目前 Kubernetes 支持以下特定 Pod 的 DNS 策略。 这些策略可以在 Pod 规约中的 `dnsPolicy` 字段设置：\n\n- “`Default`”: Pod 从运行所在的节点继承名称解析配置。\n- “`ClusterFirst`”: 与配置的集群域后缀不匹配的任何 DNS 查询（例如 “www.kubernetes.io”） 都会由 DNS 服务器转发到上游名称服务器。\n- “`ClusterFirstWithHostNet`”: 对于以 hostNetwork 方式运行的 Pod，应将其 DNS 策略显式设置为 “`ClusterFirstWithHostNet`\"。**否则，以 hostNetwork 方式和 `\"ClusterFirst\"` 策略运行的 Pod 将会做出回退至 `\"Default\"` 策略的行为。**\n- “`None`”: 此设置允许 Pod 忽略 Kubernetes 环境中的 DNS 设置。Pod 会使用其 `dnsConfig` 字段所提供的 DNS 设置。\n\n**注意📢**：对于使用 hostNetwork 的 Pod 必须指定策略为 ClusterFirstWithHostNet 才会将 Pod Nameserver 设置为 kube-dns，否则会直接基础 Node 上的解析配置(/etc/resolv.conf)。\n\n### Pod DNSConfig\n\npod 的 DNS 配置可让用户对 Pod 的 DNS 设置进行更多控制。\n\n`dnsConfig` 字段是可选的，它可以与任何 `dnsPolicy` 设置一起使用。 但是，当 Pod 的 `dnsPolicy` 设置为 “`None`” 时，必须指定 `dnsConfig` 字段。\n\n用户可以在 `dnsConfig` 字段中指定以下属性：\n\n- `nameservers`：将用作于 Pod 的 DNS 服务器的 IP 地址列表。 最多可以指定 3 个 IP 地址。当 Pod 的 `dnsPolicy` 设置为 “`None`” 时， 列表必须至少包含一个 IP 地址，否则此属性是可选的。 所列出的服务器将合并到从指定的 DNS 策略生成的基本名称服务器，并删除重复的地址。\n- `searches`：用于在 Pod 中查找主机名的 DNS 搜索域的列表。此属性是可选的。 指定此属性时，所提供的列表将合并到根据所选 DNS 策略生成的基本搜索域名中。 重复的域名将被删除。Kubernetes 最多允许 6 个搜索域。\n- `options`：可选的对象列表，其中每个对象可能具有 `name` 属性（必需）和 `value` 属性（可选）。 此属性中的内容将合并到从指定的 DNS 策略生成的选项。 重复的条目将被删除。\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  namespace: default\n  name: dns-example\nspec:\n  containers:\n    - name: test\n      image: nginx\n  dnsPolicy: \"None\"\n  dnsConfig:\n    nameservers:\n      - 192.0.2.1 # 示例\n    searches:\n      - ns1.svc.cluster-domain.example\n      - my.dns.search.suffix\n    options:\n      - name: ndots\n        value: \"2\"\n      - name: edns0\n```\n\n\n## 整个流程图\n\n大致如下：\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/5bde86bd10950b4bef3362b98ec79e8d.png)\n\n\n## 存在问题 - 其他优化\n\n- IPVS缺陷导致的 coredns 重启时DNS概率性解析超时问题\n- UDP默认返回报文长度为512字节，大于512字节后就会将包丢弃\n- ... ...\n\n部署 [[3. Nodelocaldns 原理| Nodelocaldns]] 改善以上的问题。\n\n## 参考链接：\n- [从 Service DNS 记录到 IP 地址，KubeDNS 工作原理](https://www.lixueduan.com/posts/kubernetes/16-kubedns-workflow/)\n- [DNS for Services and Pods | Kubernetes](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy)\n- [kubernetes 插件文档](https://coredns.io/plugins/kubernetes/)\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-OFN-Install":{"title":"2. OFN Install","content":"\n### 安装\n- helm repo add openfunction https://openfunction.github.io/charts/\n- helm repo update\n- kubectl create namespace openfunction\n- helm install openfunction openfunction/openfunction -n openfunction\n\n安装前后对比图：\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/87f6462ca4533a2b098cc87fe4de7917.png)\n\nv1.0.x 版本自定义 crd\n\n| 自定义资源                             | 说明 |\n| -------------------------------------- | ---- |\n| builders.core.openfunction.io          |      |\n| clustereventbus.events.openfunction.io |      |\n| eventbus.events.openfunction.io        |      |\n| eventsources.events.openfunction.io    |      |\n| functions.core.openfunction.io         |      |\n| gateways.networking.openfunction.io    |      |\n| servings.core.openfunction.io          |      |\n| triggers.events.openfunction.io                                       |      |\n\n### 卸载\nhelm uninstall openfunction -n openfunction","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-XDP-%E4%BB%8B%E7%BB%8D":{"title":"2. XDP 介绍","content":"\n### XDP - eXpress Data Path\nXDP 传入参数：\n\nXDP暴露的钩子具有特定的输入上下文，它是单一输入参数。它的类型为 **struct xdp_md**，在内核头文件 [bpf.h](https://elixir.bootlin.com/linux/v6.8.9/source/include/uapi/linux/bpf.h#L6331) 中定义，具体字段如下所示：\n```\nstruct xdp_md {\n\t__u32 data;\n\t__u32 data_end;\n\t__u32 data_meta;\n\t/* Below access go through struct xdp_rxq_info */\n\t__u32 ingress_ifindex; /* rxq-\u003edev-\u003eifindex */\n\t__u32 rx_queue_index;  /* rxq-\u003equeue_index  */\n\n\t__u32 egress_ifindex;  /* txq-\u003edev-\u003eifindex */\n};\n```\n- **data** 和 **data_end** 字段分别是数据包开始和结束的指针，它们是用来获取和解析传来的数据\n- **data_meta**指针，初始阶段它是一个空闲的内存地址，供XDP程序与其他层交换数据包元数据时使用。\n- 最后两个字段分别是接收数据包的接口和对应的RX队列的索引。当访问这两个值时，BPF代码会在内核内部重写，以访问实际持有这些值的内核结构**struct xdp_rxq_info**。\n\nXDP action 类型：\n```go\nenum xdp_action {\n\tXDP_ABORTED = 0, // Drop packet while raising an exception\n\tXDP_DROP, // Drop packet silently\n\tXDP_PASS, // Allow further processing by the kernel stack\n\tXDP_TX, // Transmit from the interface it came from\n\tXDP_REDIRECT, // Transmit packet from another interface\n};\n```\n\n\nSEC 宏定义是为了ELF格式添加 **Section** 信息的。ELF全称是**Executable and Linkable Format**，就是可执行文件的一种主流格式，广泛用于Linux系统。\n\n内核 xdp 示例：\n- [linux/samples/bpf at master · torvalds/linux (github.com)](https://github.com/torvalds/linux/tree/master/samples/bpf)\n\nbpf 学习路线：\n- [nevermosby/linux-bpf-learning: learn how to use BPF/eBPF (github.com)](https://github.com/nevermosby/linux-bpf-learning)\n\n\n使用 ip 命令加载和卸载 xdp hook\n- ip link set dev [device name] xdp obj [obj name] sec [section name]\n- ip link set dev eth0 xdp obj xdp-drop.o sec drop_icmp\n- ip link set dev [device name] xdp off\n- ip link set dev eth0 xdp off\n```bash\nip link show dev enp1s0 # 查看挂载情况\n2: enp1s0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 xdp qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n    link/ether 00:00:00:78:f0:b3 brd ff:ff:ff:ff:ff:ff\n    prog/xdp id 910 tag 2e4d04fb1c2c6dc6 jited \n```\n\n1. **section name** 就是上文提到的通过**Section**来指定程序入口\n2. **device name**是本机某个网卡设备的名称，可以通过`ip a`查看本机所有的网卡设备。一般可以选取本机对外的IP所在的网卡设备。\n\n\n\n### 参考链接：\n- [BPF程序类型 - XDP](https://barryx.cn/cilium_bpf-xdp_3/)\n- ","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-controller-runtime":{"title":"2. controller-runtime","content":"\ncontroller-runtime 是对 client-go 的高级封装\n\ncontroller-runtime 是一个用于开发 Kubernetes controller 的库，包含了 controller 常用的模块，兼顾灵活性和模块化。\n\n之前使用 client-go 开发 Kubernetes controller 时，中间会有很多和业务无关的重复工作，后来社区社区推出了 kubebuilder 和 operatorSDK 这种脚手架，它可以方便的渲染出 Controller 的整个框架，让开发者只用专注 Controller 本身的业务逻辑，特别是在开发 CRD 时，极为方便，这两个脚手架就是基于 controller-runtime。\n\n## 1. 主要模块\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/44c6629622666b7d42676108d1920ca4.png)\n\n\n- `Client`：用于读写 Kubernetes 资源\n- `Cache`：本地缓存，可供 Client 直接读取资源。\n- `Manager`：可以管理协调多个 Controller，提供 Controller 共用的依赖。\n- `Controller`：“组装”多个模块（例如`Source`、`Queue`、`Reconciler`），实现 Kubernetes Controller 的通用逻辑：\n    - 1）监听 k8s 资源，缓存资源，并根据`EventHandler`入队事件；\n    - 2）启动多个 goroutine，每个 goroutine 会从队列中获取 event，并调用`Reconciler`方法处理。\n- `Reconciler`：状态同步的逻辑所在，是开发者需要实现的主要接口，供Controller 调用。Reconciler 的重点在于“状态同步”，由于 Reconciler 传入的参数是资源的`Namespace`和`Name`，而非 event，Reconciler 并非用于“处理事件”，而是根据指定资源的状态，来同步“预期集群状态”与“当前集群状态”。\n- `Webhook`：用于开发 webhook server，实现 Kubernetes Admission Webhooks 机制。\n- `Source`：source of event，Controller 从中获取 event。\n- `EventHandler`：顾名思义，event 的处理方法，决定了一个 event 是否需要入队列、如何入队列。\n- `Predicate`：相当于 event 的过滤器。\n\n## 2. Controller 的生成与管理\n### Manager\n\ncontroller-runtime 库提供的第一个重要抽象是 Manager，它为在管理器内运行的所有控制器提供共享资源，包括：\n- 读取和写入 Kubernetes 资源的 Kubernetes **客户端**\n- 用于从本地缓存中读取 Kubernetes 资源的**缓存**\n- 用于注册所有 Kubernetes 本地和自定义资源的 **scheme**\n\n```go\nimport (\n      \"k8s.io/apimachinery/pkg/runtime\"\n      clientgoscheme \"k8s.io/client-go/kubernetes/scheme\"\n      mygroupv1alpha1 \"github.com/myid/myresource-crd/pkg/apis/mygroup.example.com/v1alpha1\"\n)\n\nscheme := runtime.NewScheme() \nclientgoscheme.AddToScheme(scheme) \nmygroupv1alpha1.AddToScheme(scheme)\n\nmgr, err := manager.New(\n      config.GetConfigOrDie(),\n      manager.Options{\n            Scheme: scheme,\n      },\n)\n```\n\n### Controller\n\n可以使用 controller 直接 new 也可以使用 controller builder\n\n```go\nimport (\n      \"sigs.k8s.io/controller-runtime/pkg/controller\"\n)\ncontroller, err = controller.New(\n     \"my-operator\", mgr,\n     controller.Options{\n            Reconciler: myReconciler,\n})\n\ntype Reconciler interface {\n      Reconcile(context.Context, Request) (Result, error)\n}\n```\n\nwatch 资源\n```go\nWatch(\n\tsrc source.Source, \n\teventhandler handler.EventHandler, \n\tpredicates ...predicate.Predicate) \nerror\n\n```\n`source.Source` 表示什么是要观察的事件的来源，是一个接口，有以下两种实现：\n- Kind source 用于监视特定种类（kind）的 Kubernetes 对象的事件。\n- Channel source 是用来观察来自集群外的事件的。Channel 结构体的 Source 字段是必需的，它的值是一个发射 `event.GenericEvent` 类型对象的通道。\n\n```go\nWatch(\n\tsource.Kind(mgr.GetCache(), \u0026v1alpha2.Eip{}),\n\t\u0026handler.EnqueueRequestForObject{}, \n)\n\nWatch(\n\t\u0026source.Channel{Source: e.Reload}, \n\t\u0026handler.EnqueueRequestForObject{}\n).\n```\n\n`handler.EventHandler` 表示**事件处理程序**。 库为 EventHandler 接口提供了以下三种实现方式：\n- handler.Funcs：自定义各种事件的处理程序。\n- handler.EnqueueRequestForObject：事件处理程序用于控制器处理的主要资源。在这种情况下，控制器将把连接到事件的对象放入队列中。\n- handler.EnqueueRequestForOwner：事件处理程序用于由主资源拥有(owned)的资源。EnqueueRequestForOwner 的一个字段是必需的：OwnerType\n\n```go\ncontroller.Watch(\n      \u0026source.Kind{\n            Type: \u0026corev1.Pod{},\n      },\n      \u0026handler.EnqueueRequestForOwner{\n            OwnerType: \u0026mygroupv1alpha1.MyResource{},\n            IsController: false, // 是否为真正的控制器，用于调协 pod\n      },\n)\n```\n\n`predicate.Predicate` 可选的谓词列表，库中提供以下几种实现：\n- predicate.Funcs：自定义各种事件的过滤函数\n- predicate.ResourceVersionChangedPredicate：定义一个只用于 UpdateEvent 的 filter，且只处理有 `metadata.resourceVersion` 变化的更新\n- predicate.GenerationChangedPredicate：定义一个只用于更新事件过滤器，且只有具有 `metadata.Generation` 增量的更新才会被处理\n\n\u003e - 每次发生资源的 Spec 部分的更新时，API 服务器都会按顺序递增 `metadata.Generation`。\n\u003e - 请注意，有些资源并不尊重这个假设。例如，当 Annotations 字段被更新时，Deployment 的 Generation 也会被递增。\n\u003e - 对于自定义资源，只有当状态子资源被启用时，生成才会被递增。\n\n- predicate.AnnotationChangedPredicate：定义一个只用于更新事件过滤器，且只有`metadata.Annotation`变化的更新才会被处理。\n\n\n`handler.EventHandler` 和 `predicate.Predicate` 经常一起使用。`EventHandler` 负责处理事件并生成请求，而 `Predicate` 负责在事件处理之前进行过滤，两者协同工作，可以有效地控制控制器处理事件的方式，提高效率和稳定性。\n\n### Controller Builder\n\n\nControllerManagedBy 函数被用来启动一个新的 ControllerBuilder。构建的控制器将被添加到 m manager 中。\n```go\nimport (\n     \"sigs.k8s.io/controller-runtime/pkg/builder\"\n)\nfunc ControllerManagedBy(m manager.Manager) *Builder\n```\n\n一些流畅的接口帮助配置构建：\n\n- `For(object client.Object, opts ...ForOption) *Builder` - 该方法用于指示控制器处理的**主要资源**。它只能被调用一次，因为**一个控制器只能有一个主要资源**。这将在内部调用 **Watch** 函数与事件处理程序 **EnqueueRequestForObject** 。可以用 WithPredicates 函数为这个 watch 添加 Predicates，其结果实现了 ForOption 接口。\n    \n- `Owns(object client.Object, opts ...OwnsOption) *Builder` - 这个方法用来表示控制器拥有（owned）的资源。这将在内部调用 **Watch** 函数与事件处理程序 **EnqueueRequestForOwner**。可以用 WithPredicates 函数为这个Watch添加 Predicates，其结果实现了OwnsOption接口。\n    \n- `Watches(object client.Object, eventhandler handler.EventHandler, opts ...WatchesOption) *Builder` - 这个方法可以用来添加更多For或Owns方法没有涵盖的 watcher – 只针对 source 为 kind object 的。可以用 WithPredicates 函数为该 watch 添加谓词，其结果实现了 WatchesOption 接口。\n\n- `WatchesMetadata(object client.Object, eventHandler handler.EventHandler, opts ...WatchesOption) *Builder` - 这个方法与 watch 类似，但是会强迫内部缓存值watch PartialObjectMetadata。\n\n- `WatchesRawSource(src source.Source, eventHandler handler.EventHandler, opts ...WatchesOption) *Builder` 这个方法可以用来添加更多For或Owns方法没有涵盖的 watcher –例如，具有 **Channel** source 的观察者。可以用 WithPredicates 函数为该 watch 添加谓词，其结果实现了 WatchesOption 接口。\n    \n- `WithEventFilter(p predicate.Predicate) *Builder` - 这个方法可以用来添加所有用 For、Owns 和 Watch 方法创建的观察者共有的谓词。\n    \n- `WithOptions(options controller.Options) *Builder` - 此处设置将在内部传递给 `controller.New` 函数的选项。\n    \n- `WithLogConstructor(logConstructor func(*reconcile.Request) logr.Logger) *Builder` 设置 logConstructor 选项。\n    \n- `Named(name string) *Builder` - 这设置了构造函数的名称。它应该只使用下划线和字母数字字符。默认情况下，它是主要资源的 kind 的小写版本。\n    \n- `Build(r reconcile.Reconciler) (controller.Controller, error)` 构建并返回控制器。\n    \n- `Complete(r reconcile.Reconciler) error` –这就建立了控制器。你一般不需要直接访问控制器，所以你可以使用这个不返回控制器值的方法，而不是Build。\n\n### 将 Manager 注入到 自定义 Reconciler 中\n\n1. 参数传递\n\n```go\n\tif err := (\u0026speaker.LBReconciler{\n\t\tHandler:       spmanager.HandleService,\n\t\tClient:        mgr.GetClient(),\n\t\tEventRecorder: mgr.GetEventRecorderFor(\"lb\"),\n\t}).SetupWithManager(mgr); err != nil {\n\t\tklog.Fatalf(\"unable to setup lbcontroller: %v\", err)\n\t}\n```\n\n2. 使用 injector 注入器\ncontroller-runtime 库提供了一个注入器（Injector）系统，用于将共享资源注入 Reconcilers，以及其他结构体，如你自己实现的 Sources、EventHandlers 和 Predicates。\n\nReconciler 需要实现 inject 包中的特定 Injector 接口：`inject.Client`、`inject.Cache`、`inject.Scheme`，等等。这些方法将在初始化时被调用，即当你调用 `controller.New` 或 `builder.Complete` 时。\n\n```go\ntype MyReconciler struct {\n     client client.Client\n     cache cache.Cache\n     scheme *runtime.Scheme\n}\nfunc (a *MyReconciler) InjectClient(c client.Client) error {\n      a.client = c\n      return nil\n}\nfunc (a *MyReconciler) InjectCache(c cache.Cache) error {\n      a.cache = c\n      return nil\n}\nfunc (a *MyReconciler) InjectScheme(s *runtime.Scheme) error {\n      a.scheme = s\n      return nil\n}\n```\n\n可以参考：openelb\n\n## 3. 使用客户端\n\n### 读 Reader\n\n```go\ntype Reader interface {\n\tGet(ctx context.Context, key ObjectKey, obj Object, opts ...GetOption) error\n\tList(ctx context.Context, list ObjectList, opts ...ListOption) error\n}\n```\n\n```go\n// get object\n\tsvc := \u0026corev1.Service{}\n\tif err := l.Client.Get(ctx, req.NamespacedName, svc,\u0026client.GetOptions{Raw: \u0026metav1.GetOptions{ResourceVersion: \"0\"}}); err != nil {\n\t\tif errors.IsNotFound(err) {\n\t\t\treturn ctrl.Result{}, nil\n\t\t}\n\t\treturn ctrl.Result{}, err\n\t}\n\n// list objects\n\teips := \u0026networkv1alpha2.EipList{}\n\terr := i.List(ctx, eips)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n```\n\nGetOptions 结构体实现了 GetOption 接口，包含一个具有 `metav1.GetOptions` 值的单一Raw字段。例如，指定一个值为 “0 \" 的 resourceVersion 来获取资源的任何版本。\n\nlist 参数是一个 ObjectList 值，表示要列出并存储结果的资源的种类（kind）。默认情况下，list 是在所有命名空间中进行的。\nList 方法接受实现 ListOption 接口的对象的零个或多个参数。这些类型由以下支持：\n- **InNamespace**，string 的别名，用于返回特定命名空间的资源。\n- **MatchingLabels**， `map[string]string` 的别名，用来表示标签的列表和它们的精确值，这些标签必须被定义为资源的返回。\n- **HasLabels**，别名为 `[]string`，用来表示标签的列表，独立于它们的值，必须为一个资源的返回而定义。\n- **MatchingLabelsSelector**，嵌入了一个 `labels.Selector` 接口，用来传递更高级的标签选择器。\n- **MatchingFields** 是 `fields.Set` 的别名，它本身是 `map[string]string` 的别名，用来指示要匹配的字段和它们的值。\n- **MatchingFieldsSelector**，嵌入了一个 `fields.Selector`，用来传递更高级的字段选择器。关\n\n```go\n\topt := \u0026client.ListOptions{}\n\n\t// 建立了一个MatchingLabels 结构体来过滤带有标签 “app=myapp” 的资源\n\tmatchLabel := client.MatchingLabels{\n      \"app\": \"myapp\",\n\t}\n\n\t// 建立了一个 HasLabels 结构体来过滤带有 “app” 和 “debug” 标签的资源。\n\thasLabels := client.HasLabels{\"app\", \"debug\"}\n\n\t// 建立了一个 MatchingLabelsSelector 结构，它可以作为 List 的一个选项来过滤标签 mykey 不同于 **ignore** 的资源\n\tselector := labels.NewSelector()\n\trequire, err := labels.NewRequirement(\n\t    \"mykey\",\n\t    selection.NotEquals,\n\t    []string{\"ignore\"},\n\t)\n\t// assert err is nil\n\tselector = selector.Add(*require)\n\tlabSelOption := client.MatchingLabelsSelector{\n\t      Selector: selector,\n\t}\n\n\t// 建立了一个 MatchingFields 结构体，用来过滤字段 “status.phase” 为 “Running” 的资源\n\tmatchFields := client.MatchingFields{\n\t\t\"status.phase\": \"Running\",\n\t}\n\n\t// 建立了一个 MatchingFieldsSelector 结构体来过滤字段 “status.phase” 与 “Running” 不同的资源\n\tfieldSel := fields.OneTermNotEqualSelector(\n\t      \"status.phase\",\n\t      \"Running\",\n\t)\n\tfieldSelector := client.MatchingFieldsSelector{\n\t      Selector: fieldSel,\n\t}\n\n\terr := i.List(ctx, eips, xxx)\n\t...\n```\n\n### 写 Writer\n\n```go\ntype Writer interface {\n\tCreate(ctx context.Context, obj Object, opts ...CreateOption) error\n\tDelete(ctx context.Context, obj Object, opts ...DeleteOption) error\n\tUpdate(ctx context.Context, obj Object, opts ...UpdateOption) error\n\tPatch(ctx context.Context, obj Object, patch Patch, opts ...PatchOption) error\n\tDeleteAllOf(ctx context.Context, obj Object, opts ...DeleteAllOfOption) error\n}\n```\n\n```go\n\topt := \u0026client.CreateOptions{DryRun: []string{metav1.DryRunAll}, FieldManager: \"my-controller\"}\n\tif err := l.Create(ctx, svc, opt); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\n\toptdel := client.DeleteOptions{DryRun: []string{\"ALL\"}}\n\tif err := l.Delete(ctx, svc, \u0026optdel); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\n\n\tif err := l.DeleteAllOf(ctx, svc, client.InNamespace(\"default\")); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\t\n\toptupdate := \u0026client.UpdateOptions{DryRun: []string{\"All\"}}\n\tif err := l.Update(ctx, svc, optupdate); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\n\toptpatch := \u0026client.PatchOptions{DryRun: []string{\"All\"}}\n\tif err := l.Patch(ctx, svc, client.Apply ,optpatch); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n```\n\n**CreateOption/UpdateOptions：**\n- DryRun 有效值为 “ALL”：表示所有的操作都应该被执行，除了那些将资源持久化到存储的操作。不是真的删除资源，会检查在删除过程中是否会发生错误\n- FieldManager，之前可能叫 FieldOwner，别名为字符串，表示创建操作的字段管理器的名称。这个信息对于服务器端应用操作的正常工作很有用。\n\n**PatchOptions**\n\t在 CreateOption/UpdateOptions 基础上加了一个 force 的 bool\n\n**DeleteOption：**\n- DryRun 有效值为 “ALL”：表示所有的操作都应该被执行，除了那些将资源持久化到存储的操作。\n- **GracePeriodSeconds**  int64 - 只在删除 pod 时有用。表示在删除 pod 之前的持续时间（秒）\n- **Preconditions** / 前提条件，别名 `metav1.Preconditions` - 表明期望删除的资源。\n\t- 指定 UID\n\t- 指定 ResourceVersion\n- **PropagationPolicy**，别名 `metav1.DeletionPropagation` - 表明是否以及如何进行垃圾回收\n\t- Orphan - - 向Kubernetes API表示将你正在删除的资源所拥有的资源变成孤儿，这样它们就不会被垃圾收集器删除。\n\t- Background -  指示Kubernetes API在所有者资源被标记为删除后立即返回删除操作，而不是等待拥有的资源被垃圾收集器删除。\n\t- Foreground - 指示 Kubernetes API 在所有者和 BlockOwnerDeletion 设置为 true 的自有资源被删除后，从 Delete 操作中返回。Kubernetes API将不会等待其他拥有的资源被删除。\n\n**DeleteAllOfOption**\n\tDeleteAllOf 操作的可选项是 List 操作和 Delete 操作的选项的组合。\n\n## status 子资源\n\n```go\ntype SubResourceWriter interface {\n\tCreate(ctx context.Context, obj Object, subResource Object, opts ...SubResourceCreateOption) error\n\n\tUpdate(ctx context.Context, obj Object, opts ...SubResourceUpdateOption) error\n\n\tPatch(ctx context.Context, obj Object, patch Patch, opts ...SubResourcePatchOption) error\n}\n```\n\n有关一个实现：\n不可能盲目地使用 **Create** 方法，因为我们不确定资源是否存在，如果资源已经存在，操作就会失败。\n\n可以检查资源是否存在，如果不存在则创建，如果存在则修改。\n服务器端 Apply 方法非常适合这种情况：在运行 Apply 操作时，如果资源不存在，就会被创建；如果资源存在，就会被修补，在资源被其他参与者修改的情况下解决冲突。\n\n```go\nfunc (a *MyReconciler) applyDeployment(\n  ctx context.Context,\n  myres *mygroupv1alpha1.MyResource,\n  ownerref *metav1.OwnerReference,\n) error {\n  deploy := createDeployment(myres, ownerref)\n  err := a.client.Patch( \n    ctx,\n    deploy,\n    client.Apply,\n    client.FieldOwner(Name),\n    client.ForceOwnership,\n  )\n  return err\n}\n```\n\n参考：\n- https://skyao.io/learning-kubernetes/client/kubernetes-programming-with-go/\n- http://www.wuyq.net/archives/controller-runtime\n- 代码仓库： https://github.com/kubernetes-sigs/controller-runtime\n- watch 缓存\n\t- https://www.sobyte.net/post/2022-04/controller-runtime/#using-metadata\n\t- https://cloud.tencent.com/developer/article/2256963\n\n\n\n","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-kube-proxy-%E8%B7%A8-vlan-%E8%AE%BF%E9%97%AE":{"title":"2. kube-proxy 跨 vlan 访问","content":"\n### 背景\n使用 hybridnet 搭建的 vlan 环境在测试 svc 的连通性的时候发现了一个很疑惑的问题\n实际搭建的环境如下：\nnode22、node23、node24 三个节点均在 vlan 50；划分了 vlan53 和 vlan73 网络域后，会在 node22、node23 上创建相应的子接口。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/08/48a3fc8ca2b6f2d874b35b2a28fcbc59.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/b274e587d6a9349705871e050b3fb58f.png)\n\n位于node22、node23 上的 pod 在访问分布在 node24 的 pod 暴露的 svc 时，报错：\n```bash\ncurl: (56) Recv failure: Connection reset by peer\ncommand terminated with exit code 56\n``` \n\n相反对于 node24 可以正常访问位于 node22、node23 上的 pod 暴露的 svc。并且在node 也可以正常访问通对应的 svc\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/b0440d707a155631bb40c687fe8fb893.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/e330fbd5760320e707a827c5cb14b509.png)\n\n\n分析：\n对于以上的 deploy 部署涉及不同的 vlan，因此可能是 ipvs 的 nat 模式对于不同 vlan 的访问存在问题；因此重新部署其中的负载后，再测试一轮后发现，仍然存在问题。待分析。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/83bf924afba246dff0326cab6ee0fb06.png)\n\n\n问题深究：\n- 查看具体的交换机配置\n- tcp 三次握手\n- ipvs nat vlan 分析\n- [IPVS之NAT转发模式](https://blog.csdn.net/sinat_20184565/article/details/102410394)\n- [ipvs nat模式下独立于iptables与conntrack的连接跟踪表和NAT机制](https://blog.csdn.net/qq_43684922/article/details/128694136)\n- [IPVS Software - Advanced Layer-4 Switching](http://www.linuxvirtualserver.org/software/ipvs.html)\n- [Linux Administration: Building a Load Balancer with LVS](http://www.linux-admins.net/2013/01/building-load-balancer-with-lvs-linux.html)\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/906ee46617e66c27942fa0d1f867ef34.png)\n\n\n\n随便薅过来一篇 lvs 原理的文章： [linux lvs原理及实践](https://fafucoder.github.io/2021/12/19/linux-lvs/)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/2.-use-%E5%BC%95%E5%85%A5%E4%BD%9C%E7%94%A8%E5%9F%9F":{"title":"2. use 引入作用域","content":"### 使用 use 将路径引入作用域\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n```\n\n```rust\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1, 2);\n}\n```\n\n### 使用-as-关键字提供新的名称\n```rust\nuse std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -\u003e Result {\n    // --snip--\n}\nfn function2() -\u003e IoResult\u003c()\u003e {\n    // --snip--\n}\n```\n\n### 使用-pub-use-重导出名称\n使用 use 关键字将包导入的作用域，在新作用域中默认为私有的。\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n```\n通过 `pub use` 使名称可引入任何代码的作用域中。\n通过 `pub use`，现在可以通过新路径 `hosting::add_to_waitlist` 来调用 `add_to_waitlist` 函数。如果没有指定 `pub use`，`eat_at_restaurant` 函数可以在其作用域中调用 `hosting::add_to_waitlist`，但外部代码则不允许使用这个新路径。\n\n当你的代码的内部结构与调用你的代码的程序员的思考领域不同时，重导出会很有用。\n使用 `pub use`，我们可以使用一种结构编写代码，却将不同的结构形式暴露出来。\n\n\n### 使用外部包\n在 _Cargo.toml_ 列出需要的外部包并通过 `use` 将其中定义的项引入项目包的作用域中。\n```toml\n[dependencies]\nrand = \"0.5.5\"\n```\n\n### 嵌套路径来消除大量的-use-行\n```rust\nuse std::cmp::Ordering;\nuse std::io;\n// replace\nuse std::{cmp::Ordering, io};\n```\n\n```rust\nuse std::io;\nuse std::io::Write;\n// replace\nuse std::io::{self, Write};\n```\n\n### 通过 glob 运算符将所有的公有定义引入作用域\n```rust\nuse std::collections::*;\n```\n这个 `use` 语句将 `std::collections` 中定义的所有公有项引入当前作用域。使用 glob 运算符时请多加小心！Glob 会使得我们难以推导作用域中有什么名称和它们是在何处定义的。\n\nglob 运算符经常用于测试模块 `tests` 中，这时会将所有内容引入作用域；","lastmodified":"2025-03-26T03:48:44.118315233Z","tags":null},"/3.-%E5%87%BD%E6%95%B0":{"title":"3. 函数","content":"在函数签名中，**必须** 声明每个参数的类型。返回值要在箭头（`-\u003e`）后声明它的类型\n使用 `return` 关键字和指定值，可从函数中提前返回；但大部分函数隐式的返回最后的表达式。\n- 表达式：表达式会计算出一些值，表达式可以是语句的一部分。函数调用是一个表达式。宏调用是一个表达式。\n- 语句：语句并不返回值。\n\n```rust\nfn main() {\n    let x = plus_one(5);\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -\u003e i32 {\n    x + 1\n}\n// 行尾加上一个分号，把它从表达式变成语句，我们将看到一个“mismatched types”（类型不匹配）错误\n//fn plus_one(x: i32) -\u003e i32 {\n//    x + 1;\n//}\n```\n\n\nRust 必须总是显式地使用布尔值作为 `if` 的条件。不像 Ruby 或 JavaScript 这样的语言，Rust 并不会尝试自动地将非布尔值转换为布尔值。\n在 let 语句中使用 if\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition {\n        5\n    } else {\n        6\n    };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n\nRust 有三种循环：`loop`、`while` 和 `for`。\n\n`loop` 关键字告诉 Rust 一遍又一遍地执行一段代码直到你明确要求停止。使用 `break` 关键字或者 ctrl+c，如果将返回值加入你用来停止循环的 `break` 表达式，它会被停止的循环返回\n```rust\nfn main() {\n    let mut counter = 0;\n    let result = loop {\n        counter += 1;\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {}\", result);\n}\n```\n\nwhile 循环\n```rust\nfn main() {\n    let mut number = 3;\n    while number != 0 {\n        println!(\"{}!\", number);\n        number = number - 1;\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\n`for` 循环的安全性和简洁性使得它成为 Rust 中使用最多的循环结构。当想要循环执行代码特定次数时，可以使用 `Range`，它是标准库提供的类型，用来生成从一个数字开始到另一个数字之前结束的所有数字的序列。可以使用`rev`用来反转 range：\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    for element in a.iter() {\n        println!(\"the value is: {}\", element);\n    }\n}\n```\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{}!\", number);\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\n**test**\n- 相互转换摄氏与华氏温度。\n- 生成 n 阶斐波那契数列。\n- 打印圣诞颂歌 “The Twelve Days of Christmas” 的歌词，并利用歌曲中的重复部分（编写循环）。","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-%E5%B7%A5%E5%85%B7%E9%93%BE":{"title":"","content":"安装\n\n工具\ngo build\n```go\nusage: go build [-o output] [build flags] [packages]\n\n# 根据他们的依赖来编译import路径中的包，但是不install结果\nBuild compiles the packages named by the import paths,\nalong with their dependencies, but it does not install the results.\n\nIf the arguments to build are a list of .go files from a single directory,\nbuild treats them as a list of source files specifying a single package.\n\nWhen compiling packages, build ignores files that end in '_test.go'.\n\nWhen compiling a single main package, build writes\nthe resulting executable to an output file named after\nthe first source file ('go build ed.go rx.go' writes 'ed' or 'ed.exe')\nor the source code directory ('go build unix/sam' writes 'sam' or 'sam.exe').\nThe '.exe' suffix is added when writing a Windows executable.\n\nWhen compiling multiple packages or a single non-main package,\nbuild compiles the packages but discards the resulting object,\nserving only as a check that the packages can be built.\n\nThe -o flag forces build to write the resulting executable or object\nto the named output file or directory, instead of the default behavior described\nin the last two paragraphs. If the named output is an existing directory or\nends with a slash or backslash, then any resulting executables\nwill be written to that directory.\n\nThe -i flag installs the packages that are dependencies of the target.\nThe -i flag is deprecated. Compiled packages are cached automatically.\n\nThe build flags are shared by the build, clean, get, install, list, run,\nand test commands:\n\n        -a\n                force rebuilding of packages that are already up-to-date.\n        -n\n                print the commands but do not run them.\n        -p n\n                the number of programs, such as build commands or\n                test binaries, that can be run in parallel.\n                The default is the number of CPUs available.\n        -race\n                enable data race detection.\n                Supported only on linux/amd64, freebsd/amd64, darwin/amd64, windows/amd64,\n                linux/ppc64le and linux/arm64 (only for 48-bit VMA).\n        -msan\n                enable interoperation with memory sanitizer.\n                Supported only on linux/amd64, linux/arm64\n                and only with Clang/LLVM as the host C compiler.\n                On linux/arm64, pie build mode will be used.\n        -v\n                print the names of packages as they are compiled.\n        -work\n                print the name of the temporary work directory and\n                do not delete it when exiting.\n        -x\n                print the commands.\n\n        -asmflags '[pattern=]arg list'\n                arguments to pass on each go tool asm invocation.\n        -buildmode mode\n                build mode to use. See 'go help buildmode' for more.\n        -compiler name\n                name of compiler to use, as in runtime.Compiler (gccgo or gc).\n        -gccgoflags '[pattern=]arg list'\n                arguments to pass on each gccgo compiler/linker invocation.\n        -gcflags '[pattern=]arg list'\n                arguments to pass on each go tool compile invocation.\n        -installsuffix suffix\n                a suffix to use in the name of the package installation directory,\n                in order to keep output separate from default builds.\n                If using the -race flag, the install suffix is automatically set to race\n                or, if set explicitly, has _race appended to it. Likewise for the -msan\n                flag. Using a -buildmode option that requires non-default compile flags\n                has a similar effect.\n        -ldflags '[pattern=]arg list'\n                arguments to pass on each go tool link invocation.\n        -linkshared\n                build code that will be linked against shared libraries previously\n                created with -buildmode=shared.\n        -mod mode\n                module download mode to use: readonly, vendor, or mod.\n                By default, if a vendor directory is present and the go version in go.mod\n                is 1.14 or higher, the go command acts as if -mod=vendor were set.\n                Otherwise, the go command acts as if -mod=readonly were set.\n                See https://golang.org/ref/mod#build-commands for details.\n        -modcacherw\n                leave newly-created directories in the module cache read-write\n                instead of making them read-only.\n        -modfile file\n                in module aware mode, read (and possibly write) an alternate go.mod\n                file instead of the one in the module root directory. A file named\n                \"go.mod\" must still be present in order to determine the module root\n                directory, but it is not accessed. When -modfile is specified, an\n                alternate go.sum file is also used: its path is derived from the\n                -modfile flag by trimming the \".mod\" extension and appending \".sum\".\n        -overlay file\n                read a JSON config file that provides an overlay for build operations.\n                The file is a JSON struct with a single field, named 'Replace', that\n                maps each disk file path (a string) to its backing file path, so that\n                a build will run as if the disk file path exists with the contents\n                given by the backing file paths, or as if the disk file path does not\n                exist if its backing file path is empty. Support for the -overlay flag\n                has some limitations:importantly, cgo files included from outside the\n                include path must be  in the same directory as the Go package they are\n                included from, and overlays will not appear when binaries and tests are\n                run through go run and go test respectively.\n        -pkgdir dir\n                install and load all packages from dir instead of the usual locations.\n                For example, when building with a non-standard configuration,\n                use -pkgdir to keep generated packages in a separate location.\n        -tags tag,list\n                a comma-separated list of build tags to consider satisfied during the\n                build. For more information about build tags, see the description of\n                build constraints in the documentation for the go/build package.\n                (Earlier versions of Go used a space-separated list, and that form\n                is deprecated but still recognized.)\n        -trimpath\n                remove all file system paths from the resulting executable.\n                Instead of absolute file system paths, the recorded file names\n                will begin with either \"go\" (for the standard library),\n                or a module path@version (when using modules),\n                or a plain import path (when using GOPATH).\n        -toolexec 'cmd args'\n                a program to use to invoke toolchain programs like vet and asm.\n                For example, instead of running asm, the go command will run\n                'cmd args /path/to/asm \u003carguments for asm\u003e'.\n\nThe -asmflags, -gccgoflags, -gcflags, and -ldflags flags accept a\nspace-separated list of arguments to pass to an underlying tool\nduring the build. To embed spaces in an element in the list, surround\nit with either single or double quotes. The argument list may be\npreceded by a package pattern and an equal sign, which restricts\nthe use of that argument list to the building of packages matching\nthat pattern (see 'go help packages' for a description of package\npatterns). Without a pattern, the argument list applies only to the\npackages named on the command line. The flags may be repeated\nwith different patterns in order to specify different arguments for\ndifferent sets of packages. If a package matches patterns given in\nmultiple flags, the latest match on the command line wins.\nFor example, 'go build -gcflags=-S fmt' prints the disassembly\nonly for package fmt, while 'go build -gcflags=all=-S fmt'\nprints the disassembly for fmt and all its dependencies.\n\nFor more about specifying packages, see 'go help packages'.\nFor more about where packages and binaries are installed,\nrun 'go help gopath'.\nFor more about calling between Go and C/C++, run 'go help c'.\n\nNote: Build adheres to certain conventions such as those described\nby 'go help gopath'. Not all projects can follow these conventions,\nhowever. Installations that have their own conventions or that use\na separate software build system may choose to use lower-level\ninvocations such as 'go tool compile' and 'go tool link' to avoid\nsome of the overheads and design decisions of the build tool.\n\nSee also: go install, go get, go clean.\n\n```\n\ngo install\n\ngo get\n\ngo env\n\ngo clean\n\n编译\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/3.-%E6%8B%86%E5%88%86%E6%A8%A1%E5%9D%97%E5%88%B0%E4%B8%8D%E5%90%8C%E6%96%87%E4%BB%B6%E4%B8%AD":{"title":"3. 拆分模块到不同文件中","content":"初文件： src/lib.rs\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n        fn server_order() {}\n        fn take_payment() {}\n    }\n}\n```\n\n1. 第一步拆分：src/lib.rs\n```rust\nmod front_of_house;\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n```\n\nsrc/front_of_house.rs\n```rust\npub mod hosting {\n    pub fn add_to_waitlist() {}\n}\n```\n\n在 `mod front_of_house` 后使用分号，而不是代码块，这将告诉 Rust 在另一个与模块同名的文件中加载模块的内容。\n\n2. 进一步拆分 src/front_of_house.rs\n```rust\npub mod hosting;\n```\n\nsrc/front_of_house/hosting.rs\n```rust\npub fn add_to_waitlist() {}\n```\n\n_src/lib.rs_ 中的 `pub use crate::front_of_house::hosting` 语句是没有改变的，在文件作为 crate 的一部分而编译时，`use` 不会有任何影响。`mod` 关键字声明了模块，Rust 会在与模块同名的文件中查找模块的代码。\n","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6":{"title":"","content":"编译器编译源码之后的生成的文件叫做**目标文件**\n## 2. \n## 3. ELF文件结构描述\n### 文件头\n\n### 段表\n\n### 重定位表\n\n### 字符串表\n\n## 4. 链接的接口 - 符号\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/3.-Nodelocaldns-%E5%8E%9F%E7%90%86":{"title":"Nodelocaldns 原理","content":"### NodeLocal DNS 是什么？\n\n通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。\n   \n处于 ClusterFirst 的 DNS 模式下的 Pod 可以连接到 kube-dns 的 serviceIP 进行 DNS 查询。通过 kube-proxy 组件添加的 iptables 规则将其转换为 CoreDNS 端点。通过在每个集群节点上运行 DNS 缓存，NodeLocal DNSCache 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 kube-dns 的 DNS 查询次数。\n\n借助这种新架构，Pod 将可以访问在同一节点上运行的 DNS 缓存代理，从而避免 iptables DNAT 规则和连接跟踪。 本地缓存代理将查询 kube-dns 服务以获取集群主机名的缓存缺失（默认为 \"cluster.local\" 后缀）。\n\n### 为什么使用 NodeLocal DNS？\n\n- 使用当前的 DNS 体系结构，如果没有本地 kube-dns/CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须延伸到另一个节点。 在这种场景下，**拥有本地缓存将有助于改善延迟**。 \n- Nodelocaldns 从本地缓存代理到 kube-dns 服务的连接可以**升级为 TCP**。 TCP conntrack 条目将在连接关闭时被删除，相反 UDP 条目必须超时 （默认 nf_conntrack_udp_timeout 是 30 秒）。\n- 默认 dns 解析使用UDP，UDP默认返回报文长度为512字节，大于512字节后就会将包丢弃，升级为TCP协议可以解决这个问题。TCP可以进行数据包的切片可以完整的得到返回的response\n- 将 DNS 查询从 UDP 升级到 TCP 将减少由于被丢弃的 UDP 包和 DNS 超时而带来的尾部等待时间； 这类延时通常长达 30 秒（3 次重试 + 10 秒超时）。 由于 nodelocal 缓存监听 UDP DNS 查询，应用不需要变更。\n- 跳过 iptables DNAT 和连接跟踪将有助于减少 conntrack 竞争并避免 UDP DNS 条目填满 conntrack 表。\n- 在节点级别对 DNS 请求的度量和可见性。\n- 可以重新启用负缓存，从而减少对 kube-dns 服务的查询数量。\n- **避免IPVS缺陷导致的DNS概率性解析超时问题**\n\n\n### 实现原理\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/a2ba4c3a30327eddd40d999a70321cf6.png)\n\n\n- 配置了NodeLocal DNS本地缓存的Pod，默认会通过NodeLocal DNSCache监听于节点上的IP（169.254.20.10）解析域名。\n- NodeLocal DNSCache本地若无缓存应答解析请求，则会通过kube-dns服务请求CoreDNS进行解析\n- CoreDNS对于非集群内域名，会通过VPC DNS服务器进行解析\n- 已注入DNS本地缓存的Pod，当无法连通NodeLocal DNSCache时，会继而直接通过kube-dns服务连接到CoreDNS进行解析，此链路为备用链路\n- 未注入DNS本地缓存的Pod，会通过标准的kube-dns服务链路连接到CoreDNS进行解析\n\n\n### 未使用 Nodelocaldns 时可能导致的问题\n#### 1. 重启coredns导致业务域名不可解析\n\n当集群使用IPVS作为kube-proxy负载均衡模式时，可能会在CoreDNS缩容或重启时遇到DNS概率性解析超时的问题。\n\n该问题由社区Linux内核缺陷导致，具体信息，请参见。\nhttps://github.com/torvalds/linux/commit/35dfb013149f74c2be1ff9c78f14e6a3cd1539d1?spm=a2c63.p38356.0.0.56a3eb84uFgUly\n\n大概就是当coredns节点有变更例如ip变化了，由于有会话保持的机制pod还会复用之前的连接。虽然可以修改 kube-proxy 配置参数缩短超时时间，但是依旧无法根治\n\n#### 2. 业务无法访问外部域名\n\n测试发现用dig命令直接解析时会报错 connection timed out; no servers could be reached，用nslookup 解析则正常，dig +tcp 再次解析这个域名结果符合预期，使用tcp解析时没有问题的。\n\n- nslookup解析域名是用的TCP协议\n- dig 默认不指定协议的情况是UDP\n\n那么问题又来了，为什么使用UDP协议解析时会失败呢。抓包分析由于这个域名有很多A记录导致返回结果超过了512 字节 达到了1866字节。\n\n询问云厂商后得知云厂商LB用的NAT模式也就是说请求的结果一定还会通过LB将结果返回，而且云厂商LB还有一个限制当使用UDP请求的返回结果大于1500byte 就会丢弃。而且之前测试过nameserver绑定某一台rs是没有问题。足以说明一定是LB的问题。\n\n原文链接：\n- https://blog.csdn.net/weixin_43798031/article/details/131123908\n- [常见问题及优化方案_coredns解析问题 ](https://blog.csdn.net/ygq13572549874/article/details/136147088)","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-OFN-QuickStart":{"title":"3. OFN QuickStart","content":"## 环境要求\n### 镜像仓库 secret\n构建 funcation 会构建一个 funcation 镜像，此时需要你将构造的镜像 push 到 dockerhub 或者Quary.io 因此需要提供一个 secret\n\n```\nREGISTRY_SERVER=https://index.docker.io/v1/ REGISTRY_USER=\u003cyour_registry_user\u003e REGISTRY_PASSWORD=\u003cyour_registry_password\u003e\nkubectl create secret docker-registry push-secret \\\n --docker-server=$REGISTRY_SERVER \\\n --docker-username=$REGISTRY_USER \\\n --docker-password=$REGISTRY_PASSWORD\n```\n\n### 源代码仓库 secret\n如果你创建的func是在私有仓库时，需要你指定\n\n### kafka\n\n\n### WasmEdge\n\n## HelloWorld\n通过以下 demo 来实验：[OpenFunction/samples](https://github.com/OpenFunction/samples)\n示例代码以及相关文档：[samples/functions/knative/hello-world-go](https://github.com/OpenFunction/samples/tree/main/functions/knative/hello-world-go)\n\n\u003e how to run locally？ no `pack` binary\n\n1. 创建镜像仓库 secret\n```bash\nREGISTRY_SERVER=https://index.docker.io/v1/ REGISTRY_USER=\u003cyour_registry_user\u003e REGISTRY_PASSWORD=\u003cyour_registry_password\u003e\nkubectl create secret docker-registry push-secret \\\n    --docker-server=$REGISTRY_SERVER \\\n    --docker-username=$REGISTRY_USER \\\n    --docker-password=$REGISTRY_PASSWORD\n```\n\n2. 创建 function **此处需要指定spec.build，否则会报错**\n\n```yaml\napiVersion: core.openfunction.io/v1beta1\nkind: Function\nmetadata:\n  name: function-sample\nspec:\n  version: \"v2.0.0\"\n  image: \"rykren/sample-go-func:v1\"\n  imageCredentials:\n    name: push-secret\n  port: 8080 # default to 8080\n  build:\n    builder: openfunction/builder-go:latest\n    env:\n      FUNC_NAME: \"HelloWorld\"\n      FUNC_CLEAR_SOURCE: \"true\"\n    srcRepo:\n      url: \"https://github.com/OpenFunction/samples.git\"\n      sourceSubPath: \"functions/knative/hello-world-go\"\n      revision: \"main\"\n  serving:\n    template:\n      containers:\n        - name: function # DO NOT change this\n          imagePullPolicy: IfNotPresent \n    runtime: \"knative\"\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/1d5eef959a97f9f4d5b2e1d5b8ac1b5b.png)\n\n3. 访问 function\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/cd699afd57a5b9ddd2410bfc575f125b.png)\n\n观察函数的处理过程：kubectl get functions.core.openfunction.io\n```shell\nroot@node:~# kubectl get functions\nNAME              BUILDSTATE   SERVINGSTATE   BUILDER         SERVING         ADDRESS                                             AGE\nfunction-sample   Succeeded    Running        builder-6ljsg   serving-2zj8j   http://function-sample.default.svc.cluster.local/   7d16h\n```\n\n处理完成之后可以查看 funcation 的访问地址：\n```shell\nkubectl get function function-sample -o=jsonpath='{.status.addresses}'\n[{\"type\":\"External\",\"value\":\"http://function-sample.default.ofn.io/\"},{\"type\":\"Internal\",\"value\":\"http://function-sample.default.svc.cluster.local/\"}]\n```\n\n运行一个 curl pod 来使用 Internal address 访问函数，如果使用 External 的方式访问需要配置一下 dns 本地域名（修改参考 [Configure Local Domain | OpenFunction](https://openfunction.dev/docs/operations/networking/local-domain/)）\n```shell\nkubectl run curl --image=radial/busyboxplus:curl -i --tty\nIf you don't see a command prompt, try pressing enter.\n[ root@curl:/ ]$ curl http://function-sample.default.svc.cluster.local/OpenFunction\nHello, OpenFunction!\n```\n\n另外一种访问方式是通过 knative service 来访问，使用 external-ip？\n```shell\nroot@node:~# kubectl get ksvc\nNAME                       URL                                                   LATESTCREATED                   LATESTREADY                     READY   REASON\nserving-2zj8j-ksvc-mbck2   http://serving-2zj8j-ksvc-mbck2.default.example.com   serving-2zj8j-ksvc-mbck2-v200   serving-2zj8j-ksvc-mbck2-v200   True  \n```","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-TC-%E4%BB%8B%E7%BB%8D":{"title":"3. TC 介绍","content":"### TC - Traffic Control\n\n流量控制器TC（Traffic Control）用于Linux内核的`流量控制`，它利用队列规定建立处理数据包的队列，并定义队列中的数据包被发送的方式， 从而实现对流量的控制(调度网络包的`延迟`、`丢失`、`传输顺序`和`速度控制`，例如`修改包`（mangle，给 skb 打标记）、`重路由`（reroute）、`丢弃包`（drop）)\n\nTC主要包括三个基本要素：\n\n```bash\n1: qdisc：队列规则，TC的核心，用于确定数据包的发送方式。如下命令实现了指定的eth0网卡上所有的包固定加了200ms延时\n# tc qdisc add dev eth0 root netem delay 200ms\n\n2: class和filter：类和过滤器。类即是数据流量的类别，各种应用和终端的流量通过filter进行分类，进入到队列规则里排队进行发送。如下命令行所示即通过class和filter实现了对指定ip的限速，其它弱网类似：\n# tc class add dev eth0 parent 1:1 classid 1:2 htb rate 500kbit\n# tc filter add dev eth0 protocol ip parent 1:0 prio 3 u32 match 192.168.2.10 flowid 1:3\n\n其它常用到的弱网场景：\n延迟波动，如下命令表示延迟为时延150ms-250ms波动（由于网卡上发出的包延迟不同，所以会有一定程度的乱序发生）：\n# tc qdisc add dev eth0 root netem delay 200ms 50ms\n\n乱序，如下代表 25% 的数据包在发送时重新排序且 50 毫秒延迟\n# tc qdisc add dev eth0 root netem delay 50ms reorder 25%\n\n随机丢包，如下代表随机丢包30%\n# tc qdisc add dev eth0 root netem loss 30%\n```\n\nTC有4大组件：\n\n- **Queuing disciplines**，简称为**qdisc**，直译是「队列规则」，它的本质是一个带有算法的队列，默认的算法是**FIFO**，形成了一个最简单的流量调度器。\n- **Class**，直译是「种类」，它的本质是为上面的qdisc进行分类。因为现实情况下会有很多qdisc存在，每种qdisc有它特殊的职责，根据职责的不同，可以对qdisc进行分类。\n- **Filters**，直译是「过滤器」，它是用来过滤传入的网络包，使它们进入到对应class的qdisc中去。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/05/977d681038876eb8a366d089d2f98cb3.png)\n\n### TC hook\nLinux 内核中负责流量控制的模块，在 eBPF 出现之前，就已经存在于内核中了。从 4.1 的内核版本开始，内核中增加了一些 TC 上的挂载点，支持让 eBPF 程序动态加载到对应位置，运行一些自定义的逻辑。\n\n\ntc 传入参数\n\n\n\ntc 处理结果\n[pkt_cls.h - include/uapi/linux/pkt_cls.h - Linux source code (v6.9) - Bootlin](https://elixir.bootlin.com/linux/v6.9/source/include/uapi/linux/pkt_cls.h)\n\n\n[bpf.h - include/uapi/linux/bpf.h - struct `__sk_buff`](https://elixir.bootlin.com/linux/v6.8.9/source/include/uapi/linux/bpf.h#L6111)\n\n安装了**iproute2**，XDP BPF程序可以通过**ip**命令进行加载，也可以通过**tc**命令加载TC BPF程序。\n\n```bash\n# 为目标网卡创建clsact\ntc qdisc add dev [network-device] clsact\n# 加载bpf程序\ntc filter add dev [network-device] \u003cdirection\u003e bpf da obj [object-name] sec [section-name]\n# 查看\ntc filter show dev [network-device] \u003cdirection\u003e\n```\n\n- 参数 direction，表示将bpf程序加载到哪条网络链路上，值可以是**ingress**和**egress**。\n- 参数**da**，全称**direct-action**。查看帮助文档：\n\n```javascript\ndirect-action | da\ninstructs eBPF classifier to not invoke external TC actions, instead use the TC actions return codes (TC_ACT_OK, TC_ACT_SHOT etc.) for classifiers.\n```\n\nTC BPF控制Egress的命令：\n\n```bash\n# 最开始的状态\n\u003e tc qdisc show dev veth09e1d2e\nqdisc noqueue 0: root refcnt 2\n# 创建clsact\n\u003e tc qdisc add dev veth09e1d2e clsact\n# 再次查看，观察有什么不同\n\u003e tc qdisc show dev veth09e1d2e\nqdisc noqueue 0: root refcnt 2\nqdisc clsact ffff: parent ffff:fff1\n# 加载TC BPF程序到容器的veth网卡上\n\u003e tc filter add dev veth09e1d2e egress bpf da obj tc-xdp-drop-tcp.o sec tc\n# 再次查看，观察有什么不同\n\u003e tc qdisc show dev veth09e1d2e\nqdisc noqueue 0: root refcnt 2\nqdisc clsact ffff: parent ffff:fff1\n\u003e tc filter show dev veth09e1d2e egress\nfilter protocol all pref 49152 bpf chain 0\nfilter protocol all pref 49152 bpf chain 0 handle 0x1 tc-xdp-drop-tcp.o:[tc] direct-action not_in_hw id 24 tag 9c60324798bac8be jited\n```\n\n\n### 参考链接：\n- [Traffic Control HOWTO (tldp.org)](https://tldp.org/HOWTO/Traffic-Control-HOWTO/index.html)\n- ","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-cni-%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B":{"title":"3. cni 容器网络处理过程","content":"### cni 配置文件\ncat /etc/cni/net.d/00-multus.conf \n```yaml\n{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"multus-cni-network\",\n  \"type\": \"multus\",\n  \"confDir\": \"/etc/cni/net.d/\" ,\n  \"logLevel\": \"debug\",\n  \"logFile\": \"/var/log/multus.log\",\n  \"capabilities\": {\n    \"portMappings\": true,\n    \"bandwidth\": true\n  },\n  \"namespaceIsolation\": false,\n  \"clusterNetwork\": \"macvlan-vlan0\",\n  \"defaultNetworks\": [],\n  \"multusNamespace\": \"kube-system\",\n  \"systemNamespaces\": [],\n  \"kubeconfig\": \"/etc/cni/net.d/multus.d/multus.kubeconfig\"\n}\n```\n\n\n### net-attach-def 定义\n```json\n{  \n    \"cniVersion\":\"0.3.1\",  \n    \"name\":\"macvlan-vlan200\",  \n    \"plugins\":[  \n        {  \n            \"vlanID\":200,  \n            \"type\":\"ifacer\",  \n            \"interfaces\":[  \n                \"eth0\"  \n            ]  \n        },  \n        {  \n            \"type\":\"macvlan\",  \n            \"master\":\"eth0.200\",  \n            \"mode\":\"bridge\",  \n            \"ipam\":{  \n                \"type\":\"spiderpool\",  \n                \"default_ipv4_ippool\":[  \n                    \"vlan200-v4\"  \n                ],  \n                \"default_ipv6_ippool\":[  \n                    \"vlan200-v6\"  \n                ]  \n            }  \n        },  \n        {  \n            \"detectIPConflict\":false,  \n            \"detectGateway\":false,  \n            \"mode\":\"auto\",  \n            \"type\":\"coordinator\"  \n        }  \n    ]  \n}\n```\n\n### 相关 cni 组件：\n- ifacer：创建相应 vlan、bond 接口\n- macvlan：\n\t- ipam spiderpool：通过 unix socket 与 daemonset 通信，发送 ipam 请求并解析 ipam 分配结果\n- coordinator：\n\t- 创建 veth，并移动到容器网络\n\t- 添加主机路由\n\t- 解决 underlay Pod 无法访问 ClusterIP 的问题\n\t- 在 Pod 多网卡时，调谐 Pod 的路由，确保数据包来回路径一致\n\t- 支持检测 Pod 的 IP 是否冲突\n\t- 支持检测 Pod 的网关是否可达\n\t- 支持固定 Pod 的 Mac 地址前缀\n\n#### ifacer 配置\n[kernel.org/doc/Documentation/networking/bonding.txt](https://www.kernel.org/doc/Documentation/networking/bonding.txt)\n```go\ntype Ifacer struct {\n\ttypes.NetConf\n\tInterfaces []string `json:\"interfaces,omitempty\"`\n\tVlanID     int      `json:\"vlanID,omitempty\"`\n\tBond       *Bond    `json:\"bond,omitempty\"`\n}\n\ntype Bond struct {\n\tName    string `json:\"name,omitempty\"`\n\tMode    int    `json:\"mode,omitempty\"`\n\tOptions string `json:\"options,omitempty\"`\n}\n```\n\n#### macvlan\n[macvlan CNI](https://www.cni.dev/plugins/current/main/macvlan/)\n\n","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.-slice-%E7%B1%BB%E5%9E%8B":{"title":"3. slice 类型","content":"slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。**slice 没有所有权**\n\n#### 引出问题\n题目：编写一个函数，该函数接收一个字符串，并返回在该字符串中找到的第一个单词。如果函数在该字符串中并未找到空格，则整个字符串就是一个单词，所以应该返回整个字符串。\n\n1. 将 string 转换为字节数组，返回字节索引值\n```rust\nfn first_word(s: \u0026String) -\u003e usize {\n    let bytes = s.as_bytes();\n    for (i, \u0026item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n```\n\n返回的索引值只在 `\u0026String` 的上下文中才是一个有意义的数字。换句话说，因为它是一个与 `String` 相分离的值，无法保证将来它仍然有效。我们不得不时刻担心索引与 `String` 中的数据不再同步，这很啰嗦且易出错\n```rust\nfn main() {\n    let mut s = String::from(\"hello world\");\n    let word = first_word(\u0026s); // word 的值为 5\n    s.clear(); // 这清空了字符串，使其等于 \"\"\n    // word 在此处的值仍然是 5，\n    // 但是没有更多的字符串让我们可以有效地应用数值 5。word 的值现在完全无效！\n}\n```\n\n2. 字符串slice\n```rust\nlet s = String::from(\"hello world\");\nlet hello = \u0026s[0..5];\nlet world = \u0026s[6..11];\n```\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/ee0cf5a4fdc728b1a2fb3b5b26f88b3d.png)\n\n重写 first_word 函数：\n```rust\nfn first_word(s: \u0026String) -\u003e \u0026str {\n    let bytes = s.as_bytes();\n\n    for (i, \u0026item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return \u0026s[0..i];\n        }\n    }\n\n    \u0026s[..]\n}\n```\n\n编译器会确保指向 `String` 的引用持续有效。\n下面的代码直接编译错误。而对于使用的索引的方式，只会在运行时出错；\n此处调用 clear 时，`clear` 需要清空 `String`，会尝试获取一个可变引用，而 first_word 返回的是一个字符串 slice 引用，**当拥有某值的不可变引用，就不能再获取一个可变引用**。所以报错了。\n```rust\nfn main() {\n    let mut s = String::from(\"hello world\");\n    let word = first_word(\u0026s);\n    s.clear(); // 错误!\n\n    println!(\"the first word is: {}\", word);\n}\n```\n\n#### 字符串字面值就是 slice\n字符串字面值被储存在二进制文件中。\n`s` 的类型是 `\u0026str`：它是一个指向二进制程序特定位置的 slice。`\u0026str` 是一个不可变引用。\n```rust\nlet s = \"Hello, world!\";\n```\n\n#### 字符串 slice作为参数\n```rust\nfn first_word(s: \u0026String) -\u003e \u0026str\n```\n可以修改为：(经验学建议)\n```rust\nfn first_word(s: \u0026str) -\u003e \u0026str {\n```\n- 如果有一个字符串 slice，可以直接传递它。\n- 如果有一个 `String`，则可以传递整个 `String` 的 slice。\n定义一个获取字符串 slice 而不是 `String` 引用的函数使得我们的 API 更加通用并且不会丢失任何功能。\n```rust\nfn main() {\n    let my_string = String::from(\"hello world\");\n    // first_word 中传入 `String` 的 slice\n    let word = first_word(\u0026my_string[..]);\n\n    let my_string_literal = \"hello world\";\n    // first_word 中传入字符串字面值的 slice\n    let word = first_word(\u0026my_string_literal[..]);\n    // 因为字符串字面值 **就是** 字符串 slice，\n    // 这样写也可以，即不使用 slice 语法！\n    let word = first_word(my_string_literal);\n}\n```\n\n\n#### 其他类型 slice\n```rust\nlet a = [1, 2, 3, 4, 5];\nlet slice = \u0026a[1..3];\n```","lastmodified":"2025-03-26T03:48:44.119315229Z","tags":null},"/3.1-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F":{"title":"","content":"## 目标文件的格式\n现在PC平台流行的可执行文件格式只要是PE(Windows Portable Executable)和ELF(Linux Executable Linkable Format)。它们都是COFF(Common file format)的变种。**COFF的主要贡献是在目标文件中引入了段的机制，不同的目标文件可以拥有不同数量以及不同类型的段**，另外还定义了调试数据格式。目标文件就是源代码编译之后没有进行链接的中间文件，它同可执行文件的内容结构很相似，所以一般与可执行文件一起采用一种格式存储。\n不光可执行文件按照可执行文件格式存储，动态链接库以及静态链接库都是按照可执行文件的格式进行存储，Windows下统称为PE-COFF文件格式，Linux下统称为ELF文件。\n静态链接库稍有不同，静态链接库把很多目标文件捆绑在一起形成一个文件，再加上一些索引。我们可以把它理解为一个包含很多目标文件的文件包。\n**ELF文件标准将系统中ELF格式的文件归为以下4类：**\n\n| **ELF文件类型** | **说明** | **实例** |\n| --- | --- | --- |\n| 可重定向文件【Relocatable File】 | 这类文件包含了代码和数据，可以被用来连链接成可执行文件或共享目标文件，静态链接库也可以归为这一类 | Linux的.o文件\nWindows的.obj文件 |\n| 可执行文件 【Executable File】 | 这类文件包含了可以直接执行的程序，如ELF可执行文件，它们一般没有扩展名 | Linux /bin/bash文件\nWindows下的exe文件 |\n| 共享目标文件 【Shared Object File】 | 这种文件包含了代码和数据。\n1. 链接器可以使用该类文件同其他可重定位文件和共享目标文件链接，产生新的目标文件\n 2. 动态链接器可以将集合这种共享目标文件与可执行文件结合，作为进程映像的一部分来运行 | Linux的.so文件\nWindows的.dll文件 |\n| 核心转储文件 【Core Dump File】 | 当进程意外终止时，系统可以将进程的地址空间的内容以及终止时的一些其他信息转储到核心转储文件 | Linux下的core dump |\n\nfile命令查看相应的文件格式\n```bash\n# 可执行文件\nhello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=459efd3349df263c08bd6a8901bec16f1f75eb78, for GNU/Linux 3.2.0, not stripped\n\n# 动态链接库\n/usr/lib/libdmmp.so.0.2.0: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=6f45d79f689c7bf1c7677423d33ad92a7b835fbc, stripped\n\n# 目标文件\nhello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped\n```\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/3.2-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9":{"title":"","content":"## 目标文件的内容\n目标文件中含有编译后的机器指令代码、数据以及链接时所需要的一些信息，比如符号表、调试信息、字符串等。一般目标文件将这些信息按照不同的属性，以“节/段”的形式存储。\n\n| **段名** | **名称** | **内容** |\n| --- | --- | --- |\n| 代码段 | .code或者.text | 源代码编译后的机器指令 |\n| 数据段 | .data | 全局变量和局部静态变量 |\n|  | .bss | 未初始化的全局变量和局部静态变量 |\n\n未初始化的全局变量和局部静态变量的默认值为0，他们本可以放在.data段中，但是在.data段为其分配空间并存放数据0没有必要，但是程序运行时他们的确要占用内存空间，因此可执行文件必须记录所有未初始化的全局变量和局部静态变量的大小总和，记为.bss段。**因此.bss段只是为未初始化的全局变量和局部静态变量预留位置而已，他没有内容，所以在文件中也不占据空间。**\n**【BSS一款汇编器中的伪命令，用于为符号预留一块内存空间，之后用于定义符号并且为该符号预留给定数量的未初始化空间】**\nELF文件的开头是一个**文件头：**\n\n   - 描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接以及入口地址、目标硬件、目标操作系统等信息\n   - 包括一个段表，是一个描述文件中各个段的数组。描述了文件中各个段在文件中的偏移位置以及段的属性等\n\n**总体来说，程序源代码被编译之后主要分为两种段：程序指令(**代码段**)和程序数据(**数据段、.bss段**)**\n**数据与指令分段的好处：**\n\n   - 当程序被装载后，数据和指令分别被映射到2个虚存区域，数据对于进程来说是可读可写的，指令区域对于进程是只读的，因此两个虚存区域可以设置可读写和只读权限，防止程序被改写。\n   - 现代CPU有强大的缓存Cache体系，现在CPU缓存一般设计为数据缓存和指令缓存分离，有利于CPU的缓存命中率的提高，提高程序的局部性。\n   - 可以共享指令或共享只读数据\n\n```c\nint printf(const char* format, ... );\n\nint global_init_var = 84;\nint global_unint_var;\n\nvoid func1(int i)\n{\n\tprintf(\"%d\\n\", i);\n}\n\nint main(void)\n{\n\tstatic int static_var = 85;\n\tstatic int static_var2;\n\n\tint a = 1;\n\tint b;\n\n\tfunc1(static_var + static_var2 + a + b);\t\n\n\treturn a;\n}\n```\n```bash\nroot@orange:/home/orange/program/test# gcc -c hello.c\nroot@orange:/home/orange/program/test# ll\ntotal 16\ndrwxr-xr-x 2 root root 4096 Jul 13 13:52 ./\ndrwxr-xr-x 8 root root 4096 Jul 13 12:35 ../\n-rw-r--r-- 1 root root  281 Jul 13 13:52 hello.c\n-rw-r--r-- 1 root root 2072 Jul 13 13:52 hello.o\nroot@orange:/home/orange/program/test# objdump -h hello.o\n\nhello.o:     file format elf64-x86-64\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .text         0000005f  0000000000000000  0000000000000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE\n  1 .data         00000008  0000000000000000  0000000000000000  000000a0  2**2\n                  CONTENTS, ALLOC, LOAD, DATA\n  2 .bss          00000004  0000000000000000  0000000000000000  000000a8  2**2\n                  ALLOC\n  3 .rodata       00000004  0000000000000000  0000000000000000  000000a8  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  4 .comment      0000002b  0000000000000000  0000000000000000  000000ac  2**0\n                  CONTENTS, READONLY\n  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000000d7  2**0\n                  CONTENTS, READONLY\n  6 .note.gnu.property 00000020  0000000000000000  0000000000000000  000000d8  2**3\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  7 .eh_frame     00000058  0000000000000000  0000000000000000  000000f8  2**3\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\n\n# size 工具 dec表示3个段的长度和的十进制，hex表示长度和的十六进制\nroot@orange:/home/orange/program/test# size hello.o\n   text    data     bss     dec     hex filename\n    219       8       4     231      e7 hello.o\n```\n其中除了基本的三个段之外，多了**只读数据段(.rodata)、注释信息段(.comment)、堆栈提示段(.note.GNU-stack)**\n**段的属性**\n\n- 段的长度 size：0000005f\n- 段所在位置 file Offset：00000040\n- 段的各种属性：CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE，CONTENTS表示该段在文件中存在\n\n**查看的工具：**\n\n- binutils的工具 -- objdump\n   - objdump -h hello.o\n   - -h 将ELF文件的各个段的基本信息打印出来\n   - -x 将更多的信息打印出来\n   - -s 将所有段的内容以十六进制打印出来\n   - -d 将所有包含指令的段反汇编\n- readelf工具 专门针对ELF文件格式的解析器\n- size 用来查看ELF文件的代码段、数据段和BSS段的长度\n### 代码段\n```bash\nroot@orange:/home/orange/program/test# objdump -sd hello.o\nhello.o:     file format elf64-x86-64\nContents of section .text:\n 0000 f30f1efa 554889e5 4883ec10 897dfc8b  ....UH..H....}..\n 0010 45fc89c6 488d3d00 000000b8 00000000  E...H.=.........\n 0020 e8000000 0090c9c3 f30f1efa 554889e5  ............UH..\n 0030 4883ec10 c745f801 0000008b 15000000  H....E..........\n 0040 008b0500 00000001 c28b45f8 01c28b45  ..........E....E\n 0050 fc01d089 c7e80000 00008b45 f8c9c3    ...........E...\n \n# 一共0x5e个字节，比之前objdump输出内容少一个字节\n# 最左面一列是偏移量，中间是十六进制内容，最右面是对应的ASCII码形式。\n# 下面为反汇编结果 .text段中的内容即为hello.c中的func()和main()指令\n\nDisassembly of section .text:\n0000000000000000 \u003cfunc1\u003e:\n   0:   f3 0f 1e fa             endbr64\n   4:   55                      push   %rbp\n   5:   48 89 e5                mov    %rsp,%rbp\n   8:   48 83 ec 10             sub    $0x10,%rsp\n   c:   89 7d fc                mov    %edi,-0x4(%rbp)\n   f:   8b 45 fc                mov    -0x4(%rbp),%eax\n  12:   89 c6                   mov    %eax,%esi\n  14:   48 8d 3d 00 00 00 00    lea    0x0(%rip),%rdi        # 1b \u003cfunc1+0x1b\u003e\n  1b:   b8 00 00 00 00          mov    $0x0,%eax\n  20:   e8 00 00 00 00          callq  25 \u003cfunc1+0x25\u003e\n  25:   90                      nop\n  26:   c9                      leaveq\n  27:   c3                      retq\n\n0000000000000028 \u003cmain\u003e:\n  28:   f3 0f 1e fa             endbr64\n  2c:   55                      push   %rbp\n  2d:   48 89 e5                mov    %rsp,%rbp\n  30:   48 83 ec 10             sub    $0x10,%rsp\n  34:   c7 45 f8 01 00 00 00    movl   $0x1,-0x8(%rbp)\n  3b:   8b 15 00 00 00 00       mov    0x0(%rip),%edx        # 41 \u003cmain+0x19\u003e\n  41:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 47 \u003cmain+0x1f\u003e\n  47:   01 c2                   add    %eax,%edx\n  49:   8b 45 f8                mov    -0x8(%rbp),%eax\n  4c:   01 c2                   add    %eax,%edx\n  4e:   8b 45 fc                mov    -0x4(%rbp),%eax\n  51:   01 d0                   add    %edx,%eax\n  53:   89 c7                   mov    %eax,%edi\n  55:   e8 00 00 00 00          callq  5a \u003cmain+0x32\u003e\n  5a:   8b 45 f8                mov    -0x8(%rbp),%eax\n  5d:   c9                      leaveq\n  5e:   c3                      retq\n```\n\n### 数据段和只读数据段\n.data段中保存的是那些已经初始化了的全局变量和局部静态变量。如下图54000000 存放的0x54、0x00、0x00、0x00的值刚好为84，global_init_var的值，55000000存放的是变量 static_var的值85。存储的次序取决于CPU的字节序，大小端。\n.rodata段存放的是只读数据，一般是程序中的只读变量和字符串常量。在调用printf时，用到一个\"%d\\n\" 他是一个只读数据，因此放到了.rodata段了，此时的4个字节刚好是这个字符串常量的ASCII码\n\n```bash\n  1 .data         00000008  0000000000000000  0000000000000000  000000a0  2**2\n                  CONTENTS, ALLOC, LOAD, DATA\n  3 .rodata       00000004  0000000000000000  0000000000000000  000000a8  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n\nContents of section .data:\n 0000 54000000 55000000                    T...U...\nContents of section .rodata:\n 0000 25640a00                             %d..\n```\n\n### BSS段\n.bss段中保存的是未初始化的全局变量和局部静态变量。更准确的说法是.bss段为他们预留了空间。global_unint_var和static_var2的大小为8字节，但是.bss段的大小为4。我们通过看符号表，只有static_var2放在了.bss段，global_unint_var没有被放在任何段，只是被定义为一个\"COMMON符号\"，这与编译器事项相关。有的编译器会将全局的未初始化的变量放在.bss段，有的不存放，只是预留一个未定义的全局变量符号，等到最终链接成可执行文件的时候，再在.bss段分配空间。**编译单元内部可见的静态变量**的确是存放到.bss段的。\n\u003e static int x = 0\n\u003e 此时x会放置在.bss段，初始化为0可以认为是未初始化的，因为未初始化的值都是0，这样的优化可以节省空间，因为.bss段不占用空间\n\n```bash\n  2 .bss          00000004  0000000000000000  0000000000000000  000000a8  2**2\n                  ALLOC\n```\n\n### 其他段\n以\".\"做前缀，表示表的名字是系统保留的，应用程序可以使用一些非系统保留的名字作为段名，但是应用程序自定义的段名不能使用\".\"作为前缀，否则容易跟系统保留段名冲突，一个ELF文件也可以拥有几个相同段名的段。\nGCC提供一个扩展机制，使程序员可以指定变量所处的段：\n```c\n// __attribute__((section(\"name\")))属性可以吧相应的变量或函数放在以name为段名的段中\n__attribute__((section(\"FOO\"))) int global = 42;\n__attribute__((section(\"BAR\"))) void fun() {\n}\n```\n\u003e 【补充】可以使用objcopy工具将一个图片或mp3作为目标文件的一个段\n\u003e objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o\n\n| **常用的段名** | **说明** |\n| --- | --- |\n| .rodata1 | Read Only Data，存放只读数据。如字符串常量、全局const变量。同.rodata段 |\n| .comment | 存放的是编译器版本信息，如字符串 GCC(GNU) 4.2.0 |\n| .debug | 调试信息 |\n| .dynamic | 动态链接信息 |\n| .hash | 符号哈希表 |\n| .line | 调试时的行号表，即源代码行号与编译后指令的对应表 |\n| .note | 额外的编译器信息 程序的公司、发布版本号等 |\n| .strtab | String Tables 字符串表，用于存储ELF文件中用到的各种字符串 |\n| .symtab | Symbol Tables 符号表 |\n| .shstrtab | Section String Tables 段名表 |\n| .plt\n.got | 动态链接的跳转表和全局入口表 |\n| .init\n.fini | 程序初始化与终结代码段 |\n\n还有一些保留的段名是因为ELF文件历史遗留问题造成的\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/3.3-ELF%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%8F%8F%E8%BF%B0":{"title":"","content":"### ELF基本结构\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1626276436742-9037d0f2-f7cd-4f2a-bd63-e6f79c1d32c3.png#align=left\u0026display=inline\u0026height=398\u0026originHeight=398\u0026originWidth=238\u0026size=10767\u0026status=done\u0026style=none\u0026width=238)\n\n- ELF文件头：包含了描述整个文件的基本属性(ELF文件版本、目标机器型号、程序入口地址等)\n- 各个段（代码段、数据段、bss段）\n- 段表：描述了ELF文件包含的所有段的信息(段名、段的长度、在文件中的偏移、读写权限、段的其他属性)\n- ELF辅助结构：字符串表、符号表等\n### 文件头\nreadelf 命令查看ELF文件：`readelf -h hello.o`\n```bash\nELF Header\t\t    | ELF Header:\nELF魔数  \t\t\t\t\t|   Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\t\t\t\t\t\t\t\t\t\n文件机器字节长度  |   Class:                             ELF64\n数据存储方式      |   Data:                              2's complement, little endian\n版本  \t\t\t\t\t\t|   Version:                           1 (current)\n运行平台          |   OS/ABI:                            UNIX - System V\nABI版本           |   ABI Version:                       0\nELF重定位类型     |   Type:                              REL (Relocatable file)\n硬件平台          |   Machine:                           Advanced Micro Devices X86-64\n硬件平台版本      |   Version:                           0x1\n入口地址          |   Entry point address:               0x0\n程序头入口        |   Start of program headers:          0 (bytes into file)\n段表的位置        |   Start of section headers:          1176 (bytes into file)\n————              |   Flags:                             0x0\n文件头长度        |   Size of this header:               64 (bytes)\n程序头长度        |   Size of program headers:           0 (bytes)\n程序头数量        |   Number of program headers:         0\n段表的长度        |   Size of section headers:           64 (bytes)\n段数量            |   Number of section headers:         14\n                  |   Section header string table index: 13\n```\nELF文件头中定义了ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度、段的数量等。\n**ELF魔数**：16个字节，用于标识ELF文件的平台属性。如ELF字长、字节序、ELF文件版本。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1626354271305-0623ff66-16c3-4438-86cd-f8bc321f2552.png#align=left\u0026display=inline\u0026height=230\u0026originHeight=230\u0026originWidth=534\u0026size=21709\u0026status=done\u0026style=none\u0026width=534)\nELF文件的魔数：7f 45 4c 46；a.out的魔数最开始两个字符01 07；PE/COFF文件最开始两个字符4d 5a\nELF文件类：\n\n      - 0：无效文件\n      - 1：32位ELF文件\n      - 2：64位ELF文件\n\n字节序：\n\n      - 0：无效格式\n      - 1：小端格式\n      - 2：大端格式\n\n魔数的由来：对之前的系统保持兼容。当年unix诞生在PDP小型机上，系统在加载一个可执行文件后直接从文件的第一个字节开始执行，一般在文件的最开始返回一条跳转指令，负责跳转到文件的真正入口。01 07刚好是当时的跳转指令。为了保持兼容，这条指令被当为魔数一直保留\n**重定位文件类型：**\n\n   - ET_REL：可重定位文件，一般为.o文件\n   - ET_EXEC：可执行文件\n   - ET_DYN：共享目标文件，一般为.so文件\n\n**机器类型**：ELF文件格式被设计为可以在多个平台下使用，不同的平台下的ELF文件遵循同一套ELF标准。\n**入口地址**：规定ELF程序入口虚拟地址，操作系统在加载完成程序后从这个地址开始执行进程的指令；可重定位文件一般没有入口地址，该值为0\n**Start of section headers**：段表在文件中的偏移\n**flags：**ELF标志位，用来标识一些ELF文件平台相关的属性\n**Section header string table index：**段表字符串表所在的段在段表中的下标\n\n### 段表\n段表保存各个段的基本属性的结构，段表是除了文件头意外最重要的结构，描述了ELF各个段的信息。ELF文件的段结构就是由段表决定的，编译器、链接器和装载器都是依照段表来访问各个段的属性的。\nobjdump -h 命令只是把ELF文件中的关键的段显示了出来，而忽略了其他的辅助性的段(符号表、字符串表、段名字符串表、重定位表等)。readelf工具查看ELF文件的段。\n```bash\nroot@orange:/home/orange/program/test# readelf -S hello.o\nThere are 14 section headers, starting at offset 0x498:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000     0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040     000000000000005f  0000000000000000  AX       0     0     1\n  [ 2] .rela.text        RELA             0000000000000000  00000378     0000000000000078  0000000000000018   I      11     1     8\n  [ 3] .data             PROGBITS         0000000000000000  000000a0     0000000000000008  0000000000000000  WA       0     0     4\n  [ 4] .bss              NOBITS           0000000000000000  000000a8     0000000000000004  0000000000000000  WA       0     0     4\n  [ 5] .rodata           PROGBITS         0000000000000000  000000a8     0000000000000004  0000000000000000   A       0     0     1\n  [ 6] .comment          PROGBITS         0000000000000000  000000ac     000000000000002b  0000000000000001  MS       0     0     1\n  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  000000d7     0000000000000000  0000000000000000           0     0     1\n  [ 8] .note.gnu.propert NOTE             0000000000000000  000000d8     0000000000000020  0000000000000000   A       0     0     8\n  [ 9] .eh_frame         PROGBITS         0000000000000000  000000f8     0000000000000058  0000000000000000   A       0     0     8\n  [10] .rela.eh_frame    RELA             0000000000000000  000003f0     0000000000000030  0000000000000018   I      11     9     8\n  [11] .symtab           SYMTAB           0000000000000000  00000150     00000000000001b0  0000000000000018          12    12     8\n  [12] .strtab           STRTAB           0000000000000000  00000300     0000000000000073  0000000000000000           0     0     1\n  [13] .shstrtab         STRTAB           0000000000000000  00000420     0000000000000074  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n```\n段表就是有14个元素的数组，第一个元素是无效的段描述符，类型为NULL，除此之外每个段描述符都对应一个段。其中段描述符包含：\n\n   - 段名：段名是字符串，位于 .shstrtab 字符串表；**段名只是在编译和链接的过程中有意义，而真正决定段的属性是段的类型和段的标志位**。\n   - 段的类型：\n      - SHT_NULL：无效段\n      - SHT_PROGBITS：程序段、代码段、数据段 都是该类型\n      - SHT_SYMTAB：符号表\n      - SHT_STRTAB：字符串表\n      - SHT_RELA：重定位表\n      - SHT_HASH：符号表的哈希表\n      - SHT_DYNAMIC：动态链接信息\n      - SHT_NOTE：提示性信息\n      - SHT_NOBITS：在文件中没有内容，如.bss段\n      - SHT_REL：该段包含重定位信息\n      - SHT_SHLIB：保留\n      - SHT_DNYSYM：动态链接的符号表\n   - 段的标志位\n      - SHF_WRITE：(1)表示该段在进程空间中可写。\n      - SHF_ALLOC：(2)表示该段在进程空间中须分配空间。\n      - SHF_EXECINSTR：(4)表示该段在进程空间中可以被执行，一般指代码段\n   - 段虚拟地址：如果该段可以被加载，表示该段被加载后在进程地址空间中的虚拟地址，涉及映像文件的加载\n   - 段偏移：如果该段在文件中，表示该段在文件中的偏移\n   - 段的长度\n   - 段的链接信息（link、info）：若段的类型是链接相关的，如重定位表、符号表等\n| **Type** | **Link** | **Info** |\n| :---: | :---: | :---: |\n| SHT_DYNAMIC | 该段所使用的字符串表在段表中的下标 | 0 |\n| SHT_HASH | 该段所使用的符号表在段表中的下标 | 0 |\n| SHT_REL | 该段所使用的相应符号表在段表中的下标 | 该重定位表所作用的段在段表中的下标 |\n| SHT_RELA |  |  |\n| SHT_SYMTAB | 操作系统相关 | 操作系统相关 |\n| SHT_DNYSYM |  |  |\n| other | SHN_UNDEF | 0 |\n\n   - 段地址对齐\n      - 有些段对段地址对齐有要求。地址对齐的数量都是2的指数倍，Align该值表示地址对齐数量中的指数，Align=3 即为8倍且Address % (2 ^ Align ) == 0 **???**\n      - 若Align为0或1，表示该段没有对齐要求\n   - 项的长度\n      - 包含固定大小的项：表示每个项的大小，如符号表，包含的每个符号所占的大小都是一样的。\n      - 不包含固定大小的项：0\n\n**系统保留段**\n\n| **Name** | **Type** | **Flag** |\n| :---: | :---: | :---: |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n\n**\n\n### 重定位表\n.rel.text 段，类型为SHT_REL表示该段为一个重定位表。链接器在处理目标文件时，须要对目标文件中的某些部位进行重定位，即代码段和数据段中的那些对绝对地址的引用的位置。这些重定位信息都存放在ELF文件的重定位表中，对于每个要重定位的代码段和数据段，都会有一个相应的重定位表。此时的 .rel.text 是针对代码段的重定位表，而 .rel.data 是对数据段的重定位表。\n### 字符串表\nELF文件中使用了很多字符串，比如段名、变量名等。因为字符串的长度往往是不定的，使用固定的结构来表示它比较困难。一种常见的做法是把字符串集中起来存放在一个表，然后使用字符串在表中的偏移来引用字符串。\n\n| **偏移** | **+0** | **+1** | **+2** | **+3** | **+4** | **+5** | **+6** | **+7** | **+8** | **+9** |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| +0 | \\\\0 | h | e | l | l | o | w | o | r | l |\n| +10 | d | \\\\0 | M | y | v | a | r | i | a | b |\n| +20 | l | e | \\\\0 |  |  |  |  |  |  |  |\n\n对应的偏移以及其对应的字符串如下：在ELF文件中引用字符串只需要使用数字下标即可，无须考虑字符串长度问题。\n\n| **偏移** | **字符串** |\n| :---: | :---: |\n| 0 | 空字符串 |\n| 1 | helloworld |\n| 6 | world |\n| 12 | Myvariable |\n\n字符串表在ELF文件头中的也是以段的形式存在，常见段名：\n\n   - .strtab  字符串表：保存普通的字符串，如符号的名字。\n   - .shstrtab  段表字符串表：保存段表中用到的字符串，最常见的就是段名。\n\n`readelf -h `看到的`Section header string table index`的值为13，对照`readelf -S` 看到的段表的下标刚好为13。因此分析ELF文件头，就可以得到段表和段表字符串表的位置，从而解析整个ELF文件。\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/3.4-%E9%93%BE%E6%8E%A5%E7%9A%84%E6%8E%A5%E5%8F%A3-%E7%AC%A6%E5%8F%B7":{"title":"","content":"链接的本质就是将不同的目标文件之间相互粘在一起，想要粘合就必须要有固定的规则才行。在链接中，目标文件之间相互拼合实际上是目标文件之间对地址的引用，即对函数和变量的地址的引用，如A使用B中的函数func，即A中定义了函数func、B引用了func。链接中，我们将函数和变量统称为改符号，函数名或者变量名就是符号名。\n整个链接的过程正是基于符号才能正确完成，链接的过程中很关键的一部分就是符号的管理，每一个目标文件都会有一个相应的符号表，这个表里面记录目标文件中所用到的所有符号，每个定义的符号有一个对应的值叫做符号值。对于变量核函数来说，符号值就是它们的地址，我们将符号表中的所有符号进行分类：\n\n   - 定义在本目标文件的全局符号，可以被其他目标文件引用\n   - 在本目标文件中引用的全局符号，却没有定义在本目标文件，这一般叫外部符号。\n   - 段名，这种符号往往由编译器产生，它的值就是该段的起始地址\n   - 局部符号，这类符号往往只在编译单元内部可见，比如static的变量。调试器可以使用这些符号来分析程序或奔溃时的核心转储文件。这些局部符号对于链接过程没有作用，链接器往往会忽略它们\n   - 行号信息，即目标文件指令与源代码中代码行的对应关系，这是可选的\n\n我们最关心的是全局符号，即以上分类的第一类和第二类，因为链接的过程只关心全局符号的相互粘合，局部符号、段名、行号等都是次要的，因为他们对于其他目标文件来说是不可见的。\n查看符号表命令：`nm hello.o`\n```bash\nroot@orange:/home/orange/program/test# nm hello.o\n0000000000000000 T func1\n0000000000000000 D global_init_var\n                 U _GLOBAL_OFFSET_TABLE_\n0000000000000004 C global_unint_var\n0000000000000028 T main\n                 U printf\n0000000000000004 d static_var.1920\n0000000000000000 b static_var2.1921\n```\n```bash\nroot@orange:/home/orange/program/test# readelf -s hello.o\n\nSymbol table '.symtab' contains 18 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1\n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3\n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4\n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5\n     6: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 static_var.1920\n     7: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    4 static_var2.1921\n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7\n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    8\n    10: 0000000000000000     0 SECTION LOCAL  DEFAULT    9\n    11: 0000000000000000     0 SECTION LOCAL  DEFAULT    6\n    12: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 global_init_var\n    13: 0000000000000004     4 OBJECT  GLOBAL DEFAULT  COM global_unint_var\n    14: 0000000000000000    40 FUNC    GLOBAL DEFAULT    1 func1\n    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf\n    17: 0000000000000028    55 FUNC    GLOBAL DEFAULT    1 main\n```\n\n### 1. ELF符号表结构\n符号表一般是叫 .symtab的一个段，该段对应的结构如下：\n\n   - name/Num：符号名，包含了该符号在字符串表中的下标\n   - value：符号相对应的值。该值与符号有关，可能是一个绝对值，也可能是一个地址等。不同的符号，对应的值含义不同\n   - size：符号大小，对于包含数据的符号，这个值是该数据类型的大小，如果该值为0，表示该符号大小为0或者未知；main对应的函数表示指令所占字节数\n   - info：符号类型和绑定信息\n   - other：该成员目前为0，没用\n   - shndx：符号所在的段\n\n第一个元素，下标为0的元素为无效的“未定义”符号。vis字段C/C++中没有使用；关于未初始化的全局变量本身没有存在于BSS段，具体可见COMMON块\n#### 符号值 value\n\n- 在目标文件中，如果是符号的定义并且该符号不是COMMON块类型的，value表示该符号在段中的偏移；即符号对应的函数或者变量卫浴Shndx指定的段，偏移value的位置\n- 在目标文件中，如果符号是COMMON块类型的，value表示符号的对齐属性\n- 在可执行文件，value表示符号的虚拟地址，这个虚拟地址对于动态链接器来说十分有用\n#### 符号类型和绑定信息 info\n该成员低4位表示符号的类型，高28位表示符号绑定信息\n\n| **符号绑定信息** |  |  |\n| :---: | --- | --- |\n| 符号定义名 | 值 | 说明 |\n| LOCAL | 0 | 局部符号，对于目标文件的外部不可见 |\n| GLOBAL | 1 | 全局符号，外部可见 |\n| WEAK | 2 | 弱引用 |\n\n| **符号绑定信息** |  |  |\n| :---: | --- | --- |\n| 符号定义名 | 值 | 说明 |\n| NOTYPE | 0 | 未知符号类型 |\n| OBJECT | 1 | 该符号是个数据对象，比如变量、数组 |\n| FUNC | 2 | 该符号是个函数或者其他可执行文件 |\n| SECTION | 3 | 该符号是一个段，这种符号必须是LOBAL的 |\n| FILE | 4 | 该符号表示文件名，一般都是该目标文件所对应的源文件名，这种符号必须是LOCAL的且shndx一定是ABS |\n\n#### 符号所在段 shndx\n如果符号定义在本目标文件中，那么这个成员表示符号所在的段在段表中的下标；但是如果符号不是定义在本目标文件中，或者对于有些特殊符号，值表示含义如下\n\n| **符号所在段特殊常量** |  |  |\n| :---: | --- | --- |\n| 符号定义名 | 值 | 说明 |\n| ABS | 0xfff1 | 表示该符号包含了一个绝对的值，比如表示文件名的符号 |\n| COMMON | 0xfff2 | 表示该符号是一个COMMON类型的符号，比如未初始化的全局符号定义 |\n| UNDEF | 0 | 表示该符号未定义。表示该符号在本目标文件被引用到，但是定义在其他目标文件中 |\n\n\n### 2. 特殊符号\n使用ld作为链接器时，会为我们定义很多特殊符号，这些符号没有在程序中定义，但是我们可以直接声明并且引用它。链接器会在将程序链接为可执行文件的时候，将其解析为正确的值，这些符号是被定义在ld链接器的链接脚本中的，并且只有使用ld链接生成最终可执行文件的时候，这些符号才会存在。几个有代表的如下：\n\n   - __executable_start：该符号为程序的起始地址。不是入口地址，是程序的最开始的地址\n   - __etext或者_etext或者etext：该符号为代码段结束地址\n   - __end或者end：该符号为程序结束地址（其中地址皆为被装载时的虚拟地址）\n\n\n\n### 3. 符号修饰与函数签名\n20世纪70年代以前，编译器编译源码产生目标文件的时候，符号名和相应的变量/函数名称是一样的。这样导致C语言在引用其他库时，不可以使用库中定义的函数和变量名作为符号名，否则就是出现冲突，为了防止符号名冲突，UNIX下的C语言规定，C语言源代码中的所有全局变量和函数经过编译之后，相对应的符号名前加上'_'，Fortran语言对应的符号名前面与后面均加上'_'；但是还是没有从根本上解决冲突的问题。像c++之后设计的语言增加了命名空间的方法来解决多模块的符号冲突问题。\n后来随着操作系统和编译器被重写了好几遍之后，与Fortran、古老汇编库的符号冲突问题已经不是那么明显了。\n#### C++符号修饰\n众所周知，c++强大又复杂，拥有类、继承、虚机制、重载、命名空间等特性，使得符号管理更加复杂，为了支持C++的复杂特性，人们发明了**符号修饰或符号改编**的机制。\n**函数重载**\n```cpp\nint func(int);\nfloat func(float);\nclass C {\n\tint func(int);\n    class C2 {\n    \tint func(int);\n    }\n}\n\nnamespace N {\n\tint func(int);\n    class C {\n    \tint func(int);\n    }\n}\n```\n**函数签名包含了一个函数的信息，包括函数名、它的参数类型、它所在的类和名称空间及其他信息**。函数签名用于识别不同的函数。由此看来上述6个同名函数的函数签名不同。在编译器及链接器处理符号时，它们使用某种**名称修饰**的方法，使得每个函数签名对应一个修饰后名称。编译器在将c++源代码编译成目标文件时，会将函数和变量的名字进行修饰，形成符号名，也就是说，c++的源代码编译后的目标文件中所使用的符号名是相应的函数和变量的修饰后名称。c++编译器和链接器都使用符号来识别和处理函数和变量，所以对于不同函数签名的函数，即使函数名相同，编译器和链接器都认为它们是不同的函数。\n\n**xxx 修饰规则 xxx  linux windows**\n\n签名和名称修饰机制不光被使用到函数上，c++中的全局变量和静态变量也有同样的机制。\n不同的编译器厂商的名称修饰方法可能不同，所以不同的编译器对于同一个函数签名可能对应不同的修饰后名称。由于不同的编译器采用不同的名字修饰方法、必然会导致由不同编译器编译产生的目标文件无法正常相互链接，这是导致不同编译器之间不能互操作的主要原因之一。\n\n### 4. extern C\n\n\n### 5. 弱符号与强符号\n\n\n\n### 6 .调试信息\n\n\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/4.-%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95":{"title":"4. 安装测试","content":"1. setup_singleCni_macvlan - kind\n\t- 主机与本机 pod 不通\n\t- pod 与 service 不通\n2. setup_dualCni_calico\n3. setup_dualCni_cilium","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/4.-%E7%BB%93%E6%9E%84%E4%BD%93":{"title":"4. 结构体","content":"### 定义结构体\n和元组一样，结构体的每一部分可以是不同类型。但不同于元组，结构体需要命名各部分数据以便能清楚的表明其值的意义。有了名字，就不需要依赖顺序来指定或访问实例中的值。\n```rust\nstruct User {\n    username: String,\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\n\nfn main() {\n    let tup = (500, 6.4, 1);\n    let (x, y, z) = tup;\n    println!(\"The value of y is: {}\", y);\n\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n    let five_hundred = x.0;\n    let six_point_four = x.1;\n    let one = x.2;\n\n    let user1 = User {\n\t    email: String::from(\"someone@example.com\"),\n\t    username: String::from(\"someusername123\"),\n\t    active: true,\n\t    sign_in_count: 1,\n\t};\n\tuser1.email = String::from(\"anotheremail@example.com\");\n}\n```\n\n注意整个实例必须是可变的；Rust 并不允许只将某个字段标记为可变。\n\n**1. 字段初始化简写语法**\n参数名与字段名都完全相同，可以使用字段初始化简写语法\n```rust\nfn build_user(email: String, username: String) -\u003e User {\n    User {\n        email, // email: email,\n        username, //username: username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n```\n\n**2. 使用结构体更新语法从其他实例创建实例**\n`..` 语法指定了剩余未显式设置值的字段应有与给定实例对应字段相同的值。\n```rust\nlet user2 = User {\n    email: String::from(\"another@example.com\"),\n    username: String::from(\"anotherusername567\"),\n    \n    ..user1\n    /*\n    active: user1.active,\n    sign_in_count: user1.sign_in_count,\n    */\n};\n```\n\n**3. 使用没有命名字段的元组结构体来创建不同的类型**\n元组结构体：没有具体的字段名，只有字段的类型（给元组起了一个名字）。元组结构体实例类似于元组：可以将其解构为单独的部分，也可以使用 `.` 后跟索引来访问单独的值，等等。\n```rust\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n```\n`black` 和 `origin` 值的类型不同，因为它们是不同的元组结构体的实例。\n\n**4. 没有任何字段的类单元结构体**\n类单元结构体：没有任何字段的结构体，类似于 `()`，即 unit 类型。\n类单元结构体常常在你想要在某个类型上实现 trait 但不需要在类型中存储数据的时候发挥作用。\n\n\n\n### debug 打印结构体\n```rust\n#[derive(Debug)]\nprintln!(\"rect1 is {:?}\", rect1);\n// rect1 is Rectangle { width: 30, height: 50 }\n\nprintln!(\"rect1 is {:#?}\", rect1);\n/*\nrect1 is Rectangle {\n    width: 30,\n    height: 50\n}\n*/\n```\n\n\n### 为结构体定义方法：\n- 在结构体的上下文中定义，定义到`impl` 块中\n- 第一个参数总是 `self`，代表调用该方法的结构体实例。\n\n\u003e 如果想要在方法中改变调用方法的实例，需要将第一个参数改为 `\u0026mut self`。通过仅仅使用 `self` 作为第一个参数来使方法获取实例的所有权是很少见的；这种技术通常用在当方法将 `self` 转换成别的实例的时候，这时我们想要防止调用者在转换之后使用原始的实例。\n\n\n关联函数： 在`impl` 块中定义不以 `self` 作为参数的函数。\n关联函数经常被用作返回一个结构体新实例的构造函数\n\n结构体允许拥有多个 `impl` 块。但结构体的每个方法有其自己的 `impl` 块(在 `impl` 块中？)。\n\n生命周期确保结构体引用的数据有效性跟结构体本身保持一致。\n","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/4.-%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5":{"title":"","content":"本章小结：\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.-Coredns-%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87":{"title":"4. CoreDNS 疑难杂症","content":"\n### 1. coredns  \"no nameservers found\" error\ncoredns  CrashLoopBackOff \n```\nkubectl edit configmap coredns -n kube-system\n```\n\n原 coredns configmap 配置如下：\n```\n    forward . /etc/resolv.conf {\n       max_concurrent 1000\n    }\n```\n\n应该是 /etc/resolv.conf 中没有定义 nameservers， 修改为正确的上游 dns 服务器\n\n```\n    forward . 8.8.8.8 {\n       max_concurrent 1000\n    }\n```\n\n### 2. DNS 解析失败\n\n光大一个测试环境中，遇到了 dns 解析失败的问题导致 ks-redis 启动不起来，随后影响 api-server，根本原因是：  \n  \ncm coredns.hosts没写fallthrough导致集群容器dns解析有问题。  \ncoredns  hosts是插件机制 ，优先级较高 - [hosts 插件文档](https://coredns.io/plugins/hosts/)\n```yaml\nhosts {\n\t192.168.1.140 minio.ruiji.local\n\t192.168.1.140 registry.ruiji.local\n\tfallthrough\n}\n```\n\n`fallthrough` 指令的作用是允许查询在当前插件无法解析时传递给下一个插件处理。通常，`fallthrough` 后面可以指定一个或多个区域（zone），表示对这些区域的查询如果无法解析，则传递给下一个插件。\n\n如果 `fallthrough` 后面留空，即没有指定任何区域，那么它会对所有查询生效。如果当前插件无法解析任何查询，这些查询将传递给下一个插件处理。\n\n```yaml\nkubernetes cluster.local in-addr.arpa ip6.arpa {\n    pods insecure\n    fallthrough in-addr.arpa ip6.arpa\n    ttl 30\n}\n```\n\n`fallthrough in-addr.arpa ip6.arpa`: 表示对 `in-addr.arpa` 和 `ip6.arpa` 区域的查询如果在当前插件无法解析，将传递给下一个插件。这样配置可以确保对反向解析查询的处理，防止丢失查询。 \n- `in-addr.arpa`: 用于 IPv4 反向解析。\n- `ip6.arpa`: 用于 IPv6 反向解析。\n\n### 3. BosyBox  DNS 解析失败\n\nbosyBox nsloopup dns 解析失败 - 镜像版本问题：\nhttps://github.com/kubernetes/kubernetes/issues/66924#issuecomment-411804435\nhttps://github.com/easzlab/kubeasz/issues/260#issuecomment-408339927\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/189a37a0397b6aaa4625d384f7fd229d.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/b96bccf83c4c3606bbe92af065562856.png)\n\n### 4. CoreDNS loop 插件问题\n#### 问题现象\n\n在查看 coredns pod 启动日志时，发现有如下对应异常:\n\n```bash\n$ kubectl  logs -n kube-system coredns-bdbc5564-8qldp\n[INFO] plugin/kubernetes: Watching Endpoints instead of EndpointSlices in k8s versions \u003c 1.19\n.:53\n[INFO] plugin/reload: Running configuration MD5 = 045400f7bc8c9f6aaf8ca5dade224266\nCoreDNS-1.8.4\nlinux/amd64, go1.16.4, 053c4d5\n[INFO] 127.0.0.1:34652 - 36041 \"HINFO IN 2066162189351134310.8810881223121065474. udp 57 false 512\" NOERROR - 0 6.002536937s\n[ERROR] plugin/errors: 2 2066162189351134310.8810881223121065474. HINFO: read udp 127.0.0.1:48503-\u003e127.0.0.53:53: i/o timeout\n[FATAL] plugin/loop: Loop (127.0.0.1:48066 -\u003e :53) detected for zone \".\", see https://coredns.io/plugins/loop#troubleshooting. Query: \"HINFO 2066162189351134310.8810881223121065474.\"\n```\n\n#### 排查\n跟随官方文档，其实就可以知道，对于相关问题已经说的比较明白，总结以下几点:\n\n- 1. loop 插件的作用:\n    - 该插件会检测简单转发环路，并且当发现回路时会使服务器`停止`\n- 2. 回路的影响:\n    - 当 CoreDNS 转发中存在环路时，会不断向自己转发，如此形成死循环，会导致资源无穷占用，最终导致主机 OOM\n- 3. 为何会导致回路:\n    - CoreDNS直接将请求转发给自己，比如通过 127.0.0.1, ::1, 或者 127.0.0.53\n    - CoreDNS将请求转发到上游服务器，后者再将请求转发回 CoreDNS\n- 4. loop 插件生效的条件:\n    - 回路必须在 coredns 启动时出现\n    - 回路必须出现在一个 `HINFO` 类型的查询\n\n此时查看了 coredns 的配置项并无异常, 大概原因为节点上的 `/etc/resolv.conf` 配置了 `127.0.0.53` 。\n\n在 `Ubuntu` 的操作系统中，默认会使用到`systemd-resolved` 进行管理 dns server，并且会设置一个 `127.0.0.53` 的地址用于本地dns 缓存。\n\n#### 解决\n所以要解决可以有如下方案可供选择：\n- 1. CoreDNS 关闭 `loop` 插件，这也是最粗暴直接的\n- 2. 继续开启`loop` 插件，但是尝试对 `HINFO` 类型的请求做干预\n- 3. 手动修改节点上的 `/etc/resolv.conf` 配置，确保没有 `nameserver 127.0.0.53`\n\n那为了最小化的改动并且能够最大限度支撑现有需求，我们可以选择方案2进行问题的兜底。\n我们可以使用如下配置来对`HINFO` 的请求，强制返回 `NXDOMAIN` ，如此一来也就不回直接产生 `HINFO` 的异常请求\n\n```fallback\n$  kubectl  edit -n kube-system cm coredns\n....\n        .:53 {\n            template ANY HINFO . {\n                rcode NXDOMAIN\n            }\n        }\n....\n....\n\n\n# 对 HINFO 类型查询做了干预后，可以查看具体的请求\n$ dig  +short  @172.16.0.80 kubernetes.default.svc\n$ dig  +short  @172.16.0.80  kubernetes.default.svc HINFO\n\n# 对应coredns pod 的查询日志如下:\n\n2022-03-05T06:08:39.299Z [INFO] 10.0.1.80:45430 - 60055 'A IN kubernetes.default.svc. udp 63 false 4096' NXDOMAIN qr,aa,rd,ra 115 0.000093025s\n2022-03-05T06:09:03.685Z [INFO] 10.0.1.80:35006 - 61274 'HINFO IN kubernetes.default.svc. udp 63 false 4096' NXDOMAIN qr,aa,rd 40 0.000109837s\n```\n\n### 主机上解析容器的域名的方式\n\nnameserver表示解析域名时使用该地址指定的主机为域名服务器。其中域名服务器是按照文件中出现的顺序来查询的，且只有当第一个nameserver没有反应时才查询下面的nameserver，**一般不要指定超过3个服务器**。\n\n主机上想要解析容器的域名，可以在 /etc/resolv.conf 中添加 coredns/nodelocaldns 的service ip/ 网卡 ip\n因为主机的域名服务器一般不会自动添加  coredns/nodelocaldns 的地址，因此在主机上做 nslookup servicename 时会报错，此时可以手动指定域名服务器，主机上不会自动配置kubernetes 集群的 search 域以及 options ndots:5，因此建议直接写全 service 的域名\n\n```bash\nnslookup [FQDN] [server]\n```\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/0fcb792e87c11ff880a1c5507ebc21bf.png)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/4.-OFN-Gateway":{"title":"4. OFN Gateway","content":"\n\n\n","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/4.-XDPTC-%E6%AF%94%E8%BE%83":{"title":"4. XDP、TC 比较","content":"这两个钩子都可以用于相同的应用场景，如DDoS缓解、隧道、处理链路层信息等。但是，由于XDP在任何套接字缓冲区（**SKB**）分配之前运行，所以它可以达到比TC上的程序更高的吞吐量值。然而，后者可以从通过 `struct __sk_buff` 提供的额外的解析数据中受益，并且可以执行 BPF 程序，对入站流量和出站流量都可以执行 BPF 程序，是 TX 链路上的能被操控的最一层。","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/4.1-%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%9C%B0%E5%9D%80%E5%88%86%E9%85%8D":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.2-%E7%AC%A6%E5%8F%B7%E8%A7%A3%E6%9E%90%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.3-COMMON%E5%9D%97":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.4-C++%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.5-%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.6-%E9%93%BE%E6%8E%A5%E8%BF%87%E7%A8%8B%E6%8E%A7%E5%88%B6":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/4.7-BFD%E5%BA%93":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/5.-%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84-ebpf":{"title":"5. 开发自己的 ebpf","content":"### 开发 ebpf 需要的工具链\n\napt install libelf-dev  gcc-multilib clang llvm\n\n#### bcc\n\nBCC全称为BPF Compiler Collection，该项目是一个python库， 包含了完整的编写、编译、和加载BPF程序的工具链，以及用于调试和诊断性能问题的工具。\n\n项目地址： https://github.com/iovisor/bcc\n\n#### libbpf\n\n如果使用 libbpf 库来进行加载，需要我们再额外编写一部分用户空间代码，这和开发其它类型的 eBPF 程序的流程是相同的。\n\n`libbpf-bootstrap`是一个基于`libbpf`库的BPF开发脚手架，综合了BPF社区过去多年的实践，为开发者提了一个现代化的、便捷的工作流，实现了一次编译，重复使用的目的。\n\n#### eunomia-bpf \n开发、构建和分发 eBPF 一直以来都是一个高门槛的工作，使用 BCC、bpftrace 等工具开发效率高、可移植性好，但是分发部署时需要安装 LLVM、Clang等编译环境，每次运行的时候执行本地或远程编译过程，资源消耗较大；使用原生的 CO-RE libbpf时又需要编写不少用户态加载代码来帮助 eBPF 程序正确加载和从内核中获取上报的信息，同时对于 eBPF 程序的分发、管理也没有很好地解决方案。\n\neunomia-bpf 是一个开源的 eBPF 动态加载运行时和开发工具链，是为了简化 eBPF 程序的开发、构建、分发、运行而设计的，基于 libbpf 的 CO-RE 轻量级开发框架。\n\neunomia-bpf 由一个编译工具链和一个运行时库组成, 对比传统的 BCC、原生 libbpf 等框架，大幅简化了 eBPF 程序的开发流程，在大多数时候只需编写内核态代码，即可轻松构建、打包、发布完整的 eBPF 应用，同时内核态 eBPF 代码保证和主流的 libbpf, libbpfgo, libbpf-rs 等开发框架的 100% 兼容性。需要编写用户态代码的时候，也可以借助 Webassembly 实现通过多种语言进行用户态开发。和 bpftrace 等脚本工具相比, eunomia-bpf 保留了类似的便捷性, 同时不仅局限于 trace 方面, 可以用于更多的场景, 如网络、安全等等。\n\n可以使用的开发库\n- eunomia-bpf \n```bash\n# 下载 ecli 工具，用于运行 eBPF 程序\n$ wget https://aka.pw/bpf-ecli -O ecli \u0026\u0026 chmod +x ./ecli\n$ ./ecli -h\n\n# 下载编译器工具链\n$ wget https://github.com/eunomia-bpf/eunomia-bpf/releases/latest/download/ecc \u0026\u0026 chmod +x ./ecc\n$ ./ecc -h\n```\n\n[Rust + eBPF: Creating a DIY Firewall with AYA Library](https://www.youtube.com/watch?v=VnHMnncbaUw)\n[Build Your Own Firewall With eBPF XDP](https://www.youtube.com/watch?v=aD24HRMJ8cI)[How to write an eBPF/XDP load-balancer in Rust](https://konghq.com/blog/engineering/writing-an-ebpf-xdp-load-balancer-in-rust)\n\n\n使用 golang + c 写一个简单的 xdp 过滤器\n- [Simple XDP Firewall with Golang](https://dev.to/xenbytes/simple-xdp-firewall-with-golang-1da3)\n\n使用 eunomia-bpf 加载器写一个简单的 xdp 过滤器、tc 流量控制\n- [eBPF 入门实践教程二十一：使用 xdp 实现可编程包处理](https://eunomia.dev/zh/tutorials/21-xdp/#_4)\n- [eBPF 入门实践教程二十：使用 eBPF 进行 tc 流量控制](https://eunomia.dev/zh/tutorials/20-tc/)\n- 需要使用的工具链\n\t- ecc\n\t- ecli\n- TODO： 编写一个用户态代码，通过设置黑名单 map 让内核态代码进行拦截\n\nlibbpf - 需要单独编译安装？\n\n#### cilium/ebpf\n\nebpf-go 是一个纯 Go 库，用于读取、修改和加载 eBPF 程序并将其附加到 Linux 内核中的各种 hooks。\n\n项目地址： https://github.com/cilium/ebpf\n\n\n#### dropbox/goebpf\n\n\n### 开发第一个 ebpf 程序\n根据用户态程序设定的黑名单列表，内核态 bpf xdp 程序拦截黑名单中 ip 的 icmp 请求。\n\n\n\n\n\n\n### 疑难杂症\n\n#### No module named 'bcc'\n\n没有安装 bcc，官方安装文档： https://github.com/iovisor/bcc/blob/master/INSTALL.md\n```bash\nTraceback (most recent call last):\n  File \"/root/program/bcc/./examples/ringbuf/ringbuf_output.py\", line 6, in \u003cmodule\u003e\n    from bcc import BPF\nModuleNotFoundError: No module named 'bcc'\n```\n\n类似的报错，可以使用 \n- apt install python3-pip\n- pip install pyroute2\n#### 编译失败提示\u003casm/types.h\u003e文件不存在\n\n```shell\n~: clang -g -c -O2 -target bpf -c xdp-drop.c -o xdp-drop.o\nIn file included from xdp-drop.c:3:\nIn file included from /usr/include/linux/bpf.h:11:\n/usr/include/linux/types.h:5:10: fatal error: 'asm/types.h' file not found\n#include \u003casm/types.h\u003e\n         ^~~~~~~~~~~~~\n1 error generated.\n```\n\n- 解决方案\n    \n    ```shell\n    apt-get update \u0026\u0026 apt-get install -y gcc-multilib\n    ```\n\n#### 'bpf/bpf_helpers.h' file not found\n\n- 解决方案\n    \n    ```shell\n    apt-get install libbpf-dev\n    # run `apt-file update` if needed\n    apt-file list libbpf-dev | grep bpf_helpers.h\n    # you will get the result like: libbpf-dev: /usr/include/bpf/bpf_helpers.h\n    ```\n\n\n### 参考链接\n- [第一个XDP BPF 程序](https://cloud.tencent.com/developer/article/1626925)\n- [xdp测试例子_linux xdp实践](https://blog.csdn.net/u010643777/article/details/128926630)\n- [eBPF TC 程序实践 - Cheneytian's Blog (cheneytianx.github.io)](https://cheneytianx.github.io/posts/2022/02/)\n- xenbyte/xdp-firewall-tutorial","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/5.-%E6%9E%9A%E4%B8%BE%E4%B8%8Ematch":{"title":"5. 枚举与match","content":"### 枚举\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n// 创建实例，位于其标识符的命名空间中，并使用两个冒号分开\nlet four = IpAddrKind::V4;\nlet six = IpAddrKind::V6;\n```\n\n**1. 将数据放进枚举成员**\n```rust\nenum IpAddr {\n    V4(String),\n    V6(String),\n}\nlet home = IpAddr::V4(String::from(\"127.0.0.1\"));\nlet loopback = IpAddr::V6(String::from(\"::1\"));\n```\n\n每个成员可以处理不同类型和数量的数据。例如字符串、数字类型或者结构体。甚至可以包含另一个枚举！\n```rust\nenum IpAddr {\n    V4(u8, u8, u8, u8),\n    V6(String),\n}\nlet home = IpAddr::V4(127, 0, 0, 1);\nlet loopback = IpAddr::V6(String::from(\"::1\"));\n```\n标准库中的 IpAddr 定义：\n```rust\nstruct Ipv4Addr {\n    // --snip--\n}\nstruct Ipv6Addr {\n    // --snip--\n}\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n```\n\n**2. 枚举 与 结构体**\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\n// 对应的结构体\nstruct QuitMessage; // 类单元结构体\nstruct MoveMessage {\n    x: i32,\n    y: i32,\n}\nstruct WriteMessage(String); // 元组结构体\nstruct ChangeColorMessage(i32, i32, i32); // 元组结构体\n\n// 定义枚举方法\nimpl Message {\n    fn call(\u0026self) {\n        // 在这里定义方法体\n    }\n}\nlet m = Message::Write(String::from(\"hello\"));\nm.call();\n```\n\n- 有关联值的枚举的方式和定义多个不同类型的结构体的方式很相像，但是枚举不使用 `struct` 关键字以及其所有成员都被组合在一起位于 `Message` 类型下。\n- 使用不同的结构体，便定义了不同的类型，而枚举 `Message` 是单独一个类型。\n- 可以使用 `impl` 像结构体定义方法那样在枚举上定义方法\n\n3. 标准库中的枚举：`Option`\n空值的问题在于当你尝试像一个非空值那样使用一个空值，会出现某种形式的错误。空值是一个因为某种原因目前无效或缺失的值。Rust 并没有空值，不过它确实拥有一个可以编码存在或不存在概念的枚举。\n```rust\nenum Option\u003cT\u003e {\n    Some(T),\n    None,\n}\n\nlet some_number = Some(5);\nlet some_string = Some(\"a string\");\nlet absent_number: Option\u003ci32\u003e = None;\n```\n如果使用 `None` 时，需要告诉 Rust `Option\u003cT\u003e` 是什么类型的，因为编译器无法通过 `None` 推断出 `Some` 成员保存的值的类型。\n\n`Option\u003cT\u003e` 和 `T`是不同的类型，因此下面的代码会编译错误：\n```rust\nlet x: i8 = 5;\nlet y: Option\u003ci8\u003e = Some(5);\nlet sum = x + y;\n```\n在对 `Option\u003cT\u003e` 进行 `T` 的运算之前必须将其转换为 `T`。\n通常这能帮助我们捕获到空值最常见的问题之一：假设某值不为空但实际上为空的情况。\n```rust\nfn plus_one(x: Option\u003ci32\u003e) -\u003e Option\u003ci32\u003e {\n    match x {\n        None =\u003e None,\n        Some(i) =\u003e Some(i + 1),\n    }\n}\nlet five = Some(5);\nlet six = plus_one(five);\nlet none = plus_one(None);\n```\n\n### match\n`match` 是极为强大的控制流运算符。其将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。\n- `match` 后跟的表达式是任何类型的，对于 `if`，表达式必须返回一个布尔值。\n- 模式可由字面值、变量、通配符和许多其他内容构成。\n```rust\n// 州名\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\nenum Coin {\n    Penny, // 1 美分\n    Nickel, // 5 美分\n    Dime, // 10 美分\n    Quarter(UsState), // 25 美分\n}\n\nfn value_in_cents(coin: Coin) -\u003e u8 {\n    match coin {\n        Coin::Penny =\u003e {\n            println!(\"Lucky penny!\");\n            1\n        },\n        Coin::Nickel =\u003e 5,\n        Coin::Dime =\u003e 10,\n        Coin::Quarter(state) =\u003e {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        },\n    }\n}\n```\n\n- =\u003e 运算符将模式和将要运行的代码分开\n- 每一个分支之间使用逗号分隔\n- 如果想要在分支中运行多行代码，可以使用大括号\n- 当 `match` 表达式执行时，它将结果值按顺序与每一个分支的模式相比较。\n- 绑定值：当匹配到 `Coin::Quarter` 时，变量 `state` 将会绑定 25 美分硬币所对应州的值\n\n**`_` 通配符**\n匹配是穷尽的，必须穷举到最后的可能性来使代码有效，否则编译失败。当不想列举所有可能性的时候，可以使用特殊的模式 `_` 替代。\n```rust\nlet some_u8_value = 0u8;\nmatch some_u8_value {\n    1 =\u003e println!(\"one\"),\n    3 =\u003e println!(\"three\"),\n    5 =\u003e println!(\"five\"),\n    7 =\u003e println!(\"seven\"),\n    _ =\u003e (),\n}\n```\n\n**`if let`简单控制流**\n只匹配一个模式的值而忽略其他模式的情况时，可以使用 `if let`(`match` 的一个语法糖)。\n- 失去 `match` 强制要求的穷尽性检查\n- 使用了更少的缩进和更少的代码\n\n```rust\nlet some_u8_value = Some(0u8);\n// 只关注值为 `Some(3)`\nmatch some_u8_value {\n    Some(3) =\u003e println!(\"three\"),\n    _ =\u003e (),\n}\n\n// 可以替换为 if let\nif let Some(3) = some_u8_value {\n    println!(\"three\");\n}\n```\n\n`if let` 与 `else`，`lse` 块中的代码与 `match` 表达式中的 `_` 分支块中的代码相同\n```rust\nlet mut count = 0;\nmatch coin {\n    Coin::Quarter(state) =\u003e println!(\"State quarter from {:?}!\", state),\n    _ =\u003e count += 1,\n}\n\n// 等同于\nif let Coin::Quarter(state) = coin {\n    println!(\"State quarter from {:?}!\", state);\n} else {\n    count += 1;\n}\n```\n","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/5.-CoreDNS-%E4%BD%BF%E7%94%A8":{"title":"coredns 使用","content":"\n\n文档链接：[Customizing DNS Service | Kubernetes](https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#configuration-of-stub-domain-and-upstream-nameserver-using-coredns)","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/5.-IPAM-%E5%8E%9F%E7%90%86":{"title":"IPAM","content":"\n# IPAM\n## Underlay 网络和 Overlay 网络的 IPAM\n\n云原生网络中出现了两种技术类别：\"Overlay 网络方案\" 和 \"Underlay 网络方案\"。\n云原生网络对于它们没有严格的定义，我们可以从很多 CNI 项目的实现原理中，简单抽象出这两种技术流派的特点，它们可以满足不同场景下的需求。\n\nSpiderpool 是为 Underlay 网络特点而设计，以下对两种方案进行比较，能够更好说明 Spiderpool 的特点和使用场景。\n\n### Overlay 网络方案 IPAM\n\n本方案实现了 Pod 网络同宿主机网络的解耦，例如 [Calico](https://github.com/projectcalico/calico)、[Cilium](https://github.com/cilium/cilium) 等 CNI 插件，\n这些插件多数使用了 vxlan 等隧道技术，搭建起一个 Overlay 网络平面，再借用 NAT 技术实现南北向的通信。\n\n这类技术流派的 IPAM 分配特点是：\n\n1. Pod 子网中的 IP 地址按照节点进行了分割\n\n      以一个更小子网掩码长度为单位，把 Pod subnet 分割出更小的 IP block 集合，依据 IP 使用的用量情况，每个 node 都会获取到一个或者多个 IP block。\n\n      这意味着两个特点：第一，每个 node 上的 IPAM 插件只需要在本地的 IP block 中分配和释放 IP 地址时，与其它 node 上的 IPAM 无 IP 分配冲突，IPAM 分配效率更高。\n      第二，某个具体的 IP 地址跟随 IP block 集合，会相对固定的一直在某个 node 上被分配，没法随同 Pod 一起被调度漂移。\n\n2. IP 地址资源充沛\n\n      只要 Pod 子网不与相关网络重叠，再能够合理利用 NAT 技术，Kubernetes 单个集群可以拥有充沛的 IP 地址资源。\n      因此，应用不会因为 IP 不够而启动失败，IPAM 组件面临的异常 IP 回收压力较小。\n\n3. 没有应用 \"IP 地址固定\"需求\n\n      对于应用 IP 地址固定需求，有无状态应用和有状态应用的区别：对于 Deployment 这类无状态应用，因为 Pod 名称会随着 Pod 重启而变化，\n      应用本身的业务逻辑也是无状态的，因此对于 \"IP 地址固定\" 的需求，只能让所有 Pod 副本固定在一个 IP 地址的集合内；对于 StatefulSet\n      这类有状态应用，因为 Pod name 等信息都是固定的，应用本身的业务逻辑也是有状态的，因此对于 \"IP 地址固定\"需求，要实现单个 Pod 和具体 IP 地址的强绑定。\n\n      在 \"Overlay 网络方案\"方案下，多是借助了 NAT 技术向集群外部暴露服务的入口和源地址，借助 DNS、clusterIP 等技术来实现集群东西向通信。\n      其次，IPAM 的 IP block 方式把 IP 相对固定到某个节点上，而不能保证应用副本的跟随调度。\n      因此，应用的 \"IP 地址固定\"能力无用武之地，当前社区的主流 CNI 多数不支持 \"IP 地址固定\"，或者支持方法较为简陋。\n\n这个方案的优点是，无论集群部署在什么样的底层网络环境上，CNI 插件的兼容性都非常好，且都能够为 Pod 提供子网独立、IP 地址资源充沛的网络。\n\n### Underlay 网络方案 IPAM\n\n本方案实现了 Pod 共享宿主机的底层网络，即 Pod 直接获取宿主机网络中的 IP 地址。这样，应用可直接使用自己的 IP 地址进行东西向和南北向通信。\n\nUnderlay 网络方案的实施，有两种典型的场景：一种是集群部署实施在\"传统网络\"上；一种是集群部署在 IAAS 环境上，例如公有云。以下总结了\"传统网络场景\"的 IPAM 特点：\n\n1. 单个 IP 地址应该能够在任一节点上被分配\n\n      这个需求有多方面的原因：随着数据中心的网络设备增加、多集群技术的发展，IPv4 地址资源稀缺，要求 IPAM 提高 IP 资源的使用效率；\n      对于有 \"IP 地址固定\"需求的应用，其 Pod 副本可能会调度到集群的任意一个节点上，并且，在故障场景下还会发生节点间的漂移，要求 IP 地址一起漂移。\n\n      因此，在集群中的任意一个节点上，一个 IP 地址应该具备能够被分配给 Pod 使用的可能。\n\n2. 同一应用的不同副本，能实现跨子网获取 IP 地址\n\n      例如，一个集群中，宿主机1的区域只能使用子网 172.20.1.0/24，而宿主机2的区域只能使用子网 172.20.2.0/24，在此背景下，\n      当一个应用跨子网部署副本时，要求 IPAM 能够在不同的节点上，为同一个应用下的不同 Pod 分配出子网匹配的 IP 地址。\n\n3. 应用 IP 地址固定\n\n      很多传统应用在云化改造前，是部署在裸金属环境上的，服务之间的网络未引入 NAT 地址转换，微服务架构中需要感知对方的源 IP 或目的 IP，\n      并且，网络管理员也习惯了使用防火墙等手段来精细管控网络安全。\n\n      因此，应用上云后，无状态应用希望能够实现 IP 范围的固定，有状态应用希望能够实现 IP 地址的唯一对应，这样，能够减少对微服务架构的改造工作。\n\n4. 一个 Pod 的多网卡获取不同子网的 IP 地址\n\n      既然是对接 Underlay 网络，Pod 就会有多网卡需求，以使其通达不同的 Underlay 子网，这要求 IPAM 能够给应用的不同网卡分配不同子网下的 IP 地址。\n\n5. IP 地址冲突\n\n      在 Underlay 网络中，更加容易出现 IP 冲突，例如，Pod 与集群外部的主机 IP 发生了冲突，与其它对接了相同子网的集群冲突，\n      而 IPAM 组件很难感知外部这些冲突的 IP 地址，多需要借助 CNI 插件进行实时的 IP 冲突检测。\n\n6. 已用 IP 地址的释放回收\n\n      因为 Underlay 网络 IP 地址资源的稀缺性，且应用有 IP 地址固定需求，所以，\"应当\"被释放的 IP 地址若未被 IPAM 组件回收，新启动的 Pod 可能会因为缺少 IP 地址而失败。\n      这就要求 IPAM 组件拥有更加精准、高效、及时的 IP 回收机制。\n\n这个方案的优势有：无需网络 NAT 映射的引入，对应用的云化网络改造，提出了最大的便利；底层网络的火墙等设备，可对 Pod 通信实现相对较为精细的管控；无需隧道技术，\n网络通信的吞吐量和延时性能也相对的提高了。\n\n## Spiderpool IPAM\n\n任何支持第三方 IPAM 插件的 CNI 项目，都可以配合 Spiderpool IPAM 插件，例如：\n[macvlan CNI](https://github.com/containernetworking/plugins/tree/main/plugins/main/macvlan),\n[vlan CNI](https://github.com/containernetworking/plugins/tree/main/plugins/main/vlan),\n[ipvlan CNI](https://github.com/containernetworking/plugins/tree/main/plugins/main/ipvlan),\n[sriov CNI](https://github.com/k8snetworkplumbingwg/sriov-cni),\n[ovs CNI](https://github.com/k8snetworkplumbingwg/ovs-cni),\n[Multus CNI](https://github.com/k8snetworkplumbingwg/multus-cni)\n[calico CNI](https://github.com/projectcalico/calico),\n[weave CNI](https://github.com/weaveworks/weave)\n\n### Spiderpool IP 分配算法\n\n当 Pod 创建时，它将按照以下步骤获取 IP 分配；IP 分配生命周期将经历 `获取候选池`、`过滤候选池`、`候选池排序` 三个大阶段。\n\n- 获取候选池：Spiderpool 有多种池选择规则，会严格遵守 **高优先级到低优先级** 的池选择规则，获取**高优先级规则**命中的所有池，将它们标记为候选者身份，以有资格被进一步考虑。\n\n- 过滤候选池：Spiderpool 通过亲和性等过滤机制，更精确地从所有候选池中选择合适的候选池，以满足特定的需求或复杂的使用场景。\n\n- 候选池排序：对于多候选池，Spiderpool 根据 SpiderIPPool 对象中的优先级规则对这些候选者进行排序，然后按顺序从有空闲 IP 的 IP 池中开始选择 IP 地址进行分配。\n\n#### 获取候选池\n\nSpiderpool 提供多种池选择规则，在为 Pod 分配 IP 地址时，会严格遵守 **高优先级到低优先级** 的池选择规则。以下规则按照从 **高优先级到低优先级** 的顺序列出，如果同时存在下面的多个规则，前一个规则将 **覆盖** 后一个规则。\n\n- 优先级 1 ：SpiderSubnet 注解。\n\n    SpiderSubnet 资源代表 IP 地址的集合，当需要为应用分配固定的 IP 地址时，应用管理员需要平台管理员告知可用的 IP 地址和路由属性等，但双方分属两个不同的运营部门，这使得每一个应用创建的工作流程繁琐，借助于 Spiderpool 的 SpiderSubnet 功能，它能自动从中子网分配 IP 给 IPPool，并且还能为应用固定 IP 地址，极大的减少了运维的成本。创建应用时可以使用 `ipam.spidernet.io/subnets` 或 `ipam.spidernet.io/subnet` 注解指定 Subnet，从而实现从子网中随机选取 IP 地址自动创建 IP 池，并从池中分配固定 IP 地址给应用。有关详情，请参阅 [SpiderSubnet](../usage/spider-subnet-zh_CN.md)。\n\n- 优先级 2 ：SpiderIPPool 注解。\n\n    一个 Subnet 中的不同 IP 地址，可分别存储到不同的 IPPool 实例中（Spiderpool 会校验 IPPool 之间的地址集合不重叠）。依据需求，SpiderIPPool 中的 IP 集合可大可小。能很好的应对 Underlay 网络的 IP 地址资源有限情况，且这种设计特点，创建应用时，结合 SpiderIPPool 注解 `ipam.spidernet.io/ippools` 或 `ipam.spidernet.io/ippool` 能绑定不同的 IPPool，也能分享相同的 IPPool，既能够让所有应用共享使用同一个 Subnet，又能够实现 \"微隔离\"。有关详情，请参阅 [SpiderIPPool 注解](../reference/annotation.md)。\n\n- 优先级 3 ：命名空间默认 IP 池。\n\n    通过在命名空间中设置注解 `ipam.spidernet.io/default-ipv4-ippool` 或 `ipam.spidernet.io/default-ipv6-ippool` 指定默认的 IP 池。在该租户中创建应用时，如果没有其他高优先级的池规则，那么将从该租户可用的候选池中尝试分配 IP 地址。有关详情，请参阅 [命名空间注解](../reference/annotation.md)。\n\n- 优先级 4 ：CNI 配置文件。\n\n    通过在 CNI 配置文件中的 `default_ipv4_ippool` 和 `default_ipv6_ippool` 字段设置全局的 CNI 默认池，其可以设置多个 IP 池用作备选池，当应用使用该 CNI 配置网络时并调用 Spiderpool ，对于每个应用副本，Spiderpool 都会按照 \"IP 池数组\" 中元素的顺序依次尝试分配 IP 地址，在每个节点分属不同的地区或数据中心的场景，如果应用副本被调度到的节点，符合第一个 IP 池的节点亲和规则，Pod 会从该池中获得 IP 分配，如果不满足，Spiderpool 会尝试从备选池中选择 IP 池继续为 Pod 分配 IP ，直到所有备选池全部筛选失败。详细信息请参考[CNI 配置](../reference/plugin-ipam.md)。\n\n- 优先级 5 ：集群默认 IPPool。\n\n    在 SpiderIPPool CR 对象中，可以通过将 **spec.default** 字段设置为 `true`，将池设置为集群默认 IPPool，默认为 `false`。详细信息请参考[集群默认 IPPool](../reference/crd-spiderippool.md)\n\n#### 过滤候选池\n\n通过上述的池选择规则，获得 IPv4 和 IPv6 的 IPPool 候选后，Spiderpool 会根据以下规则进行过滤，了解哪个候选 IPPool 可用。\n\n- IP 池处于候选者身份，但其处于 `terminating` 状态的，Spiderpool 将会过滤该池。\n\n- IP 池的 `spec.disable` 字段用于设置 IPPool 是否可用，当该值为 `false` 时，意味着 IPPool 不可使用。\n\n- 检查 `IPPool.Spec.NodeName` 和 `IPPool.Spec.NodeAffinity` 属性是否与 Pod 的调度节点匹配。 如果不匹配，则该 IPPool 将被过滤。\n\n- 检查 `IPPool.Spec.NamespaceName` 和 `IPPool.Spec.NamespaceAffinity` 属性是否与 Pod 的命名空间匹配。如果不匹配，则该 IPPool 将被过滤。\n\n- 检查 `IPPool.Spec.PodAffinity` 属性是否与 Pod 的 `matchLabels` 所匹配。如果不匹配，则该 IPPool 将被过滤。\n\n- 检查 `IPPool.Spec.MultusName` 属性是否与 Pod 当前 NIC Multus 配置匹配。如果不匹配，则该 IPPool 将被过滤。\n\n- 检查 IPPool 所有 IP 是不是都被 IPPool 实例的 `exclude_ips` 字段所包含，如果是，则该 IPPool 将被过滤。\n\n- 检查 IPPool 所有 IP 是不是都被 ReservedIP 实例所保留了，如果是，则该 IPPool 将被过滤。\n\n- IPPool 的可用 IP 资源被耗尽，则该 IPPool 也将被过滤。\n\n#### 候选池排序\n\n过滤候选池后，可能仍存在多个候选池，Spiderpool 会进一步使用自定义优先级规则对这些候选者进行排序，然后按顺序从有空闲 IP 的 IP 池中开始选择 IP 地址进行分配。\n\n- 具有 `IPPool.Spec.PodAffinity` 属性的 IPPool 资源具有最高优先级。\n\n- 具有 `IPPool.Spec.NodeName` 或 `IPPool.Spec.NodeAffinity` 属性的 IPPool 资源具有第二高优先级。（`NodeName` 的优先级高于 `NodeAffinity`）。\n\n- 具有 `IPPool.Spec.NamespaceName` 或 `IPPool.Spec.NamespaceAffinity` 属性的 IPPool 资源具有第三高优先级。（`NamespaceName` 的优先级高于 `NamespaceAffinity`）。\n\n- 具有 `IPPool.Spec.MultusName` 属性的 IPPool 资源具有最低优先级。\n\n\u003e 注意：这里有一些简单的例子来描述这个规则。\n\u003e\n\u003e 1. 具有属性 `IPPool.Spec.PodAffinity` 和 `IPPool.Spec.NodeName` 的 _IPPoolA_ 的优先级高于具有单一关联属性 `IPPool.Spec.PodAffinity` 的 _IPPoolB_。\n\u003e 2. 具有单个属性 `IPPool.Spec.PodAffinity` 的 _IPPoolA_ 的优先级高于具有属性 `IPPool.Spec.NodeName` 和 `IPPool.Spec.NamespaceName` 的 _IPPoolB_。\n\u003e 3. 具有属性 `IPPool.Spec.PodAffinity` 和 `IPPool.Spec.NodeName` 的 _IPPoolA_ 的优先级高于具有属性 `IPPool.Spec.PodAffinity`、`IPPool.Spec.NamespaceName` 和 `IPPool.Spec.MultusName` 的 _IPPoolB_ 。\n\nNOTE：\n\n\u003e 如果 Pod 属于 StatefulSet，则会优先分配符合上面规则的 IP 地址。 一旦 Pod 重新启动，它将尝试重用最后分配的 IP 地址。\n\n## IP 回收机制\n\n在 Kubernetes 中，垃圾回收（Garbage Collection，简称GC）对于 IP 地址的回收非常重要。IP 地址的可用性关系到 Pod 是否能够启动成功。GC 机制可以自动回收这些不再使用的 IP 地址，避免资源浪费和 IP 地址的耗尽。\n\n在 IPAM 中记录了分配给 Pod 使用的 IP 地址，但是这些 Pod 在 Kubernetes 集群中已经不复存在，这些 IP 可称为 `僵尸 IP` ，Spiderpool 可针对 `僵尸 IP` 进行回收，它的实现原理如下：\n\n在集群中 `delete Pod` 时，但由于`网络异常`或 `cni 二进制 crash` 等问题，导致调用 `cni delete` 失败，从而导致 IP 地址无法被 cni 回收。\n\n- 在 `cni delete 失败` 等故障场景，如果一个曾经分配了 IP 的 Pod 被销毁后，但在 IPAM 中还记录分配着IP 地址，形成了僵尸 IP 的现象。Spiderpool 针对这种问题，会基于周期和事件扫描机制，自动回收这些僵尸 IP 地址。\n- 因其他意外导致 **无状态** Pod 一直处于 `Terminating` 阶段，Spiderpool 将在 Pod 的 `spec.terminationGracePeriodSecond` + [spiderpool-controller ENV](./../reference/spiderpool-controller.md#env) `SPIDERPOOL_GC_ADDITIONAL_GRACE_DELAY` 时间后，自动释放其 IP 地址。该功能可通过环境变量 `SPIDERPOOL_GC_STATELESS_TERMINATING_POD_ON_READY_NODE_ENABLED` 来控制。该能力能够用以解决 `节点正常但 Pod 删除失败` 的故障场景。\n\n节点意外宕机后，集群中的 Pod 永久处于 `Terminating` 阶段，Pod 占用的 IP 地址无法被释放。\n\n- 对处于 `Terminating` 阶段的 **无状态** Pod，Spiderpool 将在 Pod 的 `spec.terminationGracePeriodSecond` + [spiderpool-controller ENV](./../reference/spiderpool-controller.md#env) `SPIDERPOOL_GC_ADDITIONAL_GRACE_DELAY` 时间后，自动释放其 IP 地址。该功能可通过环境变量 `SPIDERPOOL_GC_STATELESS_TERMINATING_POD_ON_NOT_READY_NODE_ENABLED` 来控制。该能力能够用以解决 `节点意外宕机` 的故障场景。\n","lastmodified":"2025-03-26T03:48:44.120315226Z","tags":null},"/6.-%E5%AD%97%E7%AC%A6-string":{"title":"6. 字符-string","content":"字符串字面值：字符串值被硬编码进程序里。字符串字面值是很方便的，不过他们并不适合使用文本的每一种场景。原因之一就是他们是不可变的\nString 类型：被分配到堆上，所以能够存储在编译时未知大小的文本。\n```rust\nlet s = \"hello\";\nlet mut s = String::from(\"hello\");\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\nslice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。**slice 没有所有权**\n字符串字面值就是 slice，字符串字面值被储存在二进制文件中。\n`s` 的类型是 `\u0026str`：它是一个指向二进制程序特定位置的 slice。`\u0026str` 是一个不可变引用。\n```rust\nlet s = \"Hello, world!\";\n```\n","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/9.1-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95":{"title":"","content":"单元测试/性能测试/代码覆盖率等一起保障了代码总是在可控范围内。单元测试用来测试包或者程序的一部分代码或者一组代码的函数。\n\n单元测试分类\n\n- 正向测试：在正常执行的情况下，保证代码不产生错误的测试。\n- 反向测试：保证代码不仅会产生错误，而且是预期的错误\n\n- 基础测定：只使用一组参数和结果来测试一段代码\n- 表组测试：使用多组参数和结果来进行测试\n- mock测试：模仿测试代码需要用到的外部资源，比如：数据库或网络服务器，有助于让测试在没有所需要的外部资源可用的时候，模拟这些资源的行为使得测试正常进行。\n\n**testing**\n工具链和标准库自带的单元测试框架，可以使测试工作变得相对容易，提供了从测试框架到报告测试的输出和状态的各种测试功能的支持。\n\n- 测试代码须放在当前包以\"_test.go\"结尾的文件中。\n- 测试函数以Test为名称前缀，函数的签名必须接收一个指向testing.T类型的指针，不返回任何值\n- 测试命令（go test）忽略以\"_\"或\".\"开头的测试文件\n- 正常编译操作（go build/install）会忽略测试文件\n\n\u003e 【tips】一个测试的好习惯：使用测试的输出来记录为什么需要这个测试，具体测试了什么以及测试的结果是什么\n\n- 测试通过**给定要求**来说明为什么应该存在这个测试，之后添加测试执行条件的说明，最后说明测试的结果\n\n标准库testing提供了专用类型T来控制测试结果和行为。\n\n| **方法** | **说明** | **相关** |\n| --- | --- | --- |\n| Fail | 失败，继续执行当前测试函数 |  |\n| FailNow | 失败，立即终止执行当前测试函数 | Failed |\n| SkipNow | 跳过，停止执行当前测试函数 | Skip/Skipf/Skipped |\n| Log | 输出错误信息。仅失败或-v时输出 | Logf |\n| Parallel | 与有同样设置的测试函数并行执行 |  |\n| Error | Fail + Log | Errorf |\n| Fatal | FailNow + Log | Fatalf |\n\n代码中使用了t.Log/Logf函数，如果在执行go test时没有加-v选项，除非测试失败，否则程序不会输出内容\n使用Parallel可有效利用多核并行优势，缩短测试时间，只有一个测试函数调用Parallel方法并没有效果，且go test执行参数parallel必须大于1\n\n**go test常用命令**\n\n| **参数** | **说明** | **示例** |\n| --- | --- | --- |\n| -args | 命令行参数 |  |\n| -v | 输出详细信息 |  |\n| -parallel | 并发执行，默认值为GOMAXPROCS | -parallel 2 |\n| -run | 指定测试函数，正则表达式 | -run \"Add\" |\n| -timeout | 全部测试累计时间超时将引发panic，默认10ms | -timeout 1m30s |\n| -count | 重复测试次数，默认值为1 |  |\n\n\n**table driven**\n使用一组类似数据表的模式来批量输入条件并依次对比结果；这种方式将测试与数据逻辑分离，更便于维护\n\n**test main**\n有时候需要为测试用例提供初始化和清理操作，testing没有提供setup/teardown机制。解决方法是自定义一个名为TestMain的函数，go test会改为执行该函数，而不再是具体的测试用例\nM.Run会调用具体的测试用例\n要实现用例组合套件，须借助MainStart自行构建M对象。通过命令行参数相配合，即可实现不同测试组合。\n\n\n**example**\n例代码最大的用提不是测试，而是导入到Godoc等工具生成的帮助文档中，它通过测试比对输出结果和内部的output注释是否一致来判断是否成功\n如果没有output注释，该示例函数就不会被执行，另外不能使用内置函数print/println，因为它们输出到stderr\n\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/9.2-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95":{"title":"","content":"性能测试函数以benchmark为前缀，同样保存在\"*_test.go\"文件中\ngo test -bench.\n测试工具默认不会执行性能测试，须使用bench参数，他逐步调整B.N值，反复执行测试函数，直到能获得准确的测试结果。\n\n如果希望只执行性能测试，run=NONE忽略所有的单元测试用例。\n默认以并发方式执行测试，但可用cpu参数设定多个并发限制来观察结果。\nbenchtime用于设定最小测试时间，增加循环次数，用于解决某些耗时的目标默认循环次数过少，取平均值不足以精确计量性能。\n\n**timer**\n如果在测试函数中要执行一些额外的操作，应该临时停止定时器工作\n\n**memory**\n性能测试关心的不仅仅是执行时间，还包括在堆上的内存分配。内存分配和内存回收的相关操作也应计入到消耗成本\ngo test -bench . -benchmem -gcflags \"-N -l\" # 禁用内联和优化，便于观察结果\n可以将测试函数设置为总输出内存分配信息，无论是否使用benchmem参数 **B.ReportAlloc()**\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/9.3-%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87":{"title":"","content":"单元测试与性能测试关注代码质量，代码覆盖率度量测试自身完整和有效性的一种手段\n 通过覆盖值，可以分析出测试代码的编写质量；检测其是否提供了足够的测试条件，是否执行了足够的函数/语句/分支/代码行，以此量化测试本身，让白盒测试起到应有的质量保证。\n代码覆盖率也常被用来发现死代码（永远不会被执行的代码）\n```go\nfunc deadCode(a,b int) {\n\tnum := a+b\n\tif num \u003e 3 {\n\t\tlog.Print(\"xxx\")\n\t} else if num \u003e 5 {\n\t\tlog.Print(\"yyy\")\n\t}\n\treturn\n}\n\n$ go test -cover\nPASS\ncoverage: 66.7% of statements\nok      test/channel    0.100s\n\n```\n\n为了获取更详细的信息，可以指定covermode和coverprofile参数\n\n- set：是否执行\n- count：执行次数\n- atomic：执行次数，支持并发模式\n```bash\n# 输出cover.out文件\n$ go test -cover -covermode count -coverfile cover.out\nPASS\ncoverage: 11.1% of statements\nok      test/channel    0.110s\n\n# 在命令行输出\n$ go tool cover -func=cover.out\ntest/channel/add.go:3:  add             100.0%\ntest/channel/main.go:7: main            0.0%\ntotal:                  (statements)    11.1%\n\n# 在web页面输出\n$ go tool cover -html=cover.out\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1624979039256-93a86e5b-a94c-4620-ba69-25c88b76ddac.png#align=left\u0026display=inline\u0026height=230\u0026originHeight=230\u0026originWidth=840\u0026size=22115\u0026status=done\u0026style=none\u0026width=840)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/9.4-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7":{"title":"","content":"引发性能问题：执行时间过长/内存占用过多/意外阻塞 等\n通过捕获监控相关执行状态数据，便可定位引发问题的原因，从而优化改进。\n\n- 在测试时输出并保存相关数据，进行初期评估\n- 在运行阶段通过web接口获取实时数据，分析一段时间内的健康状况\n- 除此之外，可以使用自定义计数器（expvar）提供更多与逻辑相关的参考数据\n\ngo test -run -bench . -memprofile mem.out -cpuprofile cpu.out net/http\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/About-me":{"title":"About me","content":"\n- [My Github](https://github.com/renyunkang)\n- [MyKnowledgeGarden (ryken.cloud)](https://www.ryken.cloud/)\n- MyEmail: rykren1998@gmail\n\n","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/Antrea":{"title":"未命名","content":"","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/Arista-%E9%94%90%E6%8D%B7%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE":{"title":"","content":"#交换机 #arista\n\n参考文档链接：\n- [https://www.osslab.com.tw/wp-content/uploads/2018/03/Arista%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C.pdf](https://www.osslab.com.tw/wp-content/uploads/2018/03/Arista%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C.pdf)\n- [https://www.arista.com/zh/um-eos/eos-ethernet-ports](https://www.arista.com/zh/um-eos/eos-ethernet-ports)\n\n登录：admin → enable → configure → zerotouch disable → write\n*先关闭zerotouch，否则会出现配置无法保存的情况*\n显示当前配置 show run\n\n\n1. 配置二层\n设置 vlan\n```\nvlan 10\ninterface vlan 10\nip address 192.168.0.1 255.255.255.0\n```\n\n```\ninterface Ethernet 3\nswitchport access vlan 20\n# switchport mode trunk\n```\n\n连接其他路由器 - bgp 配置\n```\ninterface Management1\n ip address 198.18.20.12/24\n\ninterface Loopback0\nip address 10.10.10.12/32\n\ninterface Ethernet1\ndescription dt:spine01\nmtu 9214\nno switchport\n ip address 169.254.0.249/30\n no shutdown\n \n# spine01\nrouter bgp 100000                               # BGP AS NUMBER   \nrouter-id 10.10.10.10                        # loopback ip   \nmaximum-paths 8                              # 设置等价路由最大条数\nneighbor 169.254.0.250 default-originate     # 向邻居通告本设备的默认路由（仅在border leaf上配置这一条）\nredistribute connected                       # 向邻居通告直连路由（如互联接口的169.254.x.x和环回口的10.10.10.x）# 对每个leaf邻居进行如下配置   \nneighbor 169.254.0.249 remote-as 200001      # bgp邻居的ip地址和AS NUMBER   \nneighbor 169.254.0.249 ebgp-multihop 255     # 设置bgp邻居ip的最大跳数（邻居ip为非直连接口时需配置） \n```\n\n查看 bgp 状态\n```\nsh ip bgp sum\nsh ip route bgp\n```\n\n暂不支持的配置\n```\nswitchport port-security mac-address xxxx.xxxx.xxxx ip-address 172.16.1.1\ndhcp server\n```\n\n\n设置静态 ip - ubuntu\n```\nvim /etc/network/interfaces\n\nauto eno1\niface eno1 inet static\n  address 172.31.50.22\n  netmask 255.255.255.0\n  gateway 172.31.50.254\n  dns-nameservers 8.8.8.8\n```\n\n开启 ssh、telnet 远程\n```\nswitch(config)#management telnet /进入 telnet\nswitch(config-mgmt-telnet)#no shutdown /开启 telnet \nswitch(config-mgmt-telnet)#shutdown /关闭 telnet \nswitch(config-mgmt-telnet)#idle-timeout 180 / 配置 timeout 时间\n```\n\n\n2. 配置三层 BGP\n\n![upgit_20230214_1676306745.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230214_1676306745.png)\n\n\nIP routing not enabled 是没有开启routing功能  只要 执行 ip routing 就可以\n重启：reload\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/BGP-%E6%8A%A5%E6%96%87":{"title":"","content":"#bgp #bird \nbird文档 [labs / BIRD Internet Routing Daemon · GitLab (nic.cz)](https://gitlab.nic.cz/labs/bird)\n\nbgp 报文类型\n| type | 报文类型     | 用途                                                            |\n| ---- | ------------ | --------------------------------------------------------------- |\n| 1    | Open         | 建立 BGP 连接                                                   |\n| 2    | Update       | 用于通告路由                                                    |\n| 3    | Notification | 用于处理 BGP 进程中的各种错误                                   |\n| 4    | Keepalive    | 用于保持 BGP 连接                                               |\n| 5    | Refresh      | 用于动态的请求 BGP 路由发布者重新发布 Update 报文，进行路由更新 | \n\n**配置 tor 为 Route Reflector 以及选取集群中一个节点作为 Route Reflector 的区别**\nRR是一种用于提高BGP网络中路由传播效率的技术。在 BGP 网络中，每个节点通常需要向其邻居节点发送完整的路由表，这可能会导致网络带宽消耗和延迟增加。通过使用 RR，节点可以将路由信息发送到 RR 节点，RR 节点然后将其转发给其他节点，从而减少了网络流量和节点负担。\n\n当使用 TOR 交换机作为 RR 节点时，TOR 交换机将接收来自每个节点的路由信息，并将其转发给其他节点。每个节点只需要与其相邻的 TOR 交换机交换路由信息，从而减少了网络流量和节点负担。\n\n与此相比，使用节点作为 RR 节点时，节点将接收来自其他节点的路由信息，并将其转发给其他节点。这种方法可以使用现有的节点作为 RR 节点，但可能会增加节点的负担和网络流量，尤其是在规模较大的 BGP 网络中。\n\n总之，使用 TOR 交换机作为 RR 节点可以在 BGP 网络中提高路由传播效率，并降低节点负担和网络流量，但需要使用额外的 TOR 交换机设备。而使用节点作为 RR 节点可以节省成本，但可能会增加节点的负担和网络流量。选择使用哪种方法取决于网络规模、成本、性能和可用性等因素。\n\n","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA":{"title":"BGP 环境搭建","content":"\n### 安装工具\n- 安装网桥工具 `apt install -y bridge-utils`\n- 安装 bird `apt-get install -y bird`\n\n### 修改配置文件\n#### 修改网络配置\n```\nsource /etc/network/interfaces.d/*.cfg\n\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet dhcp\n\nauto eth3\niface eth3 inet static\naddress 100.0.0.1\nnetmask 255.255.255.252\n\nauto eth1\niface eth1 inet manual\n\nauto eth2\niface eth2 inet manual\n\nauto br0\niface br0 inet static\naddress 172.16.0.1\nnetwork 172.16.0.0\nnetmask 255.255.255.0\nbroadcast 172.16.0.255\nbridge_ports eth1\nbridge_ports eth2\nbridge_stp off\nbridge_fd 0\nbridge_maxwait 0\nbridge_maxage 12\n\nup ip route add 172.16.10.0/24 via 100.0.0.2\n```\n\n#### 修改 bird 配置\n```conf\nroot@i-1medguzr:~# cat /etc/bird/bird.conf \n# This is a minimal configuration file, which allows the bird daemon to start\n# but will not cause anything else to happen.\n#\n# Please refer to the documentation in the bird-doc package or BIRD User's\n# Guide on http://bird.network.cz/ for more information on configuring BIRD and\n# adding routing protocols.\n\n# Change this into your BIRD router ID. It's a world-wide unique identification\n# of your router, usually one of router's IPv4 addresses.\nrouter id 172.16.10.1;\n\n# The Kernel protocol is not a real routing protocol. Instead of communicating\n# with other routers in the network, it performs synchronization of BIRD's\n# routing tables with the OS kernel.\nprotocol kernel {\n  learn;             # Learn all alien routes from the kernel\n  persist;           # Don't remove routes on bird shutdown\n  scan time 2;       # Scan kernel routing table every 2 seconds\n  import all;\n  export all; # Default is export none\n  graceful restart;  # Turn on graceful restart\n  merge paths on;    # Allow export multipath routes (ECMP)\n}\n\n# The Device protocol is not a real routing protocol. It doesn't generate any\n# routes and it only serves as a module for getting information about network\n# interfaces from the kernel. \n# Watch interface up/down events.\nprotocol device {\n        scan time 2;\n}\n\n\ntemplate bgp bgp_template {\n        debug all;                                  # debug BGP\n        description \"BIRD RR\";\n        local as 64512;                             # the AS used by the local BGP speaker\n        multihop;                                   # was not default in 1.3.11\n        gateway recursive;\n        import all;\n        export all;\n        add paths on;\n        graceful restart;\n        connect delay time 2;\n        connect retry time 5;\n        error wait time 5,30;\n        source address 172.16.10.1;                # Source BGP from this IP address\n\n        #rr client;                                  # make defined neighbors rr clients\n        #rr cluster id 172.16.10.1;\n        #igp table master;                           # necessary to resolve the next-hop\n        #hold time 30;                               # hold time send in BGP messages\n}\n\n# For peer /host/node/peer_v4/172.16.0.1\nprotocol bgp Node_172_16_0_1 from bgp_template {\n  neighbor 172.16.0.1 as 64512;\n}\n\n# For peer /host/node/peer_v4/172.16.10.13\nprotocol bgp Node_172_16_10_13 from bgp_template {\n  neighbor 172.16.10.13 as 64512;\n  rr client;\n  rr cluster id 172.16.10.1;\n}\n\n\n# For peer /host/node/peer_v4/172.16.10.14\nprotocol bgp Node_172_16_10_14 from bgp_template {\n  neighbor 172.16.10.14 as 64512;\n  rr client;\n  rr cluster id 172.16.10.1;\n}\n```\n\n\n### bird 命令\n#### 启停命令\n```\nsystemctl enable bird / systemctl disable bird \nsystemctl restart bird\nsystemctl stop bird \n\nservice bird status/start/stop\n```\n\n#### birdc\n```\n\nshow route all table master\n# 查看宣告的路由\n\n# 查看接收到的路由\n\nshow route receive-protocol bgp 172.30.0.254 detail\n```\n\n### 其他\n导出路由 筛选\n\n\n\n参考静态搭建\n![upgit_20230303_1677811109.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230303_1677811109.png)\n\n![upgit_20230303_1677811128.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230303_1677811128.png)\n\n\n![upgit_20230302_1677721495.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230302_1677721495.png)\n\n\n![upgit_20230302_1677721416.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230302_1677721416.png)\n\n![upgit_20230302_1677721382.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230302_1677721382.png)\n\n![upgit_20230303_1677822932.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230303_1677822932.png)\n\n参考链接：\n- [BIRD BGP route-reflector (saidvandeklundert.net)](https://saidvandeklundert.net/2015-06-14-bird-bgp-route-reflection/)\n- [The BIRD Internet Routing Daemon Project (network.cz)](https://bird.network.cz/?get_doc\u0026v=16\u0026f=bird-6.html#ss6.3)\n\n\n\n\n![upgit_20230306_1678094822.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230306_1678094822.png)\n\n\n![upgit_20230306_1678096400.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230306_1678096400.png)\n","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nspine1 ^ysTSUxD3\n\nspine2 ^NLhMxLIF\n\nleaf1 ^eJ7Gf9Kr\n\nleaf2 ^8oGJRiqp\n\nnet1 ^0wpisbqI\n\nnet3 ^r7A5V3ZK\n\nnet2 ^kmxwJ5Jw\n\nnet4 ^fVubx6ls\n\nnode1 ^UZBNi2Tn\n\nnode2 ^NZ9B0JxM\n\nnode3 ^bsOY86ZE\n\nnode4 ^KH13IBbm\n\nborder ^HTxSeLZm\n\nnet5 ^G1uRqPxa\n\nnet6 ^H6vQZRMG\n\nnet7 ^XtqLPdSC\n\nnet8 ^hvGCUHkD\n\nVPC\nnetwork 172.30.30.0/24 ^i48ixoQ7\n\nnetwork1 ^LLzaxWhg\n\nnetwork2 ^e6ZLeR9e\n\n172.30.30.30/24 ^OGC4SGj3\n\n169.254.0.249/30 ^KOEzp1zf\n\n169.254.0.250/30 ^DX3MZHU9\n\n169.254.0.253/30 ^RSVJPHcS\n\n169.254.0.254/30 ^ImWPhELj\n\n169.254.1.250/30 ^FxIG3Vx5\n\n169.254.2.250/30 ^kqvAiBfx\n\n169.254.1.254/30 ^PndroWai\n\n169.254.2.254/30 ^zZLZLEgw\n\n169.254.1.249/30 ^zIaJyiYo\n\n169.254.2.249/30 ^AXW5Afst\n\n169.254.1.253/30 ^IWNmLv2d\n\n169.254.2.253/30 ^myw2dYeR\n\nAS 100000 ^GASB6PLx\n\nAS 200001 ^Ls7sTRE1\n\nAS 200002 ^yKj4vaZg\n\nAS 200000 ^ipUXhkDy\n\n10.10.10.10 ^wlTxVM3m\n\n10.10.10.11 ^A5PzKIGy\n\n10.10.10.12 ^FxackfN2\n\n10.10.10.13 ^cb0FRqFe\n\n10.10.10.14 ^gtIG3pwA\n\nagent ^dId6uwUZ\n\n192.168.0.2 ^DXb4hosv\n\n192.168.10.11 ^TkOEyxiO\n\n192.168.10.12 ^YND5uLPR\n\n192.168.10.13 ^xNbUeQAc\n\n192.168.10.14 ^SYiFD1Ko\n\nswitch1 ^yRVf1eU1\n\nnode1 ^LRrRGFYx\n\nnode2 ^8ao0Aj0z\n\n192.168.10.11 ^JUOLQ13t\n\n192.168.10.12 ^5HNdQTff\n\nAS 64512 ^tdswNMx6\n\nleaf ^k4yoCrPp\n\nswitch2 ^tp5KsF34\n\nnode3 ^fa6a90X7\n\nnode4 ^R4q8CKEc\n\n192.168.10.13 ^RwNGXK06\n\n192.168.10.14 ^sJsrz9uf\n\nleaf ^ydB3Gos9\n\nrouter1 ^zwLyM0io\n\nnode1 ^N5vq8cX8\n\nnode2 ^c3LvJSVY\n\n172.16.0.11/24 ^HwzjLA10\n\n172.16.0.12/24 ^pWia91k8\n\nAS 64512 ^aKZsDzv0\n\nrouter2 ^m8cASJXk\n\nnode3 ^8IG2VpeB\n\nnode4 ^Ma2d0vGh\n\n172.16.10.13/24 ^zRvC3UjH\n\n172.16.10.14/24 ^U5q9DHUe\n\n192.168.0.4/24 ^3pkBzU21\n\n192.168.0.8/24 ^gmDoZp62\n\n192.168.0.5/24 ^k4g2FqRj\n\n192.168.0.6/24 ^EdsDai4S\n\n192.168.0.9/24 ^qKEbW5GJ\n\n192.168.0.7/24 ^UjJQmejd\n\nAS 65000 ^K1DmTT5A\n\nAS 65001 ^5NTQBRxM\n\nleaf1 ^8ywRqypA\n\nserver1 ^EAXRVOa7\n\nserver2 ^1suLjLet\n\n10.1.5.11/24 ^1EO987Zm\n\n10.1.5.12/24 ^t9AEA7Rx\n\nleaf2 ^cT8PBfb5\n\nserver3 ^GQc4u93D\n\n10.1.8.13/24 ^y263Pr6G\n\n10.1.8.14/24 ^hxssPdUA\n\n10.1.10.1/24 ^Ez5nhyCp\n\n172.18.0.2/24 ^SGvmZLsY\n\n172.18.0.3/24 ^0McNngTk\n\n172.18.0.4/24 ^iV4gaYGy\n\n172.18.0.5/24 ^jmsIxj2A\n\nAS 65005 ^FTJdlslf\n\nAS 65008 ^3BI4T7KA\n\nspine1 ^UzlaQSqe\n\nspine2 ^yJ4bOcab\n\n10.1.10.2/24 ^hzSBH517\n\n10.1.34.2/24 ^ksu8EYN3\n\n10.1.11.2/24 ^D4f51IpU\n\n10.1.12.2/24 ^7i6V1j4L\n\nAS 500 ^Dmg6SRjE\n\nAS 800 ^jaffyqW2\n\n10.1.12.1/24 ^ZlPlHLq4\n\n10.1.5.1/24 ^4eMD5CAK\n\n10.1.8.1/24 ^DEhEGlmJ\n\n10.1.34.1/24 ^JVstCZEX\n\n10.1.11.1/24 ^qpnYQBAi\n\nserver4 ^5ijs4IPf\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.8.21\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 165,\n\t\t\t\"versionNonce\": 2017064691,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"S4JQWHZpmSO3_MZOSzNhA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -254.16668701171875,\n\t\t\t\"y\": -266.5885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1248304108,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"ysTSUxD3\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Q44xKLj5q1nNOSJu-u-Sh\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Yo0gRzTRAFTeOewe-PTRX\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 150,\n\t\t\t\"versionNonce\": 191854702,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ysTSUxD3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -222.06665802001953,\n\t\t\t\"y\": -254.0885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 50.79994201660156,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1798504940,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161057,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine1\",\n\t\t\t\"rawText\": \"spine1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"S4JQWHZpmSO3_MZOSzNhA\",\n\t\t\t\"originalText\": \"spine1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 394,\n\t\t\t\"versionNonce\": 1583653011,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JE1kkU1j1qFz-D5tGEo1E\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 64.83331298828125,\n\t\t\t\"y\": -269.5885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1814795220,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"NLhMxLIF\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"JZTrsBEB9J8R518GwVH-p\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"f0IxcCaxbdk2AFCqcPDr8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 362,\n\t\t\t\"versionNonce\": 762963758,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"NLhMxLIF\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 92.52334594726562,\n\t\t\t\"y\": -257.0885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.61993408203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1827095404,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161058,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine2\",\n\t\t\t\"rawText\": \"spine2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"JE1kkU1j1qFz-D5tGEo1E\",\n\t\t\t\"originalText\": \"spine2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 278,\n\t\t\t\"versionNonce\": 684267059,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0SYZXJ1z0wW5uCOUN_ANC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -252.8333740234375,\n\t\t\t\"y\": -66.921875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1200083028,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"eJ7Gf9Kr\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ElgaVY6eEOKoHWLozrDeB\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BE7_PeINfs7x_TWWOalHL\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 266,\n\t\t\t\"versionNonce\": 1872547826,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"eJ7Gf9Kr\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -217.67335510253906,\n\t\t\t\"y\": -54.421875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.679962158203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 836439788,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161059,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf1\",\n\t\t\t\"rawText\": \"leaf1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"0SYZXJ1z0wW5uCOUN_ANC\",\n\t\t\t\"originalText\": \"leaf1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 283,\n\t\t\t\"versionNonce\": 1179506643,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 80.50006103515625,\n\t\t\t\"y\": -67.58856201171875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 780011372,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8oGJRiqp\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Q44xKLj5q1nNOSJu-u-Sh\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"JZTrsBEB9J8R518GwVH-p\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wkptrKsD1Ery_X6ttodik\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"jrg6zgFqh0P3FusNLublH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 274,\n\t\t\t\"versionNonce\": 1730320562,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8oGJRiqp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 111.25008392333984,\n\t\t\t\"y\": -55.08856201171875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.49995422363281,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 98137428,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161061,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf2\",\n\t\t\t\"rawText\": \"leaf2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\"originalText\": \"leaf2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 106,\n\t\t\t\"versionNonce\": 1826482866,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -194,\n\t\t\t\"y\": -208.58853149414062,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 1.33331298828125,\n\t\t\t\"height\": 136,\n\t\t\t\"seed\": 1476271572,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161058,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"S4JQWHZpmSO3_MZOSzNhA\",\n\t\t\t\t\"gap\": 7.999969482421875,\n\t\t\t\t\"focus\": -0.05178294751982815\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"0SYZXJ1z0wW5uCOUN_ANC\",\n\t\t\t\t\"gap\": 5.666656494140625,\n\t\t\t\t\"focus\": -0.00520542698775437\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.666656494140625,\n\t\t\t\t\t68\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.33331298828125,\n\t\t\t\t\t136\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 428,\n\t\t\t\"versionNonce\": 1797390770,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Q44xKLj5q1nNOSJu-u-Sh\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -173.5332677988047,\n\t\t\t\"y\": -209.921875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 302.3265536123778,\n\t\t\t\"height\": 130.66665649414062,\n\t\t\t\"seed\": 1851446636,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"S4JQWHZpmSO3_MZOSzNhA\",\n\t\t\t\t\"gap\": 6.6666259765625,\n\t\t\t\t\"focus\": 0.4346546021912216\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\t\"gap\": 11.666656494140625,\n\t\t\t\t\"focus\": 0.6556936994869929\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t302.3265536123778,\n\t\t\t\t\t130.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 545,\n\t\t\t\"versionNonce\": 742539027,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 121.25807681896717,\n\t\t\t\"y\": -210.5885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 311.56730369109255,\n\t\t\t\"height\": 137.99996948242188,\n\t\t\t\"seed\": 1143861612,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"zZLZLEgw\",\n\t\t\t\t\"focus\": 1.0068962493594682,\n\t\t\t\t\"gap\": 12.797485518272453\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"zIaJyiYo\",\n\t\t\t\t\"focus\": 0.9826349324518142,\n\t\t\t\t\"gap\": 10.857449967067254\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-311.56730369109255,\n\t\t\t\t\t137.99996948242188\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 758,\n\t\t\t\"versionNonce\": 714799986,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JZTrsBEB9J8R518GwVH-p\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 124.38706593684813,\n\t\t\t\"y\": -218.5885009765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 21.31927807240075,\n\t\t\t\"height\": 139.99996948242188,\n\t\t\t\"seed\": 727007188,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": {\n\t\t\t\t\"type\": 2\n\t\t\t},\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161060,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"JE1kkU1j1qFz-D5tGEo1E\",\n\t\t\t\t\"gap\": 1,\n\t\t\t\t\"focus\": 0.031081963797415693\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\t\"gap\": 10.999969482421875,\n\t\t\t\t\"focus\": 0.21512023781953105\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.31927807240075,\n\t\t\t\t\t139.99996948242188\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 99,\n\t\t\t\"versionNonce\": 1450108083,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0wpisbqI\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -240.55554707845056,\n\t\t\t\"y\": -187.8106791178385,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 36.999969482421875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 482957908,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net1\",\n\t\t\t\"rawText\": \"net1\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 133,\n\t\t\t\"versionNonce\": 937767933,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"r7A5V3ZK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -104.83333333333331,\n\t\t\t\"y\": -198.97737630208331,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 45.19996643066406,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 944056812,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net3\",\n\t\t\t\"rawText\": \"net3\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 106,\n\t\t\t\"versionNonce\": 188077651,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"kmxwJ5Jw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 30.5,\n\t\t\t\"y\": -209.421875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 45.81996154785156,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 470071892,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net2\",\n\t\t\t\"rawText\": \"net2\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 96,\n\t\t\t\"versionNonce\": 1282911325,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fVubx6ls\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 137.166748046875,\n\t\t\t\"y\": -201.421875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.37995910644531,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1345457492,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net4\",\n\t\t\t\"rawText\": \"net4\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 368,\n\t\t\t\"versionNonce\": 426611699,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Mm7Q_oAeZ0O7jo-9eo5sV\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -363.83331298828125,\n\t\t\t\"y\": 72.74478149414062,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 2052041196,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UZBNi2Tn\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ElgaVY6eEOKoHWLozrDeB\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 362,\n\t\t\t\"versionNonce\": 1414894642,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UZBNi2Tn\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -330.41329193115234,\n\t\t\t\"y\": 85.24478149414062,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 48.15995788574219,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1397308116,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161062,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node1\",\n\t\t\t\"rawText\": \"node1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"Mm7Q_oAeZ0O7jo-9eo5sV\",\n\t\t\t\"originalText\": \"node1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 392,\n\t\t\t\"versionNonce\": 823958931,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"51cOq1y0Ta_ejoUt6HX7D\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -175.50006103515625,\n\t\t\t\"y\": 74.41146850585938,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 311304276,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"NZ9B0JxM\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BE7_PeINfs7x_TWWOalHL\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 385,\n\t\t\t\"versionNonce\": 1587523506,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"NZ9B0JxM\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -146.4900360107422,\n\t\t\t\"y\": 86.91146850585938,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.979949951171875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1025621740,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161062,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node2\",\n\t\t\t\"rawText\": \"node2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"51cOq1y0Ta_ejoUt6HX7D\",\n\t\t\t\"originalText\": \"node2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 399,\n\t\t\t\"versionNonce\": 1031369523,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qfBraAOGtGOJ3IxHG7kJZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 31.16668701171875,\n\t\t\t\"y\": 69.41146850585938,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 11481044,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"bsOY86ZE\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wkptrKsD1Ery_X6ttodik\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 392,\n\t\t\t\"versionNonce\": 1119415090,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"bsOY86ZE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 60.48670959472656,\n\t\t\t\"y\": 81.91146850585938,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.359954833984375,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 150693740,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161063,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node3\",\n\t\t\t\"rawText\": \"node3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"qfBraAOGtGOJ3IxHG7kJZ\",\n\t\t\t\"originalText\": \"node3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 381,\n\t\t\t\"versionNonce\": 2129302739,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Pr2wWGs4a1oKQYHP6pu-y\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 197.1666259765625,\n\t\t\t\"y\": 65.41143798828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 60,\n\t\t\t\"seed\": 1885928020,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"KH13IBbm\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BBa5U6gF1hwOjCPGiPN2l\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"jrg6zgFqh0P3FusNLublH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 375,\n\t\t\t\"versionNonce\": 1868121778,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"KH13IBbm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 226.8966522216797,\n\t\t\t\"y\": 82.91143798828125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 55.539947509765625,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1652131052,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161064,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node4\",\n\t\t\t\"rawText\": \"node4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"Pr2wWGs4a1oKQYHP6pu-y\",\n\t\t\t\"originalText\": \"node4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 842,\n\t\t\t\"versionNonce\": 1694925427,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -106.8333740234375,\n\t\t\t\"y\": -400.2550811767578,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 104,\n\t\t\t\"height\": 51,\n\t\t\t\"seed\": 912293716,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"HTxSeLZm\",\n\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"JZTrsBEB9J8R518GwVH-p\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Yo0gRzTRAFTeOewe-PTRX\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"f0IxcCaxbdk2AFCqcPDr8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Z97paxPadn5ru7Nr71eW9\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"5kBzChjUx8UgLerP9cv0z\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 806,\n\t\t\t\"versionNonce\": 1753012082,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"HTxSeLZm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -85.21334075927734,\n\t\t\t\"y\": -387.2550811767578,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 60.75993347167969,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1030279148,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161065,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"border\",\n\t\t\t\"rawText\": \"border\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\"originalText\": \"border\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 100,\n\t\t\t\"versionNonce\": 678474354,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ElgaVY6eEOKoHWLozrDeB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -270,\n\t\t\t\"y\": 66.078125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 58,\n\t\t\t\"height\": 74.66665649414062,\n\t\t\t\"seed\": 605822700,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161062,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"Mm7Q_oAeZ0O7jo-9eo5sV\",\n\t\t\t\t\"gap\": 6.666656494140625,\n\t\t\t\t\"focus\": 0.15256314789910833\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"0SYZXJ1z0wW5uCOUN_ANC\",\n\t\t\t\t\"gap\": 8.333343505859375,\n\t\t\t\t\"focus\": -0.11994650437446365\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58,\n\t\t\t\t\t-74.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 129,\n\t\t\t\"versionNonce\": 2092449266,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"BE7_PeINfs7x_TWWOalHL\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -125.40045362420085,\n\t\t\t\"y\": 64.078125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 68.00966110309633,\n\t\t\t\"height\": 72.66665649414062,\n\t\t\t\"seed\": 901823316,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161062,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"51cOq1y0Ta_ejoUt6HX7D\",\n\t\t\t\t\"gap\": 10.333343505859375,\n\t\t\t\t\"focus\": 0.31729580059930756\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"0SYZXJ1z0wW5uCOUN_ANC\",\n\t\t\t\t\"gap\": 8.333343505859375,\n\t\t\t\t\"focus\": 0.36186198774980655\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-68.00966110309633,\n\t\t\t\t\t-72.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 102,\n\t\t\t\"versionNonce\": 2117265778,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wkptrKsD1Ery_X6ttodik\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 88,\n\t\t\t\"y\": 56.078155517578125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 31.33331298828125,\n\t\t\t\"height\": 64.66665649414062,\n\t\t\t\"seed\": 241478124,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161063,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"qfBraAOGtGOJ3IxHG7kJZ\",\n\t\t\t\t\"gap\": 13.33331298828125,\n\t\t\t\t\"focus\": -0.27639150299055\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\t\"gap\": 9.00006103515625,\n\t\t\t\t\"focus\": 0.03149537154010537\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31.33331298828125,\n\t\t\t\t\t-64.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 100,\n\t\t\t\"versionNonce\": 311997682,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jrg6zgFqh0P3FusNLublH\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 234.666748046875,\n\t\t\t\"y\": 57.411468505859375,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 64.666748046875,\n\t\t\t\"height\": 68.66665649414062,\n\t\t\t\"seed\": 1044096492,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161064,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"Pr2wWGs4a1oKQYHP6pu-y\",\n\t\t\t\t\"gap\": 7.999969482421875,\n\t\t\t\t\"focus\": 0.18409442900946296\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"cOaBZC0X9aUtu4-CV9dOJ\",\n\t\t\t\t\"gap\": 6.3333740234375,\n\t\t\t\t\"focus\": -0.030745978208688816\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-64.666748046875,\n\t\t\t\t\t-68.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 121,\n\t\t\t\"versionNonce\": 1963725651,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"G1uRqPxa\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -277.83331298828125,\n\t\t\t\"y\": 7.24481201171875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 43.93995666503906,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1299486956,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net5\",\n\t\t\t\"rawText\": \"net5\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net5\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 123,\n\t\t\t\"versionNonce\": 1072676701,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"H6vQZRMG\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -153.1666259765625,\n\t\t\t\"y\": 3.578125,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.37995910644531,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 157281900,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net6\",\n\t\t\t\"rawText\": \"net6\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net6\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 137,\n\t\t\t\"versionNonce\": 1198797043,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"XtqLPdSC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 60.5,\n\t\t\t\"y\": 10.2447509765625,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 42.3399658203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 444569196,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net7\",\n\t\t\t\"rawText\": \"net7\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net7\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 146,\n\t\t\t\"versionNonce\": 1037683645,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hvGCUHkD\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 208.5,\n\t\t\t\"y\": 0.24481201171875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 46.87995910644531,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1988489196,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"net8\",\n\t\t\t\"rawText\": \"net8\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"net8\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 393,\n\t\t\t\"versionNonce\": 295805042,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Yo0gRzTRAFTeOewe-PTRX\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -53.20810923075375,\n\t\t\t\"y\": -339.92185974121094,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 147.15313509483713,\n\t\t\t\"height\": 64.66667175292969,\n\t\t\t\"seed\": 1457914452,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161064,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\t\"gap\": 9.333221435546875,\n\t\t\t\t\"focus\": -0.7351883853972061\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"S4JQWHZpmSO3_MZOSzNhA\",\n\t\t\t\t\"gap\": 8.66668701171875,\n\t\t\t\t\"focus\": -0.7020358976723886\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-147.15313509483713,\n\t\t\t\t\t64.66667175292969\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 371,\n\t\t\t\"versionNonce\": 87605810,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"f0IxcCaxbdk2AFCqcPDr8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -60.67492029014859,\n\t\t\t\"y\": -340.4626061123796,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 137.02200567480054,\n\t\t\t\"height\": 63.99949906207627,\n\t\t\t\"seed\": 2040994412,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161064,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\t\"gap\": 8.792475064378209,\n\t\t\t\t\"focus\": 0.7435728014231378\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"JE1kkU1j1qFz-D5tGEo1E\",\n\t\t\t\t\"gap\": 6.874606073740836,\n\t\t\t\t\"focus\": 0.2004676161234824\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t137.02200567480054,\n\t\t\t\t\t63.99949906207627\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 180,\n\t\t\t\"versionNonce\": 104648755,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qbXbOzsp1T_1lwt-yiFKp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -217.9999491373698,\n\t\t\t\"y\": -520.2552083333333,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 321,\n\t\t\t\"height\": 60,\n\t\t\t\"seed\": 1468758740,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"i48ixoQ7\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Z97paxPadn5ru7Nr71eW9\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 133,\n\t\t\t\"versionNonce\": 700392178,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"i48ixoQ7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -175.2998758951823,\n\t\t\t\"y\": -515.2552083333333,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 235.599853515625,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 982781140,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161065,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"VPC\\nnetwork 172.30.30.0/24\",\n\t\t\t\"rawText\": \"VPC\\nnetwork 172.30.30.0/24\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"qbXbOzsp1T_1lwt-yiFKp\",\n\t\t\t\"originalText\": \"VPC\\nnetwork 172.30.30.0/24\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 270,\n\t\t\t\"versionNonce\": 1771378994,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Z97paxPadn5ru7Nr71eW9\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -56.85480440848363,\n\t\t\t\"y\": -409.4316271613626,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 1.2068347785202747,\n\t\t\t\"height\": 47.05886810901109,\n\t\t\t\"seed\": 1900630252,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161065,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\t\"gap\": 9.17654598460478,\n\t\t\t\t\"focus\": -0.0552801392691281\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"qbXbOzsp1T_1lwt-yiFKp\",\n\t\t\t\t\"gap\": 3.764713062959559,\n\t\t\t\t\"focus\": -0.016853064244898762\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.2068347785202747,\n\t\t\t\t\t-47.05886810901109\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 207,\n\t\t\t\"versionNonce\": 329951453,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"LLzaxWhg\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -187.1666259765625,\n\t\t\t\"y\": -322.421875,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 78.59992980957031,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1632745836,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"network1\",\n\t\t\t\"rawText\": \"network1\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"network1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 195,\n\t\t\t\"versionNonce\": 1347854195,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"e6ZLeR9e\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 11.16668701171875,\n\t\t\t\"y\": -322.7552185058594,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 87.419921875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1209704044,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"network2\",\n\t\t\t\"rawText\": \"network2\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"network2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 134,\n\t\t\t\"versionNonce\": 2105247037,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"OGC4SGj3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -127.33331298828125,\n\t\t\t\"y\": -417.75518798828125,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 132.8319091796875,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 910041964,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"172.30.30.30/24\",\n\t\t\t\"rawText\": \"172.30.30.30/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.30.30.30/24\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 226,\n\t\t\t\"versionNonce\": 1306016019,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"KOEzp1zf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -208.5,\n\t\t\t\"y\": -346.25518798828125,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 141.27987670898438,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 601227220,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.0.249/30\",\n\t\t\t\"rawText\": \"169.254.0.249/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.0.249/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 284,\n\t\t\t\"versionNonce\": 1169282461,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"DX3MZHU9\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -263.833251953125,\n\t\t\t\"y\": -283.2552185058594,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 142.19187927246094,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 622366444,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.0.250/30\",\n\t\t\t\"rawText\": \"169.254.0.250/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.0.250/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 292,\n\t\t\t\"versionNonce\": 120954547,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"RSVJPHcS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -42.16668701171875,\n\t\t\t\"y\": -347.921875,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 142.0798797607422,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1943535700,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.0.253/30\",\n\t\t\t\"rawText\": \"169.254.0.253/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.0.253/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 244,\n\t\t\t\"versionNonce\": 1736382973,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ImWPhELj\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 58.5,\n\t\t\t\"y\": -284.5885314941406,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 141.4238739013672,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1343478380,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.0.254/30\",\n\t\t\t\"rawText\": \"169.254.0.254/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.0.254/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 319,\n\t\t\t\"versionNonce\": 655708243,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FxIG3Vx5\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -338.94447835286456,\n\t\t\t\"y\": -211.81078084309894,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 135.51988220214844,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 616522452,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.250/30\",\n\t\t\t\"rawText\": \"169.254.1.250/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.250/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 362,\n\t\t\t\"versionNonce\": 2078593629,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"kqvAiBfx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -152.66667683919263,\n\t\t\t\"y\": -218.19011433919275,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 142.5758819580078,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 748771796,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.2.250/30\",\n\t\t\t\"rawText\": \"169.254.2.250/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.2.250/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 383,\n\t\t\t\"versionNonce\": 1062063603,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"PndroWai\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -24.277821858723883,\n\t\t\t\"y\": -190.4124043782553,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 134.7518768310547,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1434777684,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.254/30\",\n\t\t\t\"rawText\": \"169.254.1.254/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.254/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 289,\n\t\t\t\"versionNonce\": 2142535357,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"zZLZLEgw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 134.05556233723962,\n\t\t\t\"y\": -215.96790059407556,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 141.80787658691406,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1114231508,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.2.254/30\",\n\t\t\t\"rawText\": \"169.254.2.254/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.2.254/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 361,\n\t\t\t\"versionNonce\": 1659213715,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"zIaJyiYo\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -338.16667683919263,\n\t\t\t\"y\": -87.07902018229169,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 134.60787963867188,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1486938092,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.249/30\",\n\t\t\t\"rawText\": \"169.254.1.249/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.249/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 406,\n\t\t\t\"versionNonce\": 1502584605,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"AXW5Afst\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -24.333343505859318,\n\t\t\t\"y\": -89.301259358724,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 141.66387939453125,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1943965804,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"H11swkBTk3YmbNTy6IU2j\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981600,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.2.249/30\",\n\t\t\t\"rawText\": \"169.254.2.249/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.2.249/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 329,\n\t\t\t\"versionNonce\": 1256755,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"IWNmLv2d\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -187.27782185872394,\n\t\t\t\"y\": -102.07902018229169,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 135.4078826904297,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 123681620,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.1.253/30\",\n\t\t\t\"rawText\": \"169.254.1.253/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.1.253/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 342,\n\t\t\t\"versionNonce\": 535278461,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"myw2dYeR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 160.499989827474,\n\t\t\t\"y\": -95.69011433919275,\n\t\t\t\"strokeColor\": \"#c92a2a\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 142.46388244628906,\n\t\t\t\"height\": 20,\n\t\t\t\"seed\": 1589741676,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"169.254.2.253/30\",\n\t\t\t\"rawText\": \"169.254.2.253/30\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"169.254.2.253/30\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 35,\n\t\t\t\"versionNonce\": 1080953981,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GASB6PLx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -349.1666514078775,\n\t\t\t\"y\": -251.85678100585938,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 79.1796875,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 817458796,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518482,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 100000\",\n\t\t\t\"rawText\": \"AS 100000\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 100000\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 164,\n\t\t\t\"versionNonce\": 1319421395,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Ls7sTRE1\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -351.3333435058592,\n\t\t\t\"y\": -51.02344767252606,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 79.1796875,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1748298708,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518483,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 200001\",\n\t\t\t\"rawText\": \"AS 200001\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 200001\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 208,\n\t\t\t\"versionNonce\": 1867609309,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"yKj4vaZg\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 222.00004069010413,\n\t\t\t\"y\": -49.07902018229174,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 79.1796875,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1833288148,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518483,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 200002\",\n\t\t\t\"rawText\": \"AS 200002\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 200002\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 286,\n\t\t\t\"versionNonce\": 5411699,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ipUXhkDy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -325.500035603841,\n\t\t\t\"y\": -386.85678100585943,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 79.1796875,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1740337516,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518483,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 200000\",\n\t\t\t\"rawText\": \"AS 200000\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 200000\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 47,\n\t\t\t\"versionNonce\": 957330963,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wlTxVM3m\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -13.833343505859375,\n\t\t\t\"y\": -385.4489685058594,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1589160428,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.10.10.10\",\n\t\t\t\"rawText\": \"10.10.10.10\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.10.10.10\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 93,\n\t\t\t\"versionNonce\": 1769777309,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"A5PzKIGy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -163.9333435058594,\n\t\t\t\"y\": -251.14896850585933,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 471269076,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.10.10.11\",\n\t\t\t\"rawText\": \"10.10.10.11\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.10.10.11\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 70,\n\t\t\t\"versionNonce\": 2020965299,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FxackfN2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 156.86665649414067,\n\t\t\t\"y\": -254.34896850585932,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 209404756,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.10.10.12\",\n\t\t\t\"rawText\": \"10.10.10.12\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.10.10.12\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 61,\n\t\t\t\"versionNonce\": 276270333,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cb0FRqFe\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -162.33334350585938,\n\t\t\t\"y\": -51.948968505859284,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 542449748,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.10.10.13\",\n\t\t\t\"rawText\": \"10.10.10.13\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.10.10.13\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 139,\n\t\t\t\"versionNonce\": 2119273811,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gtIG3pwA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -0.7333435058593523,\n\t\t\t\"y\": -51.14896850585927,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 134403436,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.10.10.14\",\n\t\t\t\"rawText\": \"10.10.10.14\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.10.10.14\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 225,\n\t\t\t\"versionNonce\": 1935074653,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"u4otY7WWPp0676M4U6GT_\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 415.03204110952504,\n\t\t\t\"y\": -257.16164943150113,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 737842900,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"dId6uwUZ\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"5kBzChjUx8UgLerP9cv0z\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 214,\n\t\t\t\"versionNonce\": 679775858,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"dId6uwUZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 445.0620627770055,\n\t\t\t\"y\": -244.66164943150113,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 54.93995666503906,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 398323820,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161066,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"agent\",\n\t\t\t\"rawText\": \"agent\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"u4otY7WWPp0676M4U6GT_\",\n\t\t\t\"originalText\": \"agent\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 188,\n\t\t\t\"versionNonce\": 90976701,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"DXb4hosv\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 423.03204110952504,\n\t\t\t\"y\": -200.41164943150113,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 248587348,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.2\",\n\t\t\t\"rawText\": \"192.168.0.2\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.2\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 467,\n\t\t\t\"versionNonce\": 1937896626,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5kBzChjUx8UgLerP9cv0z\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -30.238602638468848,\n\t\t\t\"y\": -346.66139896253924,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 504.5092089295209,\n\t\t\t\"height\": 80.24949906207627,\n\t\t\t\"seed\": 1302568812,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161066,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"bxpSkXZM7CSV_7iIXP8XJ\",\n\t\t\t\t\"gap\": 2.5936822142185747,\n\t\t\t\t\"focus\": 0.7160366722866529\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"u4otY7WWPp0676M4U6GT_\",\n\t\t\t\t\"gap\": 9.250250468961838,\n\t\t\t\t\"focus\": 1.0111457876343786\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t504.5092089295209,\n\t\t\t\t\t80.24949906207627\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 281,\n\t\t\t\"versionNonce\": 1406726685,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"TkOEyxiO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -365.7179588904748,\n\t\t\t\"y\": 128.33835056849875,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1326959316,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.11\",\n\t\t\t\"rawText\": \"192.168.10.11\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.11\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 328,\n\t\t\t\"versionNonce\": 670861875,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"YND5uLPR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -180.21795889047485,\n\t\t\t\"y\": 129.58835056849875,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1915162196,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.12\",\n\t\t\t\"rawText\": \"192.168.10.12\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.12\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 326,\n\t\t\t\"versionNonce\": 1267639933,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xNbUeQAc\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 29.782041109525153,\n\t\t\t\"y\": 125.83835056849875,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1752619628,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.13\",\n\t\t\t\"rawText\": \"192.168.10.13\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.13\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 320,\n\t\t\t\"versionNonce\": 1995623379,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SYiFD1Ko\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 194.78204110952504,\n\t\t\t\"y\": 130.83835056849875,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1922871788,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.14\",\n\t\t\t\"rawText\": \"192.168.10.14\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.14\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 330,\n\t\t\t\"versionNonce\": 1062129373,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"pEY7EBOrhs5aWCrsDVUv4\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -370.003276044796,\n\t\t\t\"y\": 906.5221312959868,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 641894228,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"yRVf1eU1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"T7m1FwCz0AizNJTigFywC\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"XTOkGnqL9aLk1ArfzdUr4\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"zLSXNvLfVoVdl10PlcYvR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 315,\n\t\t\t\"versionNonce\": 393790834,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"yRVf1eU1\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -344.53324430651475,\n\t\t\t\"y\": 919.0221312959868,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 64.0599365234375,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 982206444,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161067,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"switch1\",\n\t\t\t\"rawText\": \"switch1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"pEY7EBOrhs5aWCrsDVUv4\",\n\t\t\t\"originalText\": \"switch1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 371,\n\t\t\t\"versionNonce\": 1191476125,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ge1aWlAXg3gYtlelhizIR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -460.6523592325016,\n\t\t\t\"y\": 1048.9958267498314,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1591722580,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"LRrRGFYx\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"XTOkGnqL9aLk1ArfzdUr4\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 363,\n\t\t\t\"versionNonce\": 18321650,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"LRrRGFYx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -427.2323381753727,\n\t\t\t\"y\": 1061.4958267498314,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 48.15995788574219,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1370701036,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161067,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node1\",\n\t\t\t\"rawText\": \"node1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"ge1aWlAXg3gYtlelhizIR\",\n\t\t\t\"originalText\": \"node1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 395,\n\t\t\t\"versionNonce\": 864878589,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"vdssgJGIQ_zqaoh_AAScT\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -272.3191072793766,\n\t\t\t\"y\": 1050.6625137615501,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1138513876,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"8ao0Aj0z\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"T7m1FwCz0AizNJTigFywC\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 386,\n\t\t\t\"versionNonce\": 454655090,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8ao0Aj0z\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -243.30908225496256,\n\t\t\t\"y\": 1063.1625137615501,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.979949951171875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 949272428,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161067,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node2\",\n\t\t\t\"rawText\": \"node2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"vdssgJGIQ_zqaoh_AAScT\",\n\t\t\t\"originalText\": \"node2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 202,\n\t\t\t\"versionNonce\": 1860388658,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"XTOkGnqL9aLk1ArfzdUr4\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -373.8033879824052,\n\t\t\t\"y\": 1042.3291702556908,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 47.87412706946168,\n\t\t\t\"height\": 78.17540700812083,\n\t\t\t\"seed\": 1448212564,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161067,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"ge1aWlAXg3gYtlelhizIR\",\n\t\t\t\t\"gap\": 6.666656494140625,\n\t\t\t\t\"focus\": 0.13674676151330128\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"pEY7EBOrhs5aWCrsDVUv4\",\n\t\t\t\t\"gap\": 7.631631951583131,\n\t\t\t\t\"focus\": -0.09006228910805533\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47.87412706946168,\n\t\t\t\t\t-78.17540700812083\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 222,\n\t\t\t\"versionNonce\": 1637655218,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"T7m1FwCz0AizNJTigFywC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -238.06242195583175,\n\t\t\t\"y\": 1039.6273944538816,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.30040242260381,\n\t\t\t\"height\": 72.66665649414062,\n\t\t\t\"seed\": 1780967148,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161067,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"vdssgJGIQ_zqaoh_AAScT\",\n\t\t\t\t\"gap\": 11.035119307668538,\n\t\t\t\t\"focus\": 0.029226653107163762\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"pEY7EBOrhs5aWCrsDVUv4\",\n\t\t\t\t\"gap\": 10.438606663754172,\n\t\t\t\t\"focus\": 0.02499166073117966\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.30040242260381,\n\t\t\t\t\t-72.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 281,\n\t\t\t\"versionNonce\": 1738301917,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JUOLQ13t\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -462.5370051346952,\n\t\t\t\"y\": 1104.5893958241895,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 442018132,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.11\",\n\t\t\t\"rawText\": \"192.168.10.11\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.11\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 328,\n\t\t\t\"versionNonce\": 943257203,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5HNdQTff\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -277.0370051346952,\n\t\t\t\"y\": 1105.8393958241895,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1407206892,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.12\",\n\t\t\t\"rawText\": \"192.168.10.12\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.12\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 218,\n\t\t\t\"versionNonce\": 42558973,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"tdswNMx6\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -569.1508985256658,\n\t\t\t\"y\": 1067.5976053115876,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1487094252,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518491,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 64512\",\n\t\t\t\"rawText\": \"AS 64512\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 64512\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 400,\n\t\t\t\"versionNonce\": 2108569011,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wVgT2CUxiZ6GzMA5yfhB3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -362.0521830140825,\n\t\t\t\"y\": 786.9576103812559,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 70158845,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"k4yoCrPp\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"zLSXNvLfVoVdl10PlcYvR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281981601,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 391,\n\t\t\t\"versionNonce\": 1060538354,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"k4yoCrPp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -324.1821650087114,\n\t\t\t\"y\": 791.9576103812559,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 39.25996398925781,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 55894099,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161068,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf\",\n\t\t\t\"rawText\": \"leaf\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"wVgT2CUxiZ6GzMA5yfhB3\",\n\t\t\t\"originalText\": \"leaf\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 637,\n\t\t\t\"versionNonce\": 1263869490,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"zLSXNvLfVoVdl10PlcYvR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -310.65451744608447,\n\t\t\t\"y\": 896.2207738976518,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0.754745107136273,\n\t\t\t\"height\": 61.42093537983135,\n\t\t\t\"seed\": 827289747,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161068,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"pEY7EBOrhs5aWCrsDVUv4\",\n\t\t\t\t\"gap\": 10.301357398334972,\n\t\t\t\t\"focus\": 0.039485466828241\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"wVgT2CUxiZ6GzMA5yfhB3\",\n\t\t\t\t\"gap\": 12.842228136564586,\n\t\t\t\t\"focus\": 0.12526937469154403\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.754745107136273,\n\t\t\t\t\t-61.42093537983135\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 597,\n\t\t\t\"versionNonce\": 1731803965,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"BlZpyCGxTahpdR_H7tS-O\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 4.126298979805142,\n\t\t\t\"y\": 901.6404715874727,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 424497117,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"tp5KsF34\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"9MLELdPRY91aBJiW6m8QX\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"mfNsgyK9b7E8KJnKZwXkR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"GPj-Q0OQgC755eDBYCEbk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676282001228,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 582,\n\t\t\t\"versionNonce\": 1185021682,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"tp5KsF34\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 25.18633468537155,\n\t\t\t\"y\": 914.1404715874727,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 72.87992858886719,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1758849139,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161070,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"switch2\",\n\t\t\t\"rawText\": \"switch2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"BlZpyCGxTahpdR_H7tS-O\",\n\t\t\t\"originalText\": \"switch2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 617,\n\t\t\t\"versionNonce\": 2022207133,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"OTcL5ThPSFYptNo9EgVVo\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -68.36496978047444,\n\t\t\t\"y\": 1044.9563237025013,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 883892477,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"fa6a90X7\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"9MLELdPRY91aBJiW6m8QX\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281995083,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 607,\n\t\t\t\"versionNonce\": 392194674,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fa6a90X7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -39.04494719746663,\n\t\t\t\"y\": 1057.4563237025013,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.359954833984375,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 168638803,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161071,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node3\",\n\t\t\t\"rawText\": \"node3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"OTcL5ThPSFYptNo9EgVVo\",\n\t\t\t\"originalText\": \"node3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 562,\n\t\t\t\"versionNonce\": 1556735827,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xW7gpyKrd6UM2Tj9xAizC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 97.63496918436948,\n\t\t\t\"y\": 1040.956293184923,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 60,\n\t\t\t\"seed\": 1400633693,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"R4q8CKEc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"mfNsgyK9b7E8KJnKZwXkR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281995083,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 553,\n\t\t\t\"versionNonce\": 1293546994,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"R4q8CKEc\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 127.36499542948667,\n\t\t\t\"y\": 1058.456293184923,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 55.539947509765625,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 761304819,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161072,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node4\",\n\t\t\t\"rawText\": \"node4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"xW7gpyKrd6UM2Tj9xAizC\",\n\t\t\t\"originalText\": \"node4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 727,\n\t\t\t\"versionNonce\": 665407666,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9MLELdPRY91aBJiW6m8QX\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -6.2713953549026975,\n\t\t\t\"y\": 1031.62301071422,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 55.5611411449713,\n\t\t\t\"height\": 71.68418964586749,\n\t\t\t\"seed\": 1422460445,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161071,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"OTcL5ThPSFYptNo9EgVVo\",\n\t\t\t\t\"gap\": 13.33331298828125,\n\t\t\t\t\"focus\": -0.3267281097885654\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"BlZpyCGxTahpdR_H7tS-O\",\n\t\t\t\t\"gap\": 8.298349480879892,\n\t\t\t\t\"focus\": -0.17524611836081047\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t55.5611411449713,\n\t\t\t\t\t-71.68418964586749\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 703,\n\t\t\t\"versionNonce\": 1015958578,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mfNsgyK9b7E8KJnKZwXkR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 133.61022667274455,\n\t\t\t\"y\": 1033.6580995043105,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.40196833025804,\n\t\t\t\"height\": 72.87721493369645,\n\t\t\t\"seed\": 2093463091,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161072,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"xW7gpyKrd6UM2Tj9xAizC\",\n\t\t\t\t\"gap\": 7.298193680612485,\n\t\t\t\t\"focus\": 0.060800235550312914\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"BlZpyCGxTahpdR_H7tS-O\",\n\t\t\t\t\"gap\": 9.140412983141346,\n\t\t\t\t\"focus\": 0.04655813345508362\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.40196833025804,\n\t\t\t\t\t-72.87721493369645\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 537,\n\t\t\t\"versionNonce\": 332511261,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"RwNGXK06\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -69.74961568266804,\n\t\t\t\"y\": 1101.383205765141,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1783227101,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281995083,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.13\",\n\t\t\t\"rawText\": \"192.168.10.13\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.13\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 494,\n\t\t\t\"versionNonce\": 358294579,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sJsrz9uf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 95.2503843173319,\n\t\t\t\"y\": 1106.383205765141,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 568329587,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1676281995083,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.10.14\",\n\t\t\t\"rawText\": \"192.168.10.14\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.10.14\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 634,\n\t\t\t\"versionNonce\": 1731787539,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"XtyqX5gUyhhrBEdTg5qrU\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 5.059810673141897,\n\t\t\t\"y\": 785.5496445203978,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1881374525,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"ydB3Gos9\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"GPj-Q0OQgC755eDBYCEbk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1676281998738,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 622,\n\t\t\t\"versionNonce\": 2072420722,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ydB3Gos9\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 42.92982867851299,\n\t\t\t\"y\": 790.5496445203978,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 39.25996398925781,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 893706003,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161072,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf\",\n\t\t\t\"rawText\": \"leaf\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"XtyqX5gUyhhrBEdTg5qrU\",\n\t\t\t\"originalText\": \"leaf\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1080,\n\t\t\t\"versionNonce\": 705324978,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GPj-Q0OQgC755eDBYCEbk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 64.55518665481425,\n\t\t\t\"y\": 893.0584970273371,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0.6547955656030808,\n\t\t\t\"height\": 64.228038587068,\n\t\t\t\"seed\": 1430949789,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161072,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"BlZpyCGxTahpdR_H7tS-O\",\n\t\t\t\t\"gap\": 8.581974560135677,\n\t\t\t\t\"focus\": 0.05664026204266777\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"XtyqX5gUyhhrBEdTg5qrU\",\n\t\t\t\t\"gap\": 8.280813919871207,\n\t\t\t\t\"focus\": -0.018685479485331787\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.6547955656030808,\n\t\t\t\t\t-64.228038587068\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 359,\n\t\t\t\"versionNonce\": 1789390155,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"44KceBynyjlGM_h-4GDtR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -343.7033567396086,\n\t\t\t\"y\": 1875.4520912327575,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1917767013,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wtHBmgXZvWpsi7M6pZcdB\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_Sb7i2MkHiZGFNs8n2qRH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"zwLyM0io\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UNcCdSUcvlxnnonA6eboQ\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570434897,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 348,\n\t\t\t\"versionNonce\": 1264146546,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"zwLyM0io\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -319.85332011851483,\n\t\t\t\"y\": 1887.9520912327575,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 67.2999267578125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 953870187,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161073,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"router1\",\n\t\t\t\"rawText\": \"router1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"44KceBynyjlGM_h-4GDtR\",\n\t\t\t\"originalText\": \"router1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 397,\n\t\t\t\"versionNonce\": 1979801957,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gdqR-uyjhwZPM5zyFMo1i\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -434.3524399273142,\n\t\t\t\"y\": 2017.925786686602,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 70899909,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_Sb7i2MkHiZGFNs8n2qRH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"N5vq8cX8\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570140596,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 389,\n\t\t\t\"versionNonce\": 1311728626,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"N5vq8cX8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -400.9324188701853,\n\t\t\t\"y\": 2030.425786686602,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 48.15995788574219,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1468056075,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161073,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node1\",\n\t\t\t\"rawText\": \"node1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"gdqR-uyjhwZPM5zyFMo1i\",\n\t\t\t\"originalText\": \"node1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 421,\n\t\t\t\"versionNonce\": 1912335883,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"IlfqGrYlE206aFm8EEFkG\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -246.0191879741892,\n\t\t\t\"y\": 2019.5924736983206,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 1869379621,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"wtHBmgXZvWpsi7M6pZcdB\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"c3LvJSVY\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570140596,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 412,\n\t\t\t\"versionNonce\": 211324786,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"c3LvJSVY\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -217.00916294977515,\n\t\t\t\"y\": 2032.0924736983206,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.979949951171875,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1708279979,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node2\",\n\t\t\t\"rawText\": \"node2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"IlfqGrYlE206aFm8EEFkG\",\n\t\t\t\"originalText\": \"node2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 279,\n\t\t\t\"versionNonce\": 523860530,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"_Sb7i2MkHiZGFNs8n2qRH\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -347.5044149987183,\n\t\t\t\"y\": 2011.259130192462,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 47.874808555714424,\n\t\t\t\"height\": 78.17540700812083,\n\t\t\t\"seed\": 1305750405,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161073,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"gdqR-uyjhwZPM5zyFMo1i\",\n\t\t\t\t\"gap\": 6.666656494139943,\n\t\t\t\t\"focus\": 0.13672956369352693\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"44KceBynyjlGM_h-4GDtR\",\n\t\t\t\t\"gap\": 7.631631951583586,\n\t\t\t\t\"focus\": -0.09006228910805741\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47.874808555714424,\n\t\t\t\t\t-78.17540700812083\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 299,\n\t\t\t\"versionNonce\": 37885362,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wtHBmgXZvWpsi7M6pZcdB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -211.7608241791777,\n\t\t\t\"y\": 2008.5573543906528,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.30153722325781,\n\t\t\t\"height\": 72.66665649414062,\n\t\t\t\"seed\": 1232730955,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"IlfqGrYlE206aFm8EEFkG\",\n\t\t\t\t\"gap\": 11.035119307667856,\n\t\t\t\t\"focus\": 0.02925632464133555\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"44KceBynyjlGM_h-4GDtR\",\n\t\t\t\t\"gap\": 10.438606663754626,\n\t\t\t\t\"focus\": 0.02499166073118326\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.30153722325781,\n\t\t\t\t\t-72.66665649414062\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 327,\n\t\t\t\"versionNonce\": 948916907,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"HwzjLA10\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -436.2370858295078,\n\t\t\t\"y\": 2073.51935576096,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 531526373,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570235333,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.16.0.11/24\",\n\t\t\t\"rawText\": \"172.16.0.11/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.16.0.11/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 357,\n\t\t\t\"versionNonce\": 2094506853,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"pWia91k8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -250.7370858295078,\n\t\t\t\"y\": 2074.76935576096,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1322408427,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570231541,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.16.0.12/24\",\n\t\t\t\"rawText\": \"172.16.0.12/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.16.0.12/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 242,\n\t\t\t\"versionNonce\": 787710675,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"aKZsDzv0\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -542.8509792204784,\n\t\t\t\"y\": 2036.5275652483585,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 25742917,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518498,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 64512\",\n\t\t\t\"rawText\": \"AS 64512\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 64512\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 625,\n\t\t\t\"versionNonce\": 1629835115,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"F6HerBpvwDVggi4XmLr12\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 30.4262182849925,\n\t\t\t\"y\": 1870.5704315242433,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 2030289157,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"seVY3CcVay2SexBrz-KJk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8mQrkX8736rhHS-VTu_y2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"m8cASJXk\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"UNcCdSUcvlxnnonA6eboQ\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570431850,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 615,\n\t\t\t\"versionNonce\": 1694778994,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"m8cASJXk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 49.86625887337141,\n\t\t\t\"y\": 1883.0704315242433,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 76.11991882324219,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1524137419,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"router2\",\n\t\t\t\"rawText\": \"router2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"F6HerBpvwDVggi4XmLr12\",\n\t\t\t\"originalText\": \"router2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 643,\n\t\t\t\"versionNonce\": 1833948965,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SkPENbICaSnmxnXnuHwvN\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -42.06505047528708,\n\t\t\t\"y\": 2013.8862836392723,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 50,\n\t\t\t\"seed\": 995055717,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"seVY3CcVay2SexBrz-KJk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"8IG2VpeB\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570140596,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 633,\n\t\t\t\"versionNonce\": 1886835186,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8IG2VpeB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -12.745027892279268,\n\t\t\t\"y\": 2026.3862836392723,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.359954833984375,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1715244139,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node3\",\n\t\t\t\"rawText\": \"node3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"SkPENbICaSnmxnXnuHwvN\",\n\t\t\t\"originalText\": \"node3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 589,\n\t\t\t\"versionNonce\": 1328685675,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"aB7LEmis_JxAQ1n9G3I1g\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 123.93488848955684,\n\t\t\t\"y\": 2009.8862531216946,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 60,\n\t\t\t\"seed\": 317785029,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8mQrkX8736rhHS-VTu_y2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"Ma2d0vGh\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1677570474159,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 579,\n\t\t\t\"versionNonce\": 442269042,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Ma2d0vGh\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 153.66491473467403,\n\t\t\t\"y\": 2027.3862531216946,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 55.539947509765625,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 325437195,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161075,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"node4\",\n\t\t\t\"rawText\": \"node4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"aB7LEmis_JxAQ1n9G3I1g\",\n\t\t\t\"originalText\": \"node4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 806,\n\t\t\t\"versionNonce\": 1633069106,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"seVY3CcVay2SexBrz-KJk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 20.027537119961337,\n\t\t\t\"y\": 2000.5529706509913,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 55.561844317509326,\n\t\t\t\"height\": 71.68418964586749,\n\t\t\t\"seed\": 335954725,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"SkPENbICaSnmxnXnuHwvN\",\n\t\t\t\t\"gap\": 13.333312988281023,\n\t\t\t\t\"focus\": -0.3267447951985457\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"F6HerBpvwDVggi4XmLr12\",\n\t\t\t\t\"gap\": 8.29834948088046,\n\t\t\t\t\"focus\": -0.1752461183608165\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t55.561844317509326,\n\t\t\t\t\t-71.68418964586749\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 782,\n\t\t\t\"versionNonce\": 90948530,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8mQrkX8736rhHS-VTu_y2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 159.91157535513844,\n\t\t\t\"y\": 2002.588059441082,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.40295241541449,\n\t\t\t\"height\": 72.87721493369668,\n\t\t\t\"seed\": 1221504427,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161075,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"aB7LEmis_JxAQ1n9G3I1g\",\n\t\t\t\t\"gap\": 7.298193680612826,\n\t\t\t\t\"focus\": 0.060824496860497644\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"F6HerBpvwDVggi4XmLr12\",\n\t\t\t\t\"gap\": 9.140412983141914,\n\t\t\t\t\"focus\": 0.04655813345508818\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.40295241541449,\n\t\t\t\t\t-72.87721493369668\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 565,\n\t\t\t\"versionNonce\": 1005862373,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"zRvC3UjH\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -43.44969637748068,\n\t\t\t\"y\": 2070.313165701912,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 140.625,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1929156229,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570224487,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.16.10.13/24\",\n\t\t\t\"rawText\": \"172.16.10.13/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.16.10.13/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 522,\n\t\t\t\"versionNonce\": 698460555,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"U5q9DHUe\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 121.55030362251927,\n\t\t\t\"y\": 2075.313165701912,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 140.625,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 966901835,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570226904,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.16.10.14/24\",\n\t\t\t\"rawText\": \"172.16.10.14/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.16.10.14/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 403,\n\t\t\t\"versionNonce\": 1939385522,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UNcCdSUcvlxnnonA6eboQ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 18.03218639406009,\n\t\t\t\"y\": 1899.33192648973,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 234.14309677975194,\n\t\t\t\"height\": 2.253787421691186,\n\t\t\t\"seed\": 661476075,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161074,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"F6HerBpvwDVggi4XmLr12\",\n\t\t\t\t\"gap\": 12.39403189093241,\n\t\t\t\t\"focus\": -0.12087267553709051\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"44KceBynyjlGM_h-4GDtR\",\n\t\t\t\t\"gap\": 12.592446353916756,\n\t\t\t\t\"focus\": 0.070765728639324\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-234.14309677975194,\n\t\t\t\t\t2.253787421691186\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 468,\n\t\t\t\"versionNonce\": 106446635,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"KZp1dryLeVvzpjkTaCUkR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -317.5291254101922,\n\t\t\t\"y\": 1918.2705024381937,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.701577109743255,\n\t\t\t\"height\": 16.10741822855266,\n\t\t\t\"seed\": 2058864581,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570464845,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 536,\n\t\t\t\"versionNonce\": 148725381,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UpNwvmZewTlsU8CwbZR-x\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 58.85691426220035,\n\t\t\t\"y\": 1913.3583675081188,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.701577109743255,\n\t\t\t\"height\": 16.10741822855266,\n\t\t\t\"seed\": 272036965,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570471655,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 389,\n\t\t\t\"versionNonce\": 1404880139,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3pkBzU21\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -353.72942233637775,\n\t\t\t\"y\": 1852.061478652106,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 2117342443,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570873929,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.4/24\",\n\t\t\t\"rawText\": \"192.168.0.4/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.4/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 435,\n\t\t\t\"versionNonce\": 211869669,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gmDoZp62\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 20.594344836757273,\n\t\t\t\"y\": 1850.4233002399699,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 837200107,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570880715,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.8/24\",\n\t\t\t\"rawText\": \"192.168.0.8/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.8/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 404,\n\t\t\t\"versionNonce\": 476087755,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"k4g2FqRj\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -435.63834294319054,\n\t\t\t\"y\": 2097.7882404725447,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 490465957,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570891775,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.5/24\",\n\t\t\t\"rawText\": \"192.168.0.5/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.5/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 433,\n\t\t\t\"versionNonce\": 632017349,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"EdsDai4S\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -248.88600395965722,\n\t\t\t\"y\": 2096.150062060408,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 830372805,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570904779,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.6/24\",\n\t\t\t\"rawText\": \"192.168.0.6/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.6/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 475,\n\t\t\t\"versionNonce\": 676901413,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qKEbW5GJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -42.47552403048866,\n\t\t\t\"y\": 2092.0546160300682,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 870048901,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570918934,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.9/24\",\n\t\t\t\"rawText\": \"192.168.0.9/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.9/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 512,\n\t\t\t\"versionNonce\": 920435819,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UjJQmejd\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 122.9804955952734,\n\t\t\t\"y\": 2095.33097285434,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 131.25,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 227123531,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1677570941065,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"192.168.0.7/24\",\n\t\t\t\"rawText\": \"192.168.0.7/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"192.168.0.7/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 320,\n\t\t\t\"versionNonce\": 1639524883,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"K1DmTT5A\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -464.1139209538113,\n\t\t\t\"y\": 1894.407031303394,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 87961989,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518502,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65000\",\n\t\t\t\"rawText\": \"AS 65000\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65000\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 449,\n\t\t\t\"versionNonce\": 290747549,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5NTQBRxM\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 202.34728862377136,\n\t\t\t\"y\": 1889.3581443786604,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 677992331,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518503,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65001\",\n\t\t\t\"rawText\": \"AS 65001\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65001\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 442,\n\t\t\t\"versionNonce\": 1912603653,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SGVgOvBvnMzKGGU266Y5b\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -367.55211313252676,\n\t\t\t\"y\": 2634.759528461514,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 2108437003,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"T3m8SBgMj4QbKnkbmQRfk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xZIe0nhAa-s6qcGOa8-eO\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"8ywRqypA\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1G7LS6R1Md1Jio1bi7A9K\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ptjmkp4drkU4gcISJfkvn\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106020061,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 432,\n\t\t\t\"versionNonce\": 1434147506,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8ywRqypA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -332.3920942116283,\n\t\t\t\"y\": 2639.759528461514,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.679962158203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 670042149,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161075,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf1\",\n\t\t\t\"rawText\": \"leaf1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"SGVgOvBvnMzKGGU266Y5b\",\n\t\t\t\"originalText\": \"leaf1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 476,\n\t\t\t\"versionNonce\": 1431798379,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GecRtMou6cc7P8M7KHMLB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -458.2011963202326,\n\t\t\t\"y\": 2777.233223915359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 353351851,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xZIe0nhAa-s6qcGOa8-eO\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"EAXRVOa7\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106205933,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 476,\n\t\t\t\"versionNonce\": 1894110770,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"EAXRVOa7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -433.61116183536933,\n\t\t\t\"y\": 2782.233223915359,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 65.81993103027344,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1332067205,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161076,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server1\",\n\t\t\t\"rawText\": \"server1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"GecRtMou6cc7P8M7KHMLB\",\n\t\t\t\"originalText\": \"server1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 498,\n\t\t\t\"versionNonce\": 405677931,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"WctpWpIbp-WNWS1zOj3Ox\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -269.8679443671075,\n\t\t\t\"y\": 2778.8999109270776,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 260664139,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"T3m8SBgMj4QbKnkbmQRfk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"1suLjLet\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106208507,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 496,\n\t\t\t\"versionNonce\": 562524594,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"1suLjLet\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -249.68790591495906,\n\t\t\t\"y\": 2783.8999109270776,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.63992309570312,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 411960037,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161076,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server2\",\n\t\t\t\"rawText\": \"server2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"WctpWpIbp-WNWS1zOj3Ox\",\n\t\t\t\"originalText\": \"server2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 548,\n\t\t\t\"versionNonce\": 308360306,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xZIe0nhAa-s6qcGOa8-eO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -374.51759437385203,\n\t\t\t\"y\": 2770.566567421218,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 48.895934557779356,\n\t\t\t\"height\": 72.19294735826088,\n\t\t\t\"seed\": 24365547,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161075,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"GecRtMou6cc7P8M7KHMLB\",\n\t\t\t\t\"gap\": 6.666656494140625,\n\t\t\t\t\"focus\": 0.13790139192091525\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"4eMD5CAK\",\n\t\t\t\t\"gap\": 5.268317955273233,\n\t\t\t\t\"focus\": 0.04587059703524066\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t48.895934557779356,\n\t\t\t\t\t-72.19294735826088\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 539,\n\t\t\t\"versionNonce\": 1643134962,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"T3m8SBgMj4QbKnkbmQRfk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -232.36647990802686,\n\t\t\t\"y\": 2767.864791619409,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 57.085550767755706,\n\t\t\t\"height\": 72.4666564941408,\n\t\t\t\"seed\": 1475763781,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161076,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"WctpWpIbp-WNWS1zOj3Ox\",\n\t\t\t\t\"gap\": 11.035119307668538,\n\t\t\t\t\"focus\": 0.02925632464134229\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"4eMD5CAK\",\n\t\t\t\t\"gap\": 2.292833017584144,\n\t\t\t\t\"focus\": -0.23792626275567463\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-57.085550767755706,\n\t\t\t\t\t-72.4666564941408\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 408,\n\t\t\t\"versionNonce\": 772740133,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"1EO987Zm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -460.085842222426,\n\t\t\t\"y\": 2832.826792989716,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 265901195,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106301502,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.11/24\",\n\t\t\t\"rawText\": \"10.1.5.11/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.11/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 436,\n\t\t\t\"versionNonce\": 1998733099,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"t9AEA7Rx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -274.5858422224261,\n\t\t\t\"y\": 2834.076792989716,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1954303397,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106314315,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.12/24\",\n\t\t\t\"rawText\": \"10.1.5.12/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.12/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 706,\n\t\t\t\"versionNonce\": 571142699,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"i6a-8DwUqWhfGna5iKIjZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 6.577461892074211,\n\t\t\t\"y\": 2629.877868753,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 491606277,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6xSLewPiir90MmwpBn_i2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"QDtHqVASY64REt4DUBEtW\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"cT8PBfb5\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"w7AbhVYRvFtgSlP4MQpEN\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"9UdKhMWMzNkqTbEmeTSGT\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106030003,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 703,\n\t\t\t\"versionNonce\": 1119860466,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cT8PBfb5\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 37.327484780257805,\n\t\t\t\"y\": 2634.877868753,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.49995422363281,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 632286667,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161076,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf2\",\n\t\t\t\"rawText\": \"leaf2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"i6a-8DwUqWhfGna5iKIjZ\",\n\t\t\t\"originalText\": \"leaf2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 720,\n\t\t\t\"versionNonce\": 1313852523,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"wHcV0YF4Ttq7ZvWwkCqSm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -65.91380686820537,\n\t\t\t\"y\": 2773.193720868029,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1072097381,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6xSLewPiir90MmwpBn_i2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"GQc4u93D\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106211584,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 723,\n\t\t\t\"versionNonce\": 24126066,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GQc4u93D\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -45.42377085746318,\n\t\t\t\"y\": 2778.193720868029,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.01992797851562,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1151728747,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server3\",\n\t\t\t\"rawText\": \"server3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"wHcV0YF4Ttq7ZvWwkCqSm\",\n\t\t\t\"originalText\": \"server3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1066,\n\t\t\t\"versionNonce\": 1196427442,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"6xSLewPiir90MmwpBn_i2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -6.904605135050549,\n\t\t\t\"y\": 2759.8604078797475,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.833375635535106,\n\t\t\t\"height\": 64.51416087315829,\n\t\t\t\"seed\": 1677316901,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"wHcV0YF4Ttq7ZvWwkCqSm\",\n\t\t\t\t\"gap\": 13.33331298828125,\n\t\t\t\t\"focus\": -0.3394375814446696\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"DEhEGlmJ\",\n\t\t\t\t\"gap\": 9.366359636000197,\n\t\t\t\t\"focus\": -0.0020396949293084\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.833375635535106,\n\t\t\t\t\t-64.51416087315829\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1059,\n\t\t\t\"versionNonce\": 924235442,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"QDtHqVASY64REt4DUBEtW\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 144.16350947867107,\n\t\t\t\"y\": 2761.895496669839,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 63.5867088270883,\n\t\t\t\"height\": 65.39064352874084,\n\t\t\t\"seed\": 1335631275,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161078,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"czF_BqHNp7zReiuQ7LDte\",\n\t\t\t\t\"gap\": 10.297241932845736,\n\t\t\t\t\"focus\": 0.39708659373231137\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"DEhEGlmJ\",\n\t\t\t\t\"gap\": 10.52496577050897,\n\t\t\t\t\"focus\": 0.026710023306754923\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-63.5867088270883,\n\t\t\t\t\t-65.39064352874084\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 645,\n\t\t\t\"versionNonce\": 84914821,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"y263Pr6G\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -67.29845277039897,\n\t\t\t\"y\": 2829.620602930669,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 503195269,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106320769,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.13/24\",\n\t\t\t\"rawText\": \"10.1.8.13/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.13/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 610,\n\t\t\t\"versionNonce\": 373319371,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hxssPdUA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 97.1077626681764,\n\t\t\t\"y\": 2829.276541877848,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1698771019,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106327915,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.14/24\",\n\t\t\t\"rawText\": \"10.1.8.14/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.14/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 510,\n\t\t\t\"versionNonce\": 1852699621,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Ez5nhyCp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -450.01989522309503,\n\t\t\t\"y\": 2604.8372857051922,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1411635595,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ptjmkp4drkU4gcISJfkvn\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1G7LS6R1Md1Jio1bi7A9K\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106085990,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.10.1/24\",\n\t\t\t\"rawText\": \"10.1.10.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.10.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 478,\n\t\t\t\"versionNonce\": 880889110,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SGvmZLsY\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -459.4870993361087,\n\t\t\t\"y\": 2857.095677701301,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 489058347,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679292166414,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.2/24\",\n\t\t\t\"rawText\": \"172.18.0.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 509,\n\t\t\t\"versionNonce\": 1106537674,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"0McNngTk\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -272.73476035257545,\n\t\t\t\"y\": 2855.4574992891644,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 47725573,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679292171421,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.3/24\",\n\t\t\t\"rawText\": \"172.18.0.3/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.3/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 553,\n\t\t\t\"versionNonce\": 84280470,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"iV4gaYGy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -66.32428042340689,\n\t\t\t\"y\": 2851.362053258825,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1658663627,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679292177271,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.4/24\",\n\t\t\t\"rawText\": \"172.18.0.4/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.4/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 603,\n\t\t\t\"versionNonce\": 525076886,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jmsIxj2A\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 98.53795464093048,\n\t\t\t\"y\": 2847.512995346002,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 719090533,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679292183865,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.5/24\",\n\t\t\t\"rawText\": \"172.18.0.5/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.5/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 395,\n\t\t\t\"versionNonce\": 776437181,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"FTJdlslf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -487.9626773467296,\n\t\t\t\"y\": 2653.7144685321505,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1440915819,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518509,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65005\",\n\t\t\t\"rawText\": \"AS 65005\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65005\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 524,\n\t\t\t\"versionNonce\": 1514539155,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3BI4T7KA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 178.49853223085307,\n\t\t\t\"y\": 2648.6655816074167,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1747107525,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518509,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65008\",\n\t\t\t\"rawText\": \"AS 65008\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65008\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 581,\n\t\t\t\"versionNonce\": 252714405,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"i0lhieJuD7S4w4ed4UDQn\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -360.87823382481827,\n\t\t\t\"y\": 2429.3121085762054,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1842831307,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"UzlaQSqe\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ptjmkp4drkU4gcISJfkvn\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"w7AbhVYRvFtgSlP4MQpEN\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106045706,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 573,\n\t\t\t\"versionNonce\": 1150623666,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UzlaQSqe\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -328.77820483311905,\n\t\t\t\"y\": 2434.3121085762054,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 50.79994201660156,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 94869093,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine1\",\n\t\t\t\"rawText\": \"spine1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"i0lhieJuD7S4w4ed4UDQn\",\n\t\t\t\"originalText\": \"spine1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 537,\n\t\t\t\"versionNonce\": 1424580587,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fhJaGjdklxDa4Df9Vs7rw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 2.358450384894468,\n\t\t\t\"y\": 2427.085973249592,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 918501387,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"yJ4bOcab\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"9UdKhMWMzNkqTbEmeTSGT\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1G7LS6R1Md1Jio1bi7A9K\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106037724,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 530,\n\t\t\t\"versionNonce\": 1631855858,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"yJ4bOcab\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 30.048483343878843,\n\t\t\t\"y\": 2432.085973249592,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.61993408203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 33055269,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine2\",\n\t\t\t\"rawText\": \"spine2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"fhJaGjdklxDa4Df9Vs7rw\",\n\t\t\t\"originalText\": \"spine2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 101,\n\t\t\t\"versionNonce\": 1676476517,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hzSBH517\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -439.3644222515102,\n\t\t\t\"y\": 2485.300457890393,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 367330821,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678105964182,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.10.2/24\",\n\t\t\t\"rawText\": \"10.1.10.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.10.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1125,\n\t\t\t\"versionNonce\": 2017324338,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Ptjmkp4drkU4gcISJfkvn\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -321.68847297744685,\n\t\t\t\"y\": 2623.330983853839,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 2.2130271745162986,\n\t\t\t\"height\": 151.13315649620063,\n\t\t\t\"seed\": 802444357,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"SGVgOvBvnMzKGGU266Y5b\",\n\t\t\t\t\"gap\": 11.428544607675121,\n\t\t\t\t\"focus\": -0.20880783268876346\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"i0lhieJuD7S4w4ed4UDQn\",\n\t\t\t\t\"gap\": 7.885718781432843,\n\t\t\t\t\"focus\": 0.27227341346863165\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.2130271745162986,\n\t\t\t\t\t-151.13315649620063\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 740,\n\t\t\t\"versionNonce\": 1352379890,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"w7AbhVYRvFtgSlP4MQpEN\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 64.29383207354583,\n\t\t\t\"y\": 2619.768276485292,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 359.4581467400621,\n\t\t\t\"height\": 141.86574104493684,\n\t\t\t\"seed\": 1469332421,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"i6a-8DwUqWhfGna5iKIjZ\",\n\t\t\t\t\"gap\": 10.10959226770774,\n\t\t\t\t\"focus\": 0.689045389946755\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"i0lhieJuD7S4w4ed4UDQn\",\n\t\t\t\t\"gap\": 13.590426864149777,\n\t\t\t\t\"focus\": 0.6928691636433885\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-359.4581467400621,\n\t\t\t\t\t-141.86574104493684\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 73,\n\t\t\t\"versionNonce\": 132790757,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ksu8EYN3\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -264.6946587344985,\n\t\t\t\"y\": 2484.4880270132426,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 676413707,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678105846325,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.34.2/24\",\n\t\t\t\"rawText\": \"10.1.34.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.34.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 783,\n\t\t\t\"versionNonce\": 1677351282,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9UdKhMWMzNkqTbEmeTSGT\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 74.73282373681397,\n\t\t\t\"y\": 2620.362061046718,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 4.895357535839267,\n\t\t\t\"height\": 153.74143227342893,\n\t\t\t\"seed\": 1702522053,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161077,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"i6a-8DwUqWhfGna5iKIjZ\",\n\t\t\t\t\"gap\": 9.515807706281976,\n\t\t\t\t\"focus\": 0.1983488772503119\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"fhJaGjdklxDa4Df9Vs7rw\",\n\t\t\t\t\"gap\": 4.534655523696983,\n\t\t\t\t\"focus\": -0.15979749596509357\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.895357535839267,\n\t\t\t\t\t-153.74143227342893\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 916,\n\t\t\t\"versionNonce\": 617101038,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"1G7LS6R1Md1Jio1bi7A9K\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -312.6856292200395,\n\t\t\t\"y\": 2624.552855760253,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 365.35883258485956,\n\t\t\t\"height\": 149.02545856559527,\n\t\t\t\"seed\": 1150861221,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"SGVgOvBvnMzKGGU266Y5b\",\n\t\t\t\t\"gap\": 10.206672701261141,\n\t\t\t\t\"focus\": -0.7027680838923434\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"fhJaGjdklxDa4Df9Vs7rw\",\n\t\t\t\t\"gap\": 13.441423945065708,\n\t\t\t\t\"focus\": -0.6839613231076725\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t365.35883258485956,\n\t\t\t\t\t-149.02545856559527\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 169,\n\t\t\t\"versionNonce\": 1060243301,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"D4f51IpU\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 77.32524864606063,\n\t\t\t\"y\": 2482.7066733289685,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1621323109,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678105951824,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.11.2/24\",\n\t\t\t\"rawText\": \"10.1.11.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.11.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 216,\n\t\t\t\"versionNonce\": 1411612811,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"7i6V1j4L\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -59.24520048159309,\n\t\t\t\"y\": 2483.894242451818,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 66457387,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678105948829,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.12.2/24\",\n\t\t\t\"rawText\": \"10.1.12.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.12.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 456,\n\t\t\t\"versionNonce\": 386331261,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Dmg6SRjE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -437.3622103203367,\n\t\t\t\"y\": 2441.6417540292477,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1517304011,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518513,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 500\",\n\t\t\t\"rawText\": \"AS 500\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 500\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 500,\n\t\t\t\"versionNonce\": 1995784147,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jaffyqW2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 137.51447671728977,\n\t\t\t\"y\": 2436.2976929764272,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1546950405,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678946518513,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 800\",\n\t\t\t\"rawText\": \"AS 800\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 800\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 546,\n\t\t\t\"versionNonce\": 1270116197,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ZlPlHLq4\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -280.7268418929622,\n\t\t\t\"y\": 2610.3703540352544,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1854367979,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106096938,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.12.1/24\",\n\t\t\t\"rawText\": \"10.1.12.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.12.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 609,\n\t\t\t\"versionNonce\": 724718213,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"4eMD5CAK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -364.45046505382834,\n\t\t\t\"y\": 2673.9053021076843,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1198225541,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"T3m8SBgMj4QbKnkbmQRfk\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xZIe0nhAa-s6qcGOa8-eO\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106144157,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.1/24\",\n\t\t\t\"rawText\": \"10.1.5.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 691,\n\t\t\t\"versionNonce\": 1038472997,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"DEhEGlmJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 11.071101275110777,\n\t\t\t\"y\": 2666.779887370589,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1909106699,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"QDtHqVASY64REt4DUBEtW\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6xSLewPiir90MmwpBn_i2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106198785,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.1/24\",\n\t\t\t\"rawText\": \"10.1.8.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 34,\n\t\t\t\"versionNonce\": 1478185163,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JVstCZEX\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -51.029319079833385,\n\t\t\t\"y\": 2606.2133091224887,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1467188267,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106174046,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.34.1/24\",\n\t\t\t\"rawText\": \"10.1.34.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.34.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 37,\n\t\t\t\"versionNonce\": 682466635,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qpnYQBAi\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 77.8219307493008,\n\t\t\t\"y\": 2610.963585613885,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 53821637,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1678106183557,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.11.1/24\",\n\t\t\t\"rawText\": \"10.1.11.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.11.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 794,\n\t\t\t\"versionNonce\": 1745085835,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"czF_BqHNp7zReiuQ7LDte\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 83.85687882173113,\n\t\t\t\"y\": 2772.1927386026846,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 145004421,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"5ijs4IPf\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"QDtHqVASY64REt4DUBEtW\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1678106236404,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 797,\n\t\t\t\"versionNonce\": 1613828210,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5ijs4IPf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 104.75691849458269,\n\t\t\t\"y\": 2777.1927386026846,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 73.19992065429688,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 859197259,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679990161078,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server4\",\n\t\t\t\"rawText\": \"server4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"czF_BqHNp7zReiuQ7LDte\",\n\t\t\t\"originalText\": \"server4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 467,\n\t\t\t\"versionNonce\": 597362930,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"UYiC--spaFlTKPN8-uNzb\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 58.06714810005599,\n\t\t\t\"y\": 3001.640247670929,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1652918766,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"i3-83HtZ6MeBagrulKUBH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"yMYqlKe8qOAdURcsJxOEq\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1G7LS6R1Md1Jio1bi7A9K\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Ptjmkp4drkU4gcISJfkvn\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"dhOmSEKo\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 456,\n\t\t\t\"versionNonce\": 1043052334,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"dhOmSEKo\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 93.22716702095443,\n\t\t\t\"y\": 3006.640247670929,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.679962158203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 434295794,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf1\",\n\t\t\t\"rawText\": \"leaf1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"UYiC--spaFlTKPN8-uNzb\",\n\t\t\t\"originalText\": \"leaf1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 502,\n\t\t\t\"versionNonce\": 338523890,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"l_f694Ag8cICYxjKVYXR7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -32.58193508764987,\n\t\t\t\"y\": 3144.113943124774,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 156900398,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"E1nxxZAZ\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 500,\n\t\t\t\"versionNonce\": 38314350,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"E1nxxZAZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -7.991900602786586,\n\t\t\t\"y\": 3149.113943124774,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 65.81993103027344,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1711769010,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server1\",\n\t\t\t\"rawText\": \"server1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"l_f694Ag8cICYxjKVYXR7\",\n\t\t\t\"originalText\": \"server1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 524,\n\t\t\t\"versionNonce\": 683616558,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"MlYyL-oyNPh-GxehGV6mP\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 155.75131686547525,\n\t\t\t\"y\": 3145.7806301364926,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 73557614,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"VhotL1wF\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 520,\n\t\t\t\"versionNonce\": 2144224174,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"VhotL1wF\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 175.93135531762368,\n\t\t\t\"y\": 3150.7806301364926,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.63992309570312,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 909115250,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server2\",\n\t\t\t\"rawText\": \"server2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"MlYyL-oyNPh-GxehGV6mP\",\n\t\t\t\"originalText\": \"server2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 596,\n\t\t\t\"versionNonce\": 1575720498,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"yMYqlKe8qOAdURcsJxOEq\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 51.10166685873071,\n\t\t\t\"y\": 3137.4472866306332,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 48.895934557779356,\n\t\t\t\"height\": 72.19294735826088,\n\t\t\t\"seed\": 73885870,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"l_f694Ag8cICYxjKVYXR7\",\n\t\t\t\t\"focus\": 0.1415322995757818,\n\t\t\t\t\"gap\": 6.666656494140625\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"TGAt1CyZ\",\n\t\t\t\t\"focus\": 0.04587059703523756,\n\t\t\t\t\"gap\": 5.268317955273687\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t48.895934557779356,\n\t\t\t\t\t-72.19294735826088\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 587,\n\t\t\t\"versionNonce\": 2028314094,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"i3-83HtZ6MeBagrulKUBH\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 193.25278132455588,\n\t\t\t\"y\": 3134.745510828824,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 57.085550767755706,\n\t\t\t\"height\": 72.4666564941408,\n\t\t\t\"seed\": 1721975090,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"MlYyL-oyNPh-GxehGV6mP\",\n\t\t\t\t\"focus\": 0.03478937564896005,\n\t\t\t\t\"gap\": 11.035119307668538\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"TGAt1CyZ\",\n\t\t\t\t\"focus\": -0.2379262627556722,\n\t\t\t\t\"gap\": 2.2928330175845986\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-57.085550767755706,\n\t\t\t\t\t-72.4666564941408\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 431,\n\t\t\t\"versionNonce\": 675151858,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"axcMzd4y\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -34.46658098984324,\n\t\t\t\"y\": 3199.707512199131,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 957489902,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.11/24\",\n\t\t\t\"rawText\": \"10.1.5.11/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.11/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 459,\n\t\t\t\"versionNonce\": 43495470,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"lCURsc6H\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 151.03341901015665,\n\t\t\t\"y\": 3200.957512199131,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 851987186,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.12/24\",\n\t\t\t\"rawText\": \"10.1.5.12/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.12/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 501,\n\t\t\t\"versionNonce\": 1478308274,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"4HFwH9J0\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -33.86783810352597,\n\t\t\t\"y\": 3223.976396910716,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1961596206,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.2/24\",\n\t\t\t\"rawText\": \"172.18.0.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 532,\n\t\t\t\"versionNonce\": 684554862,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"qDy3uVKi\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 152.8845008800073,\n\t\t\t\"y\": 3222.3382184985794,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1361452210,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.3/24\",\n\t\t\t\"rawText\": \"172.18.0.3/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.3/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 418,\n\t\t\t\"versionNonce\": 816851826,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"h6hIfS3K\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -62.34341611414686,\n\t\t\t\"y\": 3020.5951877415655,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1365032814,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65005\",\n\t\t\t\"rawText\": \"AS 65005\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65005\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 635,\n\t\t\t\"versionNonce\": 621136050,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"id\": \"TGAt1CyZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 61.168796178754405,\n\t\t\t\"y\": 3040.786021317099,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 258193010,\n\t\t\t\"groupIds\": [],\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1679991426817,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.1/24\",\n\t\t\t\"rawText\": \"10.1.5.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 0.5,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 0,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 3,\n\t\t\"currentItemFontSize\": 16,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": null,\n\t\t\"scrollX\": 951.0141798392917,\n\t\t\"scrollY\": -2250.168738957489,\n\t\t\"zoom\": {\n\t\t\t\"value\": 0.9000000000000002\n\t\t},\n\t\t\"currentItemRoundness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {},\n\t\t\"currentStrokeOptions\": null,\n\t\t\"previousGridSize\": null\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2025-03-26T03:48:43.17131857Z","tags":null},"/BIRD-%E6%96%87%E6%A1%A3-+-%E9%A1%B9%E7%9B%AE":{"title":"","content":"#bird \n\n文档：[The BIRD Internet Routing Daemon Project (network.cz)](https://bird.network.cz/?get_doc\u0026v=20\u0026f=bird-6.html)\n项目地址：[Files · master · labs / BIRD Internet Routing Daemon · GitLab (nic.cz)](https://gitlab.nic.cz/labs/bird/tree/master)\n\n\nyum install -y flex bison ncurses-devel readline-devel\ncalico fork bird 仓库地址：[projectcalico/bird: Calico's fork of the BIRD protocol stack (github.com)](https://github.com/projectcalico/bird)\n\n\n","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/Backblaze-+-Cloudflare-+-PicGo-%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA":{"title":"Backblaze + Cloudflare + PicGo 图床搭建","content":"目标实现自定义域名的图床\n- [使用 Cloudflare + Backblaze B2+PicGo的搭建免费图床](https://zhuanlan.zhihu.com/p/604285576)\n- [使用PicGo+CF(Cloudflare)+B2(Backblaze)作为博客图床](https://blog.ostdb.info/54300/)\n","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/Big-TCP":{"title":"Big TCP","content":"使用 ipv4 \u0026 ipv6 的 big TCP 需要 6.3 及以上的内核\n\n实验使用的内核版本为：\n```bash\nroot@server:~# cat /etc/os-release \nPRETTY_NAME=\"Ubuntu 22.04.3 LTS\"\nNAME=\"Ubuntu\"\nVERSION_ID=\"22.04\"\nVERSION=\"22.04.3 LTS (Jammy Jellyfish)\"\nVERSION_CODENAME=jammy\nID=ubuntu\nID_LIKE=debian\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nUBUNTU_CODENAME=jammy\nroot@server:~# \nroot@server:~# uname -a\nLinux server 6.2.0-1019-gcp #21~22.04.1-Ubuntu SMP Thu Nov 16 18:18:34 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n升级内核版本之后重启：\n```bash\nwget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh\nchmod +x ubuntu-mainline-kernel.sh\nmv ubuntu-mainline-kernel.sh /usr/local/bin/\nubuntu-mainline-kernel.sh -c\nubuntu-mainline-kernel.sh -i v6.4.0\n```\n\n升级完成之后：\n```bash\nroot@server:~# uname -ar\nLinux server 6.4.0-060400-generic #202306271339 SMP PREEMPT_DYNAMIC Tue Jun 27 14:26:34 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n使用kind 安装完集群\n\n使用 big tcp 的先决条件：\n- 使用基于 eBPF 的 kube-proxy replacement。与 Kubernetes 默认附带的基于 iptables 的 kube-proxy 相比，KPR 显着提高了性能\n- eBPF 主机路由（设置 hostLegacyRouting=false ）。基于 eBPF 的主机路由完全绕过 iptables 和上层主机堆栈，并提供更快的网络命名空间。\n- 基于 eBPF 的 masquerade（因此设置 bpf.masquerade=true）。 Cilium 会自动将离开集群的所有流量的源 IP 地址伪装为节点的 IPv4 地址，因为节点的 IP 地址已在网络上可路由。\n- 禁用 Tunnel 模式（因此设置 tunnel=disabled），因此 Cilium 将在 native routing 模式下运行。在此模式下，连接运行 Cilium 的主机的网络必须能够使用为 Pod 或其他工作负载提供的地址转发 IP 流量。\n- 设置 autoDirectNodeRoutes 为 true。以便节点 Linux 内核知道如何转发运行在节点上的 Pod 或其他工作负载的数据包。\n\n\n\n不同寻常的是，在引入 IPv4 支持之前，BIG TCP 首先可用于 IPv6。 正如您将在下一个任务中看到的，IPv6 数据包有一个方便的字段，可用于指定较大的数据包长度。由于该字段在 IPv4 中不可用，Linux 工程师必须找到一种不同的方法来增加该限制。\n\n存储在套接字缓冲区中的数据有效负载的长度（Linux 开发人员称为 skb-\u003elen）用于指定更大的数据包大小。\n\nCilium BIG TCP 目前支持 192K 数据包大小 - 是之前最大 64K 大小的三倍。 让我们观察不使用和使用 BIG TCP 的性能并进行比较。\n\n\nNetperf 是一个基准测试，可用于测量许多不同类型网络的性能。它提供单向吞吐量和端到端延迟的测试。\n\n\n不同寻常的是，BIG TCP 支持首先在 IPv4 之前针对 IPv6 引入。通过使用已有 22 年历史的 RFC (RFC2675)，它描述了 IPv6 jumbograms（大于 64KB 的数据包），可以更轻松地在 IPv6 中引入它。 IPv6 支持可插入数据包的逐跳标头。 通过在逐跳扩展标头中指定有效负载长度（并将 IPv6 标头中的有效负载长度字段设置为 0 以忽略它），我们可以解决前面描述的 64K 数据包大小限制。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/7b97207739ba43bc838a7f6d1b6b6f5d.png)\n\n\nHop-by-Hop 逐跳 扩展标头使用 32 位字段作为有效负载长度，这（理论上）可以让我们拥有 4GB 大小的数据包！ 但目前，Cilium BIG TCP 目前使用 192KB - 与之前的 64K 限制相比，仍然是 3 倍。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/2746939bc9299f2deae585427b4f2745.png)\n\n\n\n### 链接\n- https://isovalent.com/blog/post/big-tcp-on-cilium/","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/CGO%E5%85%A5%E9%97%A8":{"title":"","content":"1. **使用系统库输出helloworld**\n```c\npackage main\n\n//#include \u003cstdio.h\u003e\nimport \"C\"\n\nfunc main() {\n\tC.puts(C.CString(\"Hello, World\\n\"))\n}\n```\nCGO包的`C.CString`函数将Go语言字符串转为C语言字符串\n\n2. **使用自己的函数**\n```c\npackage main\n\n/*\n#include \u003cstdio.h\u003e\n\nstatic void SayHello(const char* s) {\n\tputs(s);\n}\n*/\nimport \"C\"\n\nfunc main() {\n\tC.SayHello(C.CString(\"Hello, World\\n\"))\n}\n```\n可以将`SayHello`函数放到当前目录下的一个C语言源文件中（后缀名必须是`.c`）。因为是编写在独立的C文件中，为了允许外部引用，所以需要去掉函数的`static`修饰符。\n```c\n// hello.c\n#include \u003cstdio.h\u003e\nvoid SayHello(const char* s) {\n\tputs(s);\n}\n\n// main.go\npackage main\n//void SayHello(const char* s);\nimport \"C\"\n\nfunc main() {\n\tC.SayHello(C.CString(\"Hello, World\\n\"))\n}\n```\n\n\n\n3. **代码模块化**\n\n在编程过程中，抽象和模块化是将复杂问题简化的通用手段。当代码语句变多时，我们可以将相似的代码封装到一个个函数中；当程序中的函数变多时，我们将函数拆分到不同的文件或模块中。而模块化编程的核心是面向程序接口API编程。\n模块的全部接口函数都放置hello.h文件中，无需关心其中各个函数的实现。\n```c\n// hello.h\nvoid SayHello(const char* s);\n```\n各种语言的接口实现\n```c\n// hello.c\n#include \"hello.h\"\nvoid SayHello(const char* s) {\n\tputs(s);\n}\n\n// hello.cpp\n#include \u003ciostream\u003e\nextern \"C\" {\n\t#include \"hello.h\"\n}\nvoid SayHello(const char* s) {\n\tstd::cout \u003c\u003c s;\n}\n\n// hello.go 用go语言实现.h文件中的接口\npackage main\n//export SayHello\nfunc SayHello(s *C.char) {\n\tfmt.Print(C.GoString(s))\n}\n```\n我们通过CGO的`//export SayHello`指令将Go语言实现的函数`SayHello`导出为C语言函数。为了适配CGO导出的C语言函数，我们禁止了在函数的声明语句中的const修饰符。需要注意的是，这里其实有两个版本的`SayHello`函数：一个Go语言环境的，一个C语言环境的。cgo生成的C语言版本SayHello函数最终会通过桥接代码调用Go语言版本的SayHello函数。\n对于用户的使用，模块化使得用户的使用更加简化\n```go\npackage main\n//#include \u003chello.h\u003e\nimport \"C\"\n\nfunc main() {\n\tC.SayHello(C.CString(\"Hello, World\\n\"))\n}\n```\n\n4. **go调用go实现的C接口**\n```go\npackage main\n\n//void SayHello(char* s);\nimport \"C\"\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tC.SayHello(C.CString(\"Hello, World\\n\"))\n}\n\n//export SayHello\nfunc SayHello(s *C.char) {\n\tfmt.Print(C.GoString(s))\n}\n```\n虽然看起来全部是Go语言代码，但是执行的时候是先从Go语言的`main`函数，到CGO自动生成的C语言版本`SayHello`桥接函数，最后又回到了Go语言环境的`SayHello`函数。\n在Go1.10中CGO新增加了一个`_GoString_`预定义的C语言类型，用来表示Go语言字符串。下面是改进后的代码：\n```go\n// +build go1.10\n\npackage main\n\n//void SayHello(_GoString_ s);\nimport \"C\"\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tC.SayHello(\"Hello, World\\n\")\n}\n\n//export SayHello\nfunc SayHello(s string) {\n\tfmt.Print(s)\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/CGO%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B":{"title":"","content":"CGO是架接Go语言和C语言的桥梁，它使二者在二进制接口层面实现了互通，但是我们要注意因两种语言的内存模型的差异而可能引起的问题。如果在CGO处理的跨语言函数调用时涉及到了**指针的传递**，则可能会出现Go语言和C语言共享某一段内存的场景。我们知道C语言的内存在分配之后就是稳定的，但是Go语言因为函数栈的动态伸缩可能导致栈中内存地址的移动(这是Go和C内存模型的最大差异)。如果C语言持有的是移动之前的Go指针，那么以旧指针访问Go对象时会导致程序崩溃。\n## GO访问C内存\nC语言空间的内存是稳定的，只要不是被人为提前释放，那么在Go语言空间可以放心大胆地使用。\n因为Go语言实现的限制，我们无法在Go语言中创建大于2GB内存的切片（具体请参考makeslice实现代码）。不过借助cgo技术，我们可以在C语言环境创建大于2GB的内存，然后转为Go语言的切片使用：\n```go\npackage main\n/*\n#include \u003cstdlib.h\u003e\nvoid* makeslice(size_t memsize) {\n\treturn malloc(memsize);\n}\n*/\nimport \"C\"\nimport \"unsafe\"\nfunc makeByteSlize(n int) []byte {\n\tp := C.makeslice(C.size_t(n))\n\treturn ((*[1 \u003c\u003c 31]byte)(p))[0:n:n]\n}\nfunc freeByteSlice(p []byte) {\n\tC.free(unsafe.Pointer(\u0026p[0]))\n}\nfunc main() {\n\ts := makeByteSlize(1\u003c\u003c32+1)\n\ts[len[s]-1] = 1234\n\tprint(s[len[s]-1])\n\tfreeByteSlice(p)\n}\n```\n## C临时访问传入的Go内存\ncgo之所以存在的一大因素是为了方便在Go语言中接纳吸收过去几十年来使用C/C语言软件构建的大量的软件资源。C/C很多库都是需要通过指针直接处理传入的内存数据的，因此cgo中也有很多需要将Go内存传入C语言函数的应用场景。\n但是C访问传入的Go内存可能是不安全的！go的栈会因为空间不足而发生扩展，导致了原来的Go语言内存被移动到了新的位置，但是C语言函数并不知道该Go语言内存移动了位置，仍用之前的地址来操作该内存——这将导致内存越界。\n\n- 借助C语言内存稳定的特性，在C语言空间先开辟同样大小的内存，然后将Go的内存填充到C的内存空间\n```go\npackage main\n/*\nvoid printString(const char* s) {\n\tprintf(\"%s\", s);\n}\n*/\nimport \"C\"\nfunc printString(s string) {\n\tcs := C.CString(s)\n\tdefer C.free(unsafe.Pointer(cs))\n\tC.printString(cs)\n}\nfunc main() {\n\ts := \"hello\"\n\tprintString(s)\n}\n```\n在需要将Go的字符串传入C语言时，先通过`C.CString`将Go语言字符串对应的内存数据复制到新创建的C语言内存空间上。上面例子的处理思路虽然是安全的，但是效率极其低下（因为要多次分配内存并逐个复制元素），同时也极其繁琐。\n\n- 为了简化并高效处理此种向C语言传入Go语言内存的问题，cgo针对该场景定义了专门的规则：**在CGO调用的C语言函数返回前，cgo保证传入的Go语言内存在此期间不会发生移动**，C语言函数可以大胆地使用Go语言的内存！\n```go\npackage main\n\n/*\nvoid printString(const char* s) {\n\tprintf(\"%s\", s);\n}\n*/\nimport \"C\"\n\nfunc printString(s string) {\n\tC.printString((*C.char)(unsafe.Pointer(\u0026s[0])))\n}\n\nfunc main() {\n\ts := \"hello\"\n\tprintString(s)\n}\n```\n我们假设调用的C语言函数需要长时间运行，那么将会导致被他引用的Go语言内存在C语言返回前不能被移动，从而可能间接地导致这个Go内存栈对应的goroutine不能动态伸缩栈内存，也就是可能导致这个goroutine被阻塞。因此，在需要长时间运行的C语言函数（特别是在纯CPU运算之外，还可能因为需要等待其它的资源而需要不确定时间才能完成的函数），需要谨慎处理传入的Go语言内存。\n需要小心的是在取得Go内存后需要马上传入C语言函数，不能保存到临时变量后再间接传入C语言函数。因为CGO只能保证在C函数调用之后被传入的Go语言内存不会发生移动，它并不能保证在传入C函数之前内存不发生变化。\n## C长期持有Go指针对象\nGo语言禁止在C语言函数中长期持有Go指针对象，但是这种需求是切实存在的。如果需要在C语言中访问Go语言内存对象，我们可以将Go语言内存对象在Go语言空间映射为一个int类型的id，然后通过此id来间接访问和控制Go语言对象。\n```go\npackage main\nimport \"sync\"\ntype ObjectId int32\nvar refs struct {\n\tsync.Mutex\n\tobjs map[ObjectId]interface{}\n\tnext ObjectId\n}\nfunc init() {\n\trefs.Lock()\n\tdefer refs.Unlock()\n\trefs.objs = make(map[ObjectId]interface{})\n\trefs.next = 1000\n}\nfunc NewObjectId(obj interface{}) ObjectId {\n\trefs.Lock()\n\tdefer refs.Unlock()\n\tid := refs.next\n\trefs.next++\n\trefs.objs[id] = obj\n\treturn id\n}\nfunc (id ObjectId) IsNil() bool {\n\treturn id == 0\n}\nfunc (id ObjectId) Get() interface{} {\n\trefs.Lock()\n\tdefer refs.Unlock()\n\treturn refs.objs[id]\n}\nfunc (id *ObjectId) Free() interface{} {\n\trefs.Lock()\n\tdefer refs.Unlock()\n\tobj := refs.objs[*id]\n\tdelete(refs.objs, *id)\n\t*id = 0\n\treturn obj\n}\n```\n我们通过一个map来管理Go语言对象和id对象的映射关系。其中NewObjectId用于创建一个和对象绑定的id，而id对象的方法可用于解码出原始的Go对象，也可以用于结束id和原始Go对象的绑定。\n下面一组函数以C接口规范导出，可以被C语言函数调用：\n```go\npackage main\n/*\nexport char* NewGoString(char* );\nexport void FreeGoString(char* );\nexport void PrintGoString(char* );\nvoid printString(const char* s) {\n\tchar* gs = NewGoString(s);\n\tPrintGoString(gs);\n\tFreeGoString(gs);\n}\n*/\nimport \"C\"\n//export NewGoString\nfunc NewGoString(s *C.char) *C.char {\n\tgs := C.GoString(s)\n\tid := NewObjectId(gs)\n\treturn (*C.char)(unsafe.Pointer(uintptr(id)))\n}\n//export FreeGoString\nfunc FreeGoString(p *C.char) {\n\tid := ObjectId(uintptr(unsafe.Pointer(p)))\n\tid.Free()\n}\n//export PrintGoString\nfunc PrintGoString(s *C.char) {\n\tid := ObjectId(uintptr(unsafe.Pointer(p)))\n\tgs := id.Get().(string)\n\tprint(gs)\n}\nfunc main() {\n\tC.printString(\"hello\")\n}\n```\n在printString函数中，我们通过NewGoString创建一个对应的Go字符串对象，返回的其实是一个ID，不能直接使用。我们借助PrintGoString函数将id解析为Go语言字符串后打印。该字符串在C语言函数中完全跨越了Go语言的内存管理，在PrintGoString调用前即使发生了栈伸缩导致的Go字符串地址发生变化也依然可以正常工作，因为该字符串对应的id是稳定的，在Go语言空间通过id解码得到的字符串也就是有效的。\n## 导出C函数不能返回Go内存\n在Go语言中，Go是从一个固定的虚拟地址空间分配内存。而C语言分配的内存则不能使用Go语言保留的虚拟内存空间。在CGO环境，Go语言运行时默认会检查导出返回的内存是否是由Go语言分配的，如果是则会抛出运行时异常。\n```go\n/*\nextern int* getGoPtr();\n\nstatic void Main() {\n\tint* p = getGoPtr();\n\t*p = 42;\n}\n*/\nimport \"C\"\n\nfunc main() {\n\tC.Main()\n}\n\n//export getGoPtr\nfunc getGoPtr() *C.int {\n\treturn new(C.int)\n}\n```\n代码输出：\n```bash\npanic: runtime error: cgo result has Go pointer\n\ngoroutine 1 [running]:\nmain._Cfunc_Main()\n\t_cgo_gotypes.go:40 +0x45\nmain.main()\n\tD:/Program/goProject/test/testCgo/main.go:36 +0x27\n\nProcess finished with exit code 2\n```\n异常说明cgo函数返回的结果中含有Go语言分配的指针。指针的检查操作发生在C语言版的getGoPtr函数中，它是由cgo生成的桥接C语言和Go语言的函数。cgo默认对返回结果的指针的检查是有代价的，特别是cgo函数返回的结果是一个复杂的数据结构时将花费更多的时间。如果已经确保了cgo函数返回的结果是安全的话，可以通过设置环境变量`GODEBUG=cgocheck=0`来关闭指针检查行为。\n```\n$ GODEBUG=cgocheck=0 go run main.go\n```\n关闭cgocheck功能后再运行上面的代码就不会出现上面的异常的。但是要注意的是，如果C语言使用期间对应的内存被Go运行时释放了，将会导致更严重的崩溃问题。cgocheck默认的值是1，对应一个简化版本的检测，如果需要完整的检测功能可以将cgocheck设置为2。\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/CGO%E7%BC%96%E7%A8%8B":{"title":"","content":"笔记来源：[https://www.cntofu.com/book/73/ch2-cgo/readme.md](https://www.cntofu.com/book/73/ch2-cgo/readme.md)\nGo语言函数调用C语言函数以复用C语言资源这一目的而出现的（因为C语言还会涉及回调函数，自然也会涉及到从C语言函数调用Go语言函数）。\n要使用CGO特性，需要安装C／C构建工具链，在macOS和Linux下是要安装和GCC，在windows下是需要安装MinGW工具。同时需要保证环境变量`CGO_ENABLED`被设置为1，这表示CGO是被启用的状态。在本地构建时`CGO_ENABLED`默认是启用的，当交叉构建时CGO默认是禁止的。\n\n通过`import \"C\"`语句启用CGO特性。紧跟在这行语句**前面的注释**是一种特殊语法，里面包含的是正常的C语言代码。当确保CGO启用的情况下，还可以在当前目录中包含C/C++对应的源文件。\n```go\npackage main\n\n/*\n#include \u003cstdio.h\u003e\n\nvoid printint(int v) {\n    printf(\"printint: %d\\n\", v);\n}\n*/\nimport \"C\"\nimport \"unsafe\"\n\nfunc main() {\n    v := 42\n    C.printint(C.int(v))\n}\n```\n\n- 开头的注释中写了要调用的C函数和相关的头文件\n- import \"C\"导入语句需要单独一行，不能与其他包一同import。\n- 向C函数传递参数也很简单，就直接转化成对应C语言类型传递就可以。\n- 头文件被include之后里面的所有的C语言元素都会被加入到”C”这个虚拟的包中\n- 不同的Go语言包引入的虚拟的C包之间的类型是不能通用的。这个约束对于要自己构造一些cgo辅助函数时有可能会造成一点的影响。\n\n\n\n## CGO语句\n在`import \"C\"`语句前的注释中可以通过`#cgo`语句设置编译阶段和链接阶段的相关参数。编译阶段的参数主要用于定义相关宏和指定头文件检索路径。链接阶段的参数主要是指定库文件检索路径和要链接的库文件。\n```go\n// #cgo CFLAGS: -DPNG_DEBUG=1 -I./include\n// #cgo LDFLAGS: -L/usr/local/lib -lpng\n// #include \u003cpng.h\u003e\nimport \"C\"\n```\n\n   - CFLAGS部分，`-D`部分定义了宏PNG_DEBUG，值为1；`-I`定义了头文件包含的检索目录。\n   - LDFLAGS部分，`-L`指定了链接时库文件检索目录，`-l`指定了链接时需要链接png库。\n\n因为C/C++遗留的问题，C头文件检索目录可以是相对目录，但是**库文件检索目录则需要绝对路径**。在库文件的检索目录中可以通过`${SRCDIR}`变量表示当前包目录的绝对路径：\n```go\n// #cgo LDFLAGS: -L${SRCDIR}/libs -lfoo\n\n上面的代码在链接时将被展开为：\n// #cgo LDFLAGS: -L/go/src/foo/libs -lfoo\n```\n\n`#cgo`语句主要影响CFLAGS、CPPFLAGS、CXXFLAGS、FFLAGS和LDFLAGS几个编译器环境变量。\n\n   - LDFLAGS用于设置链接时的参数。对应C和C++相同，它们的目标文件的类型是相同的。\n   - 对于在cgo环境混合使用C和C++的用户来说，可能有三种不同的编译选项：\n      - CFLAGS对应C语言特有的编译选项(_.c_)\n      - CXXFLAGS对应是C++特有的编译选项(_.cc,_.cpp,*.cxx)\n      - CPPFLAGS则对应C和C++共有的编译选项(_.c,_.cc,_.cpp,_.cxx)。\n\n`#cgo`指令还支持条件选择，当满足某个操作系统或某个CPU架构类型时后面的编译或链接选项生效。比如下面是分别针对windows和非windows下平台的编译和链接选项：\n```\n// #cgo windows CFLAGS: -DX86=1\n// #cgo !windows LDFLAGS: -lm\n```\n其中在windows平台下，编译前会预定义X86宏为1；再非widnows平台下，在链接阶段会要求链接math数学库。这种用法对于在不同平台下只有少数编译选项差异的场景比较适用。\n如果在不同的系统下cgo对应着不同的c代码，我们可以先使用`#cgo`指令定义不同的C语言的宏，然后通过宏来区分不同的代码：\n```go\npackage main\n/*\n#cgo windows CFLAGS: -DCGO_OS_WINDOWS=1\n#cgo darwin CFLAGS: -DCGO_OS_DARWIN=1\n#cgo linux CFLAGS: -DCGO_OS_LINUX=1\n#if defined(CGO_OS_WINDOWS)\n\tstatic char* os = \"windows\";\n#elif defined(CGO_OS_DARWIN)\n\tstatic char* os = \"darwin\";\n#elif defined(CGO_OS_LINUX)\n\tstatic char* os = \"linux\";\n#else\n#\terror(unknown os)\n#endif\n*/\nimport \"C\"\nfunc main() {\n\tprint(C.GoString(C.os))\n}\n```\n这样我们就可以用C语言中常用的技术来处理不同平台之间的差异代码。\n\n## 相比build tag \nbuild tag 是在Go或cgo环境下的C/C++文件开头的一种特殊的注释。\n条件编译类似于前面通过`#cgo`指令针对不同平台定义的宏，只有在对应平台的宏被定义之后才会构建对应的代码。但是通过`#cgo`指令定义宏有个限制，它只能是基于Go语言支持的windows、darwin和linux等已经支持的操作系统。如果我们希望定义一个DEBUG标志的宏，`#cgo`指令就无能为力了。而Go语言提供的build tag 条件编译特性则可以简单做到。\n**使用方法：**\n\n- 构建约束以一行`+build`开始的注释。在`+build`之后列出了一些条件，在这些条件成立时，该文件应包含在编译的包中；\n- 约束可以出现在任何源文件中，不限于go文件；\n- `+build`必须出现在`package`语句之前，`+build`注释之后应要有一个空行。\n\n\n比如下面的源文件只有在设置debug构建标志时才会被构建：\n```go\n// +build debug\n\npackage main\nvar buildMode = \"debug\"\n```\n可以用以下命令构建：\n```\ngo build -tags=\"debug\"\ngo build -tags=\"windows,debug\"\n```\n我们可以通过`-tags`命令行参数同时指定多个build标志，它们之间用逗号分割。\n当有多个build tag时，我们将多个标志通过逻辑操作的规则来组合使用。比如以下的构建标志表示只有在linux/386或非cgo环境的darwin平台下才进行构建。\n```\n// +build linux,386 darwin,!cgo\n```\n其中`linux,386`中linux和386用逗号链接表示AND的意思；而`linux,386`和`darwin,!cgo`之间通过空白分割来表示OR的意思。\n\n#### 使用tag来实现编译不同的文件\n实现一个根据go bulid -tag功能来编译不同版本的做法，version参数根据tag传进来的值进行编译。下面是一个实例\nmain.go\n```go\npackage main\nimport \"fmt\"\n// HINT: You might need to move this declaration to a different file.\nconst version = \"dev\"\nfunc main() {\n\tfmt.Printf(\"running %s version\", version)\n}\n```\n新建一个dev_config.go文件，代码如下\n```go\n// +build dev\npackage main\nvar version = \"DEV\"\n```\n上面代码的关键是 `// +build dev`这行代码，注意这行代码前后须有一个空行隔开，例如在第一行时，接下来要空出一行。这个文件只会被go bulid识别到，而go run等命令不会去识别这个文件，而且vscode等编辑器也会略过这个文件。\n再新建一个文件release_config.go,代码如下\n```go\n// +build release\npackage main\nconst version = \"RELEASE\"\n```\n代码已经准备完毕，还有一个地方要注意，需要去掉main.go中的`const version = 'dev'`这行代码，否则，go bulid命令会报version重复定义。\n执行命令如下：\n```bash\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ go build -tags dev -o dev_version\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ ./dev_version\nrunning DEV version\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ go build -tags release -o release_version\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ ./release_version\nrunning RELEASE version\n```\n#### 命令行传递编译参数\ngo build还支持通过命令行传递编译参数，通过-ldflags参数实现，将main.go修改为\n```go\npackage main\nimport \"fmt\"\n// HINT: You might need to move this declaration to a different file.\nvar version string\nfunc main() {\n\tfmt.Printf(\"running %s version\", version)\n}\n```\n命令行执行：\n```bash\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ go build -ldflags '-X main.version=\"dev\"' -o dev_version\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n$ ./dev_version\nrunning \"dev\" version\nlin@DESKTOP-HQI5HRL MINGW64 /g/workspace/GoWorkspace/src\n```\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/Calico-Full-Mesh-BGP-%E6%8A%A5%E6%96%87":{"title":"","content":"#bgp #calico-bgp\n\n### 集群环境\n| 节点  | ip 地址     | 角色          |\n| ----- | ----------- | ------------- |\n| node1 | 172.30.10.2 | master+worker |\n| node2 | 172.30.10.4 | worker        |\n| node3 | 172.30.10.6 | worker        | \n\n![upgit_20230206_1675691855.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675691855.png)\n\n![upgit_20230206_1675668659.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675668659.png)\n\n\n### 没有操作时，BGP会发送哪些报文\n![upgit_20230206_1675691148.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675691148.png)\n没有操作时，calico 会根据默认的 keepalive timer 发送 keepalive message\n\n### 创建/删除 POD 时，会发送哪些BGP报文  \n#### 创建 pod\n1. 创建 pod，节点上有对应的 block 时 - 不会发送数据包\n2. 创建 pod，节点上没有对应的 block 时 - 创建新的 blockaffinities 时，发送 Update Message、Route Refresh Message\n![upgit_20230206_1675671042.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675671042.png)\n3. 创建 pod 且发生借用 ip 时\n![upgit_20230206_1675691584.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675691584.png)\n\n![upgit_20230206_1675691407.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675691407.png)\n\n#### 删除 pod\n1. 删除 pod 后，blockaffinities 中仍有占用 ip 的负载 或者 该节点只存在一个 blockaffinities 时 - 不发送任何数据\n~~2. 删除 pod 后，blockaffinities 中没有占用 ip 的负载且该节点还存在其他可用 blockaffinities 时（回收block）~~\n3. 删除借用 ip 的 pod\n删除 pod 发送 Update Message(Withdrawn routes) 掩码长度：32\n![upgit_20230206_1675692675.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675692675.png)\n\n### 操作 ippool 时的发送数据包\n#### 新建/删除 ippool 时的发送数据包\n两两互发 - 发送 Route Refresh Message + update 告诉 peer 删除的路由表 + 宣告bgp路由\n1. 创建 ippool\n![upgit_20230206_1675694662.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675694662.png)\n2. 删除 ippool\n![upgit_20230206_1675694836.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675694836.png)\n\n#### 修改 ippool 时的发送数据包\n如果将 bgp 模式修改为 ipip 模式，且 tunl0 没有分配 ip 且 并非所有节点都有该 ippool 的 block 时会根据 blockSize 创建 blockaffinities 进而发布路由。\n两两宣告分配的 block 路由\n![upgit_20230206_1675695742.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675695742.png)\n两两宣告更新路由信息\n![upgit_20230206_1675695812.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675695812.png)\n\n~~如果将 ipip 修改为 bgp 模式时，且 tunl0 分配的是该 ippool 中的地址便会发布 Update Message(删除 block) ；~~\n\n### 重启 node / calico 初始化\nnode重启时，node上有pod，报文是怎么发送的？  \nCalico初始化时，会发送哪些BGP报文。BGP报文里面大致包含内容\n三次握手建立连接，四次挥手断开连接\nOpen 报文建立 bgp 连接，之后 update 宣告路由\n![upgit_20230206_1675677541.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675677541.png)\n\n![upgit_20230206_1675677598.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675677598.png)\n\n\n关机之后一段时间发布过期包\n![upgit_20230206_1675678430.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675678430.png)\n\n\n### 其他情况，会导致BGP有报文发送  \n- 创建/删除 blockaffinities 会触发bgp 消息发送(blockaffinities 回收)\n- 手动 kill bird 进程后发布 Notification 报文\n![upgit_20230206_1675697072.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675697072.png)\n\n\n### 监控","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/Calico-TOR-BGP-%E6%8A%A5%E6%96%87":{"title":"","content":"#bgp  #calico-bgp #calico \n\n### 集群环境\n| 节点  | ip 地址   | 角色          |\n| ----- | --------- | ------------- |\n| node1 | 10.1.5.11 | master+worker |\n| node2 | 10.1.5.12 | worker        |\n| node3 | 10.1.8.13 | worker        |\n| node4 | 10.1.8.14 | worker        |\n\n![upgit_20230320_1679291957.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679291957.png)\n\n![upgit_20230320_1679292048.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679292048.png)\n\n```yaml\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: rack1-to-leaf1\nspec:\n  peerIP: 10.1.5.1\n  asNumber: 65005\n  nodeSelector: rack == 'rack1'\n---\napiVersion: projectcalico.org/v3\nkind: BGPPeer\nmetadata:\n  name: rack2-to-leaf2\nspec:\n  peerIP: 10.1.8.1\n  asNumber: 65008\n  nodeSelector: rack == 'rack2'\n```\n\n网络拓扑图：\n![upgit_20230320_1679292214.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679292214.png)\n\n![upgit_20230320_1679292369.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679292369.png)\n\n![upgit_20230320_1679292412.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679292412.png)\n\n![upgit_20230320_1679295035.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679295035.png)\n\n![upgit_20230320_1679295130.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679295130.png)\n![upgit_20230320_1679295181.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679295181.png)\n\n```\nvyos@vyos:/$ show ip bgp neighbors 10.1.5.11\nBGP neighbor is 10.1.5.11, remote AS 65005, local AS 65005, internal link\n  BGP version 4, remote router ID 10.1.5.11, local router ID 10.1.5.1\n  BGP state = Established, up for 01:58:35\n  Last read 00:00:25, Last write 00:00:35\n  Hold time is 180, keepalive interval is 60 seconds\n  Neighbor capabilities:\n    4 Byte AS: advertised and received\n    AddPath:\n      IPv4 Unicast: TX received\n      IPv4 Unicast: RX advertised IPv4 Unicast and received\n    Route refresh: advertised and received(new)\n    Address Family IPv4 Unicast: advertised and received\n    Hostname Capability: advertised (name: leaf1,domain name: n/a) not received\n    Graceful Restart Capability: advertised and received\n      Remote Restart timer is 120 seconds\n      Address families by peer:\n        IPv4 Unicast(not preserved)\n  Graceful restart information:\n    End-of-RIB send: IPv4 Unicast\n    End-of-RIB received: IPv4 Unicast\n    Local GR Mode: Helper*\n    Remote GR Mode: Restart\n    R bit: False\n    Timers:\n      Configured Restart Time(sec): 120\n      Received Restart Time(sec): 120\n    IPv4 Unicast:\n      F bit: False\n      End-of-RIB sent: Yes\n      End-of-RIB sent after update: No\n      End-of-RIB received: Yes\n      Timers:\n        Configured Stale Path Time(sec): 360\n  Message statistics:\n    Inq depth is 0\n    Outq depth is 0\n                         Sent       Rcvd\n    Opens:                  3          3\n    Notifications:          0          4\n    Updates:               17          3\n    Keepalives:           178        202\n    Route Refresh:          0          0\n    Capability:             0          0\n    Total:                198        212\n  Minimum time between advertisement runs is 0 seconds\n\n For address family: IPv4 Unicast\n  Update group 4, subgroup 4\n  Packet Queue length 0\n  Route-Reflector Client\n  Community attribute sent to this neighbor(all)\n  0 accepted prefixes\n\n  Connections established 3; dropped 2\n  Last reset 03:30:31,  No AFI/SAFI activated for peer\nLocal host: 10.1.5.1, Local port: 179\nForeign host: 10.1.5.11, Foreign port: 54783\nNexthop: 10.1.5.1\nNexthop global: fe80::a8c1:abff:fe23:51fb\nNexthop local: fe80::a8c1:abff:fe23:51fb\nBGP connection: shared network\nBGP Connect Retry Timer in Seconds: 120\nRead thread: on  Write thread: on  FD used: 31\n```\n\n### 没有操作时，BGP会发送哪些报文\n![upgit_20230320_1679294575.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679294575.png)\n\n### 操作 ippool 时的发送数据包\n#### 新建/删除 ippool 时的发送数据包\n![upgit_20230320_1679296415.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679296415.png)\n\n### 重启 node / calico 初始化\n![upgit_20230320_1679297407.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679297407.png)\n![upgit_20230320_1679297446.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679297446.png)\n![upgit_20230320_1679297534.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679297534.png)\n\n![upgit_20230320_1679299086.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679299086.png)\n\n![upgit_20230320_1679298675.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679298675.png)\n\n![upgit_20230320_1679299015.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230320_1679299015.png)\n\n手动 kill 并使用 nc 占用 179 端口，使重启的 calico 无法重启成功，hold timer 超时时会发出相应的包\nkill 时会发送 notification 包，此时上层 leaf 会通知现有的 bgppeer 删除相关的路由。在节点再次重启calico之后，会重新发送 open + update 包，如果有更新的路由会更新通知到其他 peer\n\n另外如果没有收到 notification 也没有收到 keepalive 包，会在 holdtimer 之后删除路由；一般发生在 calico 重启，节点宕机的情况。\n\n**补充：**\n- BGP邻居之间的 timer 可以不一致，通过TCP连接建立成功后的open报文交互中，会协商使用最低值\n\n","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/Calico-over-IP-fabrics":{"title":"Calico over IP fabrics","content":"\n官方文档链接：\n- [Calico over IP fabrics | Calico Documentation](https://docs.tigera.io/calico/latest/reference/architecture/design/l3-interconnect-fabric#the-as-per-compute-server-model)\n\n## 三种模型\n### The AS Per Rack model\n\n每个 TOR 交换机（及其附属计算服务器）都是一个独特的自治系统 (AS)，并且它们通过叶/主干架构中的主干交换机提供的以太网交换平面或通过一组互连骨干交换机，每个骨干交换机也是一个唯一的AS。\n\nspine 交换机 - L2 spine option 所有的 TOR 之间要建立 bgp 对等连接\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/5a3ac684ae5737352911c8e904aa9774.png)\n\nspine 交换机 -  AS per spine option spine配置不同的 AS，TOR 只需要与每个 spine 建立 bgp 对等连接\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/040d0299a1d0637b043a45ceb01b1ff7.png)\n\n在机架内，两种变体ToR 北部的配置略有不同，ToR 南部的配置相同。 机架内的每个路由器（在 Calico 的情况下是每个计算服务器）与它们所连接的 ToR 共享相同的 AS。可以使用路由反射器模式，托管在 tor 中或者机架内的多台计算节点上。\n\n\n### The AS per Compute Server model\n\n每个计算服务器都是唯一的 AS，TOR 交换机构成中转 AS。假设是 ToR 是第一层聚合和路由元素 - L3路由器。\n\nToR 交换机通过一组以太网交换平面进行物理网格连接：\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/0fa070a425cb069fe946aa9b800eb5ef.png)\n\nToR 交换机物理连接到一组独立的路由平面：\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/90c324a5feacc7728d49417a14eb16bb.png)\n\n该模型的真正区别在于计算服务器和 ToR 交换机都是独立的自治系统。同时也没有使用路由反射器，因为所有 BGP 对等互连都是 eBGP。在这种情况下，给定机架中的每个计算服务器与其 ToR 交换机对等，该交换机也充当 eBGP 路由器。\n\n### The Downward Default model\n\n每个主干交换机都是唯一的 AS，并且每个 TOR 交换机 BGP 与每个主干交换机对等。在这两种情况下，TOR 交换机都使用 ECMP 在所有可用主干交换机之间对流量进行负载平衡。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/4a2dce3128c2647f7d1930c02fea4475.png)\n\n所有 Calico 节点共享相同的 AS 编号，所有 ToR 交换机也是如此。但是，这些 AS 是不同的（A1 与 A2 不是同一网络，尽管两者共享相同的 AS 编号 A ）\n\n在之前的模型中，基础设施中的所有路由器都携带完整的路由表，并保持其 AS 路径不变，而此模型删除了路由路径每个阶段的 AS 编号。为了防止来自网络中其他节点的路由由于来自本地 AS 而未被安装（因为它们共享路由的源和目标共享相同的 AS）。\n\n\n每个路由器都会向其上游对等方通告其所有路由（Calico 路由器到其 ToR，ToR 到主干交换机）。而上游路由器仅通告默认路由。在这种情况下，给定的 Calico 路由器仅具有本地托管的端点的路由以及 ToR 的默认路由。ToR 交换机和主干之间也会发生同样的情况。ToR 只需安装用于托管在其下游 Calico 节点上的端点的路由。\n由于默认路由（最初）由 Spine 发起，因此向下通告的路由不可能源自接收者的 AS，从而防止了 AS 混合问题。？\n\n好处：ToR 交换机中路由表的卸载。\n坏处：所有发往无效目标（目标 IP 不存在）的流量在被丢弃之前都将转发到主干交换机。","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/Cilium-1.15":{"title":"Cilium 1.15","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/db9622b155893bcd9e11b0fb4bf2638e.png)\n\n\n### Service Mesh \u0026 Ingress/Gateway API\n\n- **Gateway API 1.0 Support**: Cilium now supports Gateway API 1.0\n- **Gateway API gRPC Support**: Cilium can now route gRPC traffic, using the Gateway API\n- **Annotation Propagation from GW to LB:** Both the Cilium Ingress and Gateway API can propagate annotations to the Kubernetes LoadBalancer Service \n- **Reduced Envoy Privileges**: Envoy’s security posture has been reinforced\n- **Ingress Network Policy:** Enforce ingress network policies for traffic inbound via Ingress + GatewayAPI\n\n#### Gateway API\n在 cilium 1.13 中引入并已被广泛采用。许多 Cilium 用户现在可以将传入流量路由到集群并进行负载平衡，而无需安装第三方入口控制器或专用服务网格。\n\ncilium 1.15 Gateway API 的实现完全符合 1.0 版本，并支持以下用例：\n- HTTP routing\n- HTTP traffic splitting and load-balancing\n- HTTP request and response header rewrite\n- HTTP redirect and path rewrites\n- HTTP mirroring\n- Cross-namespace routing\n- TLS termination and passthrough\n- gRPC routing\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/38f1f6f34ac3c8b17902a590be6b998e.png)\n\n\n####  Annotation Propagation from GW to LB\n\n通过 spec.infrastructure 定义的 labels 和 annotation 传递到后续 ingress or Gateway api 自动创建的 LoadBalancer 类型 service 的 metadata 中\n```yaml\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: my-gateway\nspec:\n  gatewayClassName: cilium\n  infrastructure:\n    annotations:\n      service.beta.kubernetes.io/aws-load-balancer-type: nlb\n    labels:\n      app.kubernetes.io/name: hello-world\n```\n\n#### Reduced Envoy Privileges\n\nSecurity Enhancements for Envoy：Cilium 始终致力于提高 Cilium 本身的安全性，而不仅仅是为最终用户提供安全功能\n\n最近的安全增强功能：Cilium 1.13 引入了使用联合签名的容器映像签名、每个映像的软件物料清单 (SBOM) 以及用于 TLS 的服务器名称指示 (SNI)。\n\nCilium 1.15 引入了与 L7 的 Envoy 权限相关的显着安全改进，显着缩小了 Envoy 进程允许的功能范围。Cilium 1.15 中 Envoy 处理 HTTP 流量不再具有直接访问 BPF 映射或套接字选项的权限。此更新限制了以前以 root 身份运行的权限。\n\n#### Ingress Network Policy\n\n按照设计，在 Cilium 1.15 之前，通过 Cilium Ingress 公开的服务将绕过 CiliumClusterwideNetworkPolicy 规则。\n从技术层面来说，这是因为 Envoy 终止了原始 TCP 连接，并将 HTTP 流量转发到来自自身的后端。在强制执行 Cilium 网络策略时（lxc 接口的 tc 入口），原始源 IP 不再存在，因此无法匹配网络策略。所以无法将策略应用于集群 Ingress 入站流量。\n\n这并不适合所有情况，导致了用户需要额外的安全控制才能管理进入其公开服务的流量\n\n在 Cilium 1.15 中，为了确保保留原始源身份并对入口流量执行策略，可以配置enforce_policy_on_l7lb 选项，这样为 ingress identity 定义的 ingress 和 egress 策略都会被强制执行。\n\n### Networking\n\n- **BGP Security**: Support for MD5-based session authentication has landed\n- **BGP Traffic Engineering**: New BGP attributes (communities and local preference) are now supported\n- **BGP Operational Tooling**: Track BGP peering sessions and routes from the CLI\n- **BGP Support for Multi-Pool IPAM**: Cilium can now advertise PodIPPools, used by the most flexible IPAM method\n\n将 Kubernetes 集群与其余部分的网络集成最好使用边界网关协议 (BGP)。\n自 Cilium 1.10 中首次引入以来，BGP 支持已在多个版本中得到增强，包括 Cilium 1.12 中的 IPv6 支持和 Cilium 1.14 中的 BGP 平滑重启。 \nCilium 1.15 引入了对迫切需要的功能（基于 MD5 的密码身份验证）的支持、其他流量工程功能（例如对 BGP LocalPreference 和 BGP Communities 的支持）以及用于监视和管理 BGP 会话的操作工具。\n\n```bash\ncilium-dbg bgp routes advertised ipv4 unicast\ncilium-dbg bgp peers\n```\n\n**BGP Support for Multi-Pool IPAM**\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/536dc455ab8a69b08668c79b8f8a2620.png)\n\n\n### Day 2 Operations and Scale\n\n- **Cluster Mesh Twofold Scale Increase**: Cluster Mesh now supports 511 meshed clusters - cluster mesh 规则翻倍，在 Cilium 1.15 之前可以扩展到 255 个集群，Cilium 1.15 支持多达 511 个集群\n- **Cilium Agent Health Check Observability:** Enhanced health check data for Cilium Agent sub-system states - 使用 cilium-dbg status --verbose 可以看到 agent 各个子模块的健康状态\n- **Terraform/OpenTofu \u0026 Pulumi Cilium Provider**: You can now deploy Cilium using your favourite Infra-As-Code tool \n- **Kubernetes 1.28 and 1.29 support**: The latest Kubernetes releases are now supported with Cilium \n\n### Hubble \u0026 Observability\n\n- **New Grafana Dashboards**: Cilium 1.15 includes two new network and DNS Grafana dashboards \n- **Hubble Flows to a Network Policy Correlation** : Use Hubble to understand which network policies is permitting traffic, helping you know if they are having the intended effect on application communications\n- **Hubble Flow Exporter**: Export Hubble flows to a file for later consumption as logs \n- **New Hubble CLI filters**: Identify a specific flow by using some of the new Hubble filters such as flows coming from a specific cluster or HTTP flows based on their URL or header values\n- **Hubble Redact**: Remove sensitive information from Hubble output\n\n#### hubble 新增了两个 Dashboards\n第一个仪表板是 Network Overview，可让快速查看平台的流量负载。涵盖已处理的流量、连接丢失和网络策略丢失，可以轻松发现系统中的负载何时变得不稳定。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/2a28a2d8285dbfacf28ab867e3299ea7.png)\n\n第二个仪表板是 DNS Overview 可视化。众所周知，DNS 是一个健康、优化平台的关键功能。借助 Hubble 的第 7 层可见性功能，可以使用此仪表板来发现 DNS 请求问题并查明应用程序故障。\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/86bcc3cf569f3601dc8a924c0c9b423b.png)\n\n","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/Cilium-1.16":{"title":"Cilium 1.16","content":"### 更新范围包括\n\n- 🚠 _Networking_\n- 🕸️ _Service Mesh \u0026 Ingress/Gateway API_\n- 💂‍♀️ _Security_\n- 🌅 _Day 2 Operations and Scale_\n- 🛰️ _Hubble \u0026 Observability_\n\n### Networking\n\n- 🚤 _Cilium NetKit:_ container-network throughput and latency as fast as host-network.（吞吐、延迟赛比host，需要 kernel 6.7）\n- 🌐 _BGPv2:_ Fresh new API for Cilium's BGP feature.(cilium 1.10 之后支持 bgp)\n- 📢 _BGP ClusterIP Advertisement:_ BGP advertisements of ExternalIP and Cluster IP Services.\n- 🔀 _Service Traffic Distribution:_ Kubernetes 1.30 Service Traffic Distribution can be enabled directly in the Service spec instead of using annotations.\n- 🔄 _Local Redirect Policy promoted to Stable:_ Redirecting the traffic bound for services to the local backend, such as node-local DNS.(在 cilium 1.9中引入，通过将服务的流量边界定向到本地后端来防止流量甚至离开节点)\n- 📡 _Multicast Datapath:_ Define multicast groups in Cilium. - 需要使用 cilium-dbg CLI 定义多播组以及可能运行订阅者 Pod 的节点。\n- 🏷️ _Per-Pod Fixed MAC Address:_ Specify the MAC address used on a pod.\n- _Node IPAM Service LB_: Ability to assign IP addresses from the nodes themselves to Kubernetes services, providing alternative access to services from outside of the cluster - 使用主机IP 作为 service externalip，并使用相应的主机端口，作为 LoadBalancer 访问入口。\n\nBGPv2\n之前使用 CiliumBGPPeeringPolicy，有一些缺点，不够灵活；为了提供更高的灵活性，cilium 1.16 引入了新的 API - BGPv2\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/b34690bd311420a9d591829c0af16cee.png)\n\n\nService Traffic Distribution - 1.30 alpha / 1.31 beta\n- https://kubernetes.io/docs/concepts/services-networking/service/#traffic-distribution \n- https://kubernetes.io/docs/reference/networking/virtual-ips/#traffic-distribution\ntrafficDistribution: PreferClose 如果区域中有端点，它们将接收该区域的所有流量，如果区域中没有端点，则流量将分发到其他区域.\n\n\n### ServiceMesh \u0026 Ingress/Gateway API\n\n- 🧭 _Gateway API GAMMA Support:_ East-west traffic management for the cluster via Gateway API.\n- ⛩️ _Gateway API 1.1 Support:_ Cilium now supports Gateway API 1.1. - 包括对 GAMMA和 GRPCRoute 的支持，增加了一些新的协议选项\n- 🛂 _ExternalTrafficPolicy support for Ingress/Gateway API:_ External traffic can now be routed to node-local or cluster-wide endpoints. - 确保保留客户端IP\n- 🕸️ _L7 Envoy Proxy as dedicated DaemonSet:_ With a dedicated DaemonSet, Envoy and Cilium can have a separate life-cycle from each other. Now on by default for new installs.\n- 🗂️ _NodeSelector support for CiliumEnvoyConfig:_ Instead of being applied on all nodes, it's now possible to select which nodes a particular CiliumEnvoyConfig should select.\n\nGateway API GAMMA Support\nGAMMA 是 Gateway API for Mesh Management and Administration 的简称，为集群的东西向流量管理提供一致的模型，例如集群内部基于路径的路由和负载平衡\n\n### Security\n\n- 📶 _Port Range support in Network Policies:_ This long-awaited feature has been implemented into Cilium.（网络策略的端口范围的支持 k8s 1.21-1.25 stable）\n- 📋 _Network Policy Validation Status:_ kubectl describe cnp will be able to tell if the Cilium Network Policy is valid or invalid.(增加 status 字段，可以通过 describe 查看 networkpolicy 的验证是否通过)\n- ⛔ _Control Cilium Network Policy Default Deny behavior:_ Policies usually enable default deny for the subject of the policies, but this can now be disabled on a per-policy basis.（增加网络策略默认不做处理，需要指定为 true 才执行策略，允许平台所有者安全地推出新的网络策略，而不会产生中断现有流量的风险。）\n- 👥 _CIDRGroups support for Egress and Deny rules:_ Add support for matching CiliumCIDRGroups in Egress policy rules.\n- 💾 _Load \"default\" Network Policies from Filesystem:_ In addition to reading policies from Kubernetes, Cilium can be configured to read policies locally.（类似 static pod，但是使用 kubectl get cnp 查询不到，需要使用 cilium-dbg policy 查看）\n- 🗂️ _Support to Select Nodes as Target of Cilium Network Policies:_ With new ToNodes/FromNodes selectors, traffic can be allowed or denied based on the labels of the target Node in the cluster.（功能增强，之前只能使用 remote-nodeentity 或者 CIDR-based 的策略，但是有一定的缺陷，现在可以使用 node label 进行选择）\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: xxx\nspec:\n  enableDefaultDeny:\n    egress: false\n    ingress: true\n```\n\n### Day 2 Operations and Scale\n\n- 🧝 _New ELF Loader Logic:_ With this new loader logic, the median memory usage of Cilium was decreased by 24%.\n- 🚀 _Improved DNS-based network policy performance:_ DNS-based network policies had up to 5x reduction in tail latency.\n- 🕸️ _KVStoreMesh default option for ClusterMesh:_ Introduced in Cilium 1.14, and after a lot of adoption and feedback from the community, KVStoreMesh is now the default way to deploy ClusterMesh.\n\nELF Loader Logic\n理论上，只要端点的配置发生变化，我们就必须重新编译端点的 BPF。编译是一个相当昂贵的过程，因此开发了一种名为“ELF 模板/替换”的机制来避免在最常见的情况下重新编译。然而，这个替代过程并不是最理想的。在 Cilium 1.16 中，它得到了改进，导致显着的内存增益\n\nDNS-based network policy\nCilium 网络策略如此受集群管理员欢迎的原因之一是:它们能够根据完全限定域名 (FQDN) 进行过滤。  DNS 感知的 Cilium 网络策略使用户能够根据特定 FQDN 允许流量。\n\n### Hubble \u0026 Observability\n\n- 🗣️ _CEL Filters Support:_ Hubble supports Common Express Language (CEL) giving support for more complex conditions that cannot be expressed using the existing flow filters.（通用表达式语言 (CEL) 是表达式求值通用语义的实现。它旨在快速、便携且安全地执行性能关键型应用程序。将 CEL 引入 Hubble 的动机是支持目前无法使用现有流量过滤器表达的更复杂的条件。目前，Hubble CLI 中的 Hubble observe 对所有参数使用一个 AND 过滤器。引入 CEL 后可以使用 –cel-expression 过滤）\n- 📊 _Improved HTTP metrics:_ There are additional metrics to count the HTTP requests and their duration.\n- 📏 _Improved BPF map pressure metrics:_ New metric to track the BPF map pressure metric for the Connection Tracking BPF map.\n- 👀 _Improvements for Egress Traffic Path Observability:_ Some metrics were added on this release to help troubleshooting Cilium Egress Routing.\n- 🔬 _K8S Event Generation on Packet Drop:_ Hubble is now able to generate a k8s event for a packet dropped from a pod and it that can be verified with kubectl get events.数据包因为网络策略丢弃时，会在相应 pod 上生成事件 - alpha 版本\n- 🗂️ _Filtering Hubble flows by node labels:_ Filter Hubble flows observed on nodes matching the given label. - hubble observe 命令\n\n### 官方链接\n- gateway api 介绍： https://gateway-api.sigs.k8s.io/\n- https://isovalent.com/blog/post/cilium-1-16/\n- https://github.com/cilium/cilium/releases/tag/v1.16.0","lastmodified":"2025-03-26T03:48:44.121315222Z","tags":null},"/ClusterMesh-ciliumexternalworkloads":{"title":"ClusterMesh - ciliumexternalworkloads","content":"\n要允许外部工作负载加入已经创建好的集群，必须向集群通报每个此类工作负载。通过为每个外部工作负载创建 CiliumExternalWorkload (CEW) 资源来完成。\n\nCEW 资源指定工作负载的名称和身份标签（包括命名空间）。该名称必须是外部工作负载的主机名。\n\n\nhttps://docs.cilium.io/en/stable/network/external-workloads/","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/DNS":{"title":"DNS","content":"\n亚马逊 DNS - routeD5?\n可以实现跨地域级别的通信，一个地域内可以使用 bgp 去打通\n[Amazon Route 53](https://aws.amazon.com/cn/route53/faqs/)","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/DNS-%E8%AE%B0%E5%BD%95":{"title":"DNS 记录","content":"\n使用青云的公有云，有时主机重启之后对应的dns记录会消失，手动修改 /etc/resolv.conf 后重启会被覆盖，因此可以使用以下方法解决：\n- 使用默认的 resolved 管理 DNS 记录\n- 使用resolvconf 管理 DNS 记录\n\n## 使用 resolved\n1. 修改 /etc/systemd/resolved.conf 文件，在其中添加dns信息，例如：\n\t`DNS=8.8.8.8 114.114.114.114`\n\n2. 重启 resolved 服务  + 建立软连接\n\t`systemctl restart systemd-resolved`\n\t`systemctl enable systemd-resolved`\n\t`mv /etc/resolv.conf /etc/resolv.conf.bak`\n\t`ln -s /run/systemd/resolve/resolv.conf /etc/`\n\n再查看 `/etc/resolv.conf` 文件就可以看到新的dns信息已经写入其中了。\n\n\n## 使用 resolvconf\n1. 安装resolvconf\n\t`apt-get install -y resolvconf`\n\n2. 修改配置\n\t`vim /etc/resolvconf/resolv.conf.d/tail`\n\t`nameserver 114.114.114.114`\n\t`nameserver 8.8.8.8`\n\n3. 使其生效\n\t`resolvconf -u`\n","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/Flannel-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6":{"title":"","content":"#flannel  #cni \n\n","lastmodified":"2025-03-26T03:48:43.130318715Z","tags":null},"/FrequentlyUsed":{"title":"FrequentlyUsed","content":"## set\n- [[build record]]\n- [[shell 常用]]\n- [[ssh]]","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/GatewayAPI-Lab1":{"title":"GatewayAPI-Lab1","content":"\n### 介绍\n\n实验地址： https://isovalent.com/labs/cilium-gateway-api/\n\n实验总览\n- Cilium Installation with Gateway API\n- Gateway API - HTTP Traffic Management \n- Gateway API - HTTPS Traffic Management\n- Gateway API - TLS Passthrough\n- Gateway API - HTTP Load Balancing\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/2072b465559c58479d731905aee6718d.png)\n\n#### 嵌入式 Envoy 代理\n\nCilium 已经使用 Envoy 实现了某些协议的 L7 策略和可观察性。\n\nEnvoy在许多流行的 Service Mesh 实现中用作 sidecar 代理。 \n自然地，Cilium 也使用 Envoy 提供与 Service Mesh 相关的功能，不过与其他解决方案相反，其不需要任何 pod sidecar。而是 Envoy 代理嵌入了 Cilium，这意味着每个节点只需要一个 Envoy 容器。\n\n#### eBPF加速\n\n在典型的 Service Mesh 中，所有网络数据包在往返于 Pod 中的应用程序容器的路径上都需要经过 sidecar 代理容器。 \n\n这意味着每个数据包在离开 Pod 之前都会遍历 TCP/IP 堆栈 3 次。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/f9a1a3b39c3386ee6e0ecb81bb1e9b90.png)\n\n在 Cilium Service Mesh 中，我们将该代理容器移至主机和内核上，以便不再需要每个应用程序 pod 的 sidecar。\n\n由于 eBPF 允许我们在套接字和网络接口处拦截数据包，因此 Cilium 可以显着缩短每个数据包的整体路径\n\n[How eBPF will solve Service Mesh - Goodbye Sidecars - Isovalent](https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh/)\n\n### 环境安装\u0026准备\n\n\u003e 【注】\n\u003e 1. `kubeProxyReplacement` 必须设置为 true\n\u003e 2. 提前安装 gateway crd\n\n安装 cilium\n```bash\ncilium install --version v1.16.0 \\\n  --namespace kube-system \\\n  --set kubeProxyReplacement=true \\\n  --set gatewayAPI.enabled=true\n```\n\n验证\n```bash\nkubectl get crd \\\n  gatewayclasses.gateway.networking.k8s.io \\\n  gateways.gateway.networking.k8s.io \\\n  httproutes.gateway.networking.k8s.io \\\n  referencegrants.gateway.networking.k8s.io \\\n  tlsroutes.gateway.networking.k8s.io\n\ncilium config view | grep -w \"enable-gateway-api\"\nenable-gateway-api                                true\nenable-gateway-api-alpn                           false\nenable-gateway-api-app-protocol                   false\nenable-gateway-api-proxy-protocol                 false\nenable-gateway-api-secrets-sync                   true\n```\n\nGatewayClass 是一种可以部署的网关类型：换句话说，它是一个模板。这样做的方式是让基础设施提供商提供不同类型的网关。然后用户可以选择他们喜欢的网关。 例如，基础设施提供商可以创建两个名为 internet 和 private 的 GatewayClass，以反映定义面向 Internet 与私有内部应用程序的网关。\n\n下面的架构代表了Gateway API 使用的各种组件。使用 Ingress 时，所有功能都在一个 API 中定义。Gateway API 通过将入口路由需求解构为多个 API，用户可以从更通用、灵活且面向角色的模型中受益。\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/fc2086b2cd9191f6cab964bc645c7cf6.png)\n\n\nCilium Service Mesh Gateway API 控制器需要能够创建 LoadBalancer Kubernetes 服务。可以使用 Cilium 自己的 LBIPAM 给 LoadBalancer 服务分配 IP 地址并做 layer2 公告。\n\n\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/03d2c005c466ef1a8f9a3adc967b866c.png)\n\n\n###  TLS Termination 和 TLSRoute\nTLS 终止：网关终止来自客户端的 HTTPS 流量并根据 HTTP 属性（如路径、方法或标头）路由未加密的 HTTP 流量。（在网关处解密传入 TLS 流量并通过未加密的连接将其转发到适当的后端服务的过程)\nIn `Terminate`:\n- Client -\u003e Gateway: HTTPS\n- Gateway -\u003e Pod: HTTP\n\nTLSRoute：Cilium 1.14 中引入的一项功能。此资源允许将 TLS 流量从客户端一直传递到 Pod，这意味着流量是端到端加密的。\nIn `Passthrough`:\n- Client -\u003e Gateway: HTTPS\n- Gateway -\u003e Pod: HTTPS\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/d88c892964655ed2e7654f8c7288a632.png)\n\n\n### Traffic splitting\n\nHTTP 流量分割是根据预定义的权重或其他标准将传入流量发送到多个后端服务的过程。Cilium Gateway API 与 HTTP 流量分割引擎完全集成。 \n\n为了引入应用程序的新版本，运营商通常会开始将一些流量推送到新的后端，并查看用户的反应以及应用程序在负载下的表现。它也称为 A/B 测试、蓝绿部署或金丝雀发布。 \n\n现在，您可以使用 Cilium Gateway API 权重在本地完成此操作。无需安装其他工具或服务网格。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/caba6336e59026af72a9f24c929aea6c.png)\n","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/GatewayAPI-Lab2":{"title":"GatewayAPI-Lab2","content":"https://isovalent.com/labs/cilium-gateway-api-advanced/\nhttps://isovalent.com/blog/post/tutorial-redirect-rewrite-and-mirror-http-requests-with-cilium-gateway-api/\n\n- Gateway API — Deploy Sample App\n- HTTP Request and Response Header Modifier\n- Gateway API — HTTP Mirroring、HTTP Rewrite、HTTP Redirect\n- Cross-namespace \u0026 Shared Gateway API\n- Gateway API — gRPC routing Example\n- Gateway API — Gamma Example\n\n\n```bash\nkubectl get crd \\\n  gatewayclasses.gateway.networking.k8s.io \\\n  gateways.gateway.networking.k8s.io \\\n  httproutes.gateway.networking.k8s.io \\\n  referencegrants.gateway.networking.k8s.io \\\n  tlsroutes.gateway.networking.k8s.io \\\n  grpcroutes.gateway.networking.k8s.io\n```\n\n### HTTP 请求头修改\n\n使用 Cilium Gateway API 修改 HTTP 请求的 HTTP 标头。 HTTP 标头修改是在传入请求中添加、删除或修改 HTTP 标头的过程。 Cilium Gateway API 让用户可以轻松自定义传入流量以满足其特定需求。\n\nCilium Gateway API 允许我们添加、删除或编辑传入流量的 HTTP 标头。\n需要定义一个带有一个或多个 HTTP 过滤器的网关对象。每个过滤器指定对传入请求进行的特定修改，例如添加自定义标头或修改现有标头。\n\n### HTTP 响应头修改\n\n使用 Cilium Gateway API 测试 HTTP 响应标头重写。 就像编辑请求标头很有用一样，响应标头也是如此。例如，它允许团队仅添加/删除某个后端的 cookie，这可以帮助识别之前重定向到该后端的某些用户。 另一个潜在的用例可能是当您的前端需要知道它是与后端服务器的稳定版本还是 Beta 版本通信时，以便呈现不同的 UI 或相应地调整其响应解析。\n\n\n### 镜像 HTTP 流量\n\n使用 Cilium Gateway API 镜像 HTTP 流量。 您可以将发往某个后端的流量镜像到另一个后端。 当您想要引入 v2 服务或仅用于故障排除和分析目的时，这非常有用。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/ce7de2d445cf7df5d5744f1d5cc087c2.png)\n\n\n### HTTP Rewrite\n\n使用 Cilium Gateway API 重写 HTTP 流量中使用的 URL。 重写在代理客户端请求之前修改客户端请求所使用的 URL。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/1ab8035d5b066cd26da590366e5b944c.png)\n\n### HTTP Redirect\n\n使用 Cilium Gateway API 将客户端重定向到不同的 URL。 您可以在重定向消息中自定义路径、主机名和 HTTP 重定向代码（例如 301 或 302）。 这在应用程序的临时或永久迁移期间非常有用\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/145e83bdf92aff2a42f339fd075086ba.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/0ed7f9fc76461acd0b2a8125d32f9695.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/0b75f29c09a3ef04e431a08044b48398.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/b48a628d0f68c0b61a5540bae34c68d0.png)\n\n### 跨命名空间路由支持\n\nGateway API 具有对跨命名空间路由的核心支持。当多个用户或团队共享底层网络基础设施时，这一点非常有用，但必须对控制和配置进行分段，以最大程度地减少访问和故障域。\nGateway和Routes可以部署到不同的命名空间中，并且Routes可以跨命名空间边界附加到Gateway。这允许用户访问控制在Routes和Gateway的命名空间中以不同的方式应用，从而有效地将访问和控制分段到集群范围路由配置的不同部分。\nRoutes跨命名空间边界附加到网关的能力由Route attachment控制。本实验室探讨了Route attachment，并演示了独立团队如何安全地共享同一网关。\n\nRoute attachment 路由附加是一个重要的概念，它决定了路由如何附加到网关并对其路由规则进行编程。当跨命名空间的路由共享一个或多个网关时，这一点尤其重要。 \n网关和路由连接是双向的 - 仅当网关所有者和路由所有者都同意这种关系时，连接才能成功。 \n网关支持附件约束，这些约束是网关侦听器上的字段，用于限制可以附加哪些路由。\n网关支持命名空间和路由类型作为附件约束。任何不满足连接约束的路由都无法连接到该网关。类似地，路由通过路由的parentRef 字段显式引用它们想要附加到的网关。\n这些共同创建了基础设施所有者和应用程序所有者之间的握手，使他们能够独立定义如何通过网关公开应用程序。 \n这是一项有效减少管理开销的政策。应用程序所有者可以指定其应用程序应使用哪些网关，基础设施所有者可以限制网关接受的命名空间和路由类型。\n\n\n共享网关 API 的一个好处是平台和安全团队可以集中控制网关 API，包括其证书管理。在公有云中，它还会降低成本（每个应用程序的网关 API 需要公共 IP 和云负载均衡器，这些不是免费资源）\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/07d8cf54e93432a29203dcaa0e85b211.png)\n\ngateway 使用namespace selector来定义允许附加哪些 HTTPRoutes。这使得基础设施团队可以通过将一组命名空间列入白名单来限制谁或哪些应用程序可以使用此网关。\n\n\n### 内部第 7 层流量管理 - GAMMA \n\n在 Kubernetes 中，服务资源类型可让您对集群内的流量（东-西）进行负载均衡。然而，负载平衡选项非常有限：只有 L3/L4，可选地带有拓扑提示。 \n实现第 7 层负载均衡和高级路由通常需要向集群部署服务网格解决方案。 这通常意味着使用特定于服务网格解决方案的非标准资源类型。\n有没有一种方法可以在不使用额外组件并使用标准资源的情况下实现此结果？\n\nGAMMA 计划是网关 API 子项目中的一个专用工作流。 \nGAMMA 代表用于网格管理和管理的网关 API，其目标是定义如何使用网关 API 来配置服务网格，目的是对网关 API 进行最小程度的更改，并始终保留网关 API 面向角色的性质。\n\n在 Gateway API v1.0 中，GAMMA 支持通过将 HTTPRoute 绑定到服务作为父级来向服务添加额外的 HTTP 路由（与将 HTTPRoute 绑定到网关作为父级的北/南网关 API 用法相反）。 \nGAMMA 为集群内的第 7 层流量管理功能提供标准 API。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/8ed46358658e4f100eb8bab4abe9737f.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/c4b6397481df502737f8a9cce2acd3c7.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/0b4a08ff8908bc47f1b0cc5746f60a2b.png)\n\n\n在 Cilium 1.16 中，HTTPRoutes 必须与它们绑定到的 Service 位于同一命名空间中。\n\n### GRPCRoute\nGRPCRoute 资源允许您匹配主机、标头、服务和方法字段上的 gRPC 流量，并将其转发到不同的 Kubernetes 服务。","lastmodified":"2025-03-26T03:48:44.125315208Z","tags":null},"/Go-%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB":{"title":"","content":"\n\n1. init函数先于main函数运行\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1618501021196-a3f4a8b6-7629-47c5-a214-8b6c883b953a.png#align=left\u0026display=inline\u0026height=178\u0026originHeight=178\u0026originWidth=595\u0026size=15888\u0026status=done\u0026style=none\u0026width=595)\n\n2. 编译器检测`Client`是否实现了`io.Closer` `interface`所定义的函数\n```go\nvar _ io.Closer = (*Client)(nil)\n```\n\n\n3. go处理超时：使用 `time.After()` 结合 `select+chan` 完成。\n```go\n// called 管道用于超时处理，send管道用于阻塞等待sendResponse\nfunc (server *Server) handleRequest(cc codec.Codec, req *request, sending *sync.Mutex, wg *sync.WaitGroup, timeout time.Duration) {\n\tdefer wg.Done()\n\tcalled := make(chan struct{})\n\tsent := make(chan struct{})\n\tgo func() {\n\t\terr := req.svc.call(req.mtype, req.argv, req.replyv)\n\t\tcalled \u003c- struct{}{}\n\t\tif err != nil {\n\t\t\treq.h.Error = err.Error()\n\t\t\tserver.sendResponse(cc, req.h, invalidRequest, sending)\n\t\t\tsent \u003c- struct{}{}\n\t\t\treturn\n\t\t}\n\t\tserver.sendResponse(cc, req.h, req.replyv.Interface(), sending)\n\t\tsent \u003c- struct{}{}\n\t}()\n\n\tif timeout == 0 {\n\t\t\u003c-called\n\t\t\u003c-sent\n\t\treturn\n\t}\n\tselect {\n\tcase \u003c-time.After(timeout):\n\t\treq.h.Error = fmt.Sprintf(\"rpc server: request handle timeout: expect within %s\", timeout)\n\t\tserver.sendResponse(cc, req.h, invalidRequest, sending)\n\tcase \u003c-called:\n\t\t\u003c-sent\n\t}\n}\n```\n\n\n[https://developer.aliyun.com/article/741265](https://developer.aliyun.com/article/741265)\n[https://geektutu.com/post/qa-golang-1.html](https://geektutu.com/post/qa-golang-1.html)\n[https://studygolang.com/articles/10065](https://studygolang.com/articles/10065)\n[https://studygolang.com/articles/17796?spm=a2c6h.12873639.0.0.62536786vdhF9T](https://studygolang.com/articles/17796?spm=a2c6h.12873639.0.0.62536786vdhF9T)\n[https://blog.csdn.net/weixin_45727359/article/details/109192924](https://blog.csdn.net/weixin_45727359/article/details/109192924)\n[https://blog.csdn.net/weixin_34128839/article/details/94488565](https://blog.csdn.net/weixin_34128839/article/details/94488565)\n[https://blog.csdn.net/itcastcpp/article/details/80462619](https://blog.csdn.net/itcastcpp/article/details/80462619)\n[https://blog.csdn.net/sinat_35406909/article/details/103818364](https://blog.csdn.net/sinat_35406909/article/details/103818364)\n[https://learnku.com/articles/56078](https://learnku.com/articles/56078)\n\n[https://www.cnblogs.com/qf-dd/p/10684912.html](https://www.cnblogs.com/qf-dd/p/10684912.html)\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/GoAccess-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97":{"title":"","content":"下载安装：[https://goaccess.io/download](https://goaccess.io/download)\n快速开始：[https://goaccess.io/get-started](https://goaccess.io/get-started)\n\n在上游服务的nginx中添加 :\n```bash\n        access_log  logs/renyunkang-test.access.log  main;\n        location /report.html {\n            alias /usr/local/openresty/nginx/html/report.html;\n        }\n```\n\n`goaccess /usr/local/openresty/nginx/logs/renyunkang-test.access.log -o /usr/local/openresty/nginx/html/report.html --real-time --time-format='%H:%M:%S' --date-format='%d/%b/%Y' --log-format=COMBINED`\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641350945076-e4ea84e8-ab16-47d7-98f2-600361f87f00.png#clientId=ub3acafe1-4abc-4\u0026from=paste\u0026height=520\u0026id=u4c4ea85f\u0026originHeight=1040\u0026originWidth=1910\u0026originalType=binary\u0026ratio=1\u0026size=195917\u0026status=done\u0026style=none\u0026taskId=udb01649e-9cdd-4a40-99de-a2ffb61f1e1\u0026width=955)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/H3C-0519x64":{"title":"H3C 0519x64","content":"\n文档链接：\n- [H3C VSR系列虚拟路由器 配置指导-E0518-5W101_三层技术-IP路由配置指导_BGP配置-新华三集团-H3C](http://www.h3c.com/cn/d_201808/1103805_30005_0.htm)\n\n## 1. 连外网\n1.  连接公网ip\n2.  配置基础网络网卡ip\n```\ninterface ge3/0\nip address 10.51.102.150 255.255.255.0\n# 10.51.102.150 为基础网络分配的 ip， 10.51.102.1 为基础网络网关\n```\n3.  添加**静态路由**  `ip route-static 0.0.0.0 0 10.51.102.1`\n4.  ping外网\n\n\u003e*删除某一条路由 undo ip route-static 172.22.1.2 32 192.168.1.102*\n\n## 2. ssh 连接\n配置用户(admin/admin)登录\n```\nssh server enable\nssh user admin service-type all authentication-type password\n \nline vty 0 10\n  line class vty\n  authentication-mode scheme\n \nlocal-user admin class manage\n  password\n  # 输入两次密码\n  service-type ssh\n  authorization-attribute user-role network-admin\n```\n\n## 3. 组网\n\n### 节点接入路由器\n- 创建 vlan10 + 配置网关\n```\nvlan 10\ninterface Vlan-interface 10\nip address 192.168.0.1 255.255.255.0\n```\n- 配置二层 (二选一)\n```\n# 配置 access口\ninterface ge3/0\nport link-mode bridge\nport access vlan 10\n\n# 配置 trunk口\n# interface ge3/0\n# port link-mode bridge\n# port link-type trunk\n# port trunk permit vlan all\n# port trunk pvid vlan 10\n```\n- 开启 dhcp\n```\ndhcp enable\ndhcp server ip-pool 10\n# 通过设置网关来dhcp\ngateway-list 192.168.0.1\n\n# 通过设置网段来分配ip\n#network 192.168.0.0 24\n```\n\n- nat 转换\n```\nnat alg dns\nacl basic 2000\nrule permit source 192.168.0.0 0.0.0.255\n\nnat address-group 0\naddress 10.160.24.31 10.160.24.31\n\ninterface ge1/0\nnat outbound 2000 address-group 0\n```\n\n### 建立 bgp 连接\n- 设置 ip\n```\ninterface ge2/0\nip address 169.254.1.250 255.255.255.252\n\ninterface LoopBack 0\nip address 10.10.10.10 255.255.255.0\n```\n\n- 配置 bgp\n```\nbgp 100000\n router-id 10.10.10.10\n peer 169.254.1.249 as-number 200000\n address-family ipv4 unicast\n  import-route direct\n  peer 169.254.1.249 enable\n  peer 169.254.1.249 default-route-advertise\n```\n\n- 显示 peer、路由\n```\nshow bgp peer ipv4\ndisplay ip routing-table protocol direct\nshow bgp routing-table ipv4 peer 169.254.1.249 advertised-routes\nshow bgp routing-table ipv4 peer 169.254.1.249 received-routes\n```\n\n### 其他配置\n- 设置 mac-ip 静态绑定\n```\ndhcp server ip-pool 10\nstatic-bind ip-address 192.168.1.102 24 hardware-address 5254-65d4-3c09\n```\n- 设置 nat 转换\n```\ninterface ge3/0\nnat server protocol tcp global 10.170.34.23 22 inside 192.168.3.1 22\n```\n\n- 开启 telnet\n```\ntelnet server enable\nline vty 0\nauthentication-mode scheme\n\nlocal-user admin\npassword simple password\nservice-type telnet\nauthorization-attribute user-role network-admin\n```\n\n公有云交换机：\n1.  VSR1000_HPE-CMW710-E0519L03-X64：堆叠之后无法查看 interface 状态\n2.  VSR1000_H3C-CMW710-R0618P05-X64：没有二层模式 - 无法配置vlan-interface / bridge 模式","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/Hive-%E5%92%8C-cell":{"title":"Hive 和 cell","content":"\n\nCilium 使用依赖注入（通过 pkg/hive）来连接其组件的初始化、启动和停止。 依赖注入 (DI) 是一种将对象的使用与其创建和初始化分开的技术。本质上，依赖注入是关于自动化依赖关系的手动管理。对象构造函数只需将其依赖项声明为函数参数，其余部分由库处理。这有助于构建松散耦合的模块化架构，因为它消除了集中初始化和配置的需要。它还减少了使用全局变量而不是显式传递对象的倾向，这通常是错误的根源（由于意外的初始化顺序）并且在测试中难以处理（因为需要为下一个测试恢复状态）。通过依赖注入，组件被描述为纯值（我们的 DI 风格中的 Cell），从而实现组件间依赖关系的可视化并开放内部架构以供检查。 \n\n这里描述的依赖注入和机制只是帮助我们实现真正目标的工具：一个模块化的软件架构，可以由一大群开发人员轻松理解、扩展、重新调整用途、测试和重构，并且模块之间的重叠最小化。为了实现这一目标，我们在设计架构和 API 时还需要考虑模块化。\n\n\n蜂巢和细胞\n\nCilium 应用程序是使用运行时依赖注入从一组称为单元的模块化组件组成的，这些组件组合在一起形成一个蜂巢（如蜂巢）。然后可以为配置单元提供配置并执行。\n\n\n创建一个 pod，cilium agent 有以下 subsys 协作\n- endpoint-manager - “regenerating all endpoints\" reason=\"one or more identities created or deleted\"\n- daemon - 处理创建 endpoint 请求\n- endpoint\n- allocator\n- crd-allocator\n\n\n\n```\n\n```\n\nendpointmanager\n","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPAM-ciliumendpoints":{"title":"IPAM - Ciliumendpoints","content":"CiliumEndpoint 对象由 cilium-agent 为集群中的每个 Pod 创建。","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPAM-ciliumendpointslice":{"title":"IPAM - ciliumendpointslice","content":"CiliumEndpoint 的扩展。支持对集群中的 CiliumEndpoint (CEP) 对象进行批处理，以实现更好的可扩展性。\n\n启用后，Cilium operator 会监视 CEP 对象并将其分组/批量精简版本放入 CES 对象中。 Cilium agent 在此模式下监视 CES 对象以了解远程端点。在这种情况下，应减少由于远程端点信息传播而导致的 API 服务器压力，从而实现更好的可扩展性，但代价是在整个集群中识别新端点的身份之前可能会出现更长的延迟。","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPAM-ciliumnodeconfigs":{"title":"IPAM - ciliumnodeconfigs","content":"\n\nCiliumNodeConfig 对象允许覆盖 ConfigMap / Agent 参数。\n\n它由一组字段和一个 labelSelector 组成。labelSelector 定义配置适用于哪些节点。空的 LabelSelector 会选择所有节点。\n\n创建或修改 CiliumNodeConfig 不会导致更改生效，需要删除 Pod 并重新创建。","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPAM-ciliumnodes":{"title":"ciliumnodes","content":"\nhttps://github.com/cilium/cilium/blob/186b84ec5ce362e6acf762ae5c907812a84f31f0/pkg/k8s/apis/cilium.io/v2/types.go#L313\n[AWS ENI — Cilium 1.15.7 documentation](https://docs.cilium.io/en/stable/network/concepts/ipam/eni/)\n\n```go\n// +genclient\n// +genclient:nonNamespaced\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n// +kubebuilder:resource:categories={cilium},singular=\"ciliumnode\",path=\"ciliumnodes\",scope=\"Cluster\",shortName={cn,ciliumn}\n// +kubebuilder:printcolumn:JSONPath=\".spec.addresses[?(@.type==\\\"CiliumInternalIP\\\")].ip\",description=\"Cilium internal IP for this node\",name=\"CiliumInternalIP\",type=string\n// +kubebuilder:printcolumn:JSONPath=\".spec.addresses[?(@.type==\\\"InternalIP\\\")].ip\",description=\"IP of the node\",name=\"InternalIP\",type=string\n// +kubebuilder:printcolumn:JSONPath=\".metadata.creationTimestamp\",description=\"Time duration since creation of Ciliumnode\",name=\"Age\",type=date\n// +kubebuilder:storageversion\n// +kubebuilder:subresource:status\n\n// CiliumNode represents a node managed by Cilium. It contains a specification\n// to control various node specific configuration aspects and a status section\n// to represent the status of the node.\ntype CiliumNode struct {\n\t// +deepequal-gen=false\n\tmetav1.TypeMeta `json:\",inline\"`\n\t// +deepequal-gen=false\n\tmetav1.ObjectMeta `json:\"metadata\"`\n\n\t// Spec defines the desired specification/configuration of the node.\n\tSpec NodeSpec `json:\"spec\"`\n\n\t// Status defines the realized specification/configuration and status\n\t// of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tStatus NodeStatus `json:\"status,omitempty\"`\n}\n\n// NodeAddress is a node address.\ntype NodeAddress struct {\n\t// Type is the type of the node address\n\tType addressing.AddressType `json:\"type,omitempty\"`\n\n\t// IP is an IP of a node\n\tIP string `json:\"ip,omitempty\"`\n}\n\n// NodeSpec is the configuration specific to a node.\ntype NodeSpec struct {\n\t// InstanceID is the identifier of the node. This is different from the\n\t// node name which is typically the FQDN of the node. The InstanceID\n\t// typically refers to the identifier used by the cloud provider or\n\t// some other means of identification.\n\tInstanceID string `json:\"instance-id,omitempty\"`\n\n\t// BootID is a unique node identifier generated on boot\n\t//\n\t// +kubebuilder:validation:Optional\n\tBootID string `json:\"bootid,omitempty\"`\n\n\t// Addresses is the list of all node addresses.\n\t//\n\t// +kubebuilder:validation:Optional\n\tAddresses []NodeAddress `json:\"addresses,omitempty\"`\n\n\t// HealthAddressing is the addressing information for health connectivity\n\t// checking.\n\t//\n\t// +kubebuilder:validation:Optional\n\tHealthAddressing HealthAddressingSpec `json:\"health,omitempty\"`\n\n\t// IngressAddressing is the addressing information for Ingress listener.\n\t//\n\t// +kubebuilder:validation:Optional\n\tIngressAddressing AddressPair `json:\"ingress,omitempty\"`\n\n\t// Encryption is the encryption configuration of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tEncryption EncryptionSpec `json:\"encryption,omitempty\"`\n\n\t// ENI is the AWS ENI specific configuration.\n\t//\n\t// +kubebuilder:validation:Optional\n\tENI eniTypes.ENISpec `json:\"eni,omitempty\"`\n\n\t// Azure is the Azure IPAM specific configuration.\n\t//\n\t// +kubebuilder:validation:Optional\n\tAzure azureTypes.AzureSpec `json:\"azure,omitempty\"`\n\n\t// AlibabaCloud is the AlibabaCloud IPAM specific configuration.\n\t//\n\t// +kubebuilder:validation:Optional\n\tAlibabaCloud alibabaCloudTypes.Spec `json:\"alibaba-cloud,omitempty\"`\n\n\t// IPAM is the address management specification. This section can be\n\t// populated by a user or it can be automatically populated by an IPAM\n\t// operator.\n\t//\n\t// +kubebuilder:validation:Optional\n\tIPAM ipamTypes.IPAMSpec `json:\"ipam,omitempty\"`\n\n\t// NodeIdentity is the Cilium numeric identity allocated for the node, if any.\n\t//\n\t// +kubebuilder:validation:Optional\n\tNodeIdentity uint64 `json:\"nodeidentity,omitempty\"`\n}\n// HealthAddressingSpec is the addressing information required to do\n// connectivity health checking.\ntype HealthAddressingSpec struct {\n\t// IPv4 is the IPv4 address of the IPv4 health endpoint.\n\t//\n\t// +kubebuilder:validation:Optional\n\tIPv4 string `json:\"ipv4,omitempty\"`\n\n\t// IPv6 is the IPv6 address of the IPv4 health endpoint.\n\t//\n\t// +kubebuilder:validation:Optional\n\tIPv6 string `json:\"ipv6,omitempty\"`\n}\n\n// EncryptionSpec defines the encryption relevant configuration of a node.\ntype EncryptionSpec struct {\n\t// Key is the index to the key to use for encryption or 0 if encryption is\n\t// disabled.\n\t//\n\t// +kubebuilder:validation:Optional\n\tKey int `json:\"key,omitempty\"`\n}\n\n// NodeStatus is the status of a node.\ntype NodeStatus struct {\n\t// ENI is the AWS ENI specific status of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tENI eniTypes.ENIStatus `json:\"eni,omitempty\"`\n\n\t// Azure is the Azure specific status of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tAzure azureTypes.AzureStatus `json:\"azure,omitempty\"`\n\n\t// IPAM is the IPAM status of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tIPAM ipamTypes.IPAMStatus `json:\"ipam,omitempty\"`\n\n\t// AlibabaCloud is the AlibabaCloud specific status of the node.\n\t//\n\t// +kubebuilder:validation:Optional\n\tAlibabaCloud alibabaCloudTypes.ENIStatus `json:\"alibaba-cloud,omitempty\"`\n}\n```\n\n```yaml\nkubectl get cn node1 -o yaml\napiVersion: cilium.io/v2\nkind: CiliumNode\nmetadata:\n  creationTimestamp: \"2024-07-08T08:20:12Z\"\n  generation: 5\n  labels:\n    beta.kubernetes.io/arch: amd64\n    beta.kubernetes.io/os: linux\n    kubernetes.io/arch: amd64\n    kubernetes.io/hostname: node1\n    kubernetes.io/os: linux\n    node-role.kubernetes.io/control-plane: \"\"\n    node-role.kubernetes.io/master: \"\"\n    node-role.kubernetes.io/worker: \"\"\n    node.kubernetes.io/exclude-from-external-load-balancers: \"\"\n  name: node1\n  ownerReferences:\n  - apiVersion: v1\n    kind: Node\n    name: node1\n    uid: 795c09e3-1e38-4957-ae30-6ea978b816da\n  resourceVersion: \"1270\"\n  uid: ee93e005-cac4-4568-9a1a-66f9991df265\nspec:\n  addresses:\n  - ip: 172.30.30.2\n    type: InternalIP\n  - ip: 10.0.1.107\n    type: CiliumInternalIP\n  alibaba-cloud: {}\n  azure: {}\n  bootid: da27258e-c856-40a5-8c10-471830446198\n  encryption: {}\n  eni: {}\n  health:\n    ipv4: 10.0.1.227\n  ingress: {}\n  ipam:\n    podCIDRs:\n    - 10.0.1.0/24\n    pools: {}\nstatus:\n  alibaba-cloud: {}\n  azure: {}\n  eni: {}\n  ipam:\n    operator-status: {}\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/c489e7aed9aa41fe6590ec5112c9fa94.png)\n\nAWS ENI allocator 构建在 CRD 支持的分配器之上。当 Cilium 在该节点上首次启动时，每个节点都会创建一个与节点名称匹配的 ciliumnodes.cilium.io 自定义资源。它联系 EC2 元数据 API 以检索实例 ID、实例类型和 VPC 信息，然后使用此信息填充自定义资源。 ENI 分配参数作为代理配置选项提供，并且也会传递到自定义资源中。 \n\nCilium operator侦听新的 ciliumnodes.cilium.io 自定义资源并开始自动管理 IPAM 方面。\n\n它扫描 EC2 实例以查找具有关联 IP 的现有 ENI，并通过 spec.ipam.available 字段使它们可用。然后，它将持续监控 status.ipam.used 字段中已使用的 IP 地址，并自动创建 ENI 并根据需要分配更多 IP，确保始终有可用的 IP。 可以为每个节点单独控制用于分配的子网选择以及将安全组附加到新 ENI。这使得在各个节点上分发具有不同安全组的 Pod IP 成为可能。 \n\n\n版本变化 - 新增 ciliumNode\nhttps://github.com/cilium/cilium/commit/9b58ba6ca2d5d5e6c08bf613d7f3332b8741b162","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPAM-ciliumpodippool":{"title":"ciliumpodippool","content":"\n\n\n如何启用由 CiliumPodIPPool CRD 支持的多池 IPAM\n\nhttps://docs.cilium.io/en/stable/network/bgp-control-plane/#ciliumpodippool-announcements\nhttps://docs.cilium.io/en/stable/network/kubernetes/ipam-multi-pool/#validate-installation\nhttps://docs.cilium.io/en/stable/network/concepts/ipam/multi-pool/#ipam-crd-multi-pool\n\n\n\n","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/IPV6":{"title":"","content":"#ipv6 #calico \n\n参考文档：\n- [IPv4/IPv6 双协议栈 | Kubernetes](https://kubernetes.io/zh-cn/docs/concepts/services-networking/dual-stack/)\n- [Configure dual stack or IPv6 only | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/networking/ipam/ipv6)\n\n\n1. 配置 kubernetes\n-   kube-apiserver:\n    -   `--service-cluster-ip-range=\u003cIPv4 CIDR\u003e,\u003cIPv6 CIDR\u003e`\n-   kube-controller-manager:\n    -   `--cluster-cidr=\u003cIPv4 CIDR\u003e,\u003cIPv6 CIDR\u003e`\n    -   `--service-cluster-ip-range=\u003cIPv4 CIDR\u003e,\u003cIPv6 CIDR\u003e`\n    -   `--node-cidr-mask-size-ipv4|--node-cidr-mask-size-ipv6` 对于 IPv4 默认为 /24， 对于 IPv6 默认为 /64\n-   kube-proxy:\n    -   `--cluster-cidr=\u003cIPv4 CIDR\u003e,\u003cIPv6 CIDR\u003e`\n-   kubelet:\n    -   当没有 `--cloud-provider` 时，管理员可以通过 `--node-ip` 来传递逗号分隔的 IP 地址， 为该节点手动配置双栈 `.status.addresses`。 如果 Pod 以 HostNetwork 模式在该节点上运行，则 Pod 会用 `.status.podIPs` 字段来报告它的 IP 地址。 一个节点中的所有 `podIP` 都会匹配该节点的由 `.status.addresses` 字段定义的 IP 组。\n\n2. 配置 calico\n- 配置 cni - calico-config\n\tkubectl edit cm -n kube-system  calico-config\n```\n\"ipam\": {  \n\t\"type\": \"calico-ipam\",  \n\t\"assign_ipv4\": \"true\",  \n\t\"assign_ipv6\": \"true\"  \n}\n```\n\n- 配置 calico-node\n\n| Variable name     | Value      |\n| ----------------- | ---------- |\n| IP6               | autodetect |\n| FELIX_IPV6SUPPORT | true       |\nipv6 - ippool\n\n配置文件：\nkubectl edit cm -n kube-system  kube-proxy\n/var/lib/kube-proxy/config.conf\n\n\nvim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n\ncalico\necho \"net.ipv6.conf.all.forwarding=1\"  \u003e\u003e /etc/sysctl.conf \u0026\u0026 sysctl -p\nip -6 route add default via eth0\n\n\n[calico 开启IPv4和IPv6双栈 - KubeSphere - Confluence (yunify.com)](https://cwiki.yunify.com/pages/viewpage.action?pageId=145944896)\n\n\n---\n\n\n\n\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/Kind-Tools":{"title":"","content":"#kind #install\n\n\u003e 文档：[https://kind.sigs.k8s.io/docs/user/quick-start](https://kind.sigs.k8s.io/docs/user/quick-start)\n\n## 安装二进制\n``` shell\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n```\n\n## 命令\n```\nkind create cluster  --config cluster.yaml \nkind delete cluster --name cluster\nkind get clusters\nkind load docker-image calico/node:v3.23.2\n```\n\n## 使用 kind 安装特定版本的 k8s\n指定node的镜像版本来修改kubernetes的版本：[https://github.com/kubernetes-sigs/kind/releases](https://github.com/kubernetes-sigs/kind/releases)\n```yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  image: kindest/node:v1.16.4@sha256:b91a2c2317a000f3a783489dfb755064177dbc3a0b2f4147d50f04825d016f55\n- role: worker\n  image: kindest/node:v1.16.4@sha256:b91a2c2317a000f3a783489dfb755064177dbc3a0b2f4147d50f04825d016f55\n```\n\n## 配置端口映射到主机\n``` yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: udp # Optional, defaults to tcp\n```\n\n部署 ingress\n\n具体的配置：\n- [kind – Configuration (k8s.io)](https://kind.sigs.k8s.io/docs/user/configuration/#name-your-cluster)\n\n部署示例\n```\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n  extraPortMappings:\n  - containerPort: 30880\n    hostPort: 30880\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n  - containerPort: 30881\n    hostPort: 30881\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n- role: worker\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n  extraPortMappings:\n  - containerPort: 30000\n    hostPort: 30000\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n  - containerPort: 30001\n    hostPort: 30001\n    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"\n    protocol: tcp # Optional, defaults to tcp\n- role: worker\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\nnetworking:\n  disableDefaultCNI: true\n  podSubnet: 10.233.64.0/18\n```\n\n\n","lastmodified":"2025-03-26T03:48:43.130318715Z","tags":null},"/LBIPAM-CiliumL2AnnouncementPolicy":{"title":"LBIPAM -","content":"\nhttps://docs.cilium.io/en/stable/network/l2-announcements/#l2-announcements","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/LBIPAM-Ciliumloadbalancerippools":{"title":"LBIPAM - Ciliumloadbalancerippools","content":"\n支持 Loadbalancer 类型的 service，同时使用 CiliumL2Announcement 或者 bgp 进行宣告 service ip。\n\n\n\nhttps://docs.cilium.io/en/stable/network/lb-ipam/","lastmodified":"2025-03-26T03:48:44.126315205Z","tags":null},"/MasterNode":{"title":"","content":"## Master\nKubernetes里的Master指的是**集群控制节点**，在每个Kubernetes集群里都需要有一个Master来**负责整个集群的管理和控制**，基本上Kubernetes的**所有控制命令都发给它**，它负责具体的执行过程，我们后面执行的所有命令基本都是在Master上运行的。Master通常会占据一个独立的服务器。\n\n在Master上运行着以下关键进程：\n\n- **Kubernetes API Server（kube-apiserver）**：提供了HTTP Rest接口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作的唯一入口，也是集群控制的入口进程。\n- **Kubernetes Controller Manager（kube-controller-manager）**：Kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。\n- **Kubernetes Scheduler（kube-scheduler）**：负责资源调度（Pod调度）的进程，相当于公交公司的“调度室”。\n\n另外，在Master上通常还需要**部署etcd服**务，因为Kubernetes里的所有资源对象的数据都被保存在etcd中。\n## Node\nNode是Kubernetes集群中的工作负载节点，每个Node都会被Master分配一些工作负载（Docker容器），当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上。\n在每个Node上都运行着以下关键进程。\n\n- kubelet：负责Pod对应容器创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能。\n- kube-proxy：实现Kubernetes Service的通信与负载均衡机制的重要组件。\n- Docker Engine（docker）：Docker引擎，负责本机的容器创建和管理工作。\n\nNode可以在运行期间动态增加到Kubernetes集群中，在**默认情况下kubelet会向Master注册自己**，这也是Kubernetes推荐的Node管理方式。一旦Node被纳入集群管理范围，**kubelet进程就会定时向Master汇报自身信息**，例如操作系统、Docker版本、机器的CPU和内存情况，以及当前有哪些Pod在运行等，这样Master就可以**获知每个Node的资源使用情况，并实现高效均衡的资源调度策略**。而某个Node在超过指定时间不上报信息时，会被Master判定为“失联”，Node的状态被标记为不可用（Not Ready），随后Master会触发“工作负载大转移”的自动流程。\n`kubectl describe node node_name` 查看某个node的信息。\n","lastmodified":"2025-03-26T03:48:43.170318574Z","tags":null},"/NetworkPolicy-CiliumCIDRGroup":{"title":"CiliumCIDRGroup","content":"\nhttps://github.com/cilium/cilium/pull/24638\n\n\nCiliumCIDRGroup 是外部 CIDR 的列表（即选择集群外部对等点的 CIDR），可以作为 CiliumNetworkPolicies 中的单个实体引用。","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/NetworkPolicy-CiliumNetworkPolicies":{"title":"NetworkPolicy - CiliumNetworkPolicies","content":"\nCiliumNetworkPolicy 与标准 NetworkPolicy 非常相似。目的是提供 NetworkPolicy 尚不支持的功能。\n\nhttps://docs.cilium.io/en/stable/network/kubernetes/policy/#ciliumnetworkpolicy","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/Pod":{"title":"Pod","content":"Pod是Kubernetes最重要的基本概念，每个Pod都有一个特殊的被称为“根容器”的Pause容器。除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/e5be581237e75a31c99e461122098bbe.png)\n\n### pause 容器：\n\n- 引入业务无关并且不易死亡的Pause容器作为Pod的根容器，以它的状态代表整个容器组的状态。\n- Pod里的多个业务容器共享Pause容器的IP，共享Pause容器挂接的Volume，这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题。\n### Pod的网络：\nKubernetes为每个Pod都分配了唯一的IP地址，称之为Pod IP。\n\n- Pod内网络：一个Pod里的多个容器共享Pod IP地址。\n- Pod间网络：一个Pod里的容器与另外主机上的Pod容器能够直接通信。因为Kubernetes要求底层网络支持集群内任意两个Pod之间的TCP/IP直接通信，这通常采用**虚拟二层网络技术**来实现，例如Flannel、Open vSwitch等。\n### Pod类型\n静态Pod：并没被存放在Kubernetes的etcd存储里，而是被存放在某个具体的Node上的一个具体文件中，并且只在此Node上启动、运行。\n普通Pod：一旦被创建，就会被放入etcd中存储，随后会被Kubernetes Master调度到某个具体的Node上并进行绑定，随后该Pod被对应的Node上的kubelet进程实例化成一组相关的Docker容器并启动。在默认情况下，当Pod里的某个容器停止时，Kubernetes会自动检测到这个问题并且重新启动这个Pod（重启Pod里的所有容器），如果Pod所在的Node宕机，就会将这个Node上的所有Pod重新调度到其他节点上。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/e7f0ee5436b2049850381b90b720b590.png)\n\n图Pod、容器与Node的关系\n### pod的资源定义\nKubernetes里的所有资源对象都可以采用YAML或者JSON格式的文件来定义或描述。\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mysql\n  labels: \n    name: myweb\nspec:\n  containers:\n  - name: myweb\n    image: kubeguide/tomcat-app:v1\n    ports:\n    - containerPort: 8080\n    env:\n    - name: MYSQL_SERVICE_HOST\n    value: 'mysql'\n    - name: MYSQL_SERVICE_PORT\n    value: '3306'\n```\n\u003e Kind为Pod表明这是一个Pod的定义，metadata里的name属性为Pod的名称，在metadata里还能定义资源对象的标签，这里声明myweb拥有一个name=myweb的标签。在Pod里所包含的容器组的定义则在spec一节中声明，这里定义了一个名为myweb、对应镜像为kubeguide/tomcat-app:v1的容器，该容器注入了名为MYSQL_SERVICE_HOST='mysql'和MYSQL_SERVICE_PORT='3306'的环境变量（env关键字），并且在8080端口（containerPort）启动容器进程。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/89ec1e0fe61e407868d5f83731e9152e.png)\n\n图 pod以及周边对象\n### Pod endpoint\nPod的IP加上这里的容器端口（containerPort），组成了**Endpoint**，它**代表此Pod里的一个服务进程的对外通信地址。一个Pod也存在具有多个Endpoint的情况**，比如当我们把Tomcat定义为一个Pod时，可以对外暴露管理端口与服务端口这两个Endpoint。\n### Pod Volume\nPod Volume，可以用分布式文件系统GlusterFS实现后端存储功能；Pod Volume是被定义在Pod上，然后被各个容器挂载到自己的文件系统中的。\n### Pod Event\nEvent是一个事件的记录，记录了事件的最早产生时间、最后重现时间、重复次数、发起者、类型，以及导致此事件的原因等众多信息。Event通常会被关联到某个具体的资源对象上，是排查故障的重要参考信息，我们可以用kubectl describe pod xxxx来查看它的描述信息，以定位问题的成因。\n```yaml\n# kubectl describe pod mysql-667cdf86f7-n9qz\n...\nEvents:\n  Type     Reason   Age                       From     Message\n  ----     ------   ----                      ----     -------\n  Warning  BackOff  2m6s (x19577 over 5d22h)  kubelet  Back-off restarting failed container\n```\n### Pod 资源限额\n每个Pod都可以对其能使用的服务器上的计算资源设置限额，当前可以设置限额的计算资源有CPU与Memory两种，其中CPU的资源单位为CPU（Core）的数量，是一个绝对值而非相对值。在Kubernetes里通常以千分之一的CPU配额为最小单位，用m来表示。通常一个容器的CPU配额被定义为100～300m，即占用0.1～0.3个CPU。由于CPU配额是一个绝对值，所以无论在拥有一个Core的机器上，还是在拥有48个Core的机器上，100m这个配额所代表的CPU的使用量都是一样的。与CPU配额类似，Memory配额也是一个绝对值，它的单位是内存字节数。\n在Kubernetes里，一个计算资源进行配额限定时需要设定以下两个参数。\n\n- Requests：该资源的最小申请量，系统必须满足要求。\n- Limits：该资源最大允许使用的量，不能被突破，当容器试图使用超过这个量的资源时，可能会被Kubernetes“杀掉”并重启。\n\n通常，我们会把Requests设置为一个较小的数值，符合容器平时的工作负载情况下的资源需求，而把Limit设置为峰值负载情况下资源占用的最大量。下面这段定义表明MySQL容器申请最少0.25个CPU及64MiB内存，在运行过程中MySQL容器所能使用的资源配额为0.5个CPU及128MiB内存：\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/e74e3d0eb9f2cf6d3ebfb2edc8f4a1e4.png)\n\n\n","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/Prometheus-Blockbox-Exporter":{"title":"Prometheus Blockbox Exporter","content":"\nBlackbox Exporter 是 Prometheus 社区提供的 官方黑盒监控解决方案,其允许用户通过: `http\\HTTPS\\DNS\\TCP\\ICMP\\gRPC`的方式对网络进行探测.\n\n安装部署\n\ndocker 安装\n```\ndocker run --rm   -p 9115:9115   --name blackbox_exporter   -v $(pwd):/config   quay.io/prometheus/blackbox-exporter:latest --config.file=/config/blackbox.yml\n```\n\n\n### 配置文件\n```yaml\nmodules:\n  http_2xx:\n    prober: http\n  http_post_2xx:\n    prober: http\n    http:\n      method: POST\n  tcp_connect:\n    prober: tcp\n  pop3s_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - expect: \"^+OK\"\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n  grpc:\n    prober: grpc\n    grpc:\n      tls: true\n      preferred_ip_protocol: \"ip4\"\n  grpc_plain:\n    prober: grpc\n    grpc:\n      tls: false\n      service: \"service1\"\n  ssh_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - expect: \"^SSH-2.0-\"\n      - send: \"SSH-2.0-blackbox-ssh-check\"\n  irc_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - send: \"NICK prober\"\n      - send: \"USER prober prober prober :prober\"\n      - expect: \"PING :([^ ]+)\"\n        send: \"PONG ${1}\"\n      - expect: \"^:[^ ]+ 001\"\n  icmp:\n    prober: icmp\n  icmp_ttl5:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      ttl: 5\n```\n\n### Prometheus 监控\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring-system\n  labels:\n    app:  monitoring\n    role: monitoring\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: blackbox-exporter\nrules:\n- apiGroups:\n  - authentication.k8s.io\n  resources:\n  - tokenreviews\n  verbs:\n  - create\n- apiGroups:\n  - authorization.k8s.io\n  resources:\n  - subjectaccessreviews\n  verbs:\n  - create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter\n  namespace: monitoring-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: blackbox-exporter\nsubjects:\n- kind: ServiceAccount\n  name: blackbox-exporter\n  namespace: monitoring-system\n---\napiVersion: v1\ndata:\n  config.yml: |-\n    \"modules\":\n      \"http_2xx\":\n        \"http\":\n          \"preferred_ip_protocol\": \"ip4\"\n        \"prober\": \"http\"\n      \"http_post_2xx\":\n        \"http\":\n          \"method\": \"POST\"\n          \"preferred_ip_protocol\": \"ip4\"\n        \"prober\": \"http\"\n      \"irc_banner\":\n        \"prober\": \"tcp\"\n        \"tcp\":\n          \"preferred_ip_protocol\": \"ip4\"\n          \"query_response\":\n          - \"send\": \"NICK prober\"\n          - \"send\": \"USER prober prober prober :prober\"\n          - \"expect\": \"PING :([^ ]+)\"\n            \"send\": \"PONG ${1}\"\n          - \"expect\": \"^:[^ ]+ 001\"\n      \"pop3s_banner\":\n        \"prober\": \"tcp\"\n        \"tcp\":\n          \"preferred_ip_protocol\": \"ip4\"\n          \"query_response\":\n          - \"expect\": \"^+OK\"\n          \"tls\": true\n          \"tls_config\":\n            \"insecure_skip_verify\": false\n      \"ssh_banner\":\n        \"prober\": \"tcp\"\n        \"tcp\":\n          \"preferred_ip_protocol\": \"ip4\"\n          \"query_response\":\n          - \"expect\": \"^SSH-2.0-\"\n      \"tcp_connect\":\n        \"prober\": \"tcp\"\n        \"tcp\":\n          \"preferred_ip_protocol\": \"ip4\"\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter-configuration\n  namespace: monitoring-system\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter\n  namespace: monitoring-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: exporter\n      app.kubernetes.io/name: blackbox-exporter\n      app.kubernetes.io/part-of: kube-prometheus\n  template:\n    metadata:\n      annotations:\n        kubectl.kubernetes.io/default-container: blackbox-exporter\n      labels:\n        app.kubernetes.io/component: exporter\n        app.kubernetes.io/name: blackbox-exporter\n        app.kubernetes.io/part-of: kube-prometheus\n        app.kubernetes.io/version: 0.22.0\n    spec:\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  app.kubernetes.io/component: exporter\n                  app.kubernetes.io/name: blackbox-exporter\n                  app.kubernetes.io/part-of: kube-prometheus\n              namespaces:\n              - monitoring-system\n              topologyKey: kubernetes.io/hostname\n            weight: 100\n      containers:\n      - args:\n        - --config.file=/etc/blackbox_exporter/config.yml\n        - --web.listen-address=:19115\n        image: quay.io/prometheus/blackbox-exporter:v0.22.0\n        name: blackbox-exporter\n        ports:\n        - containerPort: 19115\n          name: http\n        resources:\n          limits:\n            cpu: 20m\n            memory: 40Mi\n          requests:\n            cpu: 10m\n            memory: 20Mi\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 65534\n        volumeMounts:\n        - mountPath: /etc/blackbox_exporter/\n          name: config\n          readOnly: true\n      - args:\n        - --webhook-url=http://localhost:19115/-/reload\n        - --volume-dir=/etc/blackbox_exporter/\n        image: jimmidyson/configmap-reload:v0.5.0\n        name: module-configmap-reloader\n        resources:\n          limits:\n            cpu: 20m\n            memory: 40Mi\n          requests:\n            cpu: 10m\n            memory: 20Mi\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 65534\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: FallbackToLogsOnError\n        volumeMounts:\n        - mountPath: /etc/blackbox_exporter/\n          name: config\n          readOnly: true\n      - args:\n        - --logtostderr\n        - --secure-listen-address=:9115\n        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n        - --upstream=http://127.0.0.1:19115/\n        image: kubesphere/kube-rbac-proxy:v0.11.0\n        name: kube-rbac-proxy\n        ports:\n        - containerPort: 9115\n          name: https\n        resources:\n          limits:\n            cpu: 20m\n            memory: 40Mi\n          requests:\n            cpu: 10m\n            memory: 20Mi\n        securityContext:\n          runAsGroup: 65532\n          runAsNonRoot: true\n          runAsUser: 65532\n      nodeSelector:\n        kubernetes.io/os: linux\n      serviceAccountName: blackbox-exporter\n      volumes:\n      - configMap:\n          name: blackbox-exporter-configuration\n        name: config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter\n  namespace: monitoring-system\nspec:\n  ports:\n  - name: https\n    port: 9115\n    targetPort: https\n  - name: probe\n    port: 19115\n    targetPort: http\n  selector:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter\n  namespace: monitoring-system\n---\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    app.kubernetes.io/component: exporter\n    app.kubernetes.io/name: blackbox-exporter\n    app.kubernetes.io/part-of: kube-prometheus\n    app.kubernetes.io/vendor: kubesphere\n    app.kubernetes.io/version: 0.22.0\n  name: blackbox-exporter\n  namespace: monitoring-system\nspec:\n  endpoints:\n  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n    interval: 1m\n    path: /metrics\n    port: https\n    scheme: https\n    tlsConfig:\n      insecureSkipVerify: true\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: exporter\n      app.kubernetes.io/name: blackbox-exporter\n      app.kubernetes.io/part-of: kube-prometheus\n```\n\n### 安装 prometheus\n1. 配置\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring-system\ndata:\n  prometheus.yml: |-\n    scrape_configs:\n       - job_name: 'blackbox_http_2xx' # 配置get请求检测\n        scrape_interval: 30s\n\t    metrics_path: /probe\n\t    params:\n\t      module: [http_2xx]\n\t    static_configs:\n\t      - targets:         # 测试如下的请求是否可以访问的通\n\t        - 127.0.0.1:10005\n\t        - http://127.0.0.1:10005/hello/zhangsan\n\t    relabel_configs:\n\t      - source_labels: [__address__]\n\t        target_label: __param_target\n\t      - source_labels: [__param_target]\n\t        target_label: instance\n\t      - target_label: __address__\n\t        replacement: 127.0.0.1:9098 # blackbox-exporter 服务所在的机器和端口\n\t  - job_name: 'blackbox_http_post_2xx' # 配置post请求检测\n\t    scrape_interval: 30s\n\t    metrics_path: /probe\n\t    params:\n\t      module: [http_post_2xx]\n\t    static_configs:\n\t      - targets:              # 测试如下的post请求是否可以访问的通，该post请求不带参数\n\t        - 127.0.0.1:10005\n\t    relabel_configs:\n\t      - source_labels: [__address__]\n\t        target_label: __param_target\n\t      - source_labels: [__param_target]\n\t        target_label: instance\n\t      - target_label: __address__\n\t        replacement: 127.0.0.1:9098 # blackbox-exporter 服务所在的机器和端口\n\t  - job_name: 'blackbox_http_ping' # 检测是否可以ping通某些机器\n\t    scrape_interval: 30s\n\t    metrics_path: /probe\n\t    params:\n\t      module: [icmp]\n\t    static_configs:\n\t      - targets:\n\t        - 127.0.0.1\n\t    relabel_configs:\n\t      - source_labels: [__address__]\n\t        target_label: __param_target\n\t      - source_labels: [__param_target]\n\t        target_label: instance\n\t      - target_label: __address__\n\t        replacement: 127.0.0.1:9098 # blackbox-exporter 服务所在的机器和端口\n\t  - job_name: 'blackbox_tcp_connect' # 检测某些端口是否在线\n\t    scrape_interval: 30s\n\t    metrics_path: /probe\n\t    params:\n\t      module: [tcp_connect]\n\t    static_configs:\n\t      - targets:\n\t        - 127.0.0.1:10006\n\t        - 127.0.0.1:10005\n\t    relabel_configs:\n\t      - source_labels: [__address__]\n\t        target_label: __param_target\n\t      - source_labels: [__param_target]\n\t        target_label: instance\n\t      - target_label: __address__\n\t        replacement: 127.0.0.1:9098 # blackbox-exporter 服务所在的机器和端口\n```\n2. prometheus pod\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus-user\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - endpoints\n  - services\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus-user\nsubjects:\n- kind: ServiceAccount\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: monitoring-system\n  labels:\n    app: prometheus-pod\n    role: monitoring\nspec:\n  progressDeadlineSeconds: 600\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-pod\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: prometheus-pod\n    spec:\n      containers:\n      - image: prom/prometheus\n        name: prometheus-pod\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        resources: \n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/prometheus/prometheus.yml\n          subPath: prometheus.yml\n      volumes:\n      - name: config-volume\n        configMap:\n          name: prometheus-config\n      restartPolicy: Always\n      serviceAccountName: prometheus-user\n```\n3. prometheus svc\n```\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-dashboard-svc\n  namespace: monitoring-system\nspec:\n  selector:\n    app: prometheus-pod\n    role: monitoring\n  ports:\n  - nodePort: 31000\n    port: 9090\n    targetPort: 9090\n    protocol: TCP\n  type: NodePort\nEOF\n```\n\n---\n导入 grafana \n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-config\n  namespace: monitoring-system\ndata:\n  prometheus.yaml: |-\n    {\n        \"apiVersion\": 1,\n        \"datasources\": [\n            {\n               \"access\":\"proxy\",\n                \"editable\": true,\n                \"name\": \"block-exporter-prometheus\",\n                \"orgId\": 1,\n                \"type\": \"prometheus\",\n                \"url\": \"http://prometheus-dashboard-svc.monitoring-system.svc:9090\",\n                \"version\": 1\n            }\n        ]\n    }\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: grafana-pod\n  namespace: monitoring-system\n  labels:\n    app:  grafana-pod\n    role: monitoring\nspec:\n  containers:\n  - name: grafana-pod\n    image: grafana/grafana:latest\n    resources:\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    volumeMounts:\n    - name: grafana-config-volume\n      mountPath: /etc/grafana/provisioning/datasources\n    - name: grafana-dashboards-volume\n      mountPath: /etc/grafana/provisioning/dashboards\n    - name: grafana-storage-volume\n      mountPath: /var/lib/grafana\n    ports:\n    - containerPort: 3000\n  volumes:\n  - name: grafana-storage-volume\n    emptyDir: {}\n  - name: grafana-config-volume\n    configMap:\n      name: grafana-config\n  - name: grafana-dashboards-volume\n    configMap:\n      name: grafana-dashboards-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana-dashboard-svc\n  namespace: monitoring-system\nspec:\n  selector:\n    app:  grafana-pod\n    role: monitoring\n  ports:\n  - port: 3000\n    targetPort: 3000\n    protocol: TCP\n    nodePort: 32000\n  type: NodePort\n```\n\n\n","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/QA":{"title":"Q\u0026A","content":"\nwhat is gateway service?\n假设您正在使用 Kourier 作为 Knative 的网络层?\n修改配置使用节点的 ip 作为 external-ip 使用。 how to do?\n ","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/QA-%E6%8E%A2%E7%B4%A2":{"title":"Q\u0026A 探索","content":"\n### ipam + 数据流向\n如何配置 container network\noverlay - native route\nbgp - CiliumBGPPeeringPolicy\n\n### kube-proxy 替换\n\n1.13 版本\n\nhttps://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/6ebf34ed2527c02ee67f63e4b537a7fa.png)\n\n1.14 版本\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/c80d739e2652f079905653c52588f370.png)\n\n1.16 版本\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/1680e06085c60a779ac0cf249ea5fe48.png)\n\n1.13 文档\n\nCilium 的 kube-proxy 替换依赖于 socket-LB 功能，这需要 v4.19.57、v5.1.16、v5.2.0 或更高版本的 Linux 内核。\n\n\nCilium 的 eBPF kube-proxy 替代品在直接路由和隧道模式下均受支持。\n\nstrict：\n如果缺少底层 Linux 内核支持，Cilium 代理将会退出。\n\ndisabled\n默认设置，这仅启用 ClusterIP 服务的每个数据包在集群内的负载平衡。\n\n\nNodePort\n\nSNAT\n\n默认情况下，Cilium 的 eBPF NodePort 实现在 SNAT 模式下运行。不需要额外的 MTU 更改。代价是来自后端的回复需要额外的一跳回到该节点\n\nDSR\n\n- 后端直接回复外部客户端，而不需要额外的一跳，这意味着后端以服务IP/端口作为源进行回复。 **DSR 目前要求 Cilium 部署在本机路由中，即它无法在任何一种隧道模式下工作**。\n- 保留客户端的源 IP，因此可以在后端节点对其进行策略匹配。\n\n### XDP\n\ncilium 1.8 引入 XDP，用于LoadBalancer\u0026NodePort 加速。当 cilium 需要转发请求，且后端位于远端节点时，cilium 内置了对NodePort、LoadBlancer和ExternalIP服务加速的功能。XDP的eBPF程序直接在网卡上运行，而不是在更高层运行。\n\n### ingress api / gateway api\n\ningress crd 各个字段的含义\ngateway crd 各个字段的含义\n\n\n从 Kubernetes lngress Controllers 页面上这份并不完全的列表中，可以看到有许多Ingress API的实现。 https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/\n\nIngressAPI面临的挑战是，每个Ingress 的实现都各不相同。这使得更换 Ingress 非常困难：从一个Ingress 迁移到另一个。\n\n为了解决这个问题，IngressAPl正在被 GatewayAPI取代。GatewayAPI具有可移植性和相互兼容性，这意味着你可以轻松地从一种 Gateway API实现迁移到另一种。\n\n同样，Cilium 本身也支持 GatewayAPI,因此无需再安装其他工具来进行ingress路由。\n\n使用Gateway API的另一个优势是，它不仅仅支持Ingress API的 HTTP 路由，Gateway API支持多种7层路由功能，包括流量分割、URL重定向、路径重写、镜像、HTTP请求/响应操作、TLS终止和直通，以及其他只有在 Ingress 中通过自定义注释才能实现的功能。\n\n### 透明加密\n\nCilium的透明加密功能集提供了两个选项，用于加密不同节点上 pod 之间(甚至集群之间)的流量:IPsec和 WireGuard.\n\n### cilium-dbg\n\ncilium-dbg\n\nkubectl debug backend_pod -it --image=nicolaka/netshoot -- tcpdump\n\n### hubble-ui\n\n监控可视化流量\n\n### tetragon\n\n### 网络策略\n\nNetworkPolicy\nCiliumNetworkPolicy - l3/l4 - l7\n[Network Policy Editor for Kubernetes](https://editor.networkpolicy.io/)\n\n\n### Loadbalancer service \nLB-IPAM\n- arp\n- bgp\n\n\n### 出口网关\n\nEgress Gateway\n\n\n### CiliumClusterMesh\n\n### api 版本更新流程以及升级\n\n### Cilium Agent 组件分析\n\n```bash\nroot@node1:/home/cilium# cilium status --verbose\nModules Health:\nagent\n├── controlplane\n│   ├── bgp-cp\n│   │   └── job-diffstore-events                            [OK] Running (3d20h, x2)\n│   ├── auth\n│   │   ├── observer-job-auth gc-identity-events            [OK] OK (9.001µs) [24] (3d20h, x1)\n│   │   ├── observer-job-auth request-authentication        [OK] Primed (3d20h, x1)\n│   │   └── timer-job-auth gc-cleanup                       [OK] OK (22.728µs) (3d20h, x1)\n│   ├── daemon\n│   │   └── ep-bpf-prog-watchdog                            [OK] ep-bpf-prog-watchdog (3d20h, x11095)\n│   ├── node-manager\n│   │   ├── nodes-add                                       [OK] Node adds successful (3d20h, x2)\n│   │   └── background-sync                                 [OK] Node validation successful (3d20h, x5049)\n│   ├── l2-announcer\n│   │   └── leader-election                                 [OK]  (3d20h, x1)\n│   ├── stale-endpoint-cleanup                              [OK]  (3d20h, x1)\n│   ├── envoy-proxy\n│   │   └── timer-job-version-check                         [OK] OK (39.417359ms) (3d20h, x1)\n│   └── endpoint-manager\n│       ├── cilium-endpoint-1290 (default/netools-6576c75c89-bk8gc)\n│       │   ├── cep-k8s-sync                                [OK] sync-to-k8s-ciliumendpoint (1290) (2d22h, x25363)\n│       │   ├── datapath-regenerate                         [OK] Endpoint regeneration successful (2d22h, x13)\n│       │   └── policymap-sync                              [OK] sync-policymap-1290 (2d22h, x282)\n│       ├── endpoint-gc                                     [OK] endpoint-gc (3d20h, x1110)\n│       ├── cilium-endpoint-3350 \n│       │   ├── datapath-regenerate                         [OK] Endpoint regeneration successful (3d20h, x20)\n│       │   └── policymap-sync                              [OK] sync-policymap-3350 (3d20h, x370)\n│       └── cilium-endpoint-746 \n│           ├── policymap-sync                              [OK] sync-policymap-746 (3d20h, x370)\n│           └── datapath-regenerate                         [OK] Endpoint regeneration successful (3d20h, x20)\n└── datapath\n    ├── l2-responder\n    │   └── job-l2-responder-reconciler                     [OK] Running (3d20h, x1)\n    ├── node-address\n    │   └── job-node-address-update                         [OK] 10.0.1.107 (cilium_host), fe80::80d:71ff:fed5:2937 (cilium_host) (3d20h, x1)\n    └── agent-liveness-updater\n        └── timer-job-agent-liveness-updater                [OK] OK (46.262µs) (3d20h, x1)\n```\n\n\n```bash\nroot@node2:/home/cilium# cilium status --verbose\nKVStore:                Ok   Disabled\nKubernetes:             Ok   1.23 (v1.23.15) [linux/amd64]\nKubernetes APIs:        [\"EndpointSliceOrEndpoint\", \"cilium/v2::CiliumClusterwideNetworkPolicy\", \"cilium/v2::CiliumEndpoint\", \"cilium/v2::CiliumNetworkPolicy\", \"cilium/v2::CiliumNode\", \"cilium/v2alpha1::CiliumCIDRGroup\", \"core/v1::Namespace\", \"core/v1::Pods\", \"core/v1::Service\", \"networking.k8s.io/v1::NetworkPolicy\"]\nKubeProxyReplacement:   True   [eth0   172.30.30.3 fe80::5054:22ff:fe5c:1f (Direct Routing)]\nHost firewall:          Disabled\nSRv6:                   Disabled\nCNI Chaining:           none\nCNI Config file:        successfully wrote CNI configuration file to /host/etc/cni/net.d/05-cilium.conflist\nCilium:                 Ok   1.15.6 (v1.15.6-a09e05e6)\nNodeMonitor:            Listening for events on 2 CPUs with 64x4096 of shared memory\nCilium health daemon:   Ok   \nIPAM:                   IPv4: 2/254 allocated from 10.0.0.0/24, \nAllocated addresses:\n  10.0.0.137 (health)\n  10.0.0.64 (router)\nIPv4 BIG TCP:           Disabled\nIPv6 BIG TCP:           Disabled\nBandwidthManager:       Disabled\nHost Routing:           BPF\nMasquerading:           BPF   [eth0]   10.0.0.0/24 [IPv4: Enabled, IPv6: Disabled]\nClock Source for BPF:   ktime\nController Status:      20/20 healthy\n  Name                                  Last success   Last error   Count   Message\n  cilium-health-ep                      33s ago        never        0       no error   \n  dns-garbage-collector-job             39s ago        never        0       no error   \n  endpoint-1483-regeneration-recovery   never          never        0       no error   \n  endpoint-2652-regeneration-recovery   never          never        0       no error   \n  endpoint-gc                           39s ago        never        0       no error   \n  ep-bpf-prog-watchdog                  4s ago         never        0       no error   \n  fqdn-selector-checkpointing           10m39s ago     never        0       no error   \n  ipcache-inject-labels                 34s ago        10m39s ago   0       no error   \n  k8s-heartbeat                         9s ago         never        0       no error   \n  link-cache                            4s ago         never        0       no error   \n  neighbor-table-refresh                4s ago         never        0       no error   \n  resolve-identity-1483                 33s ago        never        0       no error   \n  resolve-identity-2652                 34s ago        never        0       no error   \n  sync-host-ips                         34s ago        never        0       no error   \n  sync-lb-maps-with-k8s-services        10m34s ago     never        0       no error   \n  sync-policymap-1483                   10m28s ago     never        0       no error   \n  sync-policymap-2652                   10m29s ago     never        0       no error   \n  sync-utime                            34s ago        never        0       no error   \n  template-dir-watcher                  never          never        0       no error   \n  write-cni-file                        10m39s ago     never        0       no error   \nProxy Status:            OK, ip 10.0.0.64, 0 redirects active on ports 10000-20000, Envoy: embedded\nGlobal Identity Range:   min 256, max 65535\nHubble:                  Ok   Current/Max Flows: 1092/4095 (26.67%), Flows/s: 1.72   Metrics: Disabled\nKubeProxyReplacement Details:\n  Status:                 True\n  Socket LB:              Enabled\n  Socket LB Tracing:      Enabled\n  Socket LB Coverage:     Full\n  Devices:                eth0   172.30.30.3 fe80::5054:22ff:fe5c:1f (Direct Routing)\n  Mode:                   SNAT\n  Backend Selection:      Random\n  Session Affinity:       Enabled\n  Graceful Termination:   Enabled\n  NAT46/64 Support:       Disabled\n  XDP Acceleration:       Disabled\n  Services:\n  - ClusterIP:      Enabled\n  - NodePort:       Enabled (Range: 30000-32767) \n  - LoadBalancer:   Enabled \n  - externalIPs:    Enabled \n  - HostPort:       Enabled\nBPF Maps:   dynamic sizing: on (ratio: 0.002500)\n  Name                          Size\n  Auth                          524288\n  Non-TCP connection tracking   65536\n  TCP connection tracking       131072\n  Endpoint policy               65535\n  IP cache                      512000\n  IPv4 masquerading agent       16384\n  IPv6 masquerading agent       16384\n  IPv4 fragmentation            8192\n  IPv4 service                  65536\n  IPv6 service                  65536\n  IPv4 service backend          65536\n  IPv6 service backend          65536\n  IPv4 service reverse NAT      65536\n  IPv6 service reverse NAT      65536\n  Metrics                       1024\n  NAT                           131072\n  Neighbor table                131072\n  Global policy                 16384\n  Session affinity              65536\n  Sock reverse NAT              65536\n  Tunnel                        65536\nEncryption:                         Disabled        \nCluster health:                     2/2 reachable   (2024-07-08T08:34:36Z)\n  Name                              IP              Node        Endpoints\n  cluster-local/node2 (localhost)   172.30.30.3     reachable   reachable\n  cluster-local/node1               172.30.30.2     reachable   reachable\nModules Health:\nagent\n├── datapath\n│   ├── agent-liveness-updater\n│   │   └── timer-job-agent-liveness-updater                [OK] OK (41.272µs) (10m, x1)\n│   ├── l2-responder\n│   │   └── job-l2-responder-reconciler                     [OK] Running (10m, x1)\n│   └── node-address\n│       └── job-node-address-update                         [OK] 10.0.0.64 (cilium_host), fe80::64b8:10ff:fef4:6a1f (cilium_host) (10m, x1)\n└── controlplane\n    ├── bgp-cp\n    │   └── job-diffstore-events                            [OK] Running (10m, x2)\n    ├── envoy-proxy\n    │   └── timer-job-version-check                         [OK] OK (48.803109ms) (10m, x1)\n    ├── node-manager\n    │   ├── nodes-add                                       [OK] Node adds successful (10m, x2)\n    │   └── background-sync                                 [OK] Node validation successful (9m39s, x9)\n    ├── stale-endpoint-cleanup                              [OK]  (10m, x1)\n    ├── daemon\n    │   └── ep-bpf-prog-watchdog                            [OK] ep-bpf-prog-watchdog (10m, x22)\n    ├── l2-announcer\n    │   └── leader-election                                 [OK]  (10m, x1)\n    ├── auth\n    │   ├── observer-job-auth request-authentication        [OK] Primed (10m, x1)\n    │   ├── observer-job-auth gc-identity-events            [OK] Primed (10m, x1)\n    │   └── timer-job-auth gc-cleanup                       [OK] OK (26.68µs) (10m, x1)\n    └── endpoint-manager\n        ├── endpoint-gc                                     [OK] endpoint-gc (10m, x3)\n        ├── cilium-endpoint-2652 \n        │   ├── datapath-regenerate                         [OK] Endpoint regeneration successful (10m, x1)\n        │   └── policymap-sync                              [OK] sync-policymap-2652 (10m, x1)\n        └── cilium-endpoint-1483 \n            ├── policymap-sync                              [OK] sync-policymap-1483 (10m, x1)\n            └── datapath-regenerate                         [OK] Endpoint regeneration successful (10m, x1)\n```\n\n### identity 身份\n\nendpoint-manager 中 endpoint regeneration 原理是什么\n\n什么情况下会触发 endpoint 的 regeneration， generation 的规则是啥\n\n\n### host routing\n\n在 Cilium 1.9 开发周期中，Cilium 团队对 eBPF 数据路径进行了多项性能优化，其中一个显著的改进是提升了通过 veth 设备对连接到主机命名空间的网络命名空间 Pods 的原始性能。这些优化对 `hostrouting` 的变化原因及其带来的好处可以从以下几个方面分析：\n\n#### 变化原因\n\n1. **历史限制**：\n    \n    - 之前，Cilium 在直连路由模式下，流入或流出 Pods 的流量需要通过主机命名空间的网络栈，以便路由层执行转发。\n    - 这是因为需要 `netfilter` 子系统对流出 Pods 的流量进行伪装（masquerade），而这种伪装需要连接跟踪器看到双向流量，避免因连接不对称可见性导致的流量丢失。\n2. **eBPF 的原生伪装功能**：\n    \n    - 由于 Cilium 数据路径的近期进展，Cilium 现在能够在 eBPF 代码中原生地执行伪装。\n    - 这一进步减少了对传统网络栈的依赖，使得流量无需再推送到主机栈进行处理。\n3. **eBPF 网络功能扩展**：\n    \n    - 在 1.9 开发过程中，Cilium 扩展了 v5.10 内核的 eBPF 网络功能，使得 Cilium 能够在 `tc eBPF` 层处理转发，而不是将数据包推送到主机栈。\n    - 新增的两个 eBPF 助手函数 `bpf_redirect_peer()` 和 `bpf_redirect_neigh()` 使得在主机命名空间内进行新的数据包处理成为可能。\n\n#### 变化带来的好处\n\n1. **提升单流吞吐量**：\n    \n    - 通过在 `tc eBPF` 层直接处理转发，减少了需要处理的数据包的网络栈层次，从而显著提升了单一流量的吞吐量。\n2. **降低延迟**：\n    \n    - 请求/响应类型工作负载的延迟显著降低，这是由于减少了上下文切换和调度点。\n    - `bpf_redirect_peer()` 使得从 NIC 到 Pod 的命名空间切换无需软件中断重新调度点，从而加快了应用程序唤醒以处理接收到的数据。\n    - 对于本地 Pod 间通信，重新调度点从 2 个减少到了 1 个，进一步降低了延迟。\n3. **改进 TCP 反馈机制**：\n    \n    - `bpf_redirect_neigh()` 通过注入流量到 Linux 内核的邻居子系统，找到下一跳并解析网络数据包的第 2 层地址。\n    - 在 `tc eBPF` 层执行转发而非推送到更高的网络栈，提供了更好的 TCP 堆栈背压和 TCP 小队列（TSQ）机制反馈，减少 TCP 包的过度排队。\n    - 由于数据包的套接字关联在传递到 NIC 驱动时保持不变，TCP 堆栈能够准确地收到数据包离开节点的反馈，而不是过早地在数据包被推送到主机栈时提供反馈。\n    - \nipvlan l2 模式\ncilium 集成 ipvlan l2 - host routing   bpf_redirect_peer()   bgp_redirect_neigh()\n内核在 5.10 以上\n\nhost routing 是什么\nipvlan l2 解决了什么问题，ipvlan 缺陷是什么 - 小包传输效率？\n\ncilium 1.9 的Release Notes 中提及，host routing 即是否经过\nhttps://cilium.io/blog/2020/11/10/cilium-19/#veth\n\nhttps://cilium.io/blog/2020/11/10/cilium-19/\n\nhttps://cilium.io/blog/2021/05/11/cni-benchmark/\n\n\ncilium monitor -vv\n\ncilium endpoint list\ncilium bpf endpoint list\n\ncilium vxlan vni 不同的原因\n```bash\nip  -d link show dev cilium_vxlan\n7: cilium_vxlan: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\n    link/ether 3a:04:39:63:e2:8e brd ff:ff:ff:ff:ff:ff promiscuity 0 minmtu 68 maxmtu 65535 \n    vxlan external id 0 srcport 0 0 dstport 8472 nolearning ttl auto ageing 300 udpcsum noudp6zerocsumtx noudp6zerocsumrx addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 \n```\n\n\n### 不是 cilium cni 可以使用 hubble 吗？\n\n[How to Use Cilium Hubble for Observability in CNI Chaining Mode (isovalent.com)](https://isovalent.com/blog/post/cilium-hubble-observability-cni-chaining-mode/)\n\n\nhubble 数据来源\n[eBPF 程序] -\u003e [Cilium Agent] -\u003e [Hubble Relay] -\u003e [Hubble UI]\n\n\n### event type\ncilium monitor 可以指定事件类型：\nagent capture debug drop l7 policy-verdict recorder trace trace-sock\n\n\n### Release Notes 解读\n\n\n1. swagg json 解析之后应用到server apiserver 的 handler\n\n\n### servicemesh 流量可见性和加密","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/RSS-RPS":{"title":"","content":"单队列没有问题，多队列有问题\nebpf \n\n网卡多队列\n多核 多CPU\nRSS RPS RFS\n\n由于这块内存区域是有限的，如果数据包的速率非常快，单个 CPU 来不及取走这些包，新来的包就会被丢弃。这时候，Receive Side Scaling（RSS，接收端扩展）或者多队列（multiqueue）一类的技术可能就会排上用场。\n\n可以把软中断系统想象成一系列**内核线程**（每个 CPU 一个），这些线程执行针对不同事件注册的处理函数（handler）。如果你执行过 `top` 命令，可能会注意到`ksoftirqd/0` 这个内核线程，其表示这个软中断线程跑在 CPU 0 上。\n\n\n##### NAPI\n硬件中断的优点是在普通场景下，CPU 能够得到合理利用，不会浪费在空跑（一直执行 poll 方法），缺点是在吞吐很高的场景 下，IRQ 所占的开销很高，这也是为什么在高吞吐场景下引入了 DPDK。\n中断方式针对高吞吐场景的改进是 NAPI 方式，简单来说它结合了轮询和中断两种方式。 绝大部分网卡都是这种模式\n\n自适应 RX/TX 硬中断合并带来的效果是：带宽比较低时降低延迟，带宽比较高时提升吞吐。\n\n多队列网卡(*多 NAPI 实例*)应该精心调整 IRQ Affinity 的原因，**防止 softirq 收包过程霸占过多 CPU**，\n-   **处理硬中断的 CPU 接下来会处理相应的软中断**\n-   多队列网卡可能会出现多个 NAPI 实例注册到同一个 CPU 的情况，而每个 CPU 上的所有 NAPI 共享一份预算。\n最终导致该 CPU 无法及时接收它负责的 RX 队列中的所有包。\n\n收包预算：（增加收包预算会增大cpu的使用量，但可以减少延迟）\n- budget 最多可以收包数量\n- time_limit 最长可以占用的CPU时间\n```\nsudo sysctl -a | grep netdev_budget\nnet.core.netdev_budget = 300            # 300 个包\nnet.core.netdev_budget_usecs = 2000     # 2ms\n```\n\n`softnet_data.time_squeeze` 字段记录的是满足如下条件的次数： **ring buffer 中还有包等待接收，但本次 softirq 的 budget 已经用完了**。 这对理解网络处理的瓶颈至关重要。\n\n##### RSS RPS RFS\nRSS：Receive Side Scaling   多队列分发  从网卡分到不同的队列中\nRPS：Receive Packet Steering   RSS 软件实现  从队列分到不同的 cpu 中\nRFS：Receive Flow Steering  相同的 flow 的 包送到同一个 cpu，可以提高缓存命中率。\nRPS 的工作原理：\n1.  对 packet 做 hash，以此决定分到哪个 CPU 处理；然后 packet 放到每个 CPU 独占的 backlog 队列；\n2.  从当前 CPU 向对端 CPU 发起一个**进程间中断**（IPI，Inter-processor Interrupt）。如果当时对端 CPU 没有在处理 backlog 队列收包，这个 IPI 会触发它开始从 backlog 收包。\n因为是软件实现的，意味着任何网卡都可以使用这个功能，即便是那些只有一个接收队列的网卡；\n-   但也正是因为是软件实现的，意味着 **只有在 packet 通过 DMA 进入内存后，RPS 才能开始工作**；\n-   这意味着，**RPS 并不会减少 CPU 处理硬件中断和 NAPI poll()（软中断最重要的一部分）的时间**， 但是可以在包到达内存后，将它们分到其他 CPU，从其他 CPU 进入协议栈。\n\nRPS和RFS一般要配合使用，效果才最优\n\n`softnet_data.received_rps` 记录了每个 CPU 收到了多少 IPI\n\n\n中断与RX 队列绑定?\n\n![upgit_20221207_1670398419.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670398419.png)\n\n![upgit_20221207_1670398441.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670398441.png)\n\n\n![upgit_20221207_1670398528.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670398528.png)\n![upgit_20221207_1670399586.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670399586.png)\n\n\n\n![upgit_20221207_1670398535.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670398535.png)\n\nNAPI \n![upgit_20221207_1670403559.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670403559.png)\n\n\n![upgit_20221207_1670407895.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221207_1670407895.png)\n\n发送先走7层网络协议层到网络设备时 先走 tc hook 之后走网络设备驱动 -\u003e 内核 -\u003e 发送\n```\n tc -s qdisc show dev eth1\nqdisc mq 0: root\n Sent 31973946891907 bytes 2298757402 pkt (dropped 0, overlimits 0 requeues 1776429)\n backlog 0b 0p requeues 1776429\n\n# 每个网络设备都有一个可以修改的 txqueuelen。\nifconfig eth0 txqueuelen 10000\n```\n\n\n---\n上下行不对称 - 多队列、ringbuff、绑核\nethtool -L eth0 combined 2\n/proc/sys/net/core/rps_sock_flow_entries = 32768\n\nrq count\n/sys/class/net/eth10/queues/rx-* -d | wc -l\n\n/sys/class/net/eth10/queues/rx-0/rps_cpus\n/sys/class/net/eth10/queues/rx-0/rps_flow_cnt\nnet.core.netdev_budget=600\n\n\n``` shell\nrq_count=`ls /sys/class/net/eth10/queues/rx-* -d | wc -l`  \nrps_flow_cnt_value=`expr 32768 / $rq_count`  \n\nfor ((i=0; i\u003c $rq_count; i++))  \ndo  \n  echo $rps_flow_cnt_value \u003e /sys/class/net/eth10/queues/rx-$i/rps_flow_cnt  \ndone  \n\nflag=0  \nwhile [ -f /sys/class/net/eth10/queues/rx-$flag/rps_cpus ]  \ndo  \n  echo `cat  /sys/class/net/eth10/queues/rx-$flag/rps_cpus | sed 's/0/f/g' ` \u003e  /sys/class/net/eth10/queues/rx-$flag/rps_cpus  \n  flag=$(($flag+1))  \ndone\necho 32768 \u003e /proc/sys/net/core/rps_sock_flow_entries  \nsysctl -p\n```\n\n```shell\necho 00000000,00000000,00000000 \u003e /sys/class/net/eth10/queues/rx-0/rps_cpus\necho 0 \u003e /sys/class/net/eth10/queues/rx-0/rps_flow_cnt\necho 0 \u003e /proc/sys/net/core/rps_sock_flow_entries\n\n\necho ffffffff,ffffffff,ffffffff \u003e /sys/devices/virtual/net/veth6/queues/rx-0/rps_cpus\necho 0 \u003e /sys/devices/virtual/net/veth6/queues/rx-0/rps_flow_cnt\necho 0 \u003e /proc/sys/net/core/rps_sock_flow_entries\n```\n\ncat /sys/class/net/bond0/bonding/xmit_hash_policy\nlayer3+4 1\n\n\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/SDN-%E7%BD%91%E7%BB%9C":{"title":"SDN 网络","content":"\n- ASW （接入层交换机）数据交换模块接入交换机，接入云服务器，上行互联核心交换机DSW。  \n- DSW （分布层交换机）：核心交换机，用于连接各个ASW接入交换机。  \n- CSW （内网接入交换机）：接入用户内网骨干，实现云网络内外部的路由分发交互，包括VPC专线接入。CSW可以实现专线侧到XGW的VxLAN封装。  \n- LSW （综合接入交换机）综合接入模块,云产品服务接入交换机，主要提供VPC和SLB等服务。各类云产品服务器（XGW/SLB/OPS）分别与两台LSW互联，通过OSPF交换路由信息；两台LSW之间通过iBGP交互路由信息；LSW与DSW、CSW之间通过eBGP交换路由信息。\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/08/c13b26d328caa4c5a4bd22da6d3d6634.png)\n\n\n[云计算网络 ASW DSW CSW LSW - zzzzy09 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zy09/p/11761758.html)","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/Security-CiliumIdentity":{"title":"Security - CiliumIdentity","content":"CRD 身份分配使用 Kubernetes 自定义资源 CiliumIdentity 来表示安全身份。\n\nSecurity identities是从标签生成的。值为 uint32 即 1 ~ 2^32 - 1，0 不是有效值。\n\nSecurity identities 用于以下用途：\n\n1. Cluster-local\n2. ClusterMesh\n3. CIDR-based policies\n4. remote nodes (optional)\n\n\n```bash\n0x00000001 - 0x000000FF (1           to 2^8  - 1       ) =\u003e reserved identities\n0x00000100 - 0x0000FFFF (2^8         to 2^16 - 1       ) =\u003e cluster-local identities\n0x00010000 - 0x00FFFFFF (2^16        to 2^24 - 1       ) =\u003e identities for remote clusters\n0x01000000 - 0x01FFFFFF (2^24        to 2^25 - 1       ) =\u003e identities for CIDRs (node-local)\n0x02000000 - 0x02FFFFFF (2^25        to 2^25 + 2^24 - 1) =\u003e identities for remote nodes (local)\n0x01010000 - 0xFFFFFFFF (2^25 + 2^24 to 2^32 - 1       ) =\u003e reserved for future use\n```\n\nhttps://docs.cilium.io/en/stable/internals/security-identities/","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/Service-NodePort":{"title":"Service NodePort","content":"\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/2baabcccce52f1979464cfba77826394.png)\n\n![企业微信截图_16938825388195.png](https://images.cherryfloris.eu.org/ryken/2023/09/76eb45b7dace62ca9f27519e2d0dbb72.png)\n\n![企业微信截图_16938825856112.png](https://images.cherryfloris.eu.org/ryken/2023/09/c14ffe5130f532a5a3c7735c1f64a410.png)\n\n\n|kubernetes version|state|\n|---|---|\n|v1.20|`alpha`|\n|v1.22|`beta`, the feature gate feature switch needs to be turned on at the same time|\n|v1.23|this feature gate is enabled by default|\n|v1.24|`stable`|\n\n","lastmodified":"2025-03-26T03:48:44.127315201Z","tags":null},"/Submariner":{"title":"Submariner","content":"\n[Submariner (rancher.cn)](https://www.rancher.cn/submariner/)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/e3e8dba07a43fb06585aee5deeb01571.png)\n\n安装：\n- subctl： `curl -Ls https://get.submariner.io | bash`\n\n自定义 crd 以及作用\n\n\n部署 broker\n\n\n加入集群\n\n\n\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B":{"title":"TCP三次握手和四次挥手","content":"\n### TCP三次握手和四次挥手\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/c8c2d38ad1c9409f4b7b5b6d25c34205.png)\n\n\n### 大量的 `TIME_WAIT` 状态 TCP 连接存在，其本质原因是什么？\n- 大量的**短连接**存在\n- 特别是 HTTP 请求中，如果 `connection` 头部取值被设置为 `close` 时，基本都由「**服务端**」发起**主动关闭连接**\n- 而，`TCP 四次挥手`关闭连接机制中，为了保证 `ACK 重发`和`丢弃延迟数据`，设置 `time_wait` 为 2 倍的 `MSL`（报文最大存活时间）\n\nTIME_WAIT 状态：\n- TCP 连接中，**主动关闭连接**的一方出现的状态；（收到 FIN 命令，进入 TIME_WAIT 状态，并返回 ACK 命令）\n- 保持 2 个 `MSL` 时间，即，`4 分钟`；（MSL 为 2 分钟）\n\n###  解决办法\n- 允许 `time_wait` 状态的 socket 被**重用**\n- 缩减 `time_wait` 时间，设置为 `1 MSL`（即，2 mins）\n\n通过调整内核参数解决  \n`vim /etc/sysctl.conf`\n\n编辑文件，加入以下内容：  \n```conf\nnet.ipv4.tcp_syncookies = 1  \nnet.ipv4.tcp_tw_reuse = 1  \nnet.ipv4.tcp_tw_recycle = 1  \nnet.ipv4.tcp_fin_timeout = 30  \n```\n- net.ipv4.tcp_syncookies = 1表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；  \n- net.ipv4.tcp_tw_reuse = 1表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；  \n- net.ipv4.tcp_tw_recycle = 1表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。  \n- net.ipv4.tcp_fin_timeout修改系統默认的TIMEOUT时间\n\n然后执行 `/sbin/sysctl -p` 让参数生效。  \n\n### MSL 时间\nMSL，Maximum Segment Lifetime，“报文最大生存时间”，任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。\n\nTips：\n\u003e RFC 793中规定MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟等。\n\n2MSL，TCP 的 `TIME_WAIT` 状态，也称为**2MSL等待状态**：\n\n1. 当TCP的一端发起主动关闭（收到 FIN 请求），在发出最后一个ACK 响应后，即第3次握 手完成后，发送了第四次握手的ACK包后，就进入了TIME_WAIT状态。\n2. 必须在此状态上停留两倍的MSL时间，等待2MSL时间主要目的是怕最后一个 ACK包对方没收到，那么对方在超时后将重发第三次握手的FIN包，主动关闭端接到重发的FIN包后，可以再发一个ACK应答包。\n3. 在 TIME_WAIT 状态时，两端的端口不能使用，要等到2MSL时间结束，才可继续使用。（IP 层）\n4. 当连接处于2MSL等待阶段时，任何迟到的报文段都将被丢弃。\n\n不过在实际应用中，可以通过设置 「**SO_REUSEADDR选项**」，达到不必等待2MSL时间结束，即可使用被占用的端口。\n\n\n参考链接：\n- [大量的 TIME_WAIT 状态连接怎么处理？](https://cloud.tencent.com/developer/article/1675933)","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/arp-proxy":{"title":"arp proxy","content":"\n```bash\nsudo bash -c 'echo 1 \u003e /proc/sys/net/ipv4/ip_forward'\ncat /proc/sys/net/ipv4/conf/eth1/proxy_arp\n\nsudo sysctl -p\n```\n\n\n添加默认路由\n- ip route add 192.168.0.1 dev 192.168.0.1\n- ip route add default via 192.168.0.1 dev eth0\n\n\n### arp 状态\n[链路层地址（ARP/Neighbor）相关信息 — blog.clanzx.net 0.1 文档](https://blog.clanzx.net/network/ip-neigh.html)\n- https://manpages.debian.org/arp(7)\n- incomplete 链路地址探测中 但还未完成\n- reachable 链路地址可达，该状态的维持时间参考 base_reachable_time/base_reachable_time_ms\n- stale 链路地址缓存失效，但不意味着不可达\n- delay 探测开始之间的延迟，参考 delay_first_probe_time\n- probe 链路地址探测中\n- failed 链路地址不可达\n- NOARP\n- permanent 静态 arp \n\n配置文件位置 /proc/sys/net/ipv4/neigh/  /proc/sys/net/ipv4/conf/\n\n### arp 相关的配置\n[Linux内核参数之arp_ignore和arp_announce - 五月的麦田 (360blogs.top)](https://www.360blogs.top/linux-arp_ignore-arp_announce/)\narp_ignore 和 arp_annotation 参数都和 arp 协议相关，控制系统返回 arp 响应和发送 arp 请求时的动作，这两个参数很重要，特别是在`LVS`的`DR`场景下，它们的配置直接影响到`DR`转发是否正常。 /proc/sys/net/ipv4/conf/ethxx/arp_ignore\n##### arp_ignore\n| 取值 | 含义                                                                                                                                                               |\n| ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0    | 响应任意网卡上接收到的对本机 ip 地址的 arp 请求（包括环回网卡上的地址），而不管该目的 ip 是否在接收网卡上                                                          |\n| 1    | 只响应目的 ip 地址为接收网卡上的本地地址的 arp 请求                                                                                                                |\n| 2    | 只响应目的 ip 地址为接收网卡上的本地地址的 arp 请求，且 arp 请求的源 ip 必须和接收网卡同网段                                                                       |\n| 3    | 如果 arp 请求数据包所请求的 ip 地址对应的本地地址其作用域(scope)为主机(host)，则不回应 arp 响应数据包，如果作用域是全局(global)或者链路(link)则回应 arp 响应数据包 |\n| 4~7  | 保留未使用                                                                                                                                                         |\n| 8    | 不回应所有 arp 请求                                                                                                                                                |\n华为欧拉遇到的一次问题记录：\narp_ignore 参数为2，导致arp 解析失败，网络不通 calico 路由时hostnetwork 访问容器ns 通过arp解析时，arp 的src ip是主机的nic ip 与容器 ip 不在同一个网络，导致 arp 被丢弃\n- net.ipv4.conf.all.arp_ignore=2  // 修改为1\n- net.ipv4.conf.default..arp_ignore=2  // 修改为1\n\n##### arp_announce\n`arp`请求的源IP是可以选择的，控制这个地址如何选择就是`arp_announce`的作用。/proc/sys/net/ipv4/conf/ethxx/arp_announce\n\n| 取值 | 含义                                                                                 |\n| ---- | ------------------------------------------------------------------------------------ |\n| 0    | 允许使用任意网卡的 ip 地址作为 arp 请求的源 ip，通常就是使用数据包的源 ip            |\n| 1    | 尽量避免使用不属于该发送网卡子网的本地地址作为发送 arp 请求的源 ip 地址              |\n| 2    | 忽略 ip 数据包的源 ip 地址，选择该发送网卡上最合适的本地地址作为 arp请求的源 IP 地址 |\n\n`sysctl.conf`中包含`all`和`eth/lo`（具体网卡）的`arp_ignore`参数，取其中较大的值生效。\n\n\n##### rp_filter\n[Linux内核参数 rp_filter - 简书 (jianshu.com)](https://www.jianshu.com/p/16d5c130670b)\nrp_filter （Reverse Path Filtering）参数定义了网卡对接收到的数据包进行反向路由验证的规则。他有三个值，0、1、2，具体含意如下：\n-   0：关闭反向路由校验\n-   1：开启严格的反向路由校验。对每个进来的数据包，校验其反向路由是否是最佳路由。如果反向路由不是最佳路由，则直接丢弃该数据包。\n-   2：开启松散的反向路由校验。对每个进来的数据包，校验其源地址是否可达，即反向路由是否能通（通过任意网口），如果反向路径不通，则直接丢弃该数据包。\n\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/bandwidth-%E5%B8%A6%E5%AE%BD%E9%99%90%E5%88%B6":{"title":"bandwidth 带宽限制","content":"\n### bandwidth 插件\n[CNI-bandwidth](https://www.cni.dev/plugins/current/meta/bandwidth/)\n\n```json\n{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"mynet\",\n  \"plugins\": [\n    {\n      \"type\": \"ptp\",\n      \"ipMasq\": true,\n      \"mtu\": 512,\n      \"ipam\": {\n          \"type\": \"host-local\",\n          \"subnet\": \"10.0.0.0/24\"\n      },\n      \"dns\": {\n        \"nameservers\": [ \"10.1.0.1\" ]\n      }\n    },\n    {\n      \"name\": \"slowdown\",\n      \"type\": \"bandwidth\",\n      \"ingressRate\": 123,\n      \"ingressBurst\": 456,\n      \"egressRate\": 123,\n      \"egressBurst\": 456\n    }\n  ]\n}\n```\n\n| 字段 | 解释 |\n|--|--|\n| ingressRate | 流量可以进入 interface 的速率 bps | \n| ingressBurst | 使令牌立即可用的最大最大比特数（瞬间峰值） | \n| egressRate | 流量可以离开接口的速率 bps |\n| egressBurst | 使令牌立即可用的最大比特数（瞬间峰值） | \n\n以上rate 的单位为 bps。必须同时设置 ingressRate 和 ingressBurst 以限制入口带宽，同时设置 egressRate 和 egressBurst 以限制出口带宽。\n\n### 使用 bandwidth 插件\n#### 以calico 为例，在 kubernetes pod 中设置 annotation\n官方文档链接：\n- [Configure the Calico CNI plugins | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/latest/reference/configure-cni-plugins#cni-network-configuration-lists)\n- [网络插件 | Kubernetes](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#support-traffic-shaping)\n\ncalico 配置文件最后会通过以下配置开启 bandwidth\n```yaml\n... ...\n    {\n      \"type\": \"bandwidth\",\n      \"capabilities\": {\"bandwidth\": true}\n    }\n```\n\n同时在创建负载时，指定 `kubernetes.io/ingress-bandwidth` and `kubernetes.io/egress-bandwidth` 要限制带宽\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    kubernetes.io/ingress-bandwidth: 300M\n    kubernetes.io/egress-bandwidth: 300M\n...\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/1d88e90b06d32d15bf3ba1d12882d793.png)\n\n#### cni bandwidth 官方使用指南\n文档链接：\n- https://www.cni.dev/plugins/current/meta/bandwidth/\n\n使用以下配置，对所有的 pod 都会进行限制\n```yaml\n    {\n      \"name\": \"slowdown\",\n      \"type\": \"bandwidth\",\n      \"ingressRate\": 123,\n      \"ingressBurst\": 456,\n      \"egressRate\": 123,\n      \"egressBurst\": 456\n    }\n```\n\n即使给 pod 设置了`kubernetes.io/ingress-bandwidth` and `kubernetes.io/egress-bandwidth` ，bandwidth 仍然会使用 cni 配置文件的进行限制，这是什么原理呢？\n1. 通过对 bandwidth 源码添加一些日志信息编译后，重新被kubelet 调用后可以看到，传给 bandwidth 二进制文件的配置信息（通过 stdin 传入）中有两个带宽限制的信息，一个是 runtimeConfig 中的，即在 pod.annotation 中指定的 800M；另外一个是配置文件中配置的 300M；而最终采用了 300M 的配置。\n2. bandwidth 源码中的选取原理为：只要配置文件不为空即采用配置文件的；若配置文件为空，即采用 runtimeConfig 的。源码： https://github.com/containernetworking/plugins/blob/main/plugins/meta/bandwidth/main.go#L98-L103\n\n\n```yaml\n{\n        \"cniVersion\": \"0.3.1\",\n        \"name\": \"k8s-pod-network\",\n        \"type\": \"bandwidth-log\",\n        \"capabilities\": {\n                \"bandwidth\": true\n        },\n        \"ipam\": {},\n        \"dns\": {},\n        \"prevResult\": {\n                \"cniVersion\": \"0.3.1\",\n                \"dns\": {},\n                \"interfaces\": [\n                        {\n                                \"name\": \"califedfa7de79f\"\n                        }\n                ],\n                \"ips\": [\n                        {\n                                \"address\": \"10.233.90.62/32\",\n                                \"version\": \"4\"\n                        }\n                ]\n        },\n        \"runtimeConfig\": {\n                \"bandwidth\": {\n                        \"ingressRate\": 800000000,\n                        \"ingressBurst\": 2147483647,\n                        \"egressRate\": 800000000,\n                        \"egressBurst\": 2147483647\n                }\n        },\n        \"ingressRate\": 300000000,\n        \"ingressBurst\": 456000000,\n        \"egressRate\": 300000000,\n        \"egressBurst\": 456000000\n}\n```\n\n![企业微信截图_16935497119854.png](https://images.cherryfloris.eu.org/ryken/2023/09/f7ca8761a8b11229f19d605b4e46a06a.png)\n\n\n补充修改官方 bandwidth 添加日志的方法：（将日志打印到文件中，切勿输出到标准输出）\n- 添加 writeMessage 函数\n- 将bandwidth 收到的配置信息，解析后输出到文件中\n```go\nfunc writeMessage(str string) {\n  filePath := \"/root/cni.log\"\n  file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)\n  if err != nil {\n    _ = fmt.Errorf(\"文件打开失败, %s\", err.Error())\n  }\n  defer file.Close()\n\n  write := bufio.NewWriter(file)\n  write.WriteString(str)\n  write.WriteString(\"\\n\\n\")\n  write.Flush()\n}\n\n// parseConfig parses the supplied configuration (and prevResult) from stdin.\nfunc parseConfig(stdin []byte) (*PluginConf, error) {\n  conf := PluginConf{}\n  if err := json.Unmarshal(stdin, \u0026conf); err != nil {\n    return nil, fmt.Errorf(\"failed to parse network configuration: %v\", err)\n  }\n\n  bs, _ := json.Marshal(conf)\n  var out bytes.Buffer\n  json.Indent(\u0026out, bs, \"\", \"\\t\")\n  writeMessage(out.String())\n\n  bandwidth := getBandwidth(\u0026conf)\n  if bandwidth != nil {\n    writeMessage(bandwidth.String())\n\n    err := validateRateAndBurst(bandwidth.IngressRate, bandwidth.IngressBurst)\n    if err != nil {\n      return nil, err\n    }\n    err = validateRateAndBurst(bandwidth.EgressRate, bandwidth.EgressBurst)\n    if err != nil {\n      return nil, err\n    }\n  }\n\n  if conf.RawPrevResult != nil {\n    var err error\n    if err = version.ParsePrevResult(\u0026conf.NetConf); err != nil {\n      return nil, fmt.Errorf(\"could not parse prevResult: %v\", err)\n    }\n\n    _, err = current.NewResultFromResult(conf.PrevResult)\n    if err != nil {\n      return nil, fmt.Errorf(\"could not convert result to current version: %v\", err)\n    }\n  }\n\n  return \u0026conf, nil\n}\n```\n\n\n### 使用 tc 命令查看\n- tc -s qdisc ls dev cali9d3d79fc8ab\n\n文档：\n- [tc-tbf(8) - Linux manual page (man7.org)](https://man7.org/linux/man-pages/man8/tbf.8.html)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/63f16420a6d273f2b249c795adf0a6b3.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/844d4fc0a42a968e7ab9becae24eae6c.png)\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/bash":{"title":"bash","content":"```bash\n# 1. 安装 zsh\napt-get -y install zsh \n\n# 2. 修改 sh\nchsh -s `which zsh` root # 为root用户修改默认shell为zsh\nchsh -s `which zsh` # 为当前用户修改默认shell为zsh，注意：MacOSX系统使用`chsh -s /bin/zsh`即可。\nchsh -s /bin/bash # 恢复bash命令\n\n# 3. 安装 oh my zsh\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\nOh-My-Zsh的默认配置在`~/.zshrc`文件中配置可以配置，修改默认的基本配置:\n```bash\nZSH_THEME=\"robbyrussell\"  # zsh主题，可以配置为后面的Dracula主题\nexport UPDATE_ZSH_DAYS=30 # 30天检查更新zsh\nHIST_STAMPS=\"yyyy-mm-dd\"  # 历史记录时间格式\nexport LANG=en_US.UTF-8   # 语言\n\nplugins=(git autojump zsh-autosuggestions) # 开启常用插件(这些插件都包含在oh-my-zsh中)\n```\n\n卸载：\n```\nuninstall_oh_my_zsh zsh\n```\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/bpftool-%E4%BD%BF%E7%94%A8":{"title":"bpftool 使用","content":"\nbcc/bpftrace/bpftool\n\n### 其他\n\n可以通过**llvm-objdump**这个工具来分析下这个可执行文件的反汇编指令信息：\n```bash\nllvm-objdump -S xdp-drop.o\n\nxdp-drop.o:     file format elf64-bpf\n\nDisassembly of section drop_icmp:\n\n0000000000000000 \u003cdrop_icmp_func\u003e:\n; int drop_icmp_func(struct xdp_md *ctx) {\n       0:       b7 00 00 00 02 00 00 00 r0 = 2\n;   void *data_end = (void *)(long)ctx-\u003edata_end;\n       1:       61 12 04 00 00 00 00 00 r2 = *(u32 *)(r1 + 4)\n;   void *data = (void *)(long)ctx-\u003edata;\n       2:       61 11 00 00 00 00 00 00 r1 = *(u32 *)(r1 + 0)\n;   if (data + ipsize \u003e data_end) {\n       3:       bf 13 00 00 00 00 00 00 r3 = r1\n       4:       07 03 00 00 22 00 00 00 r3 += 34\n       5:       2d 23 04 00 00 00 00 00 if r3 \u003e r2 goto +4 \u003cLBB0_3\u003e\n;   if (ip-\u003eprotocol == IPPROTO_ICMP) {\n       6:       71 11 17 00 00 00 00 00 r1 = *(u8 *)(r1 + 23)\n       7:       b7 00 00 00 01 00 00 00 r0 = 1\n       8:       15 01 01 00 01 00 00 00 if r1 == 1 goto +1 \u003cLBB0_3\u003e\n       9:       b7 00 00 00 02 00 00 00 r0 = 2\n\n0000000000000050 \u003cLBB0_3\u003e:\n; }\n      10:       95 00 00 00 00 00 00 00 exit\n```\n","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/build-record":{"title":"build record","content":"\n### build 工具包\ngo 安装包下载地址：\n-   wget [https://studygolang.com/dl/golang/go1.17.6.linux-amd64.tar.gz](https://studygolang.com/dl/golang/go1.17.6.linux-amd64.tar.gz)\n```\n# 配置环境 \ncat \u003c\u003cEOF \u003e /etc/profile.d/go.sh\nexport GO111MODULE=on\nexport GOPROXY=https://goproxy.cn\nexport GOPATH=/root/program/gopath\nexport GOROOT=/opt/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\nEOF\n```\n\ndlv 调试工具\n- go install github.com/go-delve/delve/cmd/dlv@latest\n\n安装kustomize、kubebuilder、controller-gen\n```\nGOBIN=$(pwd)/ GO111MODULE=on go get sigs.k8s.io/kustomize/kustomize/v3\ngo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.4.0\n\nhttps://github.com/kubernetes-sigs/kubebuilder/releases\nhttps://github.com/kubernetes-sigs/controller-tools/releases\n```\n\n### 配置静态ip\n```\nroot@node-1:~# cat /etc/netplan/00-installer-config.yaml\n# This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n        - 192.168.1.110/24\n      gateway4: 192.168.1.1\n      nameservers:\n        addresses: [8.8.8.8, 114.114.114.114]\n  version: 2\n```\n\n```\nvim /etc/network/interfaces\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n\nsource /etc/network/interfaces.d/*\n\n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# mgmt network\nauto eno1\niface eno1 inet static\n  address 172.31.50.22\n  netmask 255.255.255.0\n  gateway 172.31.50.254\n  dns-nameservers 8.8.8.8\n\n\nauto eno2\niface eno2 inet manual\n\nauto vlan75\niface vlan75 inet manual\n\nauto br0\niface br0 inet static\n  address 172.31.75.22\n  netmask 255.255.255.0\n  vlan_raw_device eno2\n  bridge_ports vlan75\n  bridge_stp off\n  bridge_waitport 0\n  bridge_fd 0\n\nup route add -net 192.168.1.0/24 gw 192.168.0.1 dev eth0\ndown route add -net 192.168.1.0/24 gw 192.168.0.1 dev eth0\n```\n\n#### 路由\n添加静态路由\nroute add -net 192.168.1.0/24 gw 192.168.0.1 dev eth0\n添加网关\nroute add default gw 192.168.1.1\n\n\n### 安装 `docker-buildx`\n```\nroot@orange:/home/orange/cloudNative/openelb# make release\n/home/orange/gopath/bin/controller-gen object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n...\nerror: multiple platforms feature is currently not supported for docker driver. Please switch to a different driver (eg. \"docker buildx create --use\")\nmake: *** [Makefile:76: release] Error 1\n\n# 第一步、下载并安装docker-buildx\n# 下载地址： https://github.com/docker/buildx/releases/\nmkdir -p ~/.docker/cli-plugins/\nwget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64\nchmod +x ~/.docker/cli-plugins/docker-buildx  \n\n# 第二步、开启 实验特性，重启docker\nroot@orange:~# cat /etc/docker/daemon.json\n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\",\"https://nrbewqda.mirror.aliyuncs.com\",\"https://dmmxhzvq.mirror.aliyuncs.com\"],\n    \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n    \"experimental\": true\n}\n\n# 配置生成镜像放置本地，指定type=docker 且 必须分别为不同的 CPU 架构构建不同的镜像\ndocker buildx build -t yangchuansheng/hello-arch --platform=linux/amd64 -o type=docker .\n\n默认情况下，Docker 会使用旧的构建器，不支持多架构构建。\n\n为了创建一个新的支持多架构的构建器，需要运行：\n\n# 适用于国内环境\nroot@i-3uavns2y:~# docker buildx create --use --name=mybuilder-cn --driver docker-container --driver-opt image=dockerpracticesig/buildkit:master\n\n# 适用于腾讯云环境(腾讯云主机、coding.net 持续集成)\nroot@i-3uavns2y:~# docker buildx create --use --name=mybuilder-cn --driver docker-container --driver-opt image=dockerpracticesig/buildkit:master-tencent\n\n\n# 使用默认镜像\nroot@i-3uavns2y:~# docker buildx create --name mybuilder --driver docker-container\n\n```\n\n### 更新alpine源\n```\n# 阿里镜像\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\n# 科大镜像\nsed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n\n\ndockerfile 切换源\n- RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list\n- RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories\n\n```\n\n### kubernetes 相关\ncommand: [ \"/bin/bash\", \"-ce\", \"tail -f /dev/null\" ]\n进入某一个容器的网络空间 nsenter -n -u -t pid /bin/sh\n\nkubectl create deployment hello-world --image=datawire/hello-world\nkubectl expose deployment hello-world --type=LoadBalancer --port=8000\nkubectl rollout restart ds kube-proxy -n kube-system\nkubectl -n kubesphere-system patch svc ks-apiserver -p '{\"spec\":{\"type\":\"NodePort\",\"ports\":[{\"port\":80,\"protocal\":\"TCP\",\"targetPort\":9090,\"nodePort\":30881}]}}'\n\n\n```\nroot@i-rh5ooi7r:/home/ubuntu/kubernetes# cat push.sh\ntag=\"v0.4.3\"\nremoteTag=\"v0.4.4\"\nregistry=\"101.43.88.56\"\nopenelb=\"kubespheredev/openelb\"\nagent=\"kubespheredev/openelb-agent\"\nproxy=\"kubespheredev/openelb-proxy\"\nforward=\"kubespheredev/openelb-forward\"\n\nimages=($openelb $agent $proxy $forward)\n\nfor((i=0;i\u003c${#images[@]};i++)); do\n    docker tag ${images[i]}:$tag $registry/${images[i]}:$remoteTag\n    docker push $registry/${images[i]}:$remoteTag\n    docker rmi ${images[i]}:$tag\ndone;\n```\n\n\nroute add -net 172.31.2.0/24 gw 172.31.74.254\n**ip** addr del 172.31.2.10/24 dev eth0\n\nalias calicoctl=\"kubectl exec -i -n kube-system calicoctl -- /calicoctl\"\n\nRUN apk update\n\nRUN apk add iptables --no-cache\n\n### wsl2 网络问题：\n[https://www.jianshu.com/p/ba2cf239ebe0?u_atoken=075f93e5-b031-4986-bb7d-f00a0ea3b1ae\u0026u_asession=01xijq3dhNeKFQ7_jAtBzPzrRD5h7zRErH8V0rHhNRPJ48Hg30vDS7Kv99u6Azaty7X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K9hHVNoXEPgAX3KwOFGAJpXPpcarp92QKzyJKyYjREPlmBkFo3NEHBv0PZUm6pbxQU\u0026u_asig=05AuiogwoKKcxKt5qAOOwfni773BstMZw5phxI523q3Dmz8J6_llR6xKLC4Qa7cdovnmQ1Sc795gEJNVM6tesyorwlPKFN2YAqc2poakTWCw4DqMC3d6TETG_MzXWhpC5auHHxQ_qoF2QDve8BSnV5YJzhOeqgpOsutYnwgyFzKfz9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzaQc3cnI9OyTQxr_QWJ9lZ_L9Du9TIawRZrMZWzByMTiWPRPQyB_SKrj61LB_f61u3h9VXwMyh6PgyDIVSG1W-u1eza061BToUVpWxfwO1Fr6clJZAzLswSaG1ATveery-SF6l84RubSeM_a8hrhskwdmW8FHlOop8y9tXJ4WoumWspDxyAEEo4kbsryBKb9Q\u0026u_aref=Qd%2BCcvjmXlsOKyuQALaOb1D7i20%3D](https://www.jianshu.com/p/ba2cf239ebe0?u_atoken=075f93e5-b031-4986-bb7d-f00a0ea3b1ae\u0026u_asession=01xijq3dhNeKFQ7_jAtBzPzrRD5h7zRErH8V0rHhNRPJ48Hg30vDS7Kv99u6Azaty7X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K9hHVNoXEPgAX3KwOFGAJpXPpcarp92QKzyJKyYjREPlmBkFo3NEHBv0PZUm6pbxQU\u0026u_asig=05AuiogwoKKcxKt5qAOOwfni773BstMZw5phxI523q3Dmz8J6_llR6xKLC4Qa7cdovnmQ1Sc795gEJNVM6tesyorwlPKFN2YAqc2poakTWCw4DqMC3d6TETG_MzXWhpC5auHHxQ_qoF2QDve8BSnV5YJzhOeqgpOsutYnwgyFzKfz9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzaQc3cnI9OyTQxr_QWJ9lZ_L9Du9TIawRZrMZWzByMTiWPRPQyB_SKrj-61LB_f61u3h9VXwMyh6PgyDIVSG1W-u1eza061BToUVpWxfwO1Fr6clJZAzLswSaG1ATveery-SF6l84RubSeM_a8hrhskwdmW8FHlOop8y9tXJ4WoumWspDxyAEEo4kbsryBKb9Q\u0026u_aref=Qd%2BCcvjmXlsOKyuQALaOb1D7i20%3D)\n![upgit_20221210_1670641396.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221210_1670641396.png)\n\n\n  \n```\n\tswitch obj.(type) {\n\tcase *corev1.Namespace:\n\t\treturn obj.GetAnnotations()[utils.HostPortRange]\n\tcase *v1.Deployment:\n\t\t//routerTemplates[\"DEPLOYMENT\"] = obj\n\t}\n```\n\n[Go 格式化输出结构体](https://blog.csdn.net/K346K346/article/details/107314703)\n### 结构体输出 json\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tbs, _ := json.Marshal(student)\n\tvar out bytes.Buffer\n\tjson.Indent(\u0026out, bs, \"\", \"\\t\")\n\tfmt.Printf(\"student=%v\\n\", out.String())\n}\n```\n\n### python 搭建一个文件服务器 - 快传文件\n`python -m http.server 8000`\n\n### Nettools Dockerfile\n`--build-arg \u003c参数名\u003e=\u003c值\u003e` 来覆盖 ARG\n\n```Dockerfile\nFROM rykren/nettools:latest as tools\n\nFROM alpine:3.15\n\nARG VERSION=3.17.0\nARG ARCH=amd64\n\nCOPY --from=tools / /\nRUN apk add --update iperf iperf3 bird\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ qperf==0.4.11-r1\nRUN wget https://github.com/osrg/gobgp/releases/download/v${VERSION}/gobgp_${VERSION}_linux_${ARCH}.tar.gz \u0026\u0026 \\\n        tar -zxf gobgp_${VERSION}_linux_${ARCH}.tar.gz -C /usr/local/bin/ \u0026\u0026 \\\n        rm gobgp_${VERSION}_linux_${ARCH}.tar.gz /usr/local/bin/README.md /usr/local/bin/LICENSE\nRUN cat \u003c\u003cEOF \u003e /root/bird.conf\nrouter id 172.18.0.5;\n\nprotocol kernel {\n  scan time 60;\n  ipv4 {\n    import none;\n    export all;\n  };\n  merge paths on;\n}\n\nprotocol device {\n    scan time 60;\n}\n\n\ntemplate bgp bgp_template {\n    description \"Connection to BGP peer\";\n    local as 65000;\n\n    ipv4 {\n        import all;\n        export all;\n        add paths on;\n    };\n    enable route refresh off;\n}\n\nprotocol bgp neighbor1 from bgp_template {\n    neighbor 172.18.0.2 port 17900 as 64512;\n    source address 172.18.0.5;\n}\n\nprotocol bgp neighbor2 from bgp_template {\n    neighbor 172.18.0.3 port 17900 as 64512;\n    source address 172.18.0.5;\n}\n\nprotocol bgp neighbor3 from bgp_template {\n    neighbor 172.18.0.4 port 17900 as 64512;\n    source address 172.18.0.5;\n}\nEOF\n\nRUN cat \u003c\u003cEOF \u003e /root/gobgp.toml\n[global.config]\n  as = 65000\n  router-id = \"10.1.8.15\"\n\n[[neighbors]]\n  [neighbors.config]\n    neighbor-address = \"10.1.8.1\"\n    peer-as = 65008\nEOF\n\nWORKDIR /root\n\nENTRYPOINT [\"/sbin/tini\",\"-g\",\"--\",\"/entrypoint.sh\"]\n```\n\n## containerd 相关路径\n- containerd pull 镜像时，镜像都存储在 `/var/lib/containerd/io.containerd.content.v1.content/blob/sha256` 中\n- containerd 为 runtime 时，标准输出(stdout)的日志文件存放在 `node：/var/log/containers`\n- containerd 为 runtime 时，运行的所有文件(merger层)存放在 `node：/run/containerd/io.containerd.runtime.v2.task/k8s.io/`\n- containerd 为 runtime 时, lower 层和 upper 层存在 `node: /var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/`\n- containerd 为 runtime 时，empty 挂载容器后，存放在 `node: /var/lib/kubelet/pods/****/volumes/kubernetes.io~empty-dir/`\n\nk3s kubeconfig 路径：/etc/rancher/k3s/k3s.yaml\n\nhelm 更新 github 的 chart repo： gh_pages\n进入上级目录执行：helm repo index openelb/\n可以在本目录执行：helm repo index ../openelb/","lastmodified":"2025-03-26T03:48:44.128315198Z","tags":null},"/c++%E7%B1%BB%E5%B0%81%E8%A3%85":{"title":"","content":"CGO是C语言和Go语言之间的桥梁，原则上无法直接支持C++的类。CGO不支持C++语法的根本原因是C++至今为止还没有一个二进制接口规范(ABI)。一个C++类的构造函数在编译为目标文件时如何生成链接符号名称、方法在不同平台甚至是C++的不同版本之间都是不一样的。但是C++是兼容C语言，所以我们可以通过增加一组C语言函数接口作为C++类和CGO之间的桥梁，这样就可以间接地实现C++和Go之间的互联。当然，因为CGO只支持C语言中值类型的数据类型，所以我们是无法直接使用C++的引用参数等特性的。\n## c++类到Go语言对象\n\n1. 【声明接口】先从用户的角度思考需要什么样的接口，提供一个纯c语言的接口\n2. 【纯C实现接口】基于C++的类定义这些C语言包装函数，并用纯c函数接口封装C++类\n3. 【将纯C接口转为Go函数】如果包中有C++11的语法，要通过`#cgo CXXFLAGS: -std=c++11`打开C++11\n4. 【进一步将Go函数封装为Go对象】基于GO函数封装为Go语法的Go对象\n\n## Go语言对象到C++类\n\n\n1. 【声明接口】先从用户的角度思考需要什么样的接口，提供一个纯c语言的接口\n2. 【导出C接口】基于Go语言封装Go对象，导出C接口\n3. 【封装C++对象】有了C接口，进一步进行C++的封装为对象\n\n将Go对象导出为C接口，然后基于C接口再包装为C++对象以便于使用\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/cEOS-%E9%85%8D%E7%BD%AE":{"title":"","content":"#containerlab  #cEOS #交换机 \n\n\u003e 锐捷交换机\n\nenable\nconfigure\nshow running-config \n\nvlan 10~12\ninterface vlan 10\nip address 10.10.10.1 255.255.255.0\n\ninterface Ethernet 2\nswitchport mode trunk\nswitchport trunk native vlan 10\nswitchport trunk allowed vlan remove 1-4094\nSwitchport trunk allow vlan add 10,11,12\n\n\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/calico%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6":{"title":"calico配置文件","content":"\n### cni 配置文件\n```\nkubectl get cm -n kube-system calico-config -o yaml\n```\n在安装 calico 时，configmap 中的特定参数会替换为 calico 定义的值，同时该 configmap 也会在 calico-daemonset 的 init 容器初始化时，被拷贝到  /etc/cni/net.d/ 目录作为 cni、 配置文件，同时 calico-daemonset 的 init 容器初始化时也会将 calico cni 二进制拷贝到 /opt/cni/bin/\n\n因此当 cni ipam 发生问题时，可以查看修改后的 cni 配置文件是否符合规范。如果没有修改可以忽略。\n\n同时可以在 `log_file_path：/var/log/calico/cni/cni.log` 对应的文件目录下查看调度到本机 pod 的 ipam 时 cni 日志\n\ncni 配置文档：\n[Configure the Calico CNI plugins](https://docs.tigera.io/archive/v3.23/reference/cni-plugin/configuration)\n\n### bgpconf、bgppeer 配置\nbgp 相关的配置：bgpconf、bgppeer，可以使用 kubectl查看当前对应的 bgp 配置，也可以使用 calicoctl 查看(calicoctl 官方工具获取的信息会更加全面一点)\n\n通过查看 bgpconfiguration 可以获取到针对所有节点的 bgp 配置，如果某些节点进行单独的配置，可以使用 calicoctl 查看 node.spec 中对应的 bgp 字段 \n```\n// bgpconfiguration\ncalicoctl get bgpconfiguration -o wide\nkubectl get bgpconfiguration -o wide\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/65f1e61f1f8ace07bb317ba54a8f4af0.png)\n\n```\n// node 单独的配置 - 也可以设置不同的 asNum 在 spec中添加指定，默认为 64512\ncalicoctl get node -o yaml\ncalicoctl get node -o wide\n// 可以查看对应的node的label\nkubectl get node --show-labels\n```\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/ca09155b96f4b17f5ddc69f0e9c91696.png)\n\n```\n// 查看 bgppeer\ncalicoctl get bgppeer -o wide\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/2e68447ae4fa1705e8d31c73284431f7.png)\n\n```\n// 查看该节点对应的 bgp 状态，需要连接本地 unix socket，因此该命令只能获取用于本机数据\ncalicoctl node status -o wide\n```\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/0fa7a9f42160eec331da0bb9cee89d6a.png)\n\n配置的更多细节可以参照官网比对：\n- [BGP configuration](https://docs.tigera.io/archive/v3.23/reference/resources/bgpconfig)\n- [BGP peer](https://docs.tigera.io/archive/v3.23/reference/resources/bgppeer)\n- [Node](https://docs.tigera.io/archive/v3.23/reference/resources/node)\n\n\n### felix、controller 以及其他 crd 相关的配置\n通过配置 FelixConfiguration 可以控制 Felix 日志等级、使用的数据面、mtu、prometheus 监控等配置\n```\nkubectl get FelixConfiguration default -o yaml\n```\n\n如果 calico 报错之前修改过 FelixConfiguration，建议与根据官方文档比对、检查，是否符合规范。\n- [Felix configuration](https://docs.tigera.io/archive/v3.23/reference/resources/felixconfig)\n- [Configuring Felix](https://docs.tigera.io/archive/v3.23/reference/felix/configuration)\n\ncontroller-manager\n[Kubernetes controllers configuration](https://docs.tigera.io/archive/v3.23/reference/resources/kubecontrollersconfig)\n[Configuring the Calico Kubernetes controllers](https://docs.tigera.io/archive/v3.23/reference/kube-controllers/configuration)\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E4%B8%AD%E7%9A%84-proxy-arp":{"title":"calico 中的 proxy-arp","content":"\n- `/proc/sys/net/ipv4/conf/DEV/rp_filter` =\u003e 1：开启反向路径过滤，确认数据包来源，对于普通容器，IP基本无法伪装，但是如果是VM（Calico也支持VM），很容易伪装IP地址，所以为了安全打开这个选项。\n- `/proc/sys/net/ipv4/conf/DEV/route_localnet` =\u003e 1：允许路由到本地。\n- `/proc/sys/net/ipv4/neigh/DEV/proxy_delay` =\u003e 0：默认情况下，主机为了减少ARP风暴的可能，会延迟一段时间回复ARP包，这个选项关闭这个延迟。\n- `/proc/sys/net/ipv4/conf/DEV/forwarding` =\u003e 1：允许转发数据包（如果不允许转发的话，那数据包就出不去主机了）。\n\n上面是IPv4的情况，如果是IPv6的网络，则会设置：\n\n- `/proc/sys/net/ipv6/conf/DEV/proxy_ndp` =\u003e 1：这个和`proxy_arp`是一样的。\n- `/proc/sys/net/ipv4/conf/DEV/forwarding` =\u003e 1：同IPv4。\n","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1":{"title":"calico 交换机配置静态路由","content":"\n### 背景\n在一些客户部署 kse 时，明确要求 pod id 可路由到，换言之需要使用 underlay 网络，与底层网络打通。现有的一些 underlay 网络方案可以选用基于 vlan 的技术实现也可以选用基于 bgp 的技术实现。两种技术实现均需要交换机侧做一些额外配置来符合网络需求：\n- bgp 技术实现需要：配置交换机 bgp 连接 或者 配置静态路由；\n- vlan 技术实现需要：配置 trunk 模式、配置 vlan 网关\n\nkse 中默认交付的是 calico，所以我们就 calico bgp 展开讨论：\n### calico bgp 交付方案\ncalico 交付 bgp 方案有以下三种：\n- FULL-MESH + bgp peer\n- TOR 路由反射器\n- RR in cluster 路由反射器 + bgp peer\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/12/d5f6aa319080943102022b88a3297fa1.png)\n\n**FullMesh**\n- 集群内默认的连接方式。集群内节点两两建立 bgp 连接来交换路由信息。\n\n不向外部暴露 pod ip：\n- 创建的 ippool 可以为 overlay 模式(ipip、vxlan)\n- 创建的 ippool 可以为 bgp 模式(ipipmode=Never、vxlanMode=Never 需要节点在同一个网络域中；创建路由的下一跳为节点的 ip，跨网络域会导致网络不通)\n\n向外部暴露 pod ip：\n- 需要额外配置 bgp peer (交换机/路由器)，将每个节点的路由信息宣告给 peer。\n\n**TOR**\n- 禁用 fullmesh，集群内的所有节点与所 tor 路由器建立 bgppeer，向外部宣告路由\n- 创建的 ippool 为 BGP 模式(ipipmode=Never、vxlanMode=Never)\n- 配置为 tor 表示默认向外部暴露 pod ip\n\n**RR in cluster** \n- 禁用 fullmesh，选取集群内的一个或者多个节点为 rr server 节点，集群内的其他节点作为 rr client与该节点建立 ibgp 连接。\n\n不向外部暴露 pod ip：\n- 创建的 ippool 可以为 overlay 模式(ipip、vxlan)\n- 创建的 ippool 可以为 bgp 模式(ipipmode=Never、vxlanMode=Never 需要节点在同一个网络域中；创建路由的下一跳为节点的 ip，跨网络域会导致网络不通)\n\n向外部暴露 pod ip：\n- rr server 节点同外部交换机建立 bgp peer，向外部宣告路由\n\n\u003e ps: fullmesh 非常适合 100 个或更少节点的中小型部署，但在规模明显更大时，fullmesh的效率会降低，建议使用路由反射器(Route reflectors)。\n\n\n### 探讨静态路由的方案\n客户需求如下：\n- 业务 ippool 与集群基础架构的 ippool 分离\n- 业务 ippool 在调度过程中只使用业务 ippool\n- 业务 ippool 需要可路由\n- 交换机侧不愿配置 bgp\n\n![270f184fcaa92acbbc9452e2d271232.png](https://images.cherryfloris.eu.org/ryken/2024/01/1dbb384ce7b5bea688b93ef7fab882f4.png)\n\n\n\n#### 简单要求，简单方案\n\n要求：\n- 集群节点在同一个网段，ippool 不启用 overlay 网络\n- ippool 不绑定节点，可与 namespace 绑定\n- 允许借用 ip\n- 业务 ippool 与平台 ippool 分开使用\n\n\u003e 【说明1】：\n\u003e 对于某一个 namespace 如果没有给其分配 ippool，对于则该 namespace 下负载应该如果处理有以下两个方案：\n\u003e 1. 使用平台默认的 ippool 创建\n\u003e 2. 该 namespace 下的负载无法创建成功\n\u003e \n\u003e 建议使用第一种方式解决，因为无法判断某一个 namespace 为客户创建还是 kse 插件或者某一个 kse 内部组件自己创建的，若使用第二种方式，维护成本比较高。\n\u003e **以下方案是基于第一种处理方法展开**。\n\u003e \n\u003e 【说明2】：\n\u003e 需要判断 ippool 与节点的绑定是否为强需求。图中的客户需求规划将 ippool 与节点做了绑定，但是在实际的情况中，外部只需感知整个 podcidr 发往集群节点，无需感知具体哪一个子段发往哪一个节点。\n\u003e 客户给出的规划：\n\u003e ![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/d9c443c9cb6b0c1a971e0c798488471b.png)\n\u003e 简单需求的理想规划：\n\u003e ![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/50bb94981e6d896722a6c009f302b117.png)\n\u003e 当有与 namespace 的绑定的需求时，可以再进行细化，进而拆分成更细小的 ippool\n\u003e 若为强需求则考虑后续方案。若不是强需求，考虑以下方案：\n\n\n方案：\n- 安装集群时禁用默认 ippool\n- 创建平台使用的 ippool 以及业务使用的 ippool，并将业务的 ippool 的 nodeSelector 设置为 ’!all()‘，表示只允许指定分配，无法自动分配。\n- 用户创建相应的 namespace 时，绑定相应的 ippool\n- 在交换机侧设置静态路由 set protocols static route ${podcidr} nexthop ${集群节点 ip}\n\n\u003e 在安装集群时禁用了默认 ippool，避免配置的 podCIDR 初始化为一个 ippool 使得其使用率不高，禁用之后，用户可以根据自己的实际规划来创建合适大小的 ippool 用于平台 pod 和 业务 pod。\n\n静态路由可以设置一条，也可以设置多条并启用 ecmp，`${集群节点 ip}` 选用某一个集群节点即可。假设`${集群节点 ip}`选用 master 节点，此时的到达 podCIDR 的流量都会经由 master 节点做转发。\n\n\n\n##### 配置补充说明：\n\n了解下 calico 的 ipam 分配的过程：\n\nippool 是 calico 用于 ipam 分配的总的 ip 池。当使用 kk 安装集群时，calico 会默认将配置的 podCIDR 初始化为自己的一个默认的 default-ipv4-ippool，当然这个默认的 ippool 也是可以通过配置禁用掉，进而用户自行创建自定义的 ippool\n\n```yaml\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  network:\n    plugin: calico\n#    calico:\n#      defaultIPPOOL: false\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n```\n\n```yaml\napiVersion: crd.projectcalico.org/v1\nkind: IPPool\nmetadata:\n  name: default-ipv4-ippool\nspec:\n  allowedUses:\n  - Workload\n  - Tunnel\n  blockSize: 26\n  cidr: 10.233.64.0/18\n  ipipMode: Always\n  natOutgoing: true\n  nodeSelector: all()\n  vxlanMode: Never\n```\n\nippool 有一个 blocksize 字段，用于将整个大段的 ippool cidr 分为更细小的 block 块，并将 block 与 node 绑定，当 node 中没有可用的 ip 时，会继续分配可用的 block 块并与节点绑定。\n当没有可分配的 block 也没有可用的 ip 时，会向其他节点借用 ip。\n\n可以通过 IPAMConfiguration 配置不允许借用：\nIPAM configuration ：https://docs.tigera.io/calico/latest/reference/resources/ipamconfig\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/87d42ffaa568a2c4108ad9086ec16d94.png)\n\n##### 关于 blocksize 和 ippool 的配置参考\n\n\u003e 【注意】\n\u003e - 对于不强绑定节点的需求：可以让 calico 自动分配、进行绑定，但是绑定是随机、任意的。最终绑定效果可能与下图中展示的不同。\n\u003e - 对于强绑定节点的需求：只能手动创建出相应的绑定资源。\n\nblocksize 与 ippool cidr 掩码不等 - 一个 ippool + 预留\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/3e3174616bfa77bda1295a14a163ec25.png)\n\n当 cidr 为 10.38.46.0/24，blocksize 为 27 时，可以分为 8 个小块，所以图中还有 2 个 block属于预留状态，当某一个节点 ip 全部分配完没有可用的 ip 时，便会重新分配 block，因此可以通过 IPReservation 配置保留未使用的 cidr 段。\n\n设置保留 ip 地址段 - calico 版本需大于等于 3.21\n```yaml\napiVersion: crd.projectcalico.org/v1 \nkind: IPReservation  \nmetadata:  \nname: my-ipreservation-1  \nspec:  \nreservedCIDRs:  \n- 192.168.2.3  \n- 10.0.2.3/32  \n- cafe:f00d::/123\n```\n\n\nblocksize 与 ippool cidr 掩码不等 - 多个 ippool\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/c1c62c526d62c3349313048ee4df8122.png)\n\n当 cidr 为 10.38.46.0/26，blocksize 为 27 时，可以分为 2 个小块，刚好可以将这两个 block 分别绑定到不同的节点上。其他的同理。\n\n这样便不会有预留的 block 情况\n\nippool 与 namespace 做绑定，可以限制相应的 pod 在 node\n\n\n\nblocksize 与 ippool cidr 掩码相等 - 多个 ippool\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/12/780c6b1a0706e3290080f8ef089dae5e.png)\n\n\n#### 复杂要求，复杂方案 - 不建议\n\n要求1：\n- 集群节点在同一个网段，ippool 不启用 overlay 网络\n- ippool 绑定节点，同时可与 namespace 绑定\n- 业务 ippool 与平台 ippool 分开使用\n- 允许借用 ip\n\n方案：\n- 安装集群时禁用默认 ippool\n- 手动创建平台使用的 ippool 以及业务使用 ippool、blockaffinities、ipamblock、IPReservation 资源，并将业务的 ippool 的 nodeSelector 设置为 ’!all()‘，表示只允许指定分配，无法自动分配。\n- 用户创建相应的 namespace 时，绑定相应的 ippool\n- 在交换机侧设置静态路由 set protocols static route ${podcidr} nexthop ${集群节点 ip}\n\n静态路由可以设置一条，也可以设置多条并启用 ecmp，`${集群节点 ip}` 选用某一个集群节点即可。假设`${集群节点 ip}`选用 master 节点，此时的到达 podCIDR 的流量都会经由 master 节点做转发。\n静态路由也可以根据 block 绑定关系保持一致，总归流量到达集群内便可以在集群内相互转发了。\n\n\u003e - 在安装集群时禁用了默认 ippool，避免配置的 podCIDR 初始化为一个 ippool 使得其使用率不高，禁用之后，用户可以根据自己的实际规划来创建合适大小的 ippool 用于平台 pod 和 业务 pod。\n\u003e - blockaffinities 是 calico 分配 ip 时根据 ippool 的 blocksize 自动分配给所需要的节点。\n\u003e - ipamblock 是 calico ipam 的一些分配信息。\n\n示例 yaml：\n```yaml\napiVersion: crd.projectcalico.org/v1\nkind: IPPool\nmetadata:\n  name: ippool1\nspec:\n  blockSize: 27\n  cidr: 10.38.46.0/24\n  ipipMode: Always\n  natOutgoing: true\n  nodeSelector: all() # 节点选择器\n  vxlanMode: Never\n```\n\n```yaml\napiVersion: crd.projectcalico.org/v1\nkind: BlockAffinity\nmetadata:\n  name: node1-10-38-46-0-27 # [需根据实际环境进行替换] node1 为绑定的节点名，后面为细化的 block 段\nspec:\n  cidr: 10.38.46.0/27 #  [需根据实际环境进行替换] 细分的 block 段\n  deleted: \"false\"\n  node: node1 #  [需根据实际环境进行替换] 绑定的节点名\n  state: confirmed\n```\n\n```yaml\napiVersion: crd.projectcalico.org/v1\nkind: IPAMBlock\nmetadata:\n  name: 10-233-64-4-30 #  [需根据实际环境进行替换] 细分的 block 段\nspec:\n  affinity: host:staticroute-worker #  [需根据实际环境进行替换] host:绑定的节点名\n  attributes: []\n  cidr: 10.233.64.4/30 #  [需根据实际环境进行替换] 细分的 block 段\n  deleted: false\n  allocations:  #  [需根据实际环境进行替换] 已分配的记录，需要填充为该网段所包含 ip 的大小，初始化默认为 null\n  - null\n  - null\n  - null\n  - null\n  unallocated: #  [需根据实际环境进行替换] 未分配的记录，需要填充为该网段所包含 ip 的大小，填充为相应的数字\n  - 0\n  - 1\n  - 2\n  - 3\n```\n\n\n缺点：\n- 扩展性受限，当有新的 ippool 需要扩容时，需要手动去创建相关资源\n- 手动创建 calico ipam 相关资源，可能因为配置失误导致问题\n\n\n要求2：\n- 集群节点在同一个网段，ippool 不启用 overlay 网络\n- ippool 绑定节点，同时可与 namespace 绑定\n- 业务 ippool 与平台 ippool 分开使用\n- 不允许借用 ip\n\n方案：\n- 同上\n- 额外配置 ipamconfiguration，不允许借用 ip\n\n缺点：\n- 当 pod 使用固定 ip 时，只能固定调度到某一个节点上\n- ippool 与节点绑定同时与 namespace 绑定，表示某一个 namespace 下的 pod 只能调度到ippool 绑定的节点上\n- 扩展性受限、维护成本高\n\n\n静态路由可以设置一条，也可以设置多条并启用 ecmp，`${集群节点 ip}` 选用某一个集群节点即可。假设`${集群节点 ip}`选用 master 节点，此时的到达 podCIDR 的流量都会经由 master 节点做转发。\n静态路由也可以根据 block 绑定关系保持一致，总归流量到达集群内便可以在集群内相互转发了。\n\n\n要求3：\n- ippool 需要启用 overlay 网络(集群节点不在同一个网段或者有其他约束)\n\n方案：\n- 暂不支持\n\n\n\n**客户的网络团队不愿意配合修改交换机的例子：**\n光大之前交付的 calico bgp tor 模式，不知什么原因疏忽了一个配置项，客户的交换机配置了 ibgp，但是没有配置 rr；之后客户与网络团队再次进行沟通时，网络团队不太愿意配合修改，因此现在光大的交付环境中的 calico 需要配置 blocksize 为 32，才不会导致发生借用 ip 时，由于黑洞路由导致无法访问的情况。\n\n#### 静态路由方案的实现\n1. 设置静态路由 set protocols static route ${podcidr} nexthop ${集群节点 ip}\n\t- podcidr 为业务 ippool 的 cidr，需要可路由的 cidr\n\t- 开启 ecmp，下一跳为集群的所有节点\n2. 集群内配置\n- 将 default-ipv4-ippool nodeSelector 设置为 !all()，让其只能指定分配，不能用于自动分配；\n- kse 的组件/插件在安装时，所使用的 namespace 必须指定 default-ipv4-ippool 的annotation 绑定关系(安装完集群之后的插件安装，也是同理)\n- ~~新建整大段的 calico ippool (如果是 fullmesh 的话，ippool 可以为 bgp(不跨域)，也可以为 overlay)，natoutgoing 设置为 true(false 会影响上外网，可能不是所有的交换机都配置静态路由 or nat 出网)~~\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E5%AE%89%E8%A3%85":{"title":"calico 安装","content":"\n## manifests 安装\n- upgrade-ipam\n\t用于升级 Calico CNI 插件的 IPAM 管理模块，以支持更高效和灵活的 IP 地址池的管理。\n- install-cni\n\t安装 calico-cni 到指定目录\n-  flexvol-driver 容器存储接口（CSI）驱动程序\n\t在每个pod中运行的Felix和Dikastes容器之间启用安全连接。它挂载了一个共享卷，Felix将Unix域套接字插入其中\n\tDikastes是一个容器，它与Calico的Felix组件一起运行，用于在每个pod中实现应用层策略。它通过与Felix共享的Unix域套接字与Felix进行通信，以便在Envoy代理中执行Calico安全策略\n\thttps://www.tigera.io/blog/how-to-build-a-service-mesh-with-istio-and-calico/\n- calico-node\n\n## operator 方式安装\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/05/6cbe3042a77b57786ad218b7aa358fef.png)\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E5%BA%94%E6%80%A5%E6%96%B9%E6%A1%88":{"title":"calico 应急方案","content":"\n1. 确认出现问题的具体部分和错误现象\n    - 确认问题出现的时间、场景，了解系统的运行环境、版本信息、系统配置等，以便明确问题的范围和分析。\n    - 确认错误现象是否具有可重现性，是否存在规律性与周期性，有助于问题进一步排查和分析。\n2.  检查 Calico 日志[[CloudNative/cni-network/calico/日志/日志|日志]]\n    - 查看 calico describe 以及日志。[[通过事件、日志排查]]\n    - 根据错误提示或警告信息，查找相关的解决方案或错误排除方法。\n    - 如果日志中没有明显错误或警告信息，可以将日志级别调整为 DEBUG，查看更为详细的日志信息，进一步分析问题原因。\n    - calico没有明显错误日志记录时，可以查看系统日志，并参考系统资源情况来分析问题原因。[[根据系统日志排查]]\n3.  进行网络诊断 [[网络工具诊断]]\n    - 使用 ping、traceroute、tcpdump 等网络诊断工具，检查网络连通性和网络通信状态(pod-pod/pod-node/pod-svc/node-svc/node-gateway、pod-gateway)，确认是否存在网络问题，并从 gateway→node→svc→pod 一层一层更细化的定位问题根源。\n\t    - 如果问题根源涉及 pod，可以从 ipam、bgp 路由角度分析\n\t    - 如果涉及 svc，可以从 kube-proxy、iptables 角度分析\n\t    - 如果涉及 node，可以从物理网络、gateway 角度分析\n    - 对比不同机器上的性能指标以及网络状况，确定出错的机器是否存在特殊网络问题。\n4.  检查 Calico 配置 [[calico配置文件]]\n    - 确认 Calico 的配置文件是否正确，是否缺失或错误配置。包括 cni configmap、bgp、bgppeer、felix等相关配置\n5.  检查系统资源使用情况\n    - 查看系统 CPU、内存、磁盘等资源的使用情况，如果存在资源不足或超载现象，可以考虑优化或扩容。\n    - 确认 Calico 的网络带宽使用情况，分析网络流量的分布和情况，确认是否出现了网络流量瓶颈。\n6.  逐一排查可能的原因\n    - 如果是网络通信问题，可以检查网络拓扑，路由器、交换机、防火墙等设备的配置，确认是否存在配置错误或故障。\n    - 如果是性能瓶颈问题，可以进行性能测试和优化，如使用性能工具、调整配置参数等。\n    - 如果是系统崩溃问题，可以通过故障日志、内存转储文件等进行分析定位。\n7.  进行测试环境部署和测试\n    - 如果出现问题的环境比较复杂，可以考虑在测试环境中进行部署和测试，以排除环境配置和部署工具问题。\n8.  更新和升级 Calico 版本\n    - 如果发现 Calico 的问题存在于旧版本中，可以尝试升级到最新版本。\n    - [Upgrade Calico on Kubernetes](https://docs.tigera.io/calico/latest/operations/upgrading/kubernetes-upgrade)\n9.  寻求社区帮助\n    - 如果以上方法无法解决问题，可以联系 Calico 的社区成员，提供详细的问题描述和相关信息，以便社区成员进行协助和解决。\n    - 可以在社区论坛或邮件列表上留言，或直接向社区成员联系，提供相关问题信息，交流问题解决方案。\n    - [Issues · projectcalico/calico](https://github.com/projectcalico/calico/issues)\n    - [Discuss Calico ](https://discuss.projectcalico.tigera.io/)\n    - https://calicousers.slack.com/\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5":{"title":"calico 网络策略","content":"\n## Kubernetes NetworkPolicy： [[networkPolicy - 网络策略]]\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/411ec90abad693db3ccba83b173099e3.png)\n\n- namespace 级别的网络策略\n- 网络策略应用于 labelSelector 选取出的 pod\n- 网络策略可以指定允许从哪些 pods 来、到哪些 pods 去、namespace 或者 cidr 的流量\n- 网络策略可以指定协议(TCP/UDP/SCTP)，并指定特定的端口\n\n\n## Calico NetworkPolicy\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/2c9d732aeb29f1bb14bb09c89ab90bdc.png)\n\n扩展了 kubernetes networkpolicy\n- 网络策略可以应用于任意类型的 endpoint (pods/containers/VMs/host interface)\n- 网络策略可以定义规则 - 应用于 ingress、egress 或者两者都定义\n- 网络策略规则支持：\n\t- 动作：allow、deny、log、pass\n\t- 源和目标匹配规范：\n\t\t- 端口：数字端口、端口范围、kubernetes 命名的端口\n\t\t- 协议：TCP、UDP、ICMP、SCTP、UDPlite、ICMPv6、protocol numbers(1-255)\n\t\t- HTTP 属性（使用 istio service mesh）\n\t\t- ICMP 属性\n\t\t- ipv4/ipv6\n\t\t- 单个 IP 或者 CIDR\n\t\t- endpoint 选择器（使用 label 表达式选取 pods/VMs/host-interfaces/network-sets）\n\t\t- namespace 选择器\n\t\t- service account 选择器\n- 可选的数据包处理控制：禁用连接跟踪，在 DNAT 之前应用，应用于转发流量和/或本地终止流量\n\n```bash\nroot@node:~# kubectl get crd\nNAME                                                  CREATED AT\nbgpconfigurations.crd.projectcalico.org               2023-09-07T09:47:13Z\nbgpfilters.crd.projectcalico.org                      2023-09-07T09:47:13Z\nbgppeers.crd.projectcalico.org                        2023-09-07T09:47:13Z\nblockaffinities.crd.projectcalico.org                 2023-09-07T09:47:13Z\ncaliconodestatuses.crd.projectcalico.org              2023-09-07T09:47:13Z\nclusterinformations.crd.projectcalico.org             2023-09-07T09:47:13Z\nfelixconfigurations.crd.projectcalico.org             2023-09-07T09:47:13Z\nglobalnetworkpolicies.crd.projectcalico.org           2023-09-07T09:47:13Z\nglobalnetworksets.crd.projectcalico.org               2023-09-07T09:47:13Z\nhostendpoints.crd.projectcalico.org                   2023-09-07T09:47:13Z\nipamblocks.crd.projectcalico.org                      2023-09-07T09:47:13Z\nipamconfigs.crd.projectcalico.org                     2023-09-07T09:47:13Z\nipamhandles.crd.projectcalico.org                     2023-09-07T09:47:13Z\nippools.crd.projectcalico.org                         2023-09-07T09:47:13Z\nipreservations.crd.projectcalico.org                  2023-09-07T09:47:13Z\nkubecontrollersconfigurations.crd.projectcalico.org   2023-09-07T09:47:13Z\nnetworkpolicies.crd.projectcalico.org                 2023-09-07T09:47:13Z\nnetworksets.crd.projectcalico.org                     2023-09-07T09:47:13Z\n```\n\ncalico 相关的 crd 中可应用网络策略的有：\n- globalnetworkpolicies\n- networkpolicies\n- globalnetworksets\n- networksets\n- hostendpoints\n\n相关链接：\n- [网络策略 | Kubernetes](https://kubernetes.io/zh-cn/docs/concepts/services-networking/network-policies/)\n- [Kubernetes NetworkPolicy API](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/)\n- [Get started with policy | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/network-policy/get-started/)\n- [About Network Policy | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/about/about-network-policy#calico-network-policy)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E8%BF%90%E8%90%A5%E6%96%87%E6%A1%A3":{"title":"calico 运营文档","content":"1. 新增 or 扩容 ippool\n2. 固定 ip\n3. ns 与 subnet 绑定\n4. calico 限速\n5. calico 的 tunnel 地址会自动分配\n6. 迁移 ippool 的容量准备\n7. blockSize 应该如何取值\n\nkubesphere 集成了cni 的 ippool 和 网络策略，ks 在 cni 基础之上封装了一层，用于屏蔽不同 cni 底层实现的，现阶段版本中底层中主要使用了 calico。\n\n### 1. ippool 新增 or 扩容\n扩容Calico的IPV4POOL时，会对业务以及网络有影响吗？需要做哪些配合工作？\n\n#### 新增 ippool \n使用 kk 安装集群时会使用 kubePodsCIDR: 10.233.64.0/18 创建一个默认子网 default-ipv4-ippool，此时创建的工作负载会使用该 ippool 来分配 ip，当然也可以新建新的 ippool 来用于负载的 ip 分配，如果某一个 ippool 因地址分配满而不够使用时，可以再创建一个新的 ippool 来分配 ip。\n在 overlay 网络模式下，可以无需关系网络细节，但是在 underlay 模式下，使用 bgp 模式时新建的 ippool 需要注意不要与已有的 ip 地址段冲突，并且根据实际情况考虑是否需要在对应的交换机上添加对应的策略来放行或者拒绝新的 ippool 的地址段。\n\n#### 扩容 ippool\n如果可以通过新建 ippool 的方式解决 ip 地址不够用的问题，则不考虑 ippool 扩容的操作。\ncalico 支持直接修改 ippool 资源的 cidr，因此在未启用 ks ippool 的情况下可以直接扩容的 ippool cidr，修改时不要与已有的 ippool 或者已有的底层 ip 地址段冲突。\n通过此方法扩容之后，ippool 的地址段增加，可用的 ipamblocks 增加，也不会对已有的业务造成影响。\n\u003e 需要注意 calico ippool 没有做地址冲突检测等机制，因此在修改 calico 相关资源时需要明确自己的操作以及会带来的影响。\n\n**ks 界面中不支持扩容操作，可以进行删除后重建**。\nkubesphere 为了整个集群的网络安全考虑，不支持对 ippool 的修改；同时对于要删除的 ippool 必须保证其 ippool 中没有 ip 被占用，否则删除失败。\n因此对于已经启用 kubesphere ippool 的用户，对于要扩容的 ippool，需要进行以下步骤：\n1. 将 ippool 上的负载迁移到其他 ippool(*修改负载注解中使用的 ippool*)\n2. 删除要扩容的 ippool\n3. 新建较大范围的 ippool\n4. 将必要的负载迁移回该 ippool (*修改负载注解中使用的 ippool*)\n\n\n\n\n### 2. 固定 ip\n[Configure the Calico CNI plugins (tigera.io)](https://projectcalico.docs.tigera.io/reference/cni-plugin/configuration#requesting-a-specific-ip-address)\n[Use a specific IP address with a pod (tigera.io)](https://projectcalico.docs.tigera.io/networking/use-specific-ip#reserving-ips-for-manual-assignments)\n设置的 ip 地址需要在 calico ippool 范围中，否则 ipam 报错找不到相应的 ipamblock 无法分配 ip。\n**单个 pod 固定 ip**\n创建 pod 或者创建单个副本的 pod 时添加`cni.projectcalico.org/ipAddrs`注解：\n```\n annotations:\n    \"cni.projectcalico.org/ipAddrs\": \"[\\\"192.168.0.1\\\"]\"\n```\npod 对应的 annotation 的 ipv4 地址值只支持设置一个，当设置多个时会报错：\ncannot have more than one IPv4 address for \"cni.projectcalico.org/ipAddrs\" annotation\n\n**deploy 多副本 pod 固定 ip**\n先创建预期 cidr、有符合预期 ip 数量的 ippool\n![upgit_20221222_1671700172.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221222_1671700172.png)\n创建负载时添加`cni.projectcalico.org/ipv4pools`注解：\n```\nannotations:\n    \"cni.projectcalico.org/ipv4pools\": \"[\\\"ippool\\\"]\"\n```\n\n当副本数超过 ippool 大小时，pod 会创建不成功直到该 ippool 有空余 ip 。建议使用时 ippool 可用 ip 数量大于副本数，这样可以在进行扩容或者重启操作时避免出现因 ip 不够用，pod 等待释放 ip 而无法创建的过程\n\n\n\u003e 如果同时存在 `cni.projectcalico.org/ipAddrs` 和 `cni.projectcalico.org/ipv4pools` 时，以最小粒度的 `cni.projectcalico.org/ipAddrs` 为主。\n\n\n#### 3. ns 与 subnet 绑定\n[Configure the Calico CNI plugins (tigera.io)](https://projectcalico.docs.tigera.io/reference/cni-plugin/configuration#using-kubernetes-annotations)\n通过设置注解`cni.projectcalico.org/ipv4pools`来实现 ns 与 ippool 的绑定\n```\nannotations:\n    \"cni.projectcalico.org/ipv4pools\": \"[\\\"ippool\\\"]\"\n```\n\n可以绑定多个 ippool，其使用顺序一般为：指定的第一个 ippool 用完之后，使用指定的第二个 ippool。对于 ip 的分配同样是使用 ippool - ipamblock 的方式分配。\n```\nannotations:\n    \"cni.projectcalico.org/ipv4pools\": \"[\\\"ippool\\\", \\\"ippool-1\\\"]\"\n```\n\n---\n\ntor 建立 ibgp 情况下，可能学习不到路由 or blackhole 路由无法借用地址，或者借用了地址无法访问\n\n---\n\n\n#### 4. calico 限速\n[[bandwidth 带宽限制]]\n在 kubernetes 中有两种方式可以实现限流。\n1. 配置 cni 插件 bandwidth\n```json\n{\n   \"type\": \"bandwidth\",\n   \"capabilities\": {\"bandwidth\": true},\n   \"ingressRate\": 10000000,\n   \"ingressBurst\": 10000000,\n   \"egressRate\": 10000000,\n   \"egressBurst\": 10000000\n}\n```\n\nbandwidth 使用 tbf 实现流量整形。TBF (令牌桶过滤器) 是一个简单的队列规则，**只允许以不超过事先设定的速率到来的数据包通过，但可能允许短暂突发流量超过设定值**。TBF的实现在于一个缓冲器(桶)，桶被一些叫做”令牌”的虚拟数据以特定速率(token rate)填充着，如果有token 就能发数据。\n\ncni 配置\n- ingressRate：设定网卡收包速率 (bps)\n- ingressBurst：最多可以有多少个令牌能够即刻被使用(比特数)\n- egressRate：设定网卡发包速率 (bps)\n- egressBurst：最多可以有多少个令牌能够即刻被使用(比特数)，该参数同 tbf 的 burst 表示桶的大小。通常管理的带宽越大，需要的缓冲器就越大。在Intel体系上,10mbit/s的速率需要至少10k字节的缓冲区才能达到期望的速率。\n\n如果缓冲区太小，就会导致到达的令牌没有地方放(桶满了)，这会导致潜在的丢包。(最小缓冲区大小可以通过以下方式计算：速率/HZ = 10mbit / 100 ≈ 10kB)\n\n\u003e ingressRate 和 ingressBurst 必须同时设置，缺少一个则配置不生效。\n\u003e egressRate 和 egressBurst 必须同时设置，缺少一个则配置不生效。\n\u003e ingressBurst、egressBurst 在换算时会除以8，因此在填写实际值时要留意。\n\u003e \n\u003e 更多相关 tbf：[tc-tbf(8) - Linux manual page (man7.org)](https://man7.org/linux/man-pages/man8/tbf.8.html)\n\n**calico 修改 cni 配置**：\ncalico 默认的配置文件为configmap kube-system/calico-config。可以通过以下命令进行查看：`kubectl get cm -n kube-system calico-config -o yaml`。 calico 默认启用 bandwidth 来对 pod 入口和出口流量进行整形。因此可以根据上述 cni 配置来修改 calico-config，由此设置默认的带宽限制。\n\n在 calico calico-config 配置中添加以上配置后，需要重启 calico-node daemonset，重启完成之后检查主机上 /etc/cni/net.d/10-calico.conflist 中是否也添加了对应的字段。\n\n对于修改配置之前创建的 pod ，需要重启 pod 带宽限速才会生效。\n\n\n2. 设置 pod annotations\n```yaml\nannotations:\n  kubernetes.io/ingress-bandwidth: 300M\n  kubernetes.io/egress-bandwidth: 300M\n```\n\n该方法只能设置带宽，无法设置 Burst 值，对于 Burst 值，使用了较大的 256Mb。\n![upgit_20221223_1671790862.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221223_1671790862.png)\n\n\n\u003e 经过测试发现，当 cni 配置带宽限制时，再次设置 pod 注解并不会覆盖掉 cni 的效果。\n\n\n#### 5. calico 的 tunnel 地址会自动分配\n**问题现象：**\n\t使用 ipip 模式安装集群，并切换为 bgp 模式之后(修改默认 default-ipv4-ippool 的 ipipMode: Never，并修改 calico-node daemonset 的环境变量 CALICO_IPV4POOL_IPIP: Never)，对于新建 ippool 的 ipipMode 为 Always 并且自动为 tunl0 分配 ip，在界面上删除 ippool 时提示 ip 被占用无法删除 ippool。\n**问题分析：**\n\t在界面上创建 ippool 时，由 ks-controller-manager 将 ks ippool 转换为 calico ippool，ks-controller-manager 在初始化时会获取 calico-node daemonset 的环境变量，并以此作为转换 calico ippool 的参数。ks-controller-manager 不会持续 watch calico-node daemonset， 因此在修改其环境变量后，ks-controller-manager 已经被初始化的参数不会自动修改。\n**问题解决：**\n\t修改为 bgp 模式并修改 calico-node daemonset 环境变量之后，重启一下 ks-controller-manager 即可；或者在使用 kk 安装集群时指定 ipipMode 为 Never。\n\n\n#### 6. ippool 在迁移业务时需要做的准备\n在应用大规模更新时，大量容器删除并且大量容器创建，创建的容器需要很长时间才能就绪。这其中一个可能的原因，就是大量容器删除释放ip过于缓慢，导致新创建的容器无法及时获取ip，从而无法及时启动。(可用 ip 数量紧张)\n\nkubernetes 容器的整个删除流程基本套路如下：\n1.  发送删除请求到apiserver，标记容器的deletionTimestamp\n2.  kubelet watch到该事件，进入删除流程\n3.  pod执行killPod流程\n4.  kill app容器\n    - 执行preStopHook\n    - 等待gracePeriod\n    - 停止app容器\n5.  kill pause容器\n    - 调用cni接口，停止容器网络\n    - 停止pause容器\n6.  从apiserver中将pod的信息清除（真正删除掉存储在etcd的pod信息）\n\n可以看出，ip的释放其实是发生在调用cni接口的时候。因此，按照流程需要等待的时间是较为漫长的。\n\n但是不同的更新策略，ip 数量紧张的情况也有所不同。\n\n##### 重建策略\n```yaml\nspec:\n  replicas: 3\n  strategy:\n    type: Recreate\n```\n在该策略下更新，所有的 pod 会先处于 Terminating 状态，在所有的 Pod 都被删除之后才会开始创建新的 Pod。而 pod 在删除之后其占用的 ip 已经被释放，因此在迁移的过程中且在没有新的负载创建的情况下， ip 数量使用情况不会紧张，也不会产生 pod 等待释放 ip 后才能分配 ip 的情况。\n\n##### 滚动更新\n```yaml\nspec:\n  replicas: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2        # 一次可以添加多少个Pod\n      maxUnavailable: 1  # 滚动更新期间最大多少个Pod不可用\n```\n\n在应用更新时如果采用滚动更新，需要确保可用的Pod对象数量不低于某阈值以确保可以持续处理客户端的服务请求。此时对于新的 pod 创建的时机以及整个迁移的进度除了受是否有可用 ip 的影响外，同时也受更新策略设定的 `spec.strategy.rollingUpdate.maxSurge`和`spec.strategy.rollingUpdate.maxUnavailable`两个属性影响。\n-    maxSurge：和期望ready的副本数比，超过期望副本数最大比例（或最大值），**这个值调的越大，副本更新速度越快**。假设当此值为 30% 时，启动滚动更新后，会立即对新的 ReplicaSet 扩容，同时保证新旧 Pod 的总数不超过所需 Pod 总数的 130%。一旦旧 Pod 被杀死，新的 ReplicaSet 可以进一步扩容， 同时确保更新期间的任何时候运行中的 Pod 总数最多为所需 Pod 总数的 130%。\n-    maxUnavailable：和期望ready的副本数比，不可用副本数最大比例（或最大值），**这个值越小，越能保证服务稳定，更新越平滑**；假设当此值设置为 30% 时，滚动更新开始时会立即将旧 ReplicaSet 缩容到期望 Pod 个数的70%。 新 Pod 准备就绪后，可以继续缩容旧有的 ReplicaSet，然后对新的 ReplicaSet 扩容， 确保在更新期间可用的 Pod 总数在任何时候都至少为所需的 Pod 个数的 70%。\n\n滚动更新时会出现一部分 pod 处于删除中，ip 没有被释放，新的一部分 pod 处于新建中，正在进行分配 ip；此时的 ip 占用数量大于期望的副本数量。可能出现 ip 数量紧张、新建的 pod 等待删除的 pod 释放 ip 的情况。因此使用滚动更新迁移应用时，最好保证 ippool 中可用 ip 数量 ≥ maxSurge(比例) * 现有负载 pod 数。\n\n#### 7. blockSize 取值\ncalico 使用 block 进行 ip 分配，blockSize 为 block cidr 的大小。取值范围为20~32，默认值为 26。如果创建的 ippool 的 cidr 大于 26，则 blockSize 需要指定，否则创建的 ippool 不可使用。\n当 ippool cidr 设置为 24，blockSize 设置为 26 时，可以分为 4 个 block。如果此时节点数量为 2，当一个节点上 block 中 ip 占用满时，会继续申请一个 block 并绑定到该节点上；如果节点数量为4，刚好每个节点分配一个 block，当节点 block 中 ip 使用完之后，便会出现借用 ip 或者无法创建 pod 的情况（根据 ipamconfig 配置决定）；如果节点数量大于 4 时，block 数量不够用，所以必然会出现 ip 借用或者无法创建 pod 的情况。\n因此首先保证 ippool 中的 ip 充足，其次尽量使 block 可以均匀的分配到节点上，避免 ip 借用导致路由数增多或 pod 无法创建的问题。综合考虑之后，计算出适当的 blockSize 值。\n\n\n参考：\n- [kubernetes - Set burst for bandwidth limit for a pod - Stack Overflow](https://stackoverflow.com/questions/59729354/set-burst-for-bandwidth-limit-for-a-pod)\n- [CNI](https://www.cni.dev/plugins/current/meta/bandwidth/)\n- [tc-tbf(8) - Linux manual page (man7.org)](https://man7.org/linux/man-pages/man8/tbf.8.html)\n- [【kubernetes/k8s源码分析】CNI bandwidth源码分析_张忠琳的博客-CSDN博客_bandwidth cni](https://blog.csdn.net/zhonglinzhang/article/details/98053900)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/calico-%E8%BF%90%E8%90%A5%E9%97%AE%E9%A2%98":{"title":"","content":"#calico  #issue\n\n![upgit_20221202_1669948100.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221202_1669948100.png)\n\n\n- 配置etcd\ncalico 支持两种数据存储，一种是使用 kubernetes api 接口来对其 etcd 进行读写操作；一种直接连接 etcd 进行读写操作，同时 calico 支持配置 etcd tls 进行数据加密实现安全的存储，对于 etcd 相关的证书生成以及更新维护不在 calico 管理范围之内。\n\n[docs/generate-self-signed-certificates.md at master · coreos/docs (github.com)](https://github.com/coreos/docs/blob/master/os/generate-self-signed-certificates.md)\ncalico 通过 configmap 用于 daemonset 配置环境变量 + Secret 配置证书 base64 编码\n对于 etcd 的证书要与集群的证书进行统一管理\n\n\n- 扩容、新增 ippool\n\t使用 kk 安装集群时会使用 kubePodsCIDR: 10.233.64.0/18 创建一个默认子网，此时创建的工作负载会使用该 ippool 来分配 ip，如果该 ippool 地址分配满而不够使用时，可以新建一个 ippool 使用新的 ippool 来分配 ip。\n\t\n\t一般情况不进行 ippool 扩容，因为扩容操作比较繁琐而且可以通过新建ippool 的方式避免。如果有必要可以通过以下操作进行扩容：需要先创建一个临时的 ippool 并禁用要扩容的 ippool，将原有 ippool 的业务 pod 删除之后在新的 ippool 重新分配，删除并重建扩容的 ippool，再将临时创建的 ippool 禁用并将业务 pod 删除，pod 便会在新的 ippool 重新分配，完成操作之后将临时的 ippool 删除\n\n- calico 升级 \n对于升级过程中，最快的升级类比于重启calico daemonset，\n影响的时间需要评估\n\n\n部署：\n- 部署时的网络规划\n\t方案确定：underlay or overlay\n\toverlay 模式不关心底层物理网络，使用 ipip 封装或者 vxlan 封装进行包的转发\n\tunderlay 依赖于底层的物理网络，部署方式以及考虑的情况也取决要部署环境的网络架构\n\n- calicoctl 工具部署\n\t尽量在全物理节点部署，方便在各个节点上单独维护以及排查问题\n\t\n- kubekey 支持 calico 配置选项\n\t- pod cidr - 默认 ippool cidr\n\t- ipip/vxlan mode，veth mtu\n在安装完成后手动完成 bgp rr 模式相关的配置\n\n- calico 选择 RR 节点\n1. 选取 kubernetes 节点当做 rr 节点\n\t需要在选取的 RR 节点上打 label，之后设置 routeReflectorClusterID(*该 id 表示 BGP 路由器的集群 id，id 唯一即可没有特殊的要求，但是为了方便维护尽量取一个与所搭建集群相关的 ip 地址*)，如果在一个集群下有多个 rr 节点，可以将 rr 节点的 routeReflectorClusterID 设置为同一个 id\n\t建立 bgppeer 完成，rr 节点与其他节点 以及 rr 节点与交换机的 bgp 连接\n2. 选取 tor 并开启 rr 模式\n\t在交换机上完成对应 rr 的配置，在 calico 中配置 bgpeer 即可\n\t![upgit_20221205_1670210202.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221205_1670210202.png)\n\n监控\n- calico 支持 promethrus 监控\n![upgit_20221202_1669952449.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221202_1669952449.png)\n\n\n\n\n[Troubleshooting and diagnostics | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/operations/troubleshoot/troubleshooting)\nLinux 系统上的一个常见问题是 conntrack 表中的空间不足，这会导致 iptables 性能不佳。如果主机上运行大量工作，或者负载会创建大量 TCP 连接或双向 UDP 流，就会发生这种情况。为避免该情况问题，使用以下命令来增加 conntrack 表的大小：\n``` shell\nsysctl -w net.netfilter.nf_conntrack_max=1000000  \necho \"net.netfilter.nf_conntrack_max=1000000\" \u003e\u003e /etc/sysctl.conf\n```\n","lastmodified":"2025-03-26T03:48:43.131318711Z","tags":null},"/calico-bandwidth-%E9%80%82%E9%85%8D":{"title":"calico bandwidth 适配","content":"需求以及修改方式见：[[bandwidth 带宽限制]]\n\n对于 bandwidth 编译之后，根据  [[github release]] 将编译生成的文件上传到 github release\n\n重新编译 cni-plugin 镜像，将其中下载的 cni plugin 更换为自己维护的 cni 仓库 release 包\n```shell\n#!/bin/bash\n\nREPO=${REPO:-rykren}\nTAG=${TAG:-v3.23}\nIMAGE=${IMAGE:-cni}\nPUSH=${PUSH:-false}\narch=(amd64 arm64 armv7 ppc64le s390x) # \n\ndocker builder prune\n# cd ./calico\nrm -r ./cni-plugin/bin\n\n\n# build docker IMAGE\nfor i in \"${arch[@]}\"\ndo\n   make -C cni-plugin image DEV_REGISTRIES=$REPO ARCH=$i\n   if [ \"$TAG\" != \"latest\" ]; then\n      make retag-build-images-with-registries DEV_REGISTRIES=$REPO BUILD_IMAGES=$IMAGE VALIDARCHES=$i IMAGETAG=$TAG\n   fi\ndone\n\n# push image manifest\nif [ \"$PUSH\" = true ]; then\n   manifest=\"\"\n   for i in \"${arch[@]}\"\n   do\n      # make cd-common DEV_REGISTRIES=$REPO BUILD_IMAGES=$IMAGE BRANCH_NAME=$TAG IMAGETAG=$TAG VALIDARCHES=$i CONFIRM=1\n      # make push-images-to-registries DEV_REGISTRIES=$REPO BUILD_IMAGES=$IMAGE IMAGETAG=$TAG VALIDARCHES=$i CONFIRM=1\n      # make push-manifests DEV_REGISTRIES=$REPO BUILD_IMAGES=$IMAGE IMAGETAG=$TAG VALIDARCHES=$i CONFIRM=1\n      docker push $REPO/$IMAGE:$TAG-$i\n      manifest+=$REPO/$IMAGE:$TAG-$i\n      manifest+=\" \"\n   done\n\n   echo $manifest\n   docker manifest rm $REPO/$IMAGE:$TAG\n   docker manifest create $REPO/$IMAGE:$TAG $manifest --amend\n   docker manifest push $REPO/$IMAGE:$TAG\nfi\n```","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-ebpf-%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5":{"title":"calico ebpf 支持情况","content":"calico 从 3.13 开始引入 ebpf，3.16 正式 GA，后续版本持续完善。所以 calico ebpf 已经比较成熟，calico 官方也提供了一些相关的文档和技术博客：\n\n- calico ebpf 模式 GA - [Announcing eBPF Mode GA](https://www.tigera.io/blog/announcing-ebpf-mode-ga/)\n- 介绍 calico ebpf 数据面 - [Introducing the Calico eBPF dataplane](https://www.tigera.io/blog/introducing-the-calico-ebpf-dataplane/)\n- 如何开启 ebpf 数据面 - [Enable the eBPF dataplane](https://docs.tigera.io/calico/latest/operations/ebpf/enabling-ebpf)\n- 如何 troubleshoot ebpf 模式 - [Troubleshoot eBPF mode](https://docs.tigera.io/calico/latest/operations/ebpf/troubleshoot-ebpf)\n- 监控 calico ebpf 数据面 - [How to Monitor Calico's eBPF Data Plane for Proactive Cluster Management](https://www.tigera.io/blog/how-to-monitor-calicos-ebpf-data-plane-for-proactive-cluster-management/)\n\n根据以上文档，看出 Calico eBPF 数据面的优势：\n- **性能提升：** Calico eBPF 数据平面在服务处理方面具有优势，例如源 IP 保留和直接服务器返回 (DSR)，这些特性可以提高性能并简化网络配置。Calico eBPF 数据平面旨在提高吞吐量和降低延迟、降低 CPU 使用率。\n\n\n但是目前网络上公开的 Calico eBPF 生产环境成功案例比较有限。\n所以说 Calico eBPF 在生产环境部署中潜力巨大，但也面临一些挑战、风险和限制，这里罗列一下可能存在的限制：\n\n- **内核版本兼容性：** eBPF 依赖于 Linux 内核的功能，因此需要特定版本的内核才能正常工作。较旧的内核版本可能不支持 Calico eBPF 所需的 eBPF 功能或 helper 函数，因此在后续的 calico 版本升级中可能因为内核版本不兼容而升级内核，但可能会对现有系统造成影响。 \n    \n- **网络硬件兼容性：** eBPF 的一些高级特性，例如 XDP，需要网卡驱动程序的支持才能实现最佳性能。如果现有的网络硬件或驱动程序不支持可能无法充分发挥 eBPF 的优势，甚至可能导致性能下降或不稳定。\n    \n- **调试和故障排除的复杂性：** eBPF 程序在内核中运行，因此调试和故障排除比传统的网络工具更具挑战性。需要专门的工具和技术来分析 eBPF 程序的行为和性能，例如 `calico-bpf` 工具和 `bpftool`。 理解和使用这些工具需要一定的学习曲线。 \n    \n- **社区支持和文档：** 虽然 Calico 社区提供了 eBPF 相关的文档和支持，但与更成熟的 iptables 数据平面相比，eBPF 相关的资源和经验可能相对较少。 这可能会增加在生产环境中部署和维护 eBPF 的难度。\n    \n- **可观测性和指标：** 目前社区没有提供良好的 ebpf 网络可观测性，也没有提供可用于针对 ebpf 的 metrics 指标。\n\n**其他相关链接：**\n- [eBPF Explained: Use Cases, Concepts, and Architecture](https://www.tigera.io/learn/guides/ebpf/)\n- [Calico vs. Cilium: 9 Key Differences and How to Choose](https://www.tigera.io/learn/guides/cilium-vs-calico/)\n- [CNI Benchmark: Understanding Cilium Network Performance](https://cilium.io/blog/2021/05/11/cni-benchmark/)\n- [Calico iptables vs. eBPF: Benchmarking the differences](https://superorbital.io/blog/calico-iptables-vs-ebpf/)\n- [Enhancing Kubernetes Networking with Calico and eBPF: A Real-World Benchmark | by Selvam Raju | Medium](https://medium.com/@selvamraju007/enhancing-kubernetes-networking-with-calico-and-ebpf-a-real-world-benchmark-4b6042381754)\n- [Key advantages of the Calico eBPF data plane (tigera.io)](https://www.tigera.io/blog/key-advantages-of-the-calico-ebpf-data-plane/)\n","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-ebpf-dataplane":{"title":"","content":"#calico #ebpf \n\n### 介绍calico ebpf \n[Introducing the Calico eBPF dataplane (tigera.io)](https://www.tigera.io/blog/introducing-the-calico-ebpf-dataplane/)\n\n### 开启 calico ebpf\n[Enable the eBPF dataplane (tigera.io)](https://projectcalico.docs.tigera.io/master/maintenance/ebpf/enabling-ebpf)\n\n1. 验证集群是否支持 ebpf\n```\nuname -rv\n\n5.4.0-42-generic #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020\n\nmount | grep \"/sys/fs/bpf\"\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\n```\n\n2. 配置 calico 直接访问 apiserver\n\n```\nkubectl cluster-info \n```\n\n```yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: kubernetes-services-endpoint\n  namespace: kube-system\ndata:\n  KUBERNETES_SERVICE_HOST: \"lb.kubesphere.local\"\n  KUBERNETES_SERVICE_PORT: \"6443\"\n```\n\n```bash\nkubectl delete pod -n kube-system -l k8s-app=calico-node\nkubectl delete pod -n kube-system -l k8s-app=calico-kube-controllers\n\nkubectl logs -n kube-system \u003cpod name\u003e | grep KUBERNETES_SERVICE_HOST\n2020-08-26 12:26:29.025 [INFO][7] daemon.go 182: Kubernetes server override env vars.\n```\n\n3. 配置 kube-proxy\n```bash\nkubectl patch ds -n kube-system kube-proxy -p '{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"non-calico\": \"true\"}}}}}'\n```\n如果无法禁用 kube-proxy ，配置 Felix\n```bash\nkubectl patch felixconfiguration default --type merge --patch='{\"spec\": {\"bpfKubeProxyIptablesCleanupEnabled\": false}}'\n```\n\n4. 开启 ebpf 模式\n```bash\nkubectl patch felixconfiguration default --type merge  --patch='{\"spec\": {\"bpfEnabled\": true}}'\n```\n\n5. 切换为 DSR 模式\n```bash\nkubectl patch felixconfiguration default --type merge  --patch='{\"spec\": {\"bpfExternalServiceMode\": \"DSR\"}}'\n```\n\n6. 取消设置 - 回滚\n```bash\nkubectl patch felixconfiguration default --patch='{\"spec\": {\"bpfEnabled\": false}}' --type merge\nkubectl patch ds -n kube-system kube-proxy --type merge -p '{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"non-calico\": null}}}}}'\n```\n\n### 问题\n切换到 bpf 数据面之后，calico-node 以及 calico-controller 无法正常工作\n\n![upgit_20221116_1668568103.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668568103.png)\n\n![upgit_20221116_1668568009.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668568009.png)\n\n'calico_connect_v4': failed to attach to cgroup: Invalid argument\n'calico_connect_v6': failed to attach to cgroup: Invalid argument\n\n\n内核参数 /sys/config_xxx\nkubectl exec calico-node-4wqvl -n calico-system -- calico-node -bpf nat dump\n\nset  `BPFLogLevel` felix config to `Debug`\ntc exec bpf debug \u003e\u0026 tc.log\n\nbpftool net -j\ntc -s qdisc show dev eth0\n\n\nkubectl  logs -f -n kube-system calico-node-czsml | grep \"BPF enabled\"\n\nexport EBPF_INTERESTING_IP=192.168.197.122 \u0026\u0026 export EBPF_INTERESTING_PORT=31911 \u0026\u0026 for i in `kubectl get pod -o wide -n kube-system | grep calico-node | awk '{print $1}'`; do echo $i; echo \"-----\"; kubectl exec -n kube-system $i -- calico-node -bpf conntrack dump 2\u003e\u00261 | grep ${EBPF_INTERESTING_IP} | grep ${EBPF_INTERESTING_PORT}; printf \"\\n\"; done\n\nkubectl exec -n kube-system calico-node-l8pm7 -- tc -s qdisc show dev  cali64ad15cb1eb  2\u003e\u00261 | egrep -v 'Defaulted'\n\n![upgit_20221129_1669711503.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221129_1669711503.png)\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/calico-ipam-%E8%BF%87%E7%A8%8B":{"title":"calico ipam 过程","content":"### calico ipam 相关 CRD 资源\n\n| 资源名 | 介绍 |\n|--|--|\n| ippool | 用于 ipam 分配的 ip 池 |\n| ipamblock | block 中 ip 分配信息等 |\n| blockaffinities | 由 ippool 分割的细粒度的 ip 块以及 block 与节点的亲和性绑定关系 |\n| ipamconfigs | 用于配置 ipam 相关参数 |\n| ipamhandles | 用于保存 pod 与 block 关系 |\n\n#### ippool\n表示 IP 地址的集合，Calico 从中分配 IP给 pod。\n示例 yaml：\n```yaml\napiVersion: projectcalico.org/v3\nkind: IPPool\nmetadata:\n  name: ippool-1\nspec:\n  blockSize: 24\n  cidr: 10.233.0.0/18\n  ipipMode: Always\n  natOutgoing: true\n  vxlanMode: Never\n  disabled: false\n  nodeSelector: all()\n```\n\n| 字段 | 说明 | 取值 | 默认值 |\n|--|--|--|--|\n| blockSize | 该 ippool 用于分配 ip 的 block 的 CIDR 大小。block 会按需分配给 node， 并用于聚条目。该合路由来减少路由值只能在创建 ippool 时设置 |  ipv4：20~32   ipv6：116~128| ipv4：26, ipv6：122 |\n| cidr | ippool 的 ip 范围 | 有效的 IPv4 或 IPv6 CIDR | |\n| ipipMode | 使用 ipip 封装，不能与 vxlanMode 同时使用 | Always, CrossSubnet, Never| Never |\n| vxlanMode |使用 vxlan 封装，不能与 ipipMode 同时使用  | Always, CrossSubnet, Never| Never |\n| natoutgoing | 启用后，ippool 中的容器发送到该 ippool 外目的地的数据包将被伪装 | true, false | false |\n| disabled | 当设置为 true 时，Calico IPAM 将不会从该池中分配地址 | true, false | false |\n| nodeSelector | 节点选择器，IPAM 允许该 ippool 的地址分配给的节点 |  | all() |\n关于nodeSelector 取值应为表达式，符合 [IP pool (tigera.io)](https://projectcalico.docs.tigera.io/archive/v3.20/reference/resources/ippool#node-selector) 中的规范。\n\n#### blockaffinities\n```\napiVersion: crd.projectcalico.org/v1\nkind: BlockAffinity\nmetadata:\n  name: node3-10-233-92-0-24\nspec:\n  cidr: 10.233.92.0/24\n  deleted: \"false\"\n  node: node3\n  state: confirmed\n```\n\n| 字段 | 说明 | 取值 | 默认值 |\n|--|--|--|--|\n| cidr | 该 block 的 cidr 范围 | ipv4、ipv6 cidr |  |\n| deleted | 设置为 true 时，客户端将视其为不存在 | true, false | false |\n| node | 分配到的节点 | 节点的主机名 |  |\n| state | 与 IPAM block 亲和的状态 | confirmed, pending, pendingDeletion |  |\n\n#### ipamblock\ncalico block 分配信息，包含 pod 信息和handle id、已经分配的情况、未分配的情况和绑定的节点等。\n```\napiVersion: crd.projectcalico.org/v1\nkind: IPAMBlock\nmetadata:\n  labels:\n    ippool.network.kubesphere.io/name: default-ipv4-ippool\n  name: 10-233-92-0-24\nspec:\n  affinity: host:node3\n  allocations:\n  - null\n  - null\n  - 0\n  - 1\n  - 2\n  - ... ...\n  attributes:\n  - handle_id: k8s-pod-network.7dee7d26e16a008cbf11a02be6270454140056619ab5deb14ab33f09a032e142\n    secondary:\n      namespace: kube-system\n      node: node3\n      pod: calico-kube-controllers-64d69886fd-8mzfj\n      timestamp: 2022-12-26 03:28:07.206517227 +0000 UTC\n  - ... ...\n  cidr: 10.233.92.0/24\n  deleted: false\n  strictAffinity: false\n  unallocated:\n  - 77\n  - ... ...\n```\n\n| 字段 | 说明 | 取值 |\n|--|--|--|\n| affinity | block 分配到的节点 |  | \n| allocations | 已经分配的情况 |  | \n| attributes | 记录与 pod 绑定信息 |  |\n| cidr | block 的 cidr | ipv4、ipv6 cidr |  \n| deleted | 是否已经删除 | true, false | \n| strictAffinity | 是否允许借用 ip | true, false |\n| unallocated | 未分配的情况 |  | \n\n#### ipamconfigs\n```\napiVersion: projectcalico.org/v3\nkind: IPAMConfiguration\nmetadata:\n  name: default\nspec:\n  strictAffinity: false\n  maxBlocksPerHost: 4\n```\n\n| 字段 | 说明 | 取值 | 默认值 |\n|--|--|--|--|\n| strictAffinity | 启用后，不允许借用 ip | true, false | false |\n| maxBlocksPerHost | 每个主机亲和的 block 最大数量 | 0 - max(int32) | 不受限制 |\n\n#### ipamhandles\n```\napiVersion: crd.projectcalico.org/v1\nkind: IPAMHandle\nmetadata:\n  name: k8s-pod-network.d1639c31ee76d37e71bf115adf27a8e7ec9ff63a4528b4eac236b33026969aa5\nspec:\n  block:\n    10.233.92.0/24: 1\n  deleted: false\n  handleID: k8s-pod-network.d1639c31ee76d37e71bf115adf27a8e7ec9ff63a4528b4eac236b33026969aa5\n```\n\n| 字段 | 说明 | 取值 | 默认值 |\n|--|--|--|--|\n| block | 所关联的 block |  |  |\n| deleted | 是否删除 | true, false | false |\n| handleID | handID 名称 | cni 名称 + 容器ID |  |\n\n\n### 分配流程\n创建 pod 并被 kube-controller-manager 将其调度到某一个节点之后，kubelet 创建真正的 pod 并调用 calico cni 分配 ip 并完成网络配置。\n\n#### 指定分配\n- 遍历集群内 enable 的 ippool，并遍历查找包含指定 ip 地址的 ippool\n- 根据IP池的 blocksize 计算出IP地址对应的block cidr\n- 使用block cidr查询对应的block\n\t- 若查询结果为空，即 block 不存在，尝试创建 blockaffinity，并分配指定的IP。\n\t- 若查询到了对应的block，则尝试从block中分配指定的IP。\n- 分配指定的IP地址，首先会校验 block 与 node 的亲和性，如果设置了StrictAffinity参数，block必须与节点亲和才能够进行IP分配，否则会报错；之后进行分配，如果 IP 已被分配，则直接返回错误；如果此IP未分配，则进行分配并更新block的数据，创建 ipamhandles。\n\n#### 自动分配\n- 确定 ippool \n\t用户可能使用注解 cni.projectcalico.org/ipv4pools 指定分配 ip 的 ippool；如果用户没有指定则根据 ippool 的 nodeSelector 获取选择了当前调度节点的 ippool\n\t*此处存在一个问题：设置的 annotation 与 ippool 指定的 nodeSelector 不能同时工作*\n\t[K8S Annotation cni.projectcalico.org/ipv4pools should respect nodeSelector · Issue #4656 · projectcalico/calico (github.com)](https://github.com/projectcalico/calico/issues/4656)\n- 获取亲和块并分配\n\t获取符合所确定的 ip pool cidr 的 blockAffinities，并从其中 block 中尝试进行 ip 分配，如果没有合适的 block，根据 ipamconfigs 配置确定是否进行自动创建 block 并进行 ip 分配；如果无法再创建新的 block，根据 ipamconfigs 配置确定是否可以借用 ip 完成分配\n- 分配 IP并更新 ipamblock 的数据，创建 ipamhandles\n\n![upgit_20221226_1672041552.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221226_1672041552.png)\n\n\n\n\n### 释放 ip\n根据分配时创建的 ipamhandles 获取 pod 所占用的 block，并完成释放 ip 操作。\n![upgit_20221226_1672041684.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221226_1672041684.png)\n\n\n\n### 其他\n用于静态分配的 ippool 可以将其 ippool.nodeSelector 设置为 !all()，防止 ippool 被自动分配。与设置 disabled: true 不同，它仍然可以用于手动分配。由于 nodeSelector 不匹配任何节点，因此不会自动使用 IPPool。\n[IP pool (tigera.io)](https://projectcalico.docs.tigera.io/reference/resources/ippool#node-selector)\n\n图片来源：\n- [calico源码分析-ipam(1)_51CTO博客_calico ipam](https://blog.51cto.com/u_2010293/2781914)\n- [calico源码分析-ipam(2)_51CTO博客_nacos源码分析](https://blog.51cto.com/u_2010293/2781913)\n- [技术干货分享 | Calico IPAM源码解析_Kubernetes中文社区](https://www.kubernetes.org.cn/7989.html)","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-iperf":{"title":"","content":"\ncalico 内部\nnode - node\n![upgit_20221124_1669277963.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669277963.png)\n\npod - pod （自身）\n![upgit_20221124_1669277857.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669277857.png)\n\npod - node（同）\n![upgit_20221124_1669277894.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669277894.png)\n\npod - node\n![upgit_20221124_1669277916.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669277916.png)\n\n\n\n![upgit_20221124_1669279786.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669279786.png)\n\n\n![upgit_20221124_1669279344.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669279344.png)\n\n\n![upgit_20221124_1669281631.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221124_1669281631.png)\n\n\niperf3工具每100ms发一轮报文，每次在2、3ms内瞬间发完，iperf工具则均匀的发送报文，接口限速使用 iperf3 作为测试工具需要调整令牌桶参数以达到最佳效果。\n\n\n问题1：为什么pod 自己给自己发的效果好过于 node 自己给自己发\n\tnamepsace 隔离协议栈\n问题2：pod - node 同节点  calico 与 手动创建的有差异\n\t在 ksv 环境有问题，但是在公有云没有问题\n问题3：跨节点访问的瓶颈在哪里 - CPU?\n\n问题4：通过 veth 会多处理、少处理什么吗？\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/calico-ipip-%E5%92%8C-bgp-%E5%85%B1%E5%AD%98":{"title":"calico ipip 和 bgp 共存","content":"calico 常用的有三种模式：ipip、vxlan 和 bgp，前两者属于 overlay 封装，无需关心底层网络；而 bgp 是 underlay 模式，如果集群外部的交换机和 calico 建立了 bgp 连接，calico bgp 会将集群内部的路由宣告出去，此时就需要关注底层网络、注意不要出现 ip 冲突的问题。\n\n### 讨论集群内容器网络的封装\n\ncalico ippool 中通过以下两个字段来决定：该 ippool 所定义的网段以什么样的模式来封装。\n- 当 ipipMode 为 Always 或 CrossSubnet 时为 ipip 封装，vxlanMode 同理；\n- 当两者均为 Never 时，会退为 BGP 模式。\n```yaml\n  spec:\n    ipipMode: Always\n    vxlanMode: Never\n# 取值：Always, CrossSubnet, Never\n# 注意：不能同时设置\n```\n\ncalico 中的 bgp 进程是一直在运行的，因为默认情况下 calico daemonset 会两两建立 bgp 连接，形成 bgp fullmesh，用于交换集群间的路由，保证集群间容器网络的连接；\n\n### 讨论集群外容器网络的可路由\n\noverlay 主要用于集群内容器连接；而对于集群外想直接访问 pod ip 是通过 bgp 实现的；\n\n实现外部可路由 calico bgp 方案有以下一些方案：\n- FULL-MESH （默认的集群内交换路由信息）+ bgp peer\n- TOR 路由反射器\n- RR in cluster 路由反射器 + bgp peer\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/12/d5f6aa319080943102022b88a3297fa1.png)\n\n**fullmesh**\n- 默认的集群内交换路由信息的连接方式，需要额外配置 bgp peer (交换机/路由器)，将每个节点的路由信息宣告给 peer。\n- 此时的 bgp 连接数会比较多。连接数 = 每个节点与 bgppeer 的连接数 + fullmesh 的连接数\n- 此时集群内网络可以使用 ipip/vxlan/bgp（节点不跨 leaf 时，可以使用 bgp 模式；如果跨 leaf 则无法使用）\n\n**RR in cluster**\n- 禁用 fullmesh，选取集群内的一个节点为 RR server 节点，之后该节点同交换机建立 bgp peer，向外部宣告路由\n- 此时集群内网络必须为 bgp\n\n**TOR**\n- 禁用 fullmesh，集群内的所有节点与所 tor 路由器建立 bgppeer，向外部宣告路由\n- 此时集群内网络必须为 bgp\n\n### 总结\n\ncalico ipip 和 bgp 共存等价于：集群内部间访问使用 ipip，集群外部访问使用 bgp；\n\n如果没有 pod ip 可路由的需求的话，无需配置 bgp，直接使用默认的 ipip 即可。\n如果需要 pod ip 可路由，对于集群外的可路由可以配置 bgp 与外部交换机等设备建立连接进行宣告路由。而集群内依旧可以使用 ipip/vxlan/bgp多种模式\n\n但是如果集群内的节点跨了多个 leaf，在集群内的流量配置为 bgp 的话，会导致容器网络不通；该情景下，建议配置为 overlay 或者配置集群外的 bgp\n\n\n","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-ipv6-%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96":{"title":"calico ipv6 相关的系统参数优化","content":"#### 1. 禁用 DAD（重复地址检测）\necho 0 \u003e /proc/sys/net/ipv6/conf/default/accept_dad\nnet.ipv6.conf.default.accept_dad=0\n\n#### 2. ipv6 的路由缓存，可以提高路由查找的效率\nnet.ipv6.route.max_size=65536\nnet.ipv6.route.max_size 该内核参数的作用是设置目的地条目的缓存。当 Linux 内核解析到目的地的路由时，它会将其放入缓存中以备将来使用。\n\nnet.ipv6.route.max_size 默认为 4096。可以将该值调足够大，比如 65536、2147483647\n\n#### 3. ipv6 的邻居发现\nipv6 的邻居发现用于实现下面一些功能：地址解析、验证邻居是否可达、重复地址检测、路由器发现/前缀发现、地址自动配置和重定向等\nnet.ipv6.neigh.default.retrans_time_ms=1000 用于控制邻居发现协议 (NDP) 中邻居请求的重传时间\n\n#### 4. arp 缓冲大小\nnet.ipv6.neigh.default.gc_thresh3=24456\nnet.ipv6.neigh.default.gc_thresh2=12228\nnet.ipv6.neigh.default.gc_thresh1=8192\n\n- gc_thresh1 表示在 ARP 缓存中保留的最少条目数。如果缓存中的这个条目数量少于这个数量，则垃圾收集器将不会运行。默认值为 `1024`。\n- gc_thresh2 表示在 ARP 缓存中的软最大条目数。垃圾收集器将开始尝试回收不活动的邻居表项。默认值为 `2048`。\n- gc_thresh3 表示在 ARP 缓存中要保留的硬最大条目数。如果邻居表的容量超过这个值，系统会直接丢弃新的邻居表项。默认值为 `4096`。\n\n---\n**以下一些参数为可能相关的一些参数，供参考**\n\n先梳理几个 IPV6 有关的协议之间的关系，IPV6 基于功能强大的 ICMPv6，实现了“即插即用”的从地址到网关自动配置，当然如果愿意的话 IPV4 中的传统的配置方式，包括但不限于编辑 interface 文件、使用 iprouote2 等进行手动的地址和网关管理的方式，在 IPV6 中也可以使用的：\n\n- NDP：基于 ICMPv6 的一种 ARP 的替代协议，是 IPV6 自动配置的基础。\n- RS 和 RA：router solicitation 和 router advertisement，顾名思义是请求和下发路由器信息，通过 IPV6 组播实现，实际可下发的信息包括 IPV6 前缀、MTU、默认网关、有效时间等。\n- SLAAC：基于 NDP 的路由宣告，客户端可实现零配置接入 IPV6 网络，其中地址前缀通过 RA 获得，后缀通过 EUI64 从 MAC 地址直接生成（如果启用了 RFC 4941 SLAAC 隐私扩展则会在对外发起连接时使用临时生成的地址，此为后话），默认路由通过 RA 下发。\n\n\n#### 5. IPv6 路由通告\n在IPv6的网络环境中，IPv6地址管理包括配置固定地址、接收RADIUS服务器下发的地址和动态获取地址。\n\nrouter solicitation 和 router advertisement，顾名思义是请求和下发路由器信息，通过 IPV6 组播实现，实际可下发的信息包括 IPV6 前缀、MTU、默认网关、有效时间等。\n\nnet.ipv6.conf.default.accept_ra 内核参数默认为1\n该参数表示当路由器发送RA的时候系统会根据 RA（Router Advertisement，路由器应答）报文的内容来完成地址配置。\n```js\n0：不接受路由通告\n1：当forwarding禁止时接受路由通告\n2：任何情况下都接受路由通告\n```\n\n\n#### 6. IPV6 自动配置\n`net.ipv6.conf.{iface}.autoconf` 代表是否启用 SLAAC 配置地址\n\n#### 7. 可分配的 IPv6 地址的最大数量 max_addresses\nnet.ipv6.conf.default.max_addresses\n确认主机能够限制可以分配的 IPv6 地址的最大数量。最大地址数量设置决定了多少个全局单播 IPv6 地址可以分配给每个接口。默认值为 16\n\n#### 8. 路由器请求最大次数 router_solicitations\nnet.ipv6.conf.default.router_solicitations\n设置路由器请求的最大次数（用于发现路由器）,如果路由器稳定，可以减少请求次数以降低网络噪音。默认值为3\n\n#### 9. 隐私扩展偏好 use_tempaddr\nnet.ipv6.conf.default.use_tempaddr\n是否使用隐私扩展偏好\n```js\n\u003c= 0：禁用隐私扩展，默认值\n== 1：启用隐私扩展，但优先使用公共 地址而不是临时地址。\n\u003e 1：启用隐私扩展，优先使用临时地址而不是公共地址。\n```\n\n#### 10.是否接受 ICMPv6 重定向消息 accept_redirects\nnet.ipv6.conf.default.accept_redirects\n是否接受 ICMPv6 重定向消息，用于动态调整路由。如果本地转发被禁用，则默认启用重定向。 如果本地转发被启用，则默认禁用重定向。","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-metrics":{"title":"calico metrics","content":"\n[Prometheus statistics (tigera.io)](https://projectcalico.docs.tigera.io/reference/felix/prometheus)\n\n| 指标 | 描述 |\n|--|--|\n| `felix_active_local_endpoints` | 该主机上活动的 endpoints 数量 |\n| felix_active_local_policies | 该主机上活跃的策略数 |\n| felix_active_local_selectors | 该主机上额活跃 selectors 数 |\n| felix_calc_graph_output_events | calculation graph 产生的事件数 |\n| felix_calc_graph_update_time_seconds | 为每个 datastore更新 calculation graph 调用 OnUpdate的秒 |\n| felix_calc_graph_updates_processed | calculation graph 处理的 datestore 更新次数 |\n| felix_cluster_num_host_endpoints | 集群层面 host endpoints 的总数 |\n| `felix_cluster_num_hosts` | 集群中的 Calico hosts 总数 |\n| felix_cluster_num_workload_endpoints | 集群层负载 endpoints 总数 |\n| felix_exec_time_micros | fork/exec 子进程花费的时间 |\n| felix_int_dataplane_addr_msg_batch_size | 批处理的接口地址报文数。 较高的值表示我们正在做更多的批处理以试图跟上 |\n| `felix_int_dataplane_apply_time_seconds` | 应用数据面更新花费的时间 |\n| felix_int_dataplane_failures | 数据面更新失败以及重试次数 |\n| felix_int_dataplane_iface_msg_batch_size | 批处理的接口状态消息数。 较高的值表示我们正在做更多的批处理以试图跟上 |\n| felix_int_dataplane_messages | 按照类型分类的消息数 |\n| felix_int_dataplane_msg_batch_size | 批处理的消息数。 较高的值表示我们正在做更多的批处理以试图跟上 |\n| felix_ipset_calls | ipset 命令执行数 |\n| `felix_ipset_errors` | ipset 命令失败数 |\n| felix_ipset_lines_executed | ipset 执行操作数 |\n| felix_ipsets_calico | active Calico IP sets 数量 |\n| felix_ipsets_total | active IP sets 总数 |\n| felix_iptables_chains | active iptables chains 数量 |\n| felix_iptables_lines_executed | iptables 规则执行更新数 |\n| felix_iptables_restore_calls | iptables-restore 调用次数 |\n| `felix_iptables_restore_errors` | iptables-restore 错误数 |\n| felix_iptables_rules | active iptables 规则数 |\n| felix_iptables_save_calls | iptables-save 调用次数 |\n| `felix_iptables_save_errors` | iptables-save 错误数 |\n| felix_resync_state | 当前 datastore 状态 |\n| `felix_resyncs_started` | felix 开始重新同步datastore的次数 |\n| `felix_route_table_list_seconds` | 在同步期间列出所有接口所花费的时间 |\n| felix_route_table_per_iface_sync_seconds | 同步每个接口所花费的时间 |\n| `felix_log_errors` | 错误日志数 |\n| `felix_logs_dropped` | 由于输出流被阻塞而丢弃的日志数 |\n\n\n\n- 使用 prometheus 收集监控：[[监控 - monitor]]\n- 使用可视化查看：[[grafana 可视化]]\n\n","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calico-non-root-+-non-privileged-%E8%BF%90%E8%A1%8C":{"title":"calico non-root + non-privileged 运行","content":"\n参照 operator 修改方式进行修改\nprivilege 运行是由于 Bidirectional 挂载必须为 privilege 模式\n```yaml\n        - mountPath: /sys/fs/\n          mountPropagation: Bidirectional\n          name: sysfs\n```\n\n```bash\nThe DaemonSet \"calico-node\" is invalid: spec.template.spec.containers[0].volumeMounts.mountPropagation: Forbidden: Bidirectional mount propagation is available only to privileged containers\n```\n\n由此参照 operator 进行以下修改\n1. containers calico-node\n```yaml\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - mountPath: /sys/fs/\n          mountPropagation: Bidirectional\n          name: sysfs\n```\n修改为\n```yaml\n        securityContext:\n          capabilities:\n            add:\n            - NET_RAW\n            - NET_ADMIN\n            - NET_BIND_SERVICE\n          privileged: false\n        volumeMounts:\n        - mountPath: /var/run\n          name: var-run\n        - mountPath: /var/lib\n          name: var-lib\n        - mountPath: /var/log\n          name: var-log\n```\n\nnon-root\n```yaml\n        securityContext:\n          capabilities:\n            add:\n            - NET_RAW\n            - NET_ADMIN\n            - NET_BIND_SERVICE\n          privileged: false\n          runAsGroup: 0\n          runAsUser: 999\n        volumeMounts:\n        - mountPath: /var/run\n          name: var-run\n        - mountPath: /var/lib\n          name: var-lib\n        - mountPath: /var/log\n          name: var-log\n```\n\n2. 增加一个 init container hostpath-init\n```yaml\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - calico-node -hostpath-init\n        env:\n        - name: NODE_USER_ID\n          value: \"999\"\n        image: docker.io/calico/node:v3.23.5 # 替换为本地镜像\n        imagePullPolicy: IfNotPresent\n        name: hostpath-init\n        resources: {}\n        securityContext:\n          runAsUser: 0\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /var/run\n          name: var-run\n        - mountPath: /var/lib\n          name: var-lib\n        - mountPath: /var/log\n          name: var-log\n```\n\nnon-root\n```yaml\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - calico-node -hostpath-init\n        image: docker.io/calico/node:v3.23.5 # 替换为本地镜像\n        imagePullPolicy: IfNotPresent\n        name: hostpath-init\n        resources: {}\n        securityContext:\n          runAsUser: 0\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /var/run\n          name: var-run\n        - mountPath: /var/lib\n          name: var-lib\n        - mountPath: /var/log\n          name: var-log\n```\n\n3. 修改挂载\n删除下面的挂载：\n```yaml\n      volumes:\n      - hostPath:\n          path: /sys/fs/\n          type: DirectoryOrCreate\n        name: sysfs\n```\n新增下列挂载：\n```yaml\n      volumes:\n      - hostPath:\n          path: /var/run\n          type: \"\"\n        name: var-run\n      - hostPath:\n          path: /var/lib\n          type: \"\"\n        name: var-lib\n      - hostPath:\n          path: /var/log\n          type: \"\"\n        name: var-log\n```","lastmodified":"2025-03-26T03:48:44.129315194Z","tags":null},"/calicoctl-ipam-%E6%B8%85%E7%90%86%E5%BC%82%E5%B8%B8":{"title":"calicoctl ipam 清理异常","content":"\n\ncalicoctl datastore migrate lock\ncalicoctl ipam check -o report.json\ncalicoctl ipam release --from-report report.json \ncalicoctl datastore migrate unlock","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6":{"title":"centos 配置网络文件","content":"```bash\ncat /etc/sysconfig/network-scripts/ifcfg-eth0 \n# Created by cloud-init on instance boot automatically, do not edit.\n#\nBOOTPROTO=dhcp\nDEVICE=eth0\nHWADDR=00:00:00:25:90:A2\nONBOOT=yes\nSTARTMODE=auto\nTYPE=Ethernet\nUSERCTL=no\nGATEWAY=172.31.73.1\nNETMASK=255.255.255.0\nDNS1=8.8.8.8\nDNS2=114.114.114.114\n```\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/cilium-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8":{"title":"cilium 安装使用","content":"### 工具\n\ncilium client\n\n```bash\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ \"$(uname -m)\" = \"aarch64\" ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n```\n\nhubble client\n```bash\ncurl -L --fail --remote-name-all https://github.com/cilium/hubble/releases/download/v0.13.6/hubble-linux-amd64.tar.gz\nsudo tar xzvfC hubble-linux-amd64.tar.gz /usr/local/bin\n\n```\n\n```bash\ncilium install  --set hubble.relay.enabled=true --set hubble.ui.enabled=true --set hubble.metrics.enabled=\"{dns,drop,tcp,flow,icmp,http}\" --set routingMode=native --set ipv4.enabled=true --set ipv4NativeRoutingCIDR=\"172.30.30.0/24\" --set autoDirectNodeRoutes=true\n\n--set endpointRoutes=true\n\n\n--set endpointRoutes.enabled=true\n```\n\n\n### 遇到的问题：\n\n1. 安装时 cluster name 不能含有 .\n\n[https://github.com/cilium/cilium-cli/issues/490](https://github.com/cilium/cilium-cli/issues/490)![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658073755703-cddfbeda-7862-49bc-a3fd-a32ea629b193.png#clientId=ub1901de8-9dbe-4\u0026from=paste\u0026height=212\u0026id=ufa8a4a4b\u0026originHeight=318\u0026originWidth=1406\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=94240\u0026status=done\u0026style=none\u0026taskId=uc4955aae-14d7-49e8-81bf-4411e9e93a9\u0026title=\u0026width=937.3333333333334)\n\n2. 国内环境使用 cilium-cli 安装失败\n\n拉取镜像失败，能否指定镜像拉取？\n换用 helm 安装\n```yaml\nhelm repo add cilium https://helm.cilium.io/\nhelm install cilium cilium/cilium --version 1.11.6 \\\n  --namespace kube-system \\\n  --set ipam.mode=kubernetes \\\n  --set cluster.id=2 \\\n  --set cluster.name=cluster2\n```\n在c1 集群上安装 Cilium，使用 --kube-context 参数指定不同的集群上下文。必须为每个集群分配一个唯一的名称和集群 id，cluster.id 参数指定集群 id，范围 1-255，cluster.name 参数指定集群名称。\nhttps://github.com/cilium/cilium/blob/v1.11.6/install/kubernetes/cilium/values.yaml\n\n使用的镜像：\n```yaml\nquay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c\nquay.io/cilium/operator-generic:v1.11.6@sha256:9f6063c7bcaede801a39315ec7c166309f6a6783e98665f6693939cf1701bc17\ndefault-scheduler  0/3 nodes are available: 1 node(s) didn't match pod anti-affinity rules, 2 node(s) didn't match Pod's node affinity/selector\n\n// helm chart\nhttps://github.com/cilium/cilium/blob/v1.11.6/install/kubernetes/cilium/values.yaml\n```\n验证安装：\n\n   - cilium status --wait\n   - cilium connectivity test\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658073870852-01bb5d19-f6a3-4150-9537-d754cb01d772.png#clientId=ub1901de8-9dbe-4\u0026from=paste\u0026height=770\u0026id=u7c263e65\u0026originHeight=1155\u0026originWidth=1496\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=372774\u0026status=done\u0026style=none\u0026taskId=uab7609cf-348a-4388-bc80-15aa83beaa2\u0026title=\u0026width=997.3333333333334)\n\n3. 安装成功 coredns 失败\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658127907023-e20a0417-1a05-4ef2-953c-7039cf920021.png#clientId=ucb69972c-ee09-4\u0026from=paste\u0026height=450\u0026id=u114d8a40\u0026originHeight=675\u0026originWidth=1672\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=277133\u0026status=done\u0026style=none\u0026taskId=uc86c1326-33fc-45ca-a8e2-14c0c6e0aeb\u0026title=\u0026width=1114.6666666666667)\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658129099482-cd93f954-1cf9-4665-af19-13404593c631.png#clientId=ucb69972c-ee09-4\u0026from=paste\u0026height=631\u0026id=u557f921f\u0026originHeight=947\u0026originWidth=2079\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=339663\u0026status=done\u0026style=none\u0026taskId=u283c6d09-dfc3-444e-9c40-c64a260a93a\u0026title=\u0026width=1386)\n\n4. 使用 kubekey 直接安装失败\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658154624557-524e50a0-e02e-417a-95e0-3bfec07e34e7.png#clientId=u5a768cd4-1a94-4\u0026from=paste\u0026height=372\u0026id=u23445172\u0026originHeight=372\u0026originWidth=1221\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=59550\u0026status=done\u0026style=none\u0026taskId=uab683862-08bd-4765-b465-189ec387041\u0026title=\u0026width=1221)\n\n5. 使用 kind 在可以顺利连接外网的情况下，参考官网一次性安装成功\n\n**关于 CoreDns 最终的解决办法：**\n[https://github.com/cilium/cilium/issues/20498](https://github.com/cilium/cilium/issues/20498)\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1658225166694-d71b74f2-dc59-4d6f-bb65-12002f001750.png#clientId=u65a4b1bf-b85b-4\u0026from=paste\u0026height=425\u0026id=u9ec1646c\u0026originHeight=637\u0026originWidth=1788\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=197311\u0026status=done\u0026style=none\u0026taskId=ucf1b19c5-0307-4090-9595-39dc39b22d7\u0026title=\u0026width=1192)\n\n```yaml\ncat /etc/sysctl.d/99-zzz-override_cilium.conf\n\n# Disable rp_filter on Cilium interfaces since it may cause mangled packets to be dropped\nnet.ipv4.conf.lxc*.rp_filter = 0\nnet.ipv4.conf.cilium_*.rp_filter = 0\n# The kernel uses max(conf.all, conf.{dev}) as its value, so we need to set .all. to 0 as well.\n# Otherwise it will overrule the device specific settings.\nnet.ipv4.conf.all.rp_filter = 0\n```\n\n```yaml\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 52:54:65:78:09:05 brd ff:ff:ff:ff:ff:ff\n    altname enp0s9\n    altname ens9\n    inet 172.16.2.2/24 brd 172.16.2.255 scope global dynamic eth0\n       valid_lft 66040sec preferred_lft 66040sec\n    inet6 fe80::5054:65ff:fe78:905/64 scope link\n       valid_lft forever preferred_lft forever\n3: docker0: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP\u003e mtu 1500 qdisc noqueue state DOWN group default\n    link/ether 02:42:19:3c:1b:91 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n4: cilium_net@cilium_host: \u003cBROADCAST,MULTICAST,NOARP,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 96:9b:2d:8f:6f:c9 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::949b:2dff:fe8f:6fc9/64 scope link\n       valid_lft forever preferred_lft forever\n5: cilium_host@cilium_net: \u003cBROADCAST,MULTICAST,NOARP,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 4a:01:05:87:de:94 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.0.47/32 scope link cilium_host\n       valid_lft forever preferred_lft forever\n    inet6 fe80::4801:5ff:fe87:de94/64 scope link\n       valid_lft forever preferred_lft forever\n6: cilium_vxlan: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/ether de:67:f9:1b:1f:94 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::dc67:f9ff:fe1b:1f94/64 scope link\n       valid_lft forever preferred_lft forever\n8: lxc_health@if7: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 16:8b:bd:b3:ae:c1 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::148b:bdff:feb3:aec1/64 scope link\n       valid_lft forever preferred_lft forever\n\n```\n\n## kind 搭建环境\n```yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\nnetworking:\n  disableDefaultCNI: true\n```\nkind create cluster --image kindest/node:latest\nkind delete cluster --name kind-2\nkind create cluster --config kind-example-config.yaml\n\n## ingress 支持\n安装 no kube-proxy \n```yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\nnetworking:\n  disableDefaultCNI: true\n  kubeProxyMode: none\n```\n[https://medium.com/@charled.breteche/kind-cluster-with-cilium-and-no-kube-proxy-c6f4d84b5a9d](https://medium.com/@charled.breteche/kind-cluster-with-cilium-and-no-kube-proxy-c6f4d84b5a9d)\n\n`helm install cilium cilium/cilium --version 1.12.0 --namespace kube-system --set kubeProxyReplacement=strict --set k8sServiceHost=kind-control-plane --set k8sServicePort=6443`\n\nhelm install cilium cilium/cilium --version 1.11.6 --namespace kube-system --set hostServices.enabled=true --set k8sServiceHost=kind-control-plane --set k8sServicePort=6443 --set externalIPs.enabled=true --set nodePort.enabled=true --set hostPort.enabled=true --set image.pullPolicy=IfNotPresent --set ipam.mode=kubernetes --set \n\nhelm install cilium cilium/cilium --version 1.11.6 --namespace kube-system --set hostServices.enabled=true --set k8sServiceHost=kind-control-plane --set k8sServicePort=6443 --set externalIPs.enabled=true --set nodePort.enabled=true --set hostPort.enabled=true --set image.pullPolicy=IfNotPresent --set ipam.mode=kubernetes --set hubble.enabled=true --set hubble.relay.enabled=true --set hubble.ui.enabled=true --set hubble.ui.ingress.enabled=true --set hubble.ui.ingress.annotations=\"kubernetes.io/ingress.class: nginx\" --set hubble.ui.ingress.hosts[0]=hubble-ui.127.0.0.1.nip.io\n```yaml\nroot@node:~/CNI/cilium# helm install cilium cilium/cilium --version 1.11.6 --namespace kube-system --values - \u003c\u003c EOF\nkubeProxyReplacement: strict\nk8sServiceHost: kind-control-plane\nk8sServicePort: 6443\nhostServices:\n  enabled: false\nexternalIPs:\n  enabled: true\nnodePort:\n  enabled: true\nhostPort:\n  enabled: true\nimage:\n  pullPolicy: IfNotPresent\nipam:\n  mode: kubernetes\nhubble:\n  enabled: true\n  relay:\n    enabled: true\n  ui:\n    enabled: true\n    ingress:\n      enabled: true\n      annotations:\n        kubernetes.io/ingress.class: nginx\n      hosts:\n        - hubble-ui.127.0.0.1.nip.io\nEOF\n```\n\ncilium install --kube-proxy-replacement=strict --helm-set ingressController.enabled=true\nkind load docker-image hashicorp/http-echo:0.2.3\n\n\ncilium install --version --config enable-envoy-config=_true_ --kube-proxy-replacement=probe --datapath-mode=vxlan \n","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-%E8%83%BD%E5%8A%9B":{"title":"","content":"\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/3ad7907675c74de2cd996ee479c2101b.png)\n","lastmodified":"2025-03-26T03:48:43.13731869Z","tags":null},"/cilium-%E8%B7%A8%E9%9B%86%E7%BE%A4%E9%80%9A%E4%BF%A1":{"title":"未命名","content":"","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-agent-%E5%88%86%E6%9E%90":{"title":"cilium-agent 分析","content":"### 6 个 init container\n#### config\n\n- cilium-dbg build-config\n- 根据配置文件创建对应的配置目录 - /tmp/cilium/config-map；（解析配置并应用到节点上）\n\t- config-map - `config-map:\u003cnamespace\u003e/name` or `config-map:name`\n\t- node - `node:\u003cNODENAME\u003e`\n\t- cilium-node-config - `cilium-node-config:\u003cNAMESPACE\u003e` or`cilium-node-config:\u003cNAMESPACE\u003e/name` \n\n分别对应：\n- configmap - cluster scope 的 cm\n- node - 根据环境变量获取到 nodename，解析 node 上 label/annotation 中 `config.cilium.io/\u003ckey\u003e=\u003cvalue\u003e`\n- cilium-node-config - namespace scope 的 ciliumNodeConfig 资源\n\n\n默认为：\n- config-map:cilium-config\n- cilium-node-config:os.Getenv(\"CILIUM_K8S_NAMESPACE\")\n#### mount-cgroup\n```bash\nsh -ec |\ncp /usr/bin/cilium-mount /hostbin/cilium-mount;\nnsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\nrm /hostbin/cilium-mount\n```\n\n挂载点：没有指定则使用默认的 /run/cilium/cgroupv2\n实现效果：mount -t cgroup2 none /run/cilium/cgroupv2\n代码： https://github.com/cilium/cilium/tree/main/tools/mount\n\n#### apply-sysctl-overwrites\n\n```bash\nsh -ec |\ncp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\nnsenter --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-sysctlfix\";\nrm /hostbin/cilium-sysctlfix\n```\n\noverride： /etc/sysctl.d/99-zzz-override_cilium.conf\n```yaml\n# Disable rp_filter on Cilium interfaces since it may cause mangled packets to be dropped\n-net.ipv4.conf.lxc*.rp_filter = 0\n-net.ipv4.conf.cilium_*.rp_filter = 0\n# The kernel uses max(conf.all, conf.{dev}) as its value, so we need to set .all. to 0 as well.\n# Otherwise it will overrule the device specific settings.\nnet.ipv4.conf.all.rp_filter = 0\n```\n\n**解释：**\n\n禁用掉 cilium 接口的 [[rp_filter 问题 | rp_filter ]]，因为其可能导致 mangle 的包丢弃；内核使用 conf.all, conf.{dev} 两者中的最大值为其值，因此也需要设置 all 也为0 - 关闭反向路由校验。\n\n\u003e 有 `-` 的行，意味着如果这些配置项在系统中无效或不被支持，`sysctl` 命令不会因为这些配置项的错误而中断执行。\n\u003e \n\u003e 没有 `-` 的行，则表示这是一个普通配置项，如果该配置项无效或不被支持，`sysctl` 命令会报告错误并且可能中断执行。\n\nsystemd 重启 systemd-sysctl-unit    systemd-sysctl.service\n代码： https://github.com/cilium/cilium/tree/main/tools/sysctlfix\n\n#### mount-bpf-fs \n\n挂载 bpf 文件系统：\n/bin/bash -c -- mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf\n\n#### clean-cilium-state\n\ninit-container.sh\n\n```sh\n#!/bin/sh\n\n# Check for CLEAN_CILIUM_BPF_STATE and CLEAN_CILIUM_STATE\n# is there for backwards compatibility as we've used those\n# two env vars in our old kubernetes yaml files.\n\nif [ \"${CILIUM_BPF_STATE}\" = \"true\" ] \\\n   || [ \"${CLEAN_CILIUM_BPF_STATE}\" = \"true\" ]; then\n\tcilium-dbg cleanup -f --bpf-state\nfi\n\nif [ \"${CILIUM_ALL_STATE}\" = \"true\" ] \\\n    || [ \"${CLEAN_CILIUM_STATE}\" = \"true\" ]; then\n\tcilium-dbg cleanup -f --all-state\nfi\n```\n\n```yaml\n      - command:\n        - /init-container.sh\n        env:\n        - name: CILIUM_ALL_STATE\n          valueFrom:\n            configMapKeyRef:\n              key: clean-cilium-state\n              name: cilium-config\n              optional: true\n        - name: CILIUM_BPF_STATE\n          valueFrom:\n            configMapKeyRef:\n              key: clean-cilium-bpf-state\n              name: cilium-config\n              optional: true\n        - name: WRITE_CNI_CONF_WHEN_READY\n          valueFrom:\n            configMapKeyRef:\n              key: write-cni-conf-when-ready\n              name: cilium-config\n              optional: true\n        - name: KUBERNETES_SERVICE_HOST\n          value: lb.kubesphere.local\n        - name: KUBERNETES_SERVICE_PORT\n          value: \"6443\"\n```\n\n\n检查 CLEAN_CILIUM_BPF_STATE 和 CLEAN_CILIUM_STATE 是否存在向后兼容性，因为我们在旧的 kubernetes yaml 文件中使用了这两个环境变量。\n\n如果需要清理，则清理 CNI 配置、CNI 二进制文件、附加的 BPF 程序、 bpffs、tc 过滤器、路由、链接和命名网络命名空间。 卸载 Cilium 代理后，可能需要运行此命令才能使工作节点恢复工作状态。\n\n#### install-cni-binaries\ninstall-plugin.sh\n\n拷贝 cilium 二进制文件到主机目录中\n\n```bash\n#!/bin/bash\n\n# Copy the cilium-cni plugin binary to the host\n\nset -e\n\nHOST_PREFIX=${HOST_PREFIX:-/host}\n\nBIN_NAME=cilium-cni\nCNI_DIR=${CNI_DIR:-${HOST_PREFIX}/opt/cni}\n\nif [ ! -d \"${CNI_DIR}/bin\" ]; then\n\tmkdir -p \"${CNI_DIR}/bin\"\nfi\n\n# Copy the binary and then rename so the move is atomic\ninstall_cni() {\n\tsrc=\"$1\"\n\tbin_name=\"$(basename $src)\"\n\ttmp_dst=\"${CNI_DIR}/bin/.$bin_name.new\"\n\tdst=\"${CNI_DIR}/bin/$bin_name\"\n\n\techo \"Installing $bin_name to $dst ...\"\n\tcp $src $tmp_dst \u0026\u0026 \\\n\tmv $tmp_dst $dst \u0026\u0026 \\\n\techo \"Wrote $dst\"\n}\n\n# Install the CNI loopback driver if not installed already or instructed to overwrite\nif [ \"${OVERWRITE_LOOPBACK:-false}\" = \"true\" ] || [ ! -f \"${CNI_DIR}/bin/loopback\" ]; then\n\t# Don't fail hard if this fails as it is usually not required\n\tinstall_cni /cni/loopback || true\nfi\n\n# Install the Cilium CNI binary unless installed already and instructed not to overwrite\nif [ \"${OVERWRITE_CILIUM:-true}\" = \"true\" ] || [ ! -f \"${CNI_DIR}/bin/${BIN_NAME}\" ]; then\n\tinstall_cni \"/opt/cni/bin/${BIN_NAME}\"\nfi\n\n```\n### poststart\n\n运行在 AWS ENI 模式下的一些额外工作，删除一些 SNAT iptables 规则\n\n```bash\n- bash\n- -c\n- |\nset -o errexit\nset -o pipefail\nset -o nounset\n\n# When running in AWS ENI mode, it's likely that 'aws-node' has\n# had a chance to install SNAT iptables rules. These can result\n# in dropped traffic, so we should attempt to remove them.\n# We do it using a 'postStart' hook since this may need to run\n# for nodes which might have already been init'ed but may still\n# have dangling rules. This is safe because there are no\n# dependencies on anything that is part of the startup script\n# itself, and can be safely run multiple times per node (e.g. in\n# case of a restart).\nif [[ \"$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')\" != \"0\" ]];\nthen\n\techo 'Deleting iptables rules created by the AWS CNI VPC plugin'\n\tiptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore\nfi\necho 'Done!'\n```\n\n### prestop\n\n- cni-uninstall.sh\n\n```bash\n#!/bin/bash\n\nset -e\n\nHOST_PREFIX=${HOST_PREFIX:-/host}\nBIN_NAME=cilium-cni\nCNI_DIR=${CNI_DIR:-${HOST_PREFIX}/opt/cni}\nCNI_CONF_DIR=${CNI_CONF_DIR:-${HOST_PREFIX}/etc/cni/net.d}\nCILIUM_CUSTOM_CNI_CONF=${CILIUM_CUSTOM_CNI_CONF:-false}\n\nif [[ \"$(cat /tmp/cilium/config-map/cni-uninstall 2\u003e/dev/null || true)\" != \"true\" ]]; then\n    echo \"cni-uninstall disabled, not removing CNI configuration\"\n    exit\nfi\n\n# Do not interact with the host's CNI directory when the user specified they\n# are managing CNI configs externally.\nif [ \"${CILIUM_CUSTOM_CNI_CONF}\" != \"true\" ]; then\n    # .conf/.conflist/.json (undocumented) are read by kubelet/dockershim's CNI implementation.\n    # Remove any active Cilium CNI configurations to prevent scheduling Pods during agent\n    # downtime. Configs belonging to other CNI implementations have already been renamed\n    # to *.cilium_bak during agent startup.\n    echo \"Removing active Cilium CNI configurations from ${CNI_CONF_DIR}...\"\n    find \"${CNI_CONF_DIR}\" -maxdepth 1 -type f \\\n    -name '*cilium*' -and \\( \\\n        -name '*.conf' -or \\\n        -name '*.conflist' \\\n    \\) -delete\nfi\n\n```\n\n### cilium-agent --config-dir=/tmp/cilium/config-map\n\n","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-dbg":{"title":"","content":"\n# cilium\n\n## bgp\n\n### 新节点\n\n## bpf\n\n### 新节点\n\n## build-config\n\n## cgroups\n\n### 新节点\n\n## cleanup - post-uninstall-cleanup\n\n### 新节点\n\n## completion\n\n## config\n\n## debuginfo\n\n## encrypt\n\n## endpoint\n\n## fqdn\n\n## identity\n\n## ip\n\n## kvstore\n\n## lrp\n\n## map\n\n## metrics\n\n## monitor\n\n## node\n\n## nodeid\n\n## policy\n\n## prefilter\n\n## preflight\n\n## recorder\n\n## service\n\n## statedb\n\n## status\n\n## troubleshoot","lastmodified":"2025-03-26T03:48:43.13731869Z","tags":null},"/cilium-gateway-api":{"title":"cilium gateway api","content":"### 介绍\n\n大多数微服务架构都需要将一些服务暴露给集群外部并将流量安全地路由到集群中。Kubernetes Ingress API 传统上是平台运营商将流量路由到集群的方式，但它也有许多的限制。 \n\nGateway API 解决了这些限制，同时 Cilium 已经支持 Gateway API。\n\n如果你问一百个人什么是服务网格，你可能会得到一百个不同的答案。每个人对服务网格的作用及其解决的问题都有不同的解释。\n在 Cilium Service Mesh 测试期间，当被问到“您最感兴趣 Service Mesh 的哪些功能”时，绝大多数人认为**可见性**和**流量加密**是关键功能。 但同样值得注意的是，一半的参与者回答“**Kubernetes Ingress**”，尽管事实上有些人可能不认为它是服务网格的关键组件。无论您是否认为 Ingress 是 Service Mesh 功能，它仍然是 Kubernetes 流量工程的一个重要方面。\n\n### 什么是 Cilium Gateway API\n\nGateway API 的开发源于 Kubernetes Ingress API 存在一些限制。代表了下一代 Kubernetes Ingress、负载均衡和服务网格 API。\n\n那 ingress 存在有哪些限制呢？\n#### ingress 限制1：对高级路由的有限支持\n\nIngress API 支持基于路径和主机规则的基本路由，但缺乏对更高级路由功能（例如流量分割、标头修改和 URL 重写）的原生支持。\n\n#### ingress 限制2：有限的协议支持（可扩展性不够）\n\nIngress API 仅支持 HTTP 和 HTTPS 流量，本身不支持 TCP 或 UDP 等其他协议。\nIngress API 的规范过于有限且可扩展性不够。为了解决这些技术限制，软件供应商和开发人员创建了特定于供应商的 annotation 来提供这些特定功能。但使用注释最终会导致一个ingress controller 与另一个 ingress controller 之间出现不一致。\n这意味着，如果您想开始使用不同的 ingress controller 时，可能会面临一些转换问题，因为 annotation 往往是特定于供应商的。\n\n#### ingress 限制3：操作限制\n\nIngress API 受到操作限制：不适合具有共享负载平衡基础设施的多团队集群。\n\n### Gateway API: 面向角色、可移植、可扩展\nGateway API 是重新开始设计的，旨在解决 Ingress API 的限制。 Gateway API 背后的团队是一个 Kubernetes SIG-Network 项目：\n- https://github.com/kubernetes/community/tree/master/sig-network\n- https://github.com/kubernetes-sigs/gateway-api\n\n在技​​术方面，gateway API 提供了一种集中机制来管理和执行外部流量策略，包括 HTTP 路由、TLS 终止、流量分割/加权和标头修改。对这些功能的原生支持意味着不再需要 annotation 和额外的处理来提供支持。这意味着 gateway API 资源更容易从一种 gateway API 实现移植到另一种实现。\n\n当需要定制时，网关 API 提供了多种灵活的模型，包括支持不同流量模式的特定扩展点（extension points）。随着扩展的添加，Gateway API 团队将继续寻找共同点，并将提升功能与 API 的一致性，以避免回到扩展 Ingress API 资源时出现的一些混乱。\n- https://gateway-api.sigs.k8s.io/concepts/api-overview/#extension-points\n\n最后，网关 API 实现的设计考虑了基于角色的角色。 Ingress API 模型基于假设开发人员自己管理和创建 Ingress 和服务资源的模型。然而，在许多更复杂的部署中，涉及各种角色。\n将 Ingress API 分解为多个 Gateway API 对象，角色将被分配其职责所需的正确访问权限和特权。\n\n- Infrastructure Provider – 基础设施提供商，例如云提供商（AWS、Azure、GCP） \n- Cluster Operator – 负责集群的管理 \n- Application Developer – 应用程序开发人员，负责定义应用程序配置和服务组合\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/fc2086b2cd9191f6cab964bc645c7cf6.png)\n\n### 减少工具蔓延\n\n在部署复杂的微服务架构时，运营商通常需要部署 CNI、网络策略引擎、用于可观察性或加密的服务网格、入口或网关API控制器等... 这可能会成为升级和管理的运营难题。\nCilium 使用户能够整合他们拥有的云原生网络和安全工具的数量 - 因为 Cilium 本身不仅支持网关 API，还支持无 sidecar 的服务网格、透明加密、网络策略、Hubble 的内置可观察性等…… \n它只是让集群运营商的生活变得更轻松：他们只需要一个工具来管理和升级众多 Kubernetes 网络需求。\n\n### 使用案例\n\n- http routing\n- Tls termination\n- http traffic splitting/weighting\n- HTTP Request Header Modification\n- HTTP Response Header Modification\n- Cross Namespace Routing Support\n\n### 迁移 ingress2Gateway\n- ingress2gateway： https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/\n\n### gateway API 未来\n\n- UDP Route\n- TCP Route\n- gRPC Route - cilium 1.16\n\n### 参考链接：\n- https://gateway-api.sigs.k8s.io/\n- https://isovalent.com/blog/post/cilium-gateway-api/\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/41b520f7522a7554c713213850df39eb.png)\n","lastmodified":"2025-03-26T03:48:44.130315191Z","tags":null},"/cilium-ingress-controller":{"title":"cilium ingress controller","content":"- How to deploy Cilium Service Mesh\n- Traffic Management \u0026 Load-Balancing with Ingress\n- Enable L7 Observability\n- Configuration\n\n\nKubernetes 提供了标准的 Ingress 资源类型来配置 L7 负载均衡和流量管理。 Cilium 自动在集群中实现 Ingress 并执行已配置的负载均衡配置。 在大多数集群中，应用 Ingress 资源需要安装 Ingress Controller，例如使用Nginx、Traefik 或 Contour。 在本实验中，我们使用 Cilium 来管理 Ingress 资源，无需外部控制器，因此您无需选择 Ingress Controller 提供程序，也无需关心使其保持最新状态！\n\n\n可观察性是服务网格的核心部分。 它允许透明地可视化应用程序中的每个网络流，而无需对其进行工具化。\nHubble 是 Cilium 的可选组件，它为网络堆栈带来了可观察性。 \nHubble 提供了可视化流程： \n- 每个请求都经过 Cilium \n- 使用 Cilium 身份 \n- 提供 L3/L4/L7 的可视性\n\nHubble 可以与 CLI 或可选的 Web UI 一起使用。 \n命令行界面\n如果您需要 CLI 的强大功能和灵活性，Hubble CLI 提供了许多选项，允许您过滤命名空间、pod、服务、协议、端口、转发判决等上的流！\n网页用户界面\n如果您更喜欢以视觉方式表示流程，Hubble Web UI 可以满足您的需求。除了服务映射功能之外，它还列出了所有流，可以过滤它们并了解为什么某些网络连接被 Cilium 转发或丢弃。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/c8b14e5c8ff4759c2e3294c3c07c8b4c.png)\n\n\n单击它的框，您将看到它由特殊的 Cilium 身份表示：reserved:ingress，并且它用于访问产品页面和详细信息服务，两者都在端口 9080 上。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/2b5668fd646691289711c888b2a18e9a.png)\n\n\n单击其中一个流。这将在右侧打开一个视图，其中包含有关流程的详细信息。 请注意，此信息当前仅涵盖 L3/L4 详细信息（协议、端口），但不涵盖 L7 详细信息（例如 HTTP 动词、路径或标头）\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/d0feac82458d46c807f4fb5242fe5f32.png)\n\n\nCilium 提供了两种为哈勃流添加 L7 可见性的方法： \n- 通过注释 pod：`kubectl annotate pod -l app=productpage --overwrite io.cilium.proxy-visibility=\"\u003cIngress/9080/TCP/HTTP\u003e\"`\n- 通过部署 CiliumNetworkPolicy 资源: `kubectl apply -f https://docs.isovalent.com/public/http-ingress-visibility.yaml`\n\n可以使用 CLI 按协议、端口（等等）进行过滤\nhubble observe --protocol http --label app=reviews --port 9080\n\n\n基于 SNI 的 Ingress 规则\n由于其在集群中的前端位置，Kubernetes Ingress 通常用作 TLS 终止代理。 在本次挑战中，为了简单起见，我们将使用自签名证书。在生产中，建议注入已知的 CA 凭据，或使用例如生成动态证书证书经理。\n","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-ipam":{"title":"cilium ipam","content":"\n```bash\nkubectl get cm -n kube-system cilium-config -o yaml| grep tunnel\n  routing-mode: tunnel\n  tunnel-protocol: vxlan\n```\n\n容器的网络数据路径\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/e6e8157f3944648d3ee82bbf036140a8.png)\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/ee74703d784d7fb7faa31ab3d0bee4e7.png)\n\n\n\n```bash\n[root@host-machine ~]# tc filter show dev lxce37d234f154c egress\n[root@host-machine ~]# tc filter show dev lxce37d234f154c ingress\nfilter protocol all pref 1 bpf chain 0\nfilter protocol all pref 1 bpf chain 0 handle 0x1 bpf_lxc.o:[from-container] direct-action not_in_hw tag 22adca600f7d1c7c\n```\n\n\n\ncni 配置文件：\n```bash\ncat /etc/cni/net.d/05-cilium.conflist \n\n{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"cilium\",\n  \"plugins\": [\n    {\n       \"type\": \"cilium-cni\",\n       \"enable-debug\": true,\n       \"log-file\": \"/var/run/cilium/cilium-cni.log\"\n    }\n  ]\n}\n```\n\n bpftool net show\n\n\ndebug：\n- cilium-dbg 由 cilium 改名\n\t- cilium-dbg status --all-addresses\n\t- cilium status --all-addresses\n\nlxc_health\n\n- https://huweicai.com/cilium-container-datapath/\n- https://docs.cilium.io/en/stable/network/concepts/routing/\n\nendpoint route：\n当在 AWS 环境中运行 Cilium 时，可以指定 --ipam=eni，此时会启用 AWS ENI 数据路径。\nPod 分配有 ENI IP，可在 AWS VPC 中直接路由。这简化了 VPC 内 Pod 流量的通信，并避免了 SNAT。\n\nenable-endpoint-routes: \"true\" 允许直接路由到 ENI veth 对，而不需要通过 cilium_host 接口进行路由。\n\n在 Google Cloud 环境中， Google Kubernetes Engine (GKE)，可以使用GKE datapath\nenable-endpoint-routes: true：在节点上启用每个端点路由（自动禁用本地节点路由）。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/ad20083c46a9874a42f253b498448267.png)\n\n\n现在可以同时启用端点路由和 BPF 主机路由。 BPF 主机路由允许完全绕过 iptables 和上层主机堆栈，并与常规 veth 设备操作相比实现更快的网络命名空间切换。如果您的内核支持该选项（主线内核 \u003e= 5.10），则会自动启用该选项。\n\n\n\n\n\n### Q\u0026A\n1. ipam crd/kubernetes/cluster-pool 的关系以及差别是什么\n2. 封装模式是什么样的，可以动态修改吗 - direct routing\n3. pod 网络数据流向是什么样的\n4. cilium health 是个啥，为啥还占用一个 ip\n5. masquerading 使用的是 iptables，cilium 自己有实现 nat 吗\n6. cilium kube-proxy 替换是如何做的 - [Kubernetes Without kube-proxy — Cilium 1.15.6 documentation](https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/#kubeproxy-free)\n7. envoy 用途为什么 - 四层代理\n8. cilium gateway api 实现\n\t-  [Gateway API Support — Cilium 1.15.6 documentation](https://docs.cilium.io/en/stable/network/servicemesh/gateway-api/gateway-api/#prerequisites)\n\t- [Getting started - Kubernetes Gateway API (k8s.io)](https://gateway-api.sigs.k8s.io/guides/#install-standard-channel)\n9. hubble-ui 如何更好的查看数据\n\t- [Service Map \u0026 Hubble UI — Cilium 1.15.6 documentation](https://docs.cilium.io/en/stable/gettingstarted/hubble/#hubble-ui)\n\t- http://45.120.216.186:33002/\n1. cilium cluster mesh - [Cluster Mesh (cilium.io)](https://cilium.io/use-cases/cluster-mesh/)\n2. cilium server mesh\n\n## IPAM  Mode\n\nipam 支持的模式如下：\n\n| Feature                    | Kubernetes Host Scope | Cluster Scope (default) | Multi-Pool | CRD-backed | AWS ENI        | Azure IPAM       | GKE            |\n| -------------------------- | --------------------- | ----------------------- | ---------- | ---------- | -------------- | ---------------- | -------------- |\n| Tunnel routing             | ✅                     | ✅                       | ❌          | ❌          | ❌              | ❌                | ❌              |\n| Direct routing             | ✅                     | ✅                       | ✅          | ✅          | ✅              | ✅                | ✅              |\n| CIDR Configuration         | Kubernetes            | Cilium                  | Cilium     | External   | External (AWS) | External (Azure) | External (GCP) |\n| Multiple CIDRs per cluster | ❌                     | ✅                       | ✅          | N/A        | N/A            | N/A              | N/A            |\n| Multiple CIDRs per node    | ❌                     | ❌                       | ✅          | N/A        | N/A            | N/A              | N/A            |\n| Dynamic CIDR/IP allocation | ❌                     | ❌                       | ✅          | ✅          | ✅              | ✅                | ❌              |\n\n**不要更改现有集群的 IPAM 模式。**\n\n### kubernetes\n\n使用Kubernetes自带的host-scope IPAM。地址分配委托给每个节点进行，per-node的Pod CIDR存放在v1.Node中。\n\n```bash\nkubectl get cm -n kube-system cilium-config -o yaml| grep ipam\n  ipam: kubernetes\n  ipam-cilium-node-update-rate: 15s\n```\n\n```bash\napiVersion: v1\nkind: Node\nmetadata:\n  name: kind-control-plane\nspec:\n  podCIDR: 10.244.0.0/24\n  podCIDRs:\n  - 10.244.0.0/24\n  - fd00:10:244::/64\n  providerID: kind://docker/kind/kind-control-plane\n---\napiVersion: cilium.io/v2\nkind: CiliumNode\nmetadata:\n  name: kind-control-plane\n  ownerReferences:\n  - apiVersion: v1\n    kind: Node\n    name: kind-control-plane\nspec:\n  ipam:\n    podCIDRs:\n    - 10.244.0.0/24\n    - fd00:10:244::/64\n```\n\n### cluster-pool\n\n这是默认的IPAM mode，它分配per-node的Pod CIDR，并在每个节点上使用host-scope的分配器来分配IP地址。\n\n此模式和kubernetes类似，区别在于后者在v1.Node资源中存储per-node的Pod CIDR，而Cilium在 v2.CiliumNode中存储此信息。\n\n此模式下，cilium-agent在启动时会等待v2.CiliumNode中的 Spec.IPAM.PodCIDRs字段可用。(operator 分配)\n\n通过Helm安装时，使用下面的值来启用此模式：\n```bash\nhelm install ...\n  --set ipam.mode=cluster-pool\n  --set ipam.operator.clusterPoolIPv4PodCIDR=\u003cIPv4CIDR\u003e\n  # 调整每个节点的CIDR规模\n  --set ipam.operator.clusterPoolIPv4MaskSize=\u003cIPv4MaskSize\u003e\n  --set ipam.operator.clusterPoolIPv6PodCIDR=\u003cIPv6CIDR\u003e\n  --set ipam.operator.clusterPoolIPv6MaskSize=\u003cIPv6MaskSize\u003e\n```\n\n在运行时，使用下面的命令查询IP分配错误：\n```bash\nkubectl get ciliumnodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.operator.error}{\"\\n\"}{end}'\n```\n\n使用下面的命令查看IP分配情况：\n```bash\ncilium status --all-addresses\n```\n\n\n```bash\nkubectl get cm -n kube-system cilium-config -o yaml| grep ipam\n  ipam: cluster-pool\n  ipam-cilium-node-update-rate: 15s\n```\n\n```bash\napiVersion: v1\nkind: Node\nmetadata:\n  name: node1\nspec:\n  podCIDR: 10.233.64.0/24\n  podCIDRs:\n  - 10.233.64.0/24\n---\napiVersion: cilium.io/v2\nkind: CiliumNode\nmetadata:\n  name: node1\n  ownerReferences:\n  - apiVersion: v1\n    kind: Node\n    name: node1\nspec:\n  ipam:\n    podCIDRs:\n    - 10.0.1.0/24\n```\n\n### CRD\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/bfa19e09d43bd0dc8ddab3e145d0555e.png)\n\n此模式下，cilium-agent会监听当前节点同名的v2.CiliumNode资源，每当CiliumNode被更新，cilium-agent会利用列在 spec.ipam.available的IP地址来更新本节点的IP池。如果已经分配的IP地址从spec.ipam.available中移除，仍然可以正常使用，但是释放后不能重新分配。\n\n当IP被分配出去之后，会记录到 status.ipam.inuse字段。\n\n你需要开发一个Operator，将IP地址分配给特定节点，此模式提供了很大的灵活性。\n\n\n### Multi-pool scope\n \n 最灵活的模式\n它支持根据用户定义的工作负载属性如annotation，从多个不同的IPAM 池中分配 PodCIDR。同一节点上的 Pod 可以接收来自不同范围的IP地址。此外，PodCIDR还可以在被需要的时候动态添加到节点上\n\n\ncilium-operator 通过配置的 ipam 模式来给节点分配 host scope 的 podCIDR\ncilium-cni 通过 unix socket 与 cilium daemonset 启动的 apiserver 通信进行 ipam\n\n参考链接：\n- [IP Address Management (IPAM)](https://docs.cilium.io/en/stable/network/concepts/ipam/)\n- [Configuring IPAM Modes — Cilium 1.15.6 documentation](https://docs.cilium.io/en/stable/network/kubernetes/ipam/)\n\n## Routing\n### Native-Routing\n\n```bash\nroutingMode: native\n```\n\n\n#### Config BGP\n\n\n### Encapsulation\n\n```bash\nroutingMode: tunnel\ntunnelProtocol: vxlan # geneve\n```\n\n\n\n\n## Cilium Health\n\n```bash\n~: cilium-health status\nProbe time:   2024-06-17T09:13:33Z\nNodes:\n  kind-kind/kind-worker (localhost):\n    Host connectivity to 172.19.0.3:\n      ICMP to stack:   OK, RTT=768.857µs\n      HTTP to agent:   OK, RTT=316.941µs\n    Endpoint connectivity to 10.244.1.172:\n      ICMP to stack:   OK, RTT=711.291µs\n      HTTP to agent:   OK, RTT=313.207µs\n  kind-kind/kind-control-plane:\n    Host connectivity to 172.19.0.2:\n      ICMP to stack:   OK, RTT=709.16µs\n      HTTP to agent:   OK, RTT=1.762768ms\n    Endpoint connectivity to 10.244.0.18:\n      ICMP to stack:   OK, RTT=787.21µs\n      HTTP to agent:   OK, RTT=692.26µs\n```\n\n主机上有一张名称为 lxc_health 网卡，且分配了 ip，主要用于健康检测\n\n\n\n[Cilium datapath梳理 | REXROCK](https://rexrock.github.io/post/cilium2/)","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-kube-proxy-%E6%9B%BF%E6%8D%A2":{"title":"cilium kube-proxy 替换","content":"使用 kubekey 安装集群时，设置不安装 kube-proxy；集群安装完成之后使用  cilium cli 安装 cilium 会自动替换 kube-proxy\n\n```bash\ncilium install\n```\n\n\n```bash\nroot@node1:/home/cilium# cilium status --verbose\nKubeProxyReplacement:   True   [eth0   172.30.30.2 fe80::5054:22ff:fe4e:996d (Direct Routing)]\nHost Routing:           Legacy\nMasquerading:           IPTables [IPv4: Enabled, IPv6: Disabled]\nKubeProxyReplacement Details:\n  Status:                 True\n  Socket LB:              Enabled\n  Socket LB Tracing:      Enabled\n  Socket LB Coverage:     Full\n  Devices:                eth0   172.30.30.2 fe80::5054:22ff:fe4e:996d (Direct Routing)\n  Mode:                   SNAT\n  Backend Selection:      Random\n  Session Affinity:       Enabled\n  Graceful Termination:   Enabled\n  NAT46/64 Support:       Disabled\n  XDP Acceleration:       Disabled\n  Services:\n  - ClusterIP:      Enabled\n  - NodePort:       Enabled (Range: 30000-32767) \n  - LoadBalancer:   Enabled \n  - externalIPs:    Enabled \n  - HostPort:       Enabled\n```\n\n\nmasquerade 默认为 iptables 且使用主机路由，如果内核版本大于 5.10 可以设置为 bpf\n\n```bash\ncilium install --set bpf.masquerade=true\n```\n\n```bash\nHost Routing:           BPF\nMasquerading:           BPF   [eth0]   10.0.1.0/24 [IPv4: Enabled, IPv6: Disabled]\n```","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cilium-operator-%E5%88%86%E6%9E%90":{"title":"cilium-operator 分析","content":"### 组件的功能：\n\n- crd 注册\n- ipam\n- lb-ipam\n- kv 操作\n- Identity 垃圾回收\n- ciliumEndpoint 垃圾回收\n- 衍生的网络策略创建\n- ingress、gateway api 支持\n- 相互认证支持\n\n\n\n### CRD 注册\n\n- CiliumBGPAdvertisement\n- CiliumBGPClusterConfig\n- CiliumBGPNodeConfig\n- CiliumBGPNodeConfigOverride\n- CiliumBGPPeerConfig\n- CiliumBGPPeeringPolicy\n\n\n#### IPAM 相关的 crd\n\n  --set enableCiliumEndpointSlice=true\n\nCilium 将为其管理的每个 pod 创建一个类型为 CiliumEndpoint (CEP) 的自定义资源定义。\nenableCiliumEndpointSlice 后创建一个类型为CiliumEndpointSlice（CES）的CRD，它将一组具有相同安全身份的精简CEP对象分组到一个CES对象中，并广播CES对象以传达身份给其他代理，而不是通过广播 CEP 来这样做。在大多数情况下，这可以减少控制平面上的负载，并且可以使用相同的主资源维持更大规模的集群。\n- CiliumNode\n- CiliumNodeConfig\n- CiliumPodIPPool - 用于宣告的pod ippool、mul-ippool\n- [CiliumEndpoint](https://docs.cilium.io/en/stable/network/kubernetes/ciliumendpoint/#ciliumendpoint) - \n- [CiliumEndpointSlice](https://docs.cilium.io/en/stable/network/kubernetes/ciliumendpointslice/#ciliumendpointslice) - enable-cilium-endpoint-slice\n\n#### LBIPAM 相关的 crd\n\n- CiliumLoadBalancerIPPool\n- CiliumL2AnnouncementPolicy\n\n\n#### 网络策略相关 CRD\n\n- CiliumCIDRGroup\n- CiliumClusterwideEnvoyConfig\n- [CiliumClusterwideNetworkPolicy](https://docs.cilium.io/en/stable/network/kubernetes/policy/#ciliumclusterwidenetworkpolicy)\n- CiliumEgressGatewayPolicy\n- CiliumEnvoyConfig\n- CiliumExternalWorkload\n- CiliumIdentity\n- CiliumLocalRedirectPolicy\n- [CiliumNetworkPolicy](https://docs.cilium.io/en/stable/network/kubernetes/policy/#ciliumnetworkpolicy)\n\n\n\n在没有指定任何参数时，cilium v1.15.6 只会安装下列 crd\n**v2** \n- ciliumnodes\n- ciliumidentities\n- ciliumendpoints\n- ciliumexternalworkloads\n- ciliumnetworkpolicies\n- ciliumclusterwidenetworkpolicies\n\n**v2alpha1**\n- ciliumcidrgroups\n- ciliuml2announcementpolicies\n- ciliumloadbalancerippools\n- ciliumnodeconfigs\n- ciliumpodippools\n\n### IPAM\n\n当 cilium 运行为下面的模式时，负责 IP 地址管理：\n- Azure IPAM\n- AWS ENI\n- Cluster Scope (Default)\n\nIPAM 运行为 Kubernetes Host Scope 模式下时，cilium-agent 使用的分配 CIDR 源自 Kubernetes Node 资源中 Kubernetes 填充的 podCIDR 和 podCIDRs 字段。\n\n对于 CRD 支持的 IPAM 分配模式，云特定操作员在 CiliumNode 资源中填充有关 CIDR 的所需信息。\n\n ### LB-IPAM\nLoadbalancer 类型 service 的 ipam\n\n\n### Ingress/Gateway API\n\n启用 Ingress 或 Gateway API 支持时，Cilium Operator 执行解析 Ingress 或 Gateway API 对象并将其转换为用于配置每个节点 Envoy 代理的 CiliumEnvoyConfig 对象的任务。\n\n此外，Ingress 或网关 API 对象使用的 Secret 将同步到 Cilium 管理的命名空间，然后授予 Cilium 代理访问权限。这减少了 Cilium Agent 所需的权限。\n\n\n\n官方文档链接：\n- https://docs.cilium.io/en/stable/internals/cilium_operator/\n","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/clustermesh":{"title":"clustermesh","content":"\nCilium Cluster Mesh 允许链接多个 Kubernetes 集群，前提是： \n- 所有集群都将 Cilium 作为 CNI 运行 \n- 所有工作节点都有唯一的IP地址并且能够相互连接\n\n\n在 Cilium 集群上激活集群网格时，会部署一个新的控制平面来管理该集群的网格及其 etcd 键值存储。 \n然后，其他集群的代理可以以只读模式访问此集群网格控制平面，从而允许它们访问有关集群的元数据，例如服务名称和相应的 IP。\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/ae56a9d9da9bc6a1d137a0f7bab266c4.png)\n\n\n当两个或多个集群网格化时，Cilium 允许您通过向服务添加注释来将服务设置为一个或多个集群中的全局服务： `service.cilium.io/global：\"true\"` 设置此注释后，对此服务的请求将负载平衡到所有网格集群中具有相同名称和命名空间的所有可用服务。\n\n全局服务的一个明显用途是容错。 当某个集群中某项服务不可用时，可以将流量重定向到其他集群中的同一服务，从而保证服务的连续性。\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/8fe20fd1bdf67f19bf0be3dbed329ab1.png)\n\n\n全局服务的另一个用例是共享服务。 当在多个 Kubernetes 集群之间共享有状态服务时，这特别有用。如果所有集群都是网状的，则分布在多个集群中的无状态应用程序都可以访问位于单个共享集群上的有状态服务。\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/adf169b1e2075e6d92a7ee336eeb2324.png)\n\n\n`service.cilium.io/global` 注释如何允许集群将对服务的请求负载均衡到具有相同注释服务的所有网格集群。\n如果想从全局服务中删除特定集群的服务怎么办？ `service.cilium.io/shared` 注释可用于此目的。\n\n默认情况下，标记为全局的服务也被视为共享，因此 `service.cilium.io/shared` 的值对于该服务标记为全局的所有集群都是 true。 在集群中将其设置为 false 会从全局服务中删除该特定服务： `service.cilium.io/shared: \"false\"`\n\n\n\n全局服务允许跨多个集群对流量进行负载平衡。 正如我们所看到的，这对于实施冗余服务的后备策略非常有用。 然而，大多数时候，当本地服务不可用时，仅使用远程服务来限制延迟会很有用。 这就是服务亲和力的目标。\n\n\n默认情况下，Pod 之间允许所有通信。为了实施网络策略，我们需要从默认拒绝规则开始，这将禁止通信。然后，我们将添加特定规则来添加我们想要允许的流量。\n添加默认拒绝规则是通过选择所有 pod（使用 {} 作为 endpointSelector 字段的值）并对入口和出口字段使用空规则来实现的。\n但是，阻止所有出口流量将阻止节点向 Kube DNS 执行 DNS 请求，这是我们想要避免的情况。因此，我们的默认拒绝策略将包含一个出口规则，以允许访问 UDP/53 上的 Kube DNS，因此所有 pod 都能够解析服务名称：","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cni-chaining-mode":{"title":"cni-chaining mode","content":"How to Use Cilium Hubble for Observability in CNI Chaining Mode\nhttps://isovalent.com/blog/post/cilium-hubble-observability-cni-chaining-mode/\n\n\nKube-OVN 文档中也有类似的集成：\nhttps://kube-ovn.readthedocs.io/zh-cn/latest/advance/with-cilium/\nhttps://kube-ovn.readthedocs.io/zh-cn/latest/advance/cilium-hubble-observe/\n\n\nCilium 自身 Monitoring \u0026 Metrics\nhttps://docs.cilium.io/en/stable/observability/metrics/","lastmodified":"2025-03-26T03:48:44.131315187Z","tags":null},"/cni-network":{"title":"","content":"[[bandwidth 带宽限制]]\n[[手动创建 netns + 跨主机通信]]\n[[CloudNative/cni-network/multus-cni]]\n[[networkPolicy - 网络策略]]\n[[Calico over IP fabrics]]\n","lastmodified":"2025-03-26T03:48:43.163318598Z","tags":null},"/cnitool":{"title":"cnitool","content":"\n官方文档链接：\n - https://www.cni.dev/docs/cnitool/\n - https://github.com/containernetworking/cni/tree/main/cnitool\n\ncnitool 是一个执行cni 配置的简易程序，可以在已经创建的网络命名空间内添加、删除 interface\n## 环境变量\n\n- **NETCONFPATH**：配置文件路径目录，默认为 /etc/cni/net.d。cnitool 在给定目录中搜索扩展名为 *.conf 或 *.json 的 CNI 配置文件。它加载此目录中的所有 CNI 配置文件，如果找到具有给 cnitool 的网络名称的 CNI 配置，则返回相应的 CNI 配置，否则返回 nil\n- **CNI_PATH**：检索 cni 可执行文件路径\n## 安装\n```yaml\ngo get github.com/containernetworking/cni\ngo install github.com/containernetworking/cni/cnitool@latest\n```\n## 例子\n创建一个配置\n`echo '{\"cniVersion\":\"0.4.0\",\"name\":\"myptp\",\"type\":\"ptp\",\"ipMasq\":true,\"ipam\":{\"type\":\"host-local\",\"subnet\":\"172.16.29.0/24\",\"routes\":[{\"dst\":\"0.0.0.0/0\"}]}}' | sudo tee /etc/cni/net.d/10-myptp.conf`\n\n创建一个网络命名空间（在/var/run/netns 会创建出对应的文件）\n`ip netns add testing`\n\n将容器添加至网络\n```yaml\nroot@node:~# CNI_PATH=/opt/cni/bin/ cnitool add myptp /var/run/netns/testing\n{\n    \"cniVersion\": \"0.4.0\",\n    \"interfaces\": [\n        {\n            \"name\": \"veth049fe3be\",\n            \"mac\": \"7a:9b:22:36:4e:48\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"5a:53:9e:8f:00:4a\",\n            \"sandbox\": \"/var/run/netns/testing\"\n        }\n    ],\n    \"ips\": [\n        {\n            \"version\": \"4\",\n            \"interface\": 1,\n            \"address\": \"172.16.29.2/24\",\n            \"gateway\": \"172.16.29.1\"\n        }\n    ],\n    \"routes\": [\n        {\n            \"dst\": \"0.0.0.0/0\"\n        }\n    ],\n    \"dns\": {}\n}\n```\n查看指定命名空间中的地址信息：`ip -n testing a`\n```shell\nroot@node:~# ip -n testing a\n1: lo: \u003cLOOPBACK\u003e mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: tunl0@NONE: \u003cNOARP\u003e mtu 1480 qdisc noop state DOWN group default qlen 1000\n    link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if146: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default \n    link/ether 5a:53:9e:8f:00:4a brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.16.29.2/24 brd 172.16.29.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5853:9eff:fe8f:4a/64 scope link \n       valid_lft forever preferred_lft forever\n```\n\n```shell\nroot@node:~# ip netns exec testing ping -c 1 4.2.2.2\nPING 4.2.2.2 (4.2.2.2) 56(84) bytes of data.\n64 bytes from 4.2.2.2: icmp_seq=1 ttl=60 time=1.23 ms\n\n--- 4.2.2.2 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 1.232/1.232/1.232/0.000 ms\n```\nclean up\n```shell\nCNI_PATH=/opt/cni/bin/ cnitool del myptp /var/run/netns/testing\nip netns del testing\n```\n\n### 遇到的问题\n1. ERRO[0000] Error loading CNI config file /etc/cni/net.d/87-podman-bridge.conf: error parsing configuration: missing 'type\n\t修改配置文件的后缀 .conf 为 .conflist\n\t参考：\n\t- https://git.kiritow.com/StarMirror/podman/commit/12aa71ab834cea3be13ffd537d927e8ef22ef2c2\n2. 对于自己重新编译官方的 plugins 并添加部分日志信息时，应当注意不要将日志信息输出到标准输出中，因为 kubelet 调用相关二进制时的参数传递就是通过标准输入、标准输出进行的。参考 [[bandwidth 带宽限制]]\n","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/confd-%E7%BB%84%E4%BB%B6":{"title":"","content":"\n\n开源的、轻量级的配置管理工具。监控Calico数据存储对BGP配置和全局默认的日志变更，如AS号、日志级别和IPAM信息。\n\nConfd根据存储中的数据更新，动态生成BIRD配置文件。当配置文件发生变化时，confd会触发BIRD加载新的文件。\n\n\n```yml\nfunction apply_communities ()\n{\n  {{- $prefix_advertisements_key := \"\"}}\n  {{- $node_prefix_advertisements_key := printf \"/host/%s/prefix_advertisements/ip_v4\" (getenv \"NODENAME\")}}\n  {{- if exists $node_prefix_advertisements_key}}\n    {{- $prefix_advertisements_key = $node_prefix_advertisements_key}}\n  {{- else if exists \"/global/prefix_advertisements/ip_v4\"}}\n    {{- $prefix_advertisements_key = \"/global/prefix_advertisements/ip_v4\"}}\n  {{- end}}\n  {{- if ne \"\" $prefix_advertisements_key}}\n    {{- range gets $prefix_advertisements_key}}\n      {{- $arr:= jsonArray .Value}}\n      {{- range $data := $arr}}\n      if ( net ~ {{$data.cidr}} ) then {\n        {{- range $dt := $data.communities }}\n        {{- $i := split $dt \":\"}}\n        {{- $length := len $i}}\n        {{- if eq $length 2}}\n          bgp_community.add(({{index $i 0}}, {{index $i 1}}));\n        {{- else}}\n          bgp_large_community.add(({{index $i 0}}, {{index $i 1}}, {{index $i 2}}));\n        {{- end}}\n        {{- end}}\n      }\n      {{- end}}\n    {{- end}}\n  {{- end}}\n}\n\n# Generated by confd\ninclude \"bird_aggr.cfg\";\ninclude \"bird_ipam.cfg\";\n\n{{- $node_ip_key := printf \"/host/%s/ip_addr_v4\" (getenv \"NODENAME\")}}{{$node_ip := getv $node_ip_key}}\n{{- $router_id := getenv \"CALICO_ROUTER_ID\" \"\"}}\n\n{{- $node_name := getenv \"NODENAME\"}}\n\nrouter id {{if eq \"hash\" ($router_id) -}}\n        {{hashToIPv4 $node_name}};\n{{- else -}}\n        {{if ne \"\" ($router_id)}}{{$router_id}}{{else}}{{$node_ip}}{{end}};\n{{- end}}\n\n{{- $node_listen_port_key := printf \"/host/%s/listen_port\" (getenv \"NODENAME\")}}\n{{- if exists $node_listen_port_key}}\n# Set node listen_port\nlisten bgp port {{getv $node_listen_port_key}};\n{{- else if exists \"/global/listen_port\" }}\n# Set global listen_port\nlisten bgp port {{getv \"/global/listen_port\"}};\n{{- end}}\n\n{{- define \"LOGGING\"}}\n{{- $node_logging_key := printf \"/host/%s/loglevel\" (getenv \"NODENAME\")}}\n{{- if exists $node_logging_key}}\n{{- $logging := getv $node_logging_key}}\n{{- if eq $logging \"debug\"}}\n  debug all;\n{{- else if ne $logging \"none\"}}\n  debug { states };\n{{- end}}\n{{- else if exists \"/global/loglevel\"}}\n{{- $logging := getv \"/global/loglevel\"}}\n{{- if eq $logging \"debug\"}}\n  debug all;\n{{- else if ne $logging \"none\"}}\n  debug { states };\n{{- end}}\n{{- else}}\n  debug { states };\n{{- end}}\n{{- end}}\n\n# Configure synchronization between routing tables and kernel.\nprotocol kernel {\n  learn;             # Learn all alien routes from the kernel\n  persist;           # Don't remove routes on bird shutdown\n  scan time 2;       # Scan kernel routing table every 2 seconds\n  import all;\n  export filter calico_kernel_programming; # Default is export none\n  graceful restart;  # Turn on graceful restart to reduce potential flaps in\n                     # routes when reloading BIRD configuration.  With a full\n                     # automatic mesh, there is no way to prevent BGP from\n                     # flapping since multiple nodes update their BGP\n                     # configuration at the same time, GR is not guaranteed to\n                     # work correctly in this scenario.\n  merge paths on;    # Allow export multipath routes (ECMP)\n}\n\n# Watch interface up/down events.\nprotocol device {\n{{- template \"LOGGING\"}}\n  scan time 2;    # Scan interfaces every 2 seconds\n}\n\nprotocol direct {\n{{- template \"LOGGING\"}}\n  interface -\"cali*\", -\"kube-ipvs*\", \"*\"; # Exclude cali* and kube-ipvs* but\n                                          # include everything else.  In\n                                          # IPVS-mode, kube-proxy creates a\n                                          # kube-ipvs0 interface. We exclude\n                                          # kube-ipvs0 because this interface\n                                          # gets an address for every in use\n                                          # cluster IP. We use static routes\n                                          # for when we legitimately want to\n                                          # export cluster IPs.\n}\n\n{{if eq \"\" ($node_ip)}}# IPv4 disabled on this node.\n{{else}}{{$node_as_key := printf \"/host/%s/as_num\" (getenv \"NODENAME\")}}\n# Template for all BGP clients\ntemplate bgp bgp_template {\n{{- $as_key := or (and (exists $node_as_key) $node_as_key) \"/global/as_num\"}}\n{{- $node_as_num := getv $as_key}}\n{{- template \"LOGGING\"}}\n  description \"Connection to BGP peer\";\n  local as {{$node_as_num}};\n  multihop;\n  gateway recursive; # This should be the default, but just in case.\n  import all;        # Import all routes, since we don't know what the upstream\n                     # topology is and therefore have to trust the ToR/RR.\n  export filter calico_export_to_bgp_peers;  # Only want to export routes for workloads.\n  add paths on;\n  graceful restart;  # See comment in kernel section about graceful restart.\n  connect delay time 2;\n  connect retry time 5;\n  error wait time 5,30;\n}\n\n# ------------- Node-to-node mesh -------------\n{{- $node_cid_key := printf \"/host/%s/rr_cluster_id\" (getenv \"NODENAME\")}}\n{{- $node_cluster_id := getv $node_cid_key}}\n{{if (json (getv \"/global/node_mesh\")).enabled}}\n{{range $host := lsdir \"/host\"}}\n{{$onode_as_key := printf \"/host/%s/as_num\" .}}\n{{$onode_ip_key := printf \"/host/%s/ip_addr_v4\" .}}{{if exists $onode_ip_key}}{{$onode_ip := getv $onode_ip_key}}\n{{- $listen_port := \"\"}}\n{{- $onode_listen_port_key := printf \"/host/%s/listen_port\" .}}\n{{- if exists $onode_listen_port_key}}\n{{- $listen_port = getv $onode_listen_port_key}}\n{{- else if exists \"/global/listen_port\"}}\n{{- $listen_port = getv \"/global/listen_port\"}}\n{{- end}}\n{{$nums := split $onode_ip \".\"}}{{$id := join $nums \"_\"}}\n# For peer {{$onode_ip_key}}\n{{if eq $onode_ip ($node_ip) }}# Skipping ourselves ({{$node_ip}})\n{{else if ne \"\" $onode_ip}}protocol bgp Mesh_{{$id}} from bgp_template {\n  neighbor {{$onode_ip}} {{if ne \"\" $listen_port}}port {{$listen_port}} {{end}}as {{if exists $onode_as_key}}{{getv $onode_as_key}}{{else}}{{getv \"/global/as_num\"}}{{end}};\n  source address {{$node_ip}};  # The local address we use for the TCP connection\n  {{- /*\n       Make the peering unidirectional. This avoids a race where\n       - peer A opens a connection and begins a graceful restart\n       - before the restart completes, peer B opens its connection\n       - peer A sees the new connection and aborts the graceful restart, causing a route flap.\n  */ -}}\n  {{if gt $onode_ip $node_ip}}\n  passive on; # Mesh is unidirectional, peer will connect to us.\n  {{- end}}\n}{{end}}{{end}}{{end}}\n{{else}}\n# Node-to-node mesh disabled\n{{end}}\n\n\n# ------------- Global peers -------------\n{{if ls \"/global/peer_v4\"}}\n{{range gets \"/global/peer_v4/*\"}}{{$data := json .Value}}\n{{$nums := split $data.ip \".\"}}{{$id := join $nums \"_\"}}\n{{- if $data.port}}\n{{- $id = printf \"%s_port_%.0f\" $id $data.port}}\n{{- end}}\n# For peer {{.Key}}\n{{- if eq $data.ip ($node_ip) }}\n# Skipping ourselves ({{$node_ip}})\n{{- else}}\nprotocol bgp Global_{{$id}} from bgp_template {\n  neighbor {{$data.ip}} {{if $data.port }}port {{ $data.port }} {{end}}as {{$data.as_num}};\n{{- if eq $data.source_addr \"UseNodeIP\"}}\n  source address {{$node_ip}};  # The local address we use for the TCP connection\n{{- end}}\n{{- if ne $data.restart_time \"\"}}\n  graceful restart time {{$data.restart_time}};\n{{- end}}\n{{- if and (eq $data.as_num $node_as_num) (ne \"\" ($node_cluster_id)) (ne $data.rr_cluster_id ($node_cluster_id))}}\n  rr client;\n  rr cluster id {{$node_cluster_id}};\n{{- end}}\n{{- if $data.password}}\n  password \"{{$data.password}}\";\n{{- end}}\n{{- if and (ne $data.as_num $node_as_num) ($data.keep_next_hop)}}\n  next hop keep;\n{{- end}}\n}\n{{- end}}\n{{end}}\n{{else}}# No global peers configured.{{end}}\n\n\n# ------------- Node-specific peers -------------\n{{$node_peers_key := printf \"/host/%s/peer_v4\" (getenv \"NODENAME\")}}\n{{if ls $node_peers_key}}\n{{range gets (printf \"%s/*\" $node_peers_key)}}{{$data := json .Value}}\n{{$nums := split $data.ip \".\"}}{{$id := join $nums \"_\"}}\n{{- if $data.port}}\n{{- $id = printf \"%s_port_%.0f\" $id $data.port}}\n{{- end}}\n# For peer {{.Key}}\n{{- if eq $data.ip ($node_ip) }}\n# Skipping ourselves ({{$node_ip}})\n{{- else}}\nprotocol bgp Node_{{$id}} from bgp_template {\n  neighbor {{$data.ip}} {{if $data.port }}port {{ $data.port }} {{end}}as {{$data.as_num}};\n{{- if eq $data.source_addr \"UseNodeIP\"}}\n  source address {{$node_ip}};  # The local address we use for the TCP connection\n{{- end}}\n{{- if ne $data.restart_time \"\"}}\n  graceful restart time {{$data.restart_time}};\n{{- end}}\n{{- if and (eq $data.as_num $node_as_num) (ne \"\" ($node_cluster_id)) (ne $data.rr_cluster_id ($node_cluster_id))}}\n  rr client;\n  rr cluster id {{$node_cluster_id}};\n{{- end}}\n{{- if $data.password}}\n  password \"{{$data.password}}\";\n{{- end}}\n{{- if and (ne $data.as_num $node_as_num) ($data.keep_next_hop)}}\n  next hop keep;\n{{- end}}\n}\n{{- end}}\n{{end}}\n{{else}}# No node-specific peers configured.{{end}}\n{{end}}{{/* End of IPv4 enable check */}}\n```","lastmodified":"2025-03-26T03:48:43.135318697Z","tags":null},"/conntrack":{"title":"","content":"查看、加载、卸载 nf_conntrack 模块\n\n\n# 连接跟踪（conntrack）：原理、应用及 Linux 内核实现\n\n## 摘要\n\n本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux 内核中的实现。\n\n代码分析基于内核 `4.19`。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码 所在的源文件，如有需要请查阅。\n\n水平有限，文中不免有错误之处，欢迎指正交流。\n\n# 1 引言\n\n连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、 软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖 连接跟踪功能。\n\n## 1.1 概念\n\n连接跟踪，顾名思义，就是**跟踪（并记录）连接的状态**。\n![upgit_20221117_1668674793.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668674793.png)\n\n\u003ccenter\u003eFig 1.1. 连接跟踪及其内核位置示意图\u003c/center\u003e\n\n例如，上图是一台 IP 地址为 `10.1.1.2` 的 Linux 机器，我们能看到这台机器上有三条 连接：\n\n1.  机器访问外部 HTTP 服务的连接（目的端口 80）\n2.  外部访问机器内 FTP 服务的连接（目的端口 21）\n3.  机器访问外部 DNS 服务的连接（目的端口 53）\n\n连接跟踪所做的事情就是发现并跟踪这些连接的状态，具体包括：\n\n-   从数据包中提取**元组**（tuple）信息，辨别**数据流**（flow）和对应的**连接**（connection）\n-   为所有连接维护一个**状态数据库**（conntrack table），例如连接的创建时间、发送 包数、发送字节数等等\n-   回收过期的连接（GC）\n-   为更上层的功能（例如 NAT）提供服务\n\n需要注意的是，**连接跟踪中所说的“连接”，概念和 TCP/IP 协议中“面向连接”（ connection oriented）的“连接”并不完全相同**，简单来说：\n\n-   TCP/IP 协议中，连接是一个四层（Layer 4）的概念。\n    -   TCP 是有连接的，或称面向连接的（connection oriented），发送出去的包都要求对端应答（ACK），并且有重传机制\n    -   UDP 是无连接的，发送的包无需对端应答，也没有重传机制\n-   CT 中，一个元组（tuple）定义的一条数据流（flow ）就表示一条连接（connection）。\n    -   后面会看到 UDP 甚至是 **ICMP 这种三层协议在 CT 中也都是有连接记录的**\n    -   但**不是所有协议都会被连接跟踪**\n\n本文中用到“连接”一词时，大部分情况下指的都是后者，即“连接跟踪”中的“连接”。\n\n## 1.2 原理\n\n了解以上概念之后，我们来思考下连接跟踪的技术原理。\n\n要跟踪一台机器的所有连接状态，就需要\n\n1.  **拦截（或称过滤）流经这台机器的每一个数据包，并进行分析**。\n2.  根据这些信息**建立**起这台机器上的**连接信息数据库**（conntrack table）。\n3.  根据拦截到的包信息，不断更新数据库\n\n例如，\n\n1.  拦截到一个 TCP `SYNC` 包时，说明正在尝试建立 TCP 连接，需要创建一条新 conntrack entry 来记录这条连接\n2.  拦截到一个属于已有 conntrack entry 的包时，需要更新这条 conntrack entry 的收发包数等统计信息\n\n除了以上两点功能需求，还要考虑**性能问题**，因为连接跟踪要对每个包进行过滤和分析 。性能问题非常重要，但不是本文重点，后面介绍实现时会进一步提及。\n\n之外，这些功能最好还有配套的管理工具来更方便地使用。\n\n## 1.3 设计：Netfilter\n\n**Linux 的连接跟踪是在 [Netfilter](https://en.wikipedia.org/wiki/Netfilter) 中实现的。**\n![upgit_20221117_1668674893.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668674893.png)\n\n\u003ccenter\u003eFig 1.2. Netfilter architecture inside Linux kernel\u003c/center\u003e\n\nNetfilter 是 Linux 内核中一个对数据 包进行**控制、修改和过滤**（manipulation and filtering）的框架。它在内核协议 栈中设置了若干hook 点，以此对数据包进行拦截、过滤或其他处理。\n\n\u003e 说地更直白一些，hook 机制就是在数据包的必经之路上设置若干检测点，所有到达这 些检测点的包都必须接受检测，根据检测的结果决定：\n\u003e \n\u003e 1.  放行：不对包进行任何修改，退出检测逻辑，继续后面正常的包处理\n\u003e 2.  修改：例如修改 IP 地址进行 NAT，然后将包放回正常的包处理逻辑\n\u003e 3.  丢弃：安全策略或防火墙功能\n\u003e \n\u003e 连接跟踪模块只是完成连接信息的采集和录入功能，并不会修改或丢弃数据包，后者是其 他模块（例如 NAT）基于 Netfilter hook 完成的。\n\nNetfilter 是最古老的内核框架之一，1998 年开始开发，2000 年合并到 `2.4.x` 内 核主线版本 [5]。\n\n## 1.4 设计：进一步思考\n\n现在提到连接跟踪（conntrack），可能首先都会想到 Netfilter。但由上节讨论可知， 连接跟踪概念是独立于 Netfilter 的，**Netfilter 只是 Linux 内核中的一种连接跟踪实现**。\n\n换句话说，**只要具备了 hook 能力，能拦截到进出主机的每个包，完全可以在此基础上自 己实现一套连接跟踪**。\n![upgit_20221117_1668674950.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668674950.png)\n\u003ccenter\u003eFig 1.3. Cilium's conntrack and NAT architectrue\u003c/center\u003e\n\n云原生网络方案 Cilium 在 `1.7.4+` 版本就实现了这样一套独立的连接跟踪和 NAT 机制 （完备功能需要 Kernel `4.19+`）。其基本原理是：\n\n1.  基于 BPF hook 实现数据包的拦截功能（等价于 netfilter 里面的 hook 机制）\n2.  在 BPF hook 的基础上，实现一套全新的 conntrack 和 NAT\n\n因此，即便[卸载 Netfilter](https://github.com/cilium/cilium/issues/12879) ，也不会影响 Cilium 对 Kubernetes ClusterIP、NodePort、ExternalIPs 和 LoadBalancer 等功能的支持 [2]。\n\n由于这套连接跟踪机制是独立于 Netfilter 的，因此它的 conntrack 和 NAT 信息也没有 存储在内核的（也就是 Netfilter 的）conntrack table 和 NAT table。所以常规的 `conntrack/netstats/ss/lsof` 等工具是看不到的，要使用 Cilium 的命令，例如：\n\n```\n$ cilium bpf nat list\n$ cilium bpf ct list global\n```\n\n配置也是独立的，需要在 Cilium 里面配置，例如命令行选项 `--bpf-ct-tcp-max`。\n\n另外，本文会多次提到连接跟踪模块和 NAT 模块独立，但**出于性能考虑，具体实现中 二者代码可能是有耦合的**。例如 Cilium 做 conntrack 的垃圾回收（GC）时就会顺便把 NAT 里相应的 entry 回收掉，而非为 NAT 做单独的 GC。\n\n## 1.5 应用\n\n来看几个 conntrack 的具体应用。\n\n### 1.5.1 网络地址转换（NAT）\n\n网络地址转换（NAT），名字表达的意思也比较清楚：对（数据包的）网络地址（`IP + Port`）进行转换。\n![upgit_20221117_1668674981.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668674981.png)\n\n\u003ccneter\u003eFig 1.4. NAT 及其内核位置示意图\u003c/cneter\u003e\n\n例如上图中，机器自己的 IP `10.1.1.2` 是能与外部正常通信的，但 `192.168` 网段是私有 IP 段，外界无法访问，也就是说源 IP 地址是 `192.168` 的包，其**应答包是无法回来的**。因此，\n\n-   当源地址为 `192.168` 网段的包要出去时，机器会先将源 IP 换成机器自己的 `10.1.1.2` 再发送出去；\n-   收到应答包时，再进行相反的转换。\n\n这就是 NAT 的基本过程。\n\nDocker 默认的 `bridge` 网络模式就是这个原理 [4]。每个容器会分一个私有网段的 IP 地址，这个 IP 地址可以在宿主机内的不同容器之间通信，但容器流量出宿主机时要进行 NAT。\n\nNAT 又可以细分为几类：\n\n-   SNAT：对源地址（source）进行转换\n-   DNAT：对目的地址（destination）进行转换\n-   Full NAT：同时对源地址和目的地址进行转换\n\n以上场景属于 SNAT，将不同私有 IP 都映射成同一个“公有 IP”，以使其能访问外部网络服 务。这种场景也属于正向代理。\n\nNAT 依赖连接跟踪的结果。连接跟踪**最重要的使用场景**就是 NAT。\n\n#### 四层负载均衡（L4LB）\n\n再将范围稍微延伸一点，讨论一下 NAT 模式的四层负载均衡。\n\n四层负载均衡是根据包的四层信息（例如 `src/dst ip, src/dst port, proto`）做流量分发。\n\nVIP（Virtual IP）是四层负载均衡的一种实现方式：\n\n-   多个后端真实 IP（Real IP）挂到同一个虚拟 IP（VIP）上\n-   客户端过来的流量先到达 VIP，再经负载均衡算法转发给某个特定的后端 IP\n\n如果在 VIP 和 Real IP 节点之间使用的 NAT 技术（也可以使用其他技术），那客户端访 问服务端时，L4LB 节点将做双向 NAT（Full NAT），数据流如下图所示：\n![upgit_20221117_1668675014.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668675014.png)\n\n\u003ccenter\u003eFig 1.5. L4LB: Traffic path in NAT mode [3]\u003c/center\u003e\n\n### 1.5.2 有状态防火墙\n\n有状态防火墙（stateful firewall）是相对于早期的**无状态防火墙**（stateless firewall）而言的：早期防火墙只能写 `drop syn to port 443` 或者 `allow syn to port 80` 这种非常简单直接 的规则，**没有 flow 的概念**，因此无法实现诸如 **“如果这个 ack 之前已经有 syn， 就 allow，否则 drop”** 这样的规则，使用非常受限 [6]。\n\n显然，要实现有状态防火墙，就必须记录 flow 和状态，这正是 conntrack 做的事情。\n\n来看个更具体的防火墙应用：OpenStack 主机防火墙解决方案 —— 安全组（security group）。\n\n#### OpenStack 安全组\n\n简单来说，安全组实现了**虚拟机级别**的安全隔离，具体实现是：在 node 上连接 VM 的 网络设备上做有状态防火墙。在当时，最能实现这一功能的可能就是 Netfilter/iptables。\n\n回到宿主机内网络拓扑问题： OpenStack 使用 OVS bridge 来连接一台宿主机内的所有 VM。 如果只从网络连通性考虑，那每个 VM 应该直接连到 OVS bridge `br-int`。但这里问题 就来了 [7]：\n\n-   （较早版本的）OVS 没有 conntrack 模块，\n-   Linux 中有 conntrack 模块，但基于 conntrack 的防火墙**工作在 IP 层**（L3），通过 iptables 控制，\n-   而 **OVS 是 L2 模块**，无法使用 L3 模块的功能，\n\n最终结果是：无法在 OVS （连接虚拟机）的设备上做防火墙。\n\n所以，2016 之前 OpenStack 的解决方案是，在每个 OVS 和 VM 之间再加一个 Linux bridge ，如下图所示:\n![upgit_20221117_1668675060.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668675060.png)\n\n\u003ccenter\u003eFig 1.6. Network topology within an OpenStack compute node\u003c/cneter\u003e\n\nLinux bridge 也是 L2 模块，按道理也无法使用 iptables。但是，**它有一个 L2 工具 ebtables，能够跳转到 iptables**，因此间接支持了 iptables，也就能用到 Netfilter/iptables 防火墙的功能。\n\n这种暴力堆砌的方式不仅丑陋、增加网络复杂性，而且会导致性能问题。因此， RedHat 在 2016 年提出了一个 OVS conntrack 方案 [7]，从那以后，才有可能干掉 Linux bridge 而仍然具备安全组的功能。\n\n## 1.6 小结\n\n以上是理论篇，接下来看一下内核实现。\n\n# 2 Netfilter hook 机制实现\n\nNetfilter 由几个模块构成，其中最主要的是**连接跟踪**（CT）模块和**网络地址转换**（NAT）模块。\n\nCT 模块的主要职责是识别出可进行连接跟踪的包。 CT 模块独立于 NAT 模块，但主要目的是服务于后者。\n\n## 2.1 Netfilter 框架\n\n### 5 个 hook 点\n![upgit_20221117_1668675145.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668675145.png)\n\u003ccenter\u003e图 2.1. The 5 hook points in netfilter framework\u003c/center\u003e\n\n如上图所示，Netfilter 在内核协议栈的包处理路径上提供了 5 个 hook 点，分别是：\n\n```\n// include/uapi/linux/netfilter_ipv4.h\n\n#define NF_IP_PRE_ROUTING    0 /* After promisc drops, checksum checks. */\n#define NF_IP_LOCAL_IN       1 /* If the packet is destined for this box. */\n#define NF_IP_FORWARD        2 /* If the packet is destined for another interface. */\n#define NF_IP_LOCAL_OUT      3 /* Packets coming from a local process. */\n#define NF_IP_POST_ROUTING   4 /* Packets about to hit the wire. */\n#define NF_IP_NUMHOOKS       5\n```\n\n用户可以在这些 hook 点注册自己的处理函数（handlers）。当有数据包经过 hook 点时， 就会调用相应的 handlers。\n\n\u003e 另外还有一套 `NF_INET_` 开头的定义，`include/uapi/linux/netfilter.h`。 这两套是等价的，从注释看，`NF_IP_` 开头的定义可能是为了保持兼容性。\n\u003e \n\u003e ```\n\u003e enum nf_inet_hooks {\n\u003e     NF_INET_PRE_ROUTING,\n\u003e     NF_INET_LOCAL_IN,\n\u003e     NF_INET_FORWARD,\n\u003e     NF_INET_LOCAL_OUT,\n\u003e     NF_INET_POST_ROUTING,\n\u003e     NF_INET_NUMHOOKS\n\u003e };\n\u003e ```\n\n### hook 返回值类型\n\nhook 函数对包进行判断或处理之后，需要返回一个判断结果，指导接下来要对这个包做什 么。可能的结果有：\n\n```\n// include/uapi/linux/netfilter.h\n\n#define NF_DROP   0  // 已丢弃这个包\n#define NF_ACCEPT 1  // 接受这个包，结束判断，继续下一步处理\n#define NF_STOLEN 2  // 临时 hold 这个包，不用再继续穿越协议栈了。常见的情形是缓存分片之后的包（等待重组）\n#define NF_QUEUE  3  // 应当将包放到队列\n#define NF_REPEAT 4  // 当前处理函数应当被再次调用\n```\n\n### hook 优先级\n\n每个 hook 点可以注册多个处理函数（handler）。在注册时必须指定这些 handlers 的**优先级**，这样触发 hook 时能够根据优先级依次调用处理函数。\n\n## 2.2 过滤规则的组织\n\n`iptables` 是配置 Netfilter 过滤功能的用户空间工具。为便于管理， 过滤规则按功能分为若干 table：\n\n-   raw\n-   filter\n-   nat\n-   mangle\n\n这不是本文重点。更多信息可参考 [(译) 深入理解 iptables 和 netfilter 架构](https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/)\n\n# 3 Netfilter conntrack 实现\n\n连接跟踪模块用于维护**可跟踪协议**（trackable protocols）的连接状态。 也就是说，连接跟踪**针对的是特定协议的包，而不是所有协议的包**。 稍后会看到它支持哪些协议。\n\n## 3.1 重要结构体和函数\n\n重要结构体：\n\n-   `struct nf_conntrack_tuple {}`: 定义一个 tuple。\n    -   `struct nf_conntrack_man {}`：tuple 的 manipulable part。\n        -   `struct nf_conntrack_man_proto {}`：manipulable part 中协议相关的部分。\n-   `struct nf_conntrack_l4proto {}`: 支持连接跟踪的**协议需要实现的方法集**（以及其他协议相关字段）。\n-   `struct nf_conntrack_tuple_hash {}`：哈希表（conntrack table）中的表项（entry）。\n-   `struct nf_conn {}`：**定义一个 flow**。\n\n重要函数：\n\n-   `hash_conntrack_raw()`：根据 tuple 计算出一个 32 位的哈希值（hash key）。\n-   `nf_conntrack_in()`：**连接跟踪模块的核心，包进入连接跟踪的地方**。\n-   `resolve_normal_ct() -\u003e init_conntrack() -\u003e ct = __nf_conntrack_alloc(); l4proto-\u003enew(ct)`\n    \n    创建一个新的连接记录（conntrack entry），然后初始化。\n    \n-   `nf_conntrack_confirm()`：确认前面通过 `nf_conntrack_in()` 创建的新连接（是否被丢弃）。\n\n## 3.2 `struct nf_conntrack_tuple {}`：元组（Tuple）\n\nTuple 是连接跟踪中最重要的概念之一。\n\n**一个 tuple 定义一个单向（unidirectional）flow**。内核代码中有如下注释：\n\n\u003e //include/net/netfilter/nf_conntrack_tuple.h\n\u003e \n\u003e A `tuple` is a structure containing the information to uniquely identify a connection. ie. if two packets have the same tuple, they are in the same connection; if not, they are not.\n\n### 结构体定义\n\n```\n//include/net/netfilter/nf_conntrack_tuple.h\n\n// 为方便 NAT 的实现，内核将 tuple 结构体拆分为 \"manipulatable\" 和 \"non-manipulatable\" 两部分\n// 下面结构体中的 _man 是 manipulatable 的缩写\n                                               // ude/uapi/linux/netfilter.h\n                                               union nf_inet_addr {\n                                                   __u32            all[4];\n                                                   __be32           ip;\n                                                   __be32           ip6[4];\n                                                   struct in_addr   in;\n                                                   struct in6_addr  in6;\n/* manipulable part of the tuple */         /  };\nstruct nf_conntrack_man {                  /\n    union nf_inet_addr           u3; --\u003e--/\n    union nf_conntrack_man_proto u;  --\u003e--\\\n                                           \\   // include/uapi/linux/netfilter/nf_conntrack_tuple_common.h\n    u_int16_t l3num; // L3 proto            \\  // 协议相关的部分\n};                                            union nf_conntrack_man_proto {\n                                                  __be16 all;/* Add other protocols here. */\n\n                                                  struct { __be16 port; } tcp;\n                                                  struct { __be16 port; } udp;\n                                                  struct { __be16 id;   } icmp;\n                                                  struct { __be16 port; } dccp;\n                                                  struct { __be16 port; } sctp;\n                                                  struct { __be16 key;  } gre;\n                                              };\n\nstruct nf_conntrack_tuple { /* This contains the information to distinguish a connection. */\n    struct nf_conntrack_man src;  // 源地址信息，manipulable part\n    struct {\n        union nf_inet_addr u3;\n        union {\n            __be16 all; /* Add other protocols here. */\n\n            struct { __be16 port;         } tcp;\n            struct { __be16 port;         } udp;\n            struct { u_int8_t type, code; } icmp;\n            struct { __be16 port;         } dccp;\n            struct { __be16 port;         } sctp;\n            struct { __be16 key;          } gre;\n        } u;\n        u_int8_t protonum; /* The protocol. */\n        u_int8_t dir;      /* The direction (for tuplehash) */\n    } dst;                       // 目的地址信息\n};\n```\n\n**Tuple 结构体中只有两个字段 src 和 dst**，分别保存源和目的信息。`src` 和 `dst` 自身也是结构体，能保存不同类型协议的数据。以 IPv4 UDP 为例，五元组分别保存在如下字段：\n\n-   `dst.protonum`：协议类型\n-   `src.u3.ip`：源 IP 地址\n-   `dst.u3.ip`：目的 IP 地址\n-   `src.u.udp.port`：源端口号\n-   `dst.u.udp.port`：目的端口号\n\n### CT 支持的协议\n\n从以上定义可以看到，连接跟踪模块**目前只支持以下六种协议**：TCP、UDP、ICMP、DCCP、SCTP、GRE。\n\n**注意其中的 ICMP 协议**。大家可能会认为，连接跟踪模块依据包的三层和四层信息做 哈希，而 ICMP 是三层协议，没有四层信息，因此 ICMP 肯定不会被 CT 记录。但**实际上 是会的**，上面代码可以看到，ICMP 使用了其头信息中的 ICMP `type`和 `code` 字段来 定义 tuple。\n\n## 3.3 `struct nf_conntrack_l4proto {}`：协议需要实现的方法集合\n\n支持连接跟踪的协议都需要实现 `struct nf_conntrack_l4proto {}` 结构体 中定义的方法，例如 `pkt_to_tuple()`。\n\n```\n// include/net/netfilter/nf_conntrack_l4proto.h\n\nstruct nf_conntrack_l4proto {\n    u_int16_t l3proto; /* L3 Protocol number. */\n    u_int8_t  l4proto; /* L4 Protocol number. */\n\n    // 从包（skb）中提取 tuple\n    bool (*pkt_to_tuple)(struct sk_buff *skb, ... struct nf_conntrack_tuple *tuple);\n\n    // 对包进行判决，返回判决结果（returns verdict for packet）\n    int (*packet)(struct nf_conn *ct, const struct sk_buff *skb ...);\n\n    // 创建一个新连接。如果成功返回 TRUE；如果返回的是 TRUE，接下来会调用 packet() 方法\n    bool (*new)(struct nf_conn *ct, const struct sk_buff *skb, unsigned int dataoff);\n\n    // 判断当前数据包能否被连接跟踪。如果返回成功，接下来会调用 packet() 方法\n    int (*error)(struct net *net, struct nf_conn *tmpl, struct sk_buff *skb, ...);\n\n    ...\n};\n```\n\n## 3.4 `struct nf_conntrack_tuple_hash {}`：哈希表项\n\nconntrack 将活动连接的状态存储在一张哈希表中（`key: value`）。\n\n`hash_conntrack_raw()` 根据 tuple 计算出一个 32 位的哈希值（key）：\n\n```\n// net/netfilter/nf_conntrack_core.c\n\nstatic u32 hash_conntrack_raw(struct nf_conntrack_tuple *tuple, struct net *net)\n{\n    get_random_once(\u0026nf_conntrack_hash_rnd, sizeof(nf_conntrack_hash_rnd));\n\n    /* The direction must be ignored, so we hash everything up to the\n     * destination ports (which is a multiple of 4) and treat the last three bytes manually.  */\n    u32 seed = nf_conntrack_hash_rnd ^ net_hash_mix(net);\n    unsigned int n = (sizeof(tuple-\u003esrc) + sizeof(tuple-\u003edst.u3)) / sizeof(u32);\n\n    return jhash2((u32 *)tuple, n, seed ^ ((tuple-\u003edst.u.all \u003c\u003c 16) | tuple-\u003edst.protonum));\n}\n```\n\n注意其中是如何利用 tuple 的不同字段来计算哈希的。\n\n`nf_conntrack_tuple_hash` 是哈希表中的表项（value）:\n\n```\n// include/net/netfilter/nf_conntrack_tuple.h\n\n// 每条连接在哈希表中都对应两项，分别对应两个方向（egress/ingress）\n// Connections have two entries in the hash table: one for each way\nstruct nf_conntrack_tuple_hash {\n    struct hlist_nulls_node   hnnode;   // 指向该哈希对应的连接 struct nf_conn，采用 list 形式是为了解决哈希冲突\n    struct nf_conntrack_tuple tuple;    // N 元组，前面详细介绍过了\n};\n```\n\n## 3.5 `struct nf_conn {}`：连接（connection）\n\n**Netfilter 中每个 flow 都称为一个 connection**，即使是对那些非面向连接的协议（例 如 UDP）。每个 connection 用 `struct nf_conn {}` 表示，主要字段如下：\n\n```\n// include/net/netfilter/nf_conntrack.h\n\n                                                  // include/linux/skbuff.h\n                                        ------\u003e   struct nf_conntrack {\n                                        |             atomic_t use;  // 连接引用计数？\n                                        |         };\nstruct nf_conn {                        |\n    struct nf_conntrack            ct_general;\n\n    struct nf_conntrack_tuple_hash tuplehash[IP_CT_DIR_MAX]; // 哈希表项，数组是因为要记录两个方向的 flow\n\n    unsigned long status; // 连接状态，见下文\n    u32 timeout;          // 连接状态的定时器\n\n    possible_net_t ct_net;\n\n    struct hlist_node    nat_bysource;\n                                                        // per conntrack: protocol private data\n    struct nf_conn *master;                             union nf_conntrack_proto {\n                                                       /    /* insert conntrack proto private data here */\n    u_int32_t mark;    /* 对 skb 进行特殊标记 */      /     struct nf_ct_dccp dccp;\n    u_int32_t secmark;                               /      struct ip_ct_sctp sctp;\n                                                    /       struct ip_ct_tcp tcp;\n    union nf_conntrack_proto proto; ----------\u003e----/        struct nf_ct_gre gre;\n};                                                          unsigned int tmpl_padto;\n                                                        };\n```\n\n**连接的状态集合 enum ip_conntrack_status**：\n\n```\n// include/uapi/linux/netfilter/nf_conntrack_common.h\n\nenum ip_conntrack_status {\n    IPS_EXPECTED      = (1 \u003c\u003c IPS_EXPECTED_BIT),\n    IPS_SEEN_REPLY    = (1 \u003c\u003c IPS_SEEN_REPLY_BIT),\n    IPS_ASSURED       = (1 \u003c\u003c IPS_ASSURED_BIT),\n    IPS_CONFIRMED     = (1 \u003c\u003c IPS_CONFIRMED_BIT),\n    IPS_SRC_NAT       = (1 \u003c\u003c IPS_SRC_NAT_BIT),\n    IPS_DST_NAT       = (1 \u003c\u003c IPS_DST_NAT_BIT),\n    IPS_NAT_MASK      = (IPS_DST_NAT | IPS_SRC_NAT),\n    IPS_SEQ_ADJUST    = (1 \u003c\u003c IPS_SEQ_ADJUST_BIT),\n    IPS_SRC_NAT_DONE  = (1 \u003c\u003c IPS_SRC_NAT_DONE_BIT),\n    IPS_DST_NAT_DONE  = (1 \u003c\u003c IPS_DST_NAT_DONE_BIT),\n    IPS_NAT_DONE_MASK = (IPS_DST_NAT_DONE | IPS_SRC_NAT_DONE),\n    IPS_DYING         = (1 \u003c\u003c IPS_DYING_BIT),\n    IPS_FIXED_TIMEOUT = (1 \u003c\u003c IPS_FIXED_TIMEOUT_BIT),\n    IPS_TEMPLATE      = (1 \u003c\u003c IPS_TEMPLATE_BIT),\n    IPS_UNTRACKED     = (1 \u003c\u003c IPS_UNTRACKED_BIT),\n    IPS_HELPER        = (1 \u003c\u003c IPS_HELPER_BIT),\n    IPS_OFFLOAD       = (1 \u003c\u003c IPS_OFFLOAD_BIT),\n\n    IPS_UNCHANGEABLE_MASK = (IPS_NAT_DONE_MASK | IPS_NAT_MASK |\n                 IPS_EXPECTED | IPS_CONFIRMED | IPS_DYING |\n                 IPS_SEQ_ADJUST | IPS_TEMPLATE | IPS_OFFLOAD),\n};\n```\n\n## 3.6 `nf_conntrack_in()`：进入连接跟踪\n![upgit_20221117_1668675210.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668675210.png)\n\n\u003ccenter\u003eFig. Netfilter 中的连接跟踪点\u003c/center\u003e\n\n如上图所示，Netfilter 在四个 Hook 点对包进行跟踪：\n\n1.  `PRE_ROUTING` 和 `LOCAL_OUT`：**调用 nf_conntrack_in() 开始连接跟踪**， 正常情况下会创建一条新连接记录，然后将 conntrack entry 放到 **unconfirmed list**。\n    \n    为什么是这两个 hook 点呢？因为它们都是**新连接的第一个包最先达到的地方**，\n    \n    -   `PRE_ROUTING` 是**外部主动和本机建连**时包最先到达的地方\n    -   `LOCAL_OUT` 是**本机主动和外部建连**时包最先到达的地方\n2.  `POST_ROUTING` 和 `LOCAL_IN`：**调用 nf_conntrack_confirm() 将 nf_conntrack_in() 创建的连接移到 confirmed list**。\n    \n    同样要问，为什么在这两个 hook 点呢？因为如果新连接的第一个包没有被丢弃，那这 是它们**离开 netfilter 之前的最后 hook 点**：\n    \n    -   **外部主动和本机建连**的包，如果在中间处理中没有被丢弃，`LOCAL_IN` 是其被送到应用（例如 nginx 服务）之前的最后 hook 点\n    -   **本机主动和外部建连**的包，如果在中间处理中没有被丢弃，`POST_ROUTING` 是其离开主机时的最后 hook 点\n\n下面的代码可以看到**这些 handler 是如何注册到 Netfilter hook 点的**：\n\n```\n// net/netfilter/nf_conntrack_proto.c\n\n/* Connection tracking may drop packets, but never alters them, so make it the first hook.  */\nstatic const struct nf_hook_ops ipv4_conntrack_ops[] = {\n    {\n        .hook        = ipv4_conntrack_in,       // 调用 nf_conntrack_in() 进入连接跟踪\n        .pf          = NFPROTO_IPV4,\n        .hooknum     = NF_INET_PRE_ROUTING,     // PRE_ROUTING hook 点\n        .priority    = NF_IP_PRI_CONNTRACK,\n    },\n    {\n        .hook        = ipv4_conntrack_local,    // 调用 nf_conntrack_in() 进入连接跟踪\n        .pf          = NFPROTO_IPV4,\n        .hooknum     = NF_INET_LOCAL_OUT,       // LOCAL_OUT hook 点\n        .priority    = NF_IP_PRI_CONNTRACK,\n    },\n    {\n        .hook        = ipv4_confirm,            // 调用 nf_conntrack_confirm()\n        .pf          = NFPROTO_IPV4,\n        .hooknum     = NF_INET_POST_ROUTING,    // POST_ROUTING hook 点\n        .priority    = NF_IP_PRI_CONNTRACK_CONFIRM,\n    },\n    {\n        .hook        = ipv4_confirm,            // 调用 nf_conntrack_confirm()\n        .pf          = NFPROTO_IPV4,\n        .hooknum     = NF_INET_LOCAL_IN,        // LOCAL_IN hook 点\n        .priority    = NF_IP_PRI_CONNTRACK_CONFIRM,\n    },\n};\n```\n\n`nf_conntrack_in()` 是**连接跟踪模块的核心**。\n\n```\n// net/netfilter/nf_conntrack_core.c\n\nunsigned int\nnf_conntrack_in(struct net *net, u_int8_t pf, unsigned int hooknum, struct sk_buff *skb)\n{\n  struct nf_conn *tmpl = nf_ct_get(skb, \u0026ctinfo); // 获取 skb 对应的 conntrack_info 和连接记录\n  if (tmpl || ctinfo == IP_CT_UNTRACKED) {        // 如果记录存在，或者是不需要跟踪的类型\n      if ((tmpl \u0026\u0026 !nf_ct_is_template(tmpl)) || ctinfo == IP_CT_UNTRACKED) {\n          NF_CT_STAT_INC_ATOMIC(net, ignore);     // 无需跟踪的类型，增加 ignore 计数\n          return NF_ACCEPT;                       // 返回 NF_ACCEPT，继续后面的处理\n      }\n      skb-\u003e_nfct = 0;                             // 不属于 ignore 类型，计数器置零，准备后续处理\n  }\n\n  struct nf_conntrack_l4proto *l4proto = __nf_ct_l4proto_find(...);    // 提取协议相关的 L4 头信息\n\n  if (l4proto-\u003eerror != NULL) {                   // skb 的完整性和合法性验证\n      if (l4proto-\u003eerror(net, tmpl, skb, dataoff, pf, hooknum) \u003c= 0) {\n          NF_CT_STAT_INC_ATOMIC(net, error);\n          NF_CT_STAT_INC_ATOMIC(net, invalid);\n          goto out;\n      }\n  }\n\nrepeat:\n  // 开始连接跟踪：提取 tuple；创建新连接记录，或者更新已有连接的状态\n  resolve_normal_ct(net, tmpl, skb, ... l4proto);\n\n  l4proto-\u003epacket(ct, skb, dataoff, ctinfo); // 进行一些协议相关的处理，例如 UDP 会更新 timeout\n\n  if (ctinfo == IP_CT_ESTABLISHED_REPLY \u0026\u0026 !test_and_set_bit(IPS_SEEN_REPLY_BIT, \u0026ct-\u003estatus))\n      nf_conntrack_event_cache(IPCT_REPLY, ct);\nout:\n  if (tmpl)\n      nf_ct_put(tmpl); // 解除对连接记录 tmpl 的引用\n}\n```\n\n大致流程：\n\n1.  尝试获取这个 skb 对应的连接跟踪记录\n2.  判断是否需要对这个包做连接跟踪，如果不需要，更新 ignore 计数（`conntrack -S` 能看到这个计数）， 返回 `NF_ACCEPT`；如果需要，就**初始化这个 skb 的引用计数**。\n3.  从包的 L4 header 中提取信息，初始化协议相关的 `struct nf_conntrack_l4proto {}` 变量，其中包含了该协议的**连接跟踪相关的回调方法**。\n4.  调用该协议的 `error()` 方法检查包的完整性、校验和等信息。\n5.  调用 `resolve_normal_ct()` **开始连接跟踪**，它会创建新 tuple，新 conntrack entry，或者更新已有连接的状态。\n6.  调用该协议的 `packet()` 方法进行一些协议相关的处理，例如对于 UDP，如果 status bit 里面设置了 `IPS_SEEN_REPLY` 位，就会更新 timeout。timeout 大小和协 议相关，越小越越可以防止 DoS 攻击（DoS 的基本原理就是将机器的可用连接耗尽）\n\n## 3.7 `init_conntrack()`：创建新连接记录\n\n如果连接不存在（flow 的第一个包），`resolve_normal_ct()` 会调用 `init_conntrack` ，后者进而会调用 `new()` 方法创建一个新的 conntrack entry。\n\n```\n// include/net/netfilter/nf_conntrack_core.c\n\n// Allocate a new conntrack\nstatic noinline struct nf_conntrack_tuple_hash *\ninit_conntrack(struct net *net, struct nf_conn *tmpl,\n           const struct nf_conntrack_tuple *tuple,\n           const struct nf_conntrack_l4proto *l4proto,\n           struct sk_buff *skb, unsigned int dataoff, u32 hash)\n{\n    struct nf_conn *ct;\n\n    // 从 conntrack table 中分配一个 entry，如果哈希表满了，会在内核日志中打印\n    // \"nf_conntrack: table full, dropping packet\" 信息，通过 `dmesg -T` 能看到\n    ct = __nf_conntrack_alloc(net, zone, tuple, \u0026repl_tuple, GFP_ATOMIC, hash);\n\n    l4proto-\u003enew(ct, skb, dataoff); // 协议相关的方法\n\n    local_bh_disable();             // 关闭软中断\n    if (net-\u003ect.expect_count) {\n        exp = nf_ct_find_expectation(net, zone, tuple);\n        if (exp) {\n            /* Welcome, Mr. Bond.  We've been expecting you... */\n            __set_bit(IPS_EXPECTED_BIT, \u0026ct-\u003estatus);\n\n            /* exp-\u003emaster safe, refcnt bumped in nf_ct_find_expectation */\n            ct-\u003emaster = exp-\u003emaster;\n            ct-\u003emark = exp-\u003emaster-\u003emark;\n            ct-\u003esecmark = exp-\u003emaster-\u003esecmark;\n            NF_CT_STAT_INC(net, expect_new);\n        }\n    }\n\n    /* Now it is inserted into the unconfirmed list, bump refcount */\n    // 至此这个新的 conntrack entry 已经被插入 unconfirmed list\n    nf_conntrack_get(\u0026ct-\u003ect_general);\n    nf_ct_add_to_unconfirmed_list(ct);\n\n    local_bh_enable();              // 重新打开软中断\n\n    if (exp) {\n        if (exp-\u003eexpectfn)\n            exp-\u003eexpectfn(ct, exp);\n        nf_ct_expect_put(exp);\n    }\n\n    return \u0026ct-\u003etuplehash[IP_CT_DIR_ORIGINAL];\n}\n```\n\n每种协议需要实现自己的 `l4proto-\u003enew()` 方法，代码见：`net/netfilter/nf_conntrack_proto_*.c`。 例如 TCP 协议对应的 `new()` 方法是：\n\n```\n// net/netfilter/nf_conntrack_proto_tcp.c\n\n/* Called when a new connection for this protocol found. */\nstatic bool tcp_new(struct nf_conn *ct, const struct sk_buff *skb, unsigned int dataoff)\n{\n    if (new_state == TCP_CONNTRACK_SYN_SENT) {\n        memset(\u0026ct-\u003eproto.tcp, 0, sizeof(ct-\u003eproto.tcp));\n        /* SYN packet */\n        ct-\u003eproto.tcp.seen[0].td_end = segment_seq_plus_len(ntohl(th-\u003eseq), skb-\u003elen, dataoff, th);\n        ct-\u003eproto.tcp.seen[0].td_maxwin = ntohs(th-\u003ewindow);\n        ...\n}\n```\n\n如果当前包会影响后面包的状态判断，`init_conntrack()` 会设置 `struct nf_conn` 的 `master` 字段。面向连接的协议会用到这个特性，例如 TCP。\n\n## 3.8 `nf_conntrack_confirm()`：确认包没有被丢弃\n\n`nf_conntrack_in()` 创建的新 conntrack entry 会插入到一个 **未确认连接**（ unconfirmed connection）列表。\n\n如果这个包之后没有被丢弃，那它在经过 `POST_ROUTING` 时会被 `nf_conntrack_confirm()` 方法处理，原理我们在分析过了 3.6 节的开头分析过了。 `nf_conntrack_confirm()` 完成之后，状态就变为了 `IPS_CONFIRMED`，并且连接记录从 **未确认列表**移到**正常**的列表。\n\n之所以把创建一个新 entry 的过程分为创建（new）和确认（confirm）两个阶段 ，是因为**包在经过 nf_conntrack_in() 之后，到达 nf_conntrack_confirm() 之前 ，可能会被内核丢弃**。这样会导致系统残留大量的半连接状态记录，在性能和安全性上都 是很大问题。分为两步之后，可以加快半连接状态 conntrack entry 的 GC。\n\n```\n// include/net/netfilter/nf_conntrack_core.h\n\n/* Confirm a connection: returns NF_DROP if packet must be dropped. */\nstatic inline int nf_conntrack_confirm(struct sk_buff *skb)\n{\n    struct nf_conn *ct = (struct nf_conn *)skb_nfct(skb);\n    int ret = NF_ACCEPT;\n\n    if (ct) {\n        if (!nf_ct_is_confirmed(ct))\n            ret = __nf_conntrack_confirm(skb);\n        if (likely(ret == NF_ACCEPT))\n            nf_ct_deliver_cached_events(ct);\n    }\n    return ret;\n}\n```\n\nconfirm 逻辑，省略了各种错误处理逻辑：\n\n```\n// net/netfilter/nf_conntrack_core.c\n\n/* Confirm a connection given skb; places it in hash table */\nint\n__nf_conntrack_confirm(struct sk_buff *skb)\n{\n    struct nf_conn *ct;\n    ct = nf_ct_get(skb, \u0026ctinfo);\n\n    local_bh_disable();               // 关闭软中断\n\n    hash = *(unsigned long *)\u0026ct-\u003etuplehash[IP_CT_DIR_REPLY].hnnode.pprev;\n    reply_hash = hash_conntrack(net, \u0026ct-\u003etuplehash[IP_CT_DIR_REPLY].tuple);\n\n    ct-\u003etimeout += nfct_time_stamp;   // 更新连接超时时间，超时后会被 GC\n    atomic_inc(\u0026ct-\u003ect_general.use);  // 设置连接引用计数？\n    ct-\u003estatus |= IPS_CONFIRMED;      // 设置连接状态为 confirmed\n\n    __nf_conntrack_hash_insert(ct, hash, reply_hash);  // 插入到连接跟踪哈希表\n\n    local_bh_enable();                // 重新打开软中断\n\n    nf_conntrack_event_cache(master_ct(ct) ? IPCT_RELATED : IPCT_NEW, ct);\n    return NF_ACCEPT;\n}\n```\n\n可以看到，**连接跟踪的处理逻辑中需要频繁关闭和打开软中断**，此外还有各种锁， 这是短连高并发场景下连接跟踪性能损耗的主要原因？。\n\n# 4 Netfilter NAT 实现\n\nNAT 是与连接跟踪独立的模块。\n\n## 4.1 重要数据结构和函数\n\n**重要数据结构：**\n\n支持 NAT 的协议需要实现其中的方法：\n\n-   `struct nf_nat_l3proto {}`\n-   `struct nf_nat_l4proto {}`\n\n**重要函数：**\n\n-   `nf_nat_inet_fn()`：NAT 的核心函数，在**除 NF_INET_FORWARD 之外的其他 hook 点都会被调用**。\n\n## 4.2 NAT 模块初始化\n\n```\n// net/netfilter/nf_nat_core.c\n\nstatic struct nf_nat_hook nat_hook = {\n    .parse_nat_setup    = nfnetlink_parse_nat_setup,\n    .decode_session        = __nf_nat_decode_session,\n    .manip_pkt        = nf_nat_manip_pkt,\n};\n\nstatic int __init nf_nat_init(void)\n{\n    nf_nat_bysource = nf_ct_alloc_hashtable(\u0026nf_nat_htable_size, 0);\n\n    nf_ct_helper_expectfn_register(\u0026follow_master_nat);\n\n    RCU_INIT_POINTER(nf_nat_hook, \u0026nat_hook);\n}\n\nMODULE_LICENSE(\"GPL\");\nmodule_init(nf_nat_init);\n```\n\n## 4.3 `struct nf_nat_l3proto {}`：协议相关的 NAT 方法集\n\n```\n// include/net/netfilter/nf_nat_l3proto.h\n\nstruct nf_nat_l3proto {\n    u8    l3proto; // 例如，AF_INET\n\n    u32     (*secure_port    )(const struct nf_conntrack_tuple *t, __be16);\n    bool    (*manip_pkt      )(struct sk_buff *skb, ...);\n    void    (*csum_update    )(struct sk_buff *skb, ...);\n    void    (*csum_recalc    )(struct sk_buff *skb, u8 proto, ...);\n    void    (*decode_session )(struct sk_buff *skb, ...);\n    int     (*nlattr_to_range)(struct nlattr *tb[], struct nf_nat_range2 *range);\n};\n```\n\n## 4.4 `struct nf_nat_l4proto {}`：协议相关的 NAT 方法集\n\n```\n// include/net/netfilter/nf_nat_l4proto.h\n\nstruct nf_nat_l4proto {\n    u8 l4proto; // Protocol number，例如 IPPROTO_UDP, IPPROTO_TCP\n\n    // 根据传入的 tuple 和 NAT 类型（SNAT/DNAT）修改包的 L3/L4 头\n    bool (*manip_pkt)(struct sk_buff *skb, *l3proto, *tuple, maniptype);\n\n    // 创建一个唯一的 tuple\n    // 例如对于 UDP，会根据 src_ip, dst_ip, src_port 加一个随机数生成一个 16bit 的 dst_port\n    void (*unique_tuple)(*l3proto, tuple, struct nf_nat_range2 *range, maniptype, struct nf_conn *ct);\n\n    // If the address range is exhausted the NAT modules will begin to drop packets.\n    int (*nlattr_to_range)(struct nlattr *tb[], struct nf_nat_range2 *range);\n};\n```\n\n各协议实现的方法，见：`net/netfilter/nf_nat_proto_*.c`。例如 TCP 的实现：\n\n```\n// net/netfilter/nf_nat_proto_tcp.c\n\nconst struct nf_nat_l4proto nf_nat_l4proto_tcp = {\n    .l4proto        = IPPROTO_TCP,\n    .manip_pkt        = tcp_manip_pkt,\n    .in_range        = nf_nat_l4proto_in_range,\n    .unique_tuple        = tcp_unique_tuple,\n    .nlattr_to_range    = nf_nat_l4proto_nlattr_to_range,\n};\n```\n\n## 4.5 `nf_nat_inet_fn()`：进入 NAT\n\nNAT 的核心函数是 `nf_nat_inet_fn()`，它会在以下 hook 点被调用：\n\n-   `NF_INET_PRE_ROUTING`\n-   `NF_INET_POST_ROUTING`\n-   `NF_INET_LOCAL_OUT`\n-   `NF_INET_LOCAL_IN`\n\n也就是除了 `NF_INET_FORWARD` 之外其他 hook 点都会被调用。\n\n**在这些 hook 点的优先级**：**Conntrack \u003e NAT \u003e Packet Filtering**。 **连接跟踪的优先级高于 NAT** 是因为 NAT 依赖连接跟踪的结果。\n![upgit_20221117_1668675238.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221117_1668675238.png)\n\n\u003ccenter\u003eFig. NAT\u003c/center\u003e\n\n```\nunsigned int\nnf_nat_inet_fn(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)\n{\n    ct = nf_ct_get(skb, \u0026ctinfo);\n    if (!ct)    // conntrack 不存在就做不了 NAT，直接返回，这也是我们为什么说 NAT 依赖 conntrack 的结果\n        return NF_ACCEPT;\n\n    nat = nfct_nat(ct);\n\n    switch (ctinfo) {\n    case IP_CT_RELATED:\n    case IP_CT_RELATED_REPLY: /* Only ICMPs can be IP_CT_IS_REPLY.  Fallthrough */\n    case IP_CT_NEW: /* Seen it before? This can happen for loopback, retrans, or local packets. */\n        if (!nf_nat_initialized(ct, maniptype)) {\n            struct nf_hook_entries *e = rcu_dereference(lpriv-\u003eentries); // 获取所有 NAT 规则\n            if (!e)\n                goto null_bind;\n\n            for (i = 0; i \u003c e-\u003enum_hook_entries; i++) { // 依次执行 NAT 规则\n                if (e-\u003ehooks[i].hook(e-\u003ehooks[i].priv, skb, state) != NF_ACCEPT )\n                    return ret;                         // 任何规则返回非 NF_ACCEPT，就停止当前处理\n\n                if (nf_nat_initialized(ct, maniptype))\n                    goto do_nat;\n            }\nnull_bind:\n            nf_nat_alloc_null_binding(ct, state-\u003ehook);\n        } else { // Already setup manip\n            if (nf_nat_oif_changed(state-\u003ehook, ctinfo, nat, state-\u003eout))\n                goto oif_changed;\n        }\n        break;\n    default: /* ESTABLISHED */\n        if (nf_nat_oif_changed(state-\u003ehook, ctinfo, nat, state-\u003eout))\n            goto oif_changed;\n    }\ndo_nat:\n    return nf_nat_packet(ct, ctinfo, state-\u003ehook, skb);\noif_changed:\n    nf_ct_kill_acct(ct, ctinfo, skb);\n    return NF_DROP;\n}\n```\n\n首先查询 conntrack 记录，如果不存在，就意味着无法跟踪这个连接，那就更不可能做 NAT 了，因此直接返回。\n\n如果找到了 conntrack 记录，并且是 `IP_CT_RELATED`、`IP_CT_RELATED_REPLY` 或 `IP_CT_NEW` 状态，就去获取 NAT 规则。如果没有规则，直接返回 `NF_ACCEPT`，对包不 做任何改动；如果有规则，最后执行 `nf_nat_packet`，这个函数会进一步调用 `manip_pkt` 完成对包的修改，如果失败，包将被丢弃。\n\n### Masquerade\n\nNAT 模块\n\n-   一般配置方式：`Change IP1 to IP2 if matching XXX`。\n-   高级配置方式：`Change IP1 to dev1's IP if matching XXX`，这种方式称为 Masquerade。\n\nMasquerade 优缺点：\n\n-   优点：**当设备（网卡）的 IP 地址发生变化时，NAT 规则无需做任何修改**。\n-   缺点：**性能比第一种方式要差**。\n\n## 4.6 `nf_nat_packet()`：执行 NAT\n\n```\n// net/netfilter/nf_nat_core.c\n\n/* Do packet manipulations according to nf_nat_setup_info. */\nunsigned int nf_nat_packet(struct nf_conn *ct, enum ip_conntrack_info ctinfo,\n               unsigned int hooknum, struct sk_buff *skb)\n{\n    enum nf_nat_manip_type mtype = HOOK2MANIP(hooknum);\n    enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);\n    unsigned int verdict = NF_ACCEPT;\n\n    statusbit = (mtype == NF_NAT_MANIP_SRC? IPS_SRC_NAT : IPS_DST_NAT)\n\n    if (dir == IP_CT_DIR_REPLY)     // Invert if this is reply dir\n        statusbit ^= IPS_NAT_MASK;\n\n    if (ct-\u003estatus \u0026 statusbit)     // Non-atomic: these bits don't change. */\n        verdict = nf_nat_manip_pkt(skb, ct, mtype, dir);\n\n    return verdict;\n}\n```\n\n```\nstatic unsigned int nf_nat_manip_pkt(struct sk_buff *skb, struct nf_conn *ct,\n                     enum nf_nat_manip_type mtype, enum ip_conntrack_dir dir)\n{\n    struct nf_conntrack_tuple target;\n\n    /* We are aiming to look like inverse of other direction. */\n    nf_ct_invert_tuplepr(\u0026target, \u0026ct-\u003etuplehash[!dir].tuple);\n\n    l3proto = __nf_nat_l3proto_find(target.src.l3num);\n    l4proto = __nf_nat_l4proto_find(target.src.l3num, target.dst.protonum);\n    if (!l3proto-\u003emanip_pkt(skb, 0, l4proto, \u0026target, mtype)) // 协议相关处理\n        return NF_DROP;\n\n    return NF_ACCEPT;\n}\n```\n\n# 5. 配置和监控\n\n## 5.1 查看/加载/卸载 nf_conntrack 模块\n\n```\n$ modinfo nf_conntrack\nfilename:       /lib/modules/5.15.0-46-generic/kernel/net/netfilter/nf_conntrack.ko\nlicense:        GPL\nalias:          nf_conntrack-10\nalias:          nf_conntrack-2\nalias:          ip_conntrack\nsrcversion:     30B45E5822722ACEDE23A4B\ndepends:        nf_defrag_ipv6,libcrc32c,nf_defrag_ipv4\nretpoline:      Y\nintree:         Y\nname:           nf_conntrack\nvermagic:       5.15.0-46-generic SMP mod_unload modversions\nsig_id:         PKCS#7\nsigner:         Build time autogenerated kernel key\nsig_key:        17:6F:92:2F:58:6B:B2:28:13:DC:71:DC:5A:97:EE:BA:D8:4B:C7:DE\nsig_hashalgo:   sha512\nsignature:      0B:32:AA:93:F4:31:52:9C:FE:0D:80:B4:F6:7C:30:63:4C:F6:03:AA:\n                ...\n                E9:1F:45:C6:77:C2:29:99:B4:3D:1A:D2\nparm:           tstamp:Enable connection tracking flow timestamping. (bool)\nparm:           acct:Enable connection tracking flow accounting. (bool)\nparm:           nf_conntrack_helper:Enable automatic conntrack helper assignment (default 0) (bool)\nparm:           expect_hashsize:uint\nparm:           enable_hooks:Always enable conntrack hooks (bool)\n```\n\n卸载：\n\n```\n$ rmmod nf_conntrack_netlink nf_conntrack\n```\n\n重新加载：\n\n```\n$ modprobe nf_conntrack\n\n# 加载时还可以指定额外的配置参数，例如：\n$ modprobe nf_conntrack nf_conntrack_helper=1 expect_hashsize=131072\n```\n\n## 5.2 sysctl 配置项\n\n```\n$ sysctl -a | grep nf_conntrack\nnet.netfilter.nf_conntrack_acct = 0\nnet.netfilter.nf_conntrack_buckets = 262144                 # hashsize = nf_conntrack_max/nf_conntrack_buckets\nnet.netfilter.nf_conntrack_checksum = 1\nnet.netfilter.nf_conntrack_count = 2148\n... # DCCP options\nnet.netfilter.nf_conntrack_events = 1\nnet.netfilter.nf_conntrack_expect_max = 1024\n... # IPv6 options\nnet.netfilter.nf_conntrack_generic_timeout = 600\nnet.netfilter.nf_conntrack_helper = 0\nnet.netfilter.nf_conntrack_icmp_timeout = 30\nnet.netfilter.nf_conntrack_log_invalid = 0\nnet.netfilter.nf_conntrack_max = 1048576                    # conntrack table size\n... # SCTP options\nnet.netfilter.nf_conntrack_tcp_be_liberal = 0\nnet.netfilter.nf_conntrack_tcp_loose = 1\nnet.netfilter.nf_conntrack_tcp_max_retrans = 3\nnet.netfilter.nf_conntrack_tcp_timeout_close = 10\nnet.netfilter.nf_conntrack_tcp_timeout_close_wait = 60\nnet.netfilter.nf_conntrack_tcp_timeout_established = 21600\nnet.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120\nnet.netfilter.nf_conntrack_tcp_timeout_last_ack = 30\nnet.netfilter.nf_conntrack_tcp_timeout_max_retrans = 300\nnet.netfilter.nf_conntrack_tcp_timeout_syn_recv = 60\nnet.netfilter.nf_conntrack_tcp_timeout_syn_sent = 120\nnet.netfilter.nf_conntrack_tcp_timeout_time_wait = 120\nnet.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 300\nnet.netfilter.nf_conntrack_timestamp = 0\nnet.netfilter.nf_conntrack_udp_timeout = 30\nnet.netfilter.nf_conntrack_udp_timeout_stream = 180\n```\n\n## 5.3 监控\n\n### 丢包监控\n\n`/proc/net/stat` 下面有一些关于 conntrack 的详细统计：\n\n```\n$ cat /proc/net/stat/nf_conntrack\nentries   searched found    new      invalid  ignore   delete   delete_list insert   insert_failed drop     early_drop icmp_error  expect_new expect_create expect_delete search_restart\n000008e3  00000000 00000000 00000000 0000309d 001e72d4 00000000 00000000    00000000 00000000      00000000 00000000   000000ee    00000000   00000000      00000000       000368d7\n000008e3  00000000 00000000 00000000 00007301 002b8e8c 00000000 00000000    00000000 00000000      00000000 00000000   00000170    00000000   00000000      00000000       00035794\n000008e3  00000000 00000000 00000000 00001eea 001e6382 00000000 00000000    00000000 00000000      00000000 00000000   00000059    00000000   00000000      00000000       0003f166\n...\n```\n\n此外，还可以用 `conntrack` 命令：\n\n```\n$ conntrack -S\ncpu=0   found=0 invalid=743150 ignore=238069 insert=0 insert_failed=0 drop=195603 early_drop=118583 error=16 search_restart=22391652\ncpu=1   found=0 invalid=2004   ignore=402790 insert=0 insert_failed=0 drop=44371  early_drop=34890  error=0  search_restart=1225447\n...\n```\n\n-   ignore：不需要做连接跟踪的包（回忆前面，只有特定协议的包才会做连接跟踪）\n\n### conntrack table 使用量监控\n\n可以定期采集系统的 conntrack 使用量，\n\n```\n$ cat /proc/sys/net/netfilter/nf_conntrack_count\n257273\n```\n\n并与最大值比较：\n\n```\n$ cat /proc/sys/net/netfilter/nf_conntrack_max\n262144\n```\n\n# 6. 常见问题\n\n## 6.1 连接太多导致 conntrack table 被打爆\n\n### 现象\n\n#### 业务层（应用层）现象\n\n1.  存在随机、偶发的**新建连接**超时（connect timeout）。\n    \n    例如，如果业务用的是 Java，那对应的是 `jdbc4.CommunicationsException` communications link failure 之类的错误。\n    \n2.  **已有连接**正常。\n    \n    也就是没有 read timeout 或 write timeout 之类的报错，报错都集中为 connect timeout。\n    \n\n#### 网络层现象\n\n1.  抓包会看到三次握手的**第一个 SYN 包被宿主机静默丢弃了**。\n    \n    需要注意的是，常规的网卡统计（`ifconfig`）和内核统计（`/proc/net/softnet_stat`） **无法反映出这些丢包**。\n    \n2.  `1s+` 之后出发 SYN 重传，或者还没重传连接就关闭了。\n    \n    **第一个 SYN 的重传是 1s，这个是内核代码里写死的，不可配置**（具体实现见 [附录](https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/#ch_8.1)）。\n    \n    再考虑到其他一些耗时，第一次重传的实际间隔要大于 1s。 如果客户端设置的超时时间很小，例如 `1.05s`，那可能来不及重传连接就被关闭了，然后向上层报 connect timeout 错误。\n    \n\n#### 操作系统层现象\n\n内核日志中有如下报错：\n\n```\n$ demsg -T\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n...\n```\n\n另外，`cat /proc/net/stat/nf_conntrack` 或 `conntrack -S` 能看到有 drop 统计。\n\n### 确认 conntrack table 被打爆\n\n遇到以上现象，基本就是 conntrack 表被打爆了。确认：\n\n```\n$ cat /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\n$ cat /proc/sys/net/netfilter/nf_conntrack_max\nnet.netfilter.nf_conntrack_max = 262144\n```\n\n如果有 conntrack count 监控会看的更清楚，因为我们命令行查看时，高峰可能过了。\n\n### 解决方式\n\n优先级从高到低：\n\n1.  调大 conntrack 表\n    \n    运行时配置（经实际测试，**不会对现有连接造成影响**）：\n    \n    ```\n     $ sysctl -w net.netfilter.nf_conntrack_max=524288\n     $ sysctl -w net.netfilter.nf_conntrack_buckets=131072 # 推荐配置 hashsize=nf_conntrack_count/4\n    ```\n    \n    持久化配置：\n    \n    ```\n     $ echo 'net.netfilter.nf_conntrack_max = 524288' \u003e\u003e /etc/sysctl.conf\n     $ echo 'net.netfilter.nf_conntrack_buckets = 131072' \u003e\u003e /etc/sysctl.conf\n    ```\n    \n    影响：连接跟踪模块**会多用一些内存**。具体多用多少内存，可参考 [附录](https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/#ch_8.2)。\n    \n2.  减小 GC 时间\n    \n    还可以调小 conntrack 的 GC（也叫 timeout）时间，加快过期 entry 的回收。\n    \n    `nf_conntrack` 针对不同 TCP 状态（established、fin_wait、time_wait 等）的 entry 有不同的 GC 时间。\n    \n    例如，**默认的 established 状态的 GC 时间是 423000s（5 天）**。设置成这么长的 **可能原因**是：TCP/IP 协议中允许 established 状态的连接无限期不发送任何东西（但仍然活着） [8]，协议的具体实现（Linux、BSD、Windows 等）会设置各自允许的最大 idle timeout。为防止 GC 掉这样长时间没流量但实际还活着的连接，就设置一个足够保守的 timeout 时间。[8] 中建议这个值不小于 2 小时 4 分钟（作为对比和参考， **Cilium 自己实现的 CT 中，默认 established GC 是 6 小时**）。 但也能看到一些厂商推荐比这个小得多的配置，例如 20 分钟。\n    \n    如果对自己的网络环境和需求非常清楚，那可以将这个时间调到一个合理的、足够小的值； 如果不是非常确定的话，还是**建议保守一些，例如设置 6 个小时** —— 这已经比默认值 5 天小多了。\n    \n    ```\n     $ sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established = 21600\n    ```\n    \n    持久化：\n    \n    ```\n     $ echo 'net.netfilter.nf_conntrack_tcp_timeout_established = 21600' \u003e\u003e /etc/sysctl.conf\n    ```\n    \n    其他几个 timeout 值（尤其是 `nf_conntrack_tcp_timeout_time_wait`，默认 `120s`）也可以适当调小， 但还是那句话：**如果不确定潜在后果，千万不要激进地调小**。\n    \n\n# 7. 总结\n\n连接跟踪是一个非常基础且重要的网络模块，但只有在少数场景下才会引起普通开发者的注意。\n\n例如，L4LB 短时高并发场景下，LB 节点每秒接受大量并发短连接，可能导致 conntrack table 被打爆。此时的现象是：\n\n-   客户端和 L4LB 建连失败，失败可能是随机的，也可能是集中在某些时间点。\n-   客户端重试可能会成功，也可能会失败。\n-   在 L4LB 节点抓包看，客户端过来的 TCP SYNC 包 L4LB 收到了，但没有回 ACK。即，包 被静默丢弃了（silently dropped）。\n\n此时的原因可能是 conntrack table 太小，也可能是 GC 不够及 时，甚至是 [GC 有bug](https://github.com/cilium/cilium/pull/12729)。\n\n# 8. 附录\n\n## 8.1 第一个 SYN 包的重传间隔计算（Linux 4.19.118 实现）\n\n调用路径：`tcp_connect() -\u003e tcp_connect_init() -\u003e tcp_timeout_init()`。\n\n```\n// net/ipv4/tcp_output.c\n/* Do all connect socket setups that can be done AF independent. */\nstatic void tcp_connect_init(struct sock *sk)\n{\n    inet_csk(sk)-\u003eicsk_rto = tcp_timeout_init(sk);\n    ...\n}\n\n// include/net/tcp.h\nstatic inline u32 tcp_timeout_init(struct sock *sk)\n{\n    // 获取 SYN-RTO：如果这个 socket 上没有 BPF 程序，或者有 BPF 程序但执行失败，都返回 -1\n    // 除非用户自己编写 BPF 程序并 attach 到 cgroup/socket，否则这里都是没有 BPF 的，因此这里返回 -1\n    timeout = tcp_call_bpf(sk, BPF_SOCK_OPS_TIMEOUT_INIT, 0, NULL);\n\n    if (timeout \u003c= 0)                // timeout == -1，接下来使用默认值\n        timeout = TCP_TIMEOUT_INIT;  // 宏定义，等于系统的 HZ 数，也就是 1 秒，见下面\n    return timeout;\n}\n\n// include/net/tcp.h\n#define TCP_RTO_MAX    ((unsigned)(120*HZ))\n#define TCP_RTO_MIN    ((unsigned)(HZ/5))\n#define TCP_TIMEOUT_MIN    (2U) /* Min timeout for TCP timers in jiffies */\n#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    /* RFC6298 2.1 initial RTO value    */\n```\n\n## 8.2 根据 nf_conntrack_max 计算 conntrack 模块所需的内存\n\n```\n$ cat /proc/slabinfo | head -n2; cat /proc/slabinfo | grep conntrack\nslabinfo - version: 2.1\n# name            \u003cactive_objs\u003e \u003cnum_objs\u003e \u003cobjsize\u003e \u003cobjperslab\u003e \u003cpagesperslab\u003e : tunables \u003climit\u003e \u003cbatchcount\u003e \u003csharedfactor\u003e : slabdata \u003cactive_slabs\u003e \u003cnum_slabs\u003e \u003csharedavail\u003e\nnf_conntrack      512824 599505    320   51    4 : tunables    0    0    0 : slabdata  11755  11755      0\n```\n\n其中的 **objsize 表示这个内核对象**（这里对应的是 `struct nf_conn`）的大小， 单位是**字节**，所以以上输出表明**每个 conntrack entry 占用 320 字节的内存空间**。\n\n如果忽略内存碎片（内存分配单位为 slab），那**不同 size 的 conntrack table 占用的内存**如下：\n\n-   `nf_conntrack_max=512K`: `512K * 320Byte = 160MB`\n-   `nf_conntrack_max=1M`: `1M * 320Byte = 320MB`\n\n更精确的计算，可以参考 [9]。\n\n# References\n1.  [Netfilter connection tracking and NAT implementation](https://wiki.aalto.fi/download/attachments/69901948/netfilter-paper.pdf). Proc. Seminar on Network Protocols in Operating Systems, Dept. Commun. and Networking, Aalto Univ. 2013.\n2.  [Cilium: Kubernetes without kube-proxy](https://docs.cilium.io/en/v1.7/gettingstarted/kubeproxy-free/)\n3.  [L4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP](https://arthurchiao.art/blog/k8s-l4lb/)\n4.  [Docker bridge network mode](https://docs.docker.com/network/bridge/)\n5.  [Wikipedia: Netfilter](https://en.wikipedia.org/wiki/Netfilter)\n6.  [Conntrack tales - one thousand and one flows](https://blog.cloudflare.com/conntrack-tales-one-thousand-and-one-flows/)\n7.  [How connection tracking in Open vSwitch helps OpenStack performance](https://www.redhat.com/en/blog/how-connection-tracking-open-vswitch-helps-openstack-performance)\n8.  [NAT Behavioral Requirements for TCP](https://tools.ietf.org/html/rfc5382#section-5), RFC5382\n9.  [Netfilter Conntrack Memory Usage](https://johnleach.co.uk/posts/2009/06/17/netfilter-conntrack-memory-usage/)\n","lastmodified":"2025-03-26T03:48:43.172318567Z","tags":null},"/conntrack-%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87":{"title":"conntrack 疑难杂症","content":"\n- dmesg -T 内核日志\n- conntrack -L  # List conntrack or expectation table\n- conntrack -S # Show statistics\n- 网卡统计包\n\t- ip -s link show eth0\n\t- ethtool -S eth0\n\t- ifconfig eth0\n\t- cat /proc/net/netstat \n\n## 连接太多导致 conntrack table 被打爆\n### 现象\n#### 业务层（应用层）现象\n1. 存在随机、偶发的 **==新建连接==** 超时（connect timeout）。\n    例如，如果业务用的是 Java，那对应的是 `jdbc4.CommunicationsException` communications link failure 之类的错误。\n2. **==已有连接==** 正常。\n    也就是没有 read timeout 或 write timeout 之类的报错，报错都集中为 connect timeout。\n\n#### 网络层现象\n1. 抓包会看到三次握手的 **==第一个 SYN 包被宿主机静默丢弃了==**。\n    需要注意的是，常规的网卡统计（`ifconfig`）和内核统计（`/proc/net/softnet_stat`） **==无法反映出这些丢包==**。\n2. `1s+` 之后出发 SYN 重传，或者还没重传连接就关闭了。\n    **==第一个 SYN 的重传是 1s，这个是内核代码里写死的，不可配置==**。\n    再考虑到其他一些耗时，第一次重传的实际间隔要大于 1s。 如果客户端设置的超时时间很小，例如 `1.05s`，那可能来不及重传连接就被关闭了，然后向上层报 connect timeout 错误。\n\n#### 操作系统层现象\n内核日志中有如下报错：\n```\n$ demsg -T\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet\n...\n```\n另外，`cat /proc/net/stat/nf_conntrack` 或 `conntrack -S` 能看到有 drop 统计。\n### 确认 conntrack table 被打爆的方式\n\n遇到以上现象，基本就是 conntrack 表被打爆了。确认：\n```\n$ cat /proc/sys/net/netfilter/nf_conntrack_count\n257273\n\n$ cat /proc/sys/net/netfilter/nf_conntrack_max\nnet.netfilter.nf_conntrack_max = 262144\n```\n\n如果有 conntrack count 监控会看的更清楚，因为我们命令行查看时，高峰可能过了。\n### 解决方式\n\n优先级从高到低：\n\n1. 调大 conntrack 表\n    \n    运行时配置（经实际测试，**不会对现有连接造成影响**）：\n    \n    ```shell\n     $ sysctl -w net.netfilter.nf_conntrack_max=524288\n     $ sysctl -w net.netfilter.nf_conntrack_buckets=131072 # 推荐配置 hashsize=nf_conntrack_count/4\n    ```\n    \n    持久化配置：\n    \n    ```shell\n    $ echo 'net.netfilter.nf_conntrack_max = 524288' \u003e\u003e /etc/sysctl.conf\n    $ echo 'net.netfilter.nf_conntrack_buckets = 131072' \u003e\u003e /etc/sysctl.conf\n    ```\n    \n    影响：连接跟踪模块会多用一些内存。\n    \n2. 减小 GC 时间\n    \n    还可以调小 conntrack 的 GC（也叫 timeout）时间，加快过期 entry 的回收。\n    \n    `nf_conntrack` 针对不同 TCP 状态（established、fin_wait、time_wait 等）的 entry 有不同的 GC 时间。\n    \n    例如，**==默认的 established 状态的 GC 时间是 423000s（5 天）==**。设置成这么长的 **可能原因**是：TCP/IP 协议中允许 established 状态的连接无限期不发送任何东西（但仍然活着） [8]，协议的具体实现（Linux、BSD、Windows 等）会设置各自允许的最大 idle timeout。为防止 GC 掉这样长时间没流量但实际还活着的连接，就设置一个足够保守的 timeout 时间。[8] 中建议这个值不小于 2 小时 4 分钟（作为对比和参考， **==Cilium 自己实现的 CT 中，默认 established GC 是 6 小时==**）。 但也能看到一些厂商推荐比这个小得多的配置，例如 20 分钟。\n    \n    如果对自己的网络环境和需求非常清楚，那可以将这个时间调到一个合理的、足够小的值； 如果不是非常确定的话，还是 **==建议保守一些，例如设置 6 个小时==**  —— 这已经比默认值 5 天小多了。\n    \n    ```shell\n     $ sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established = 21600\n    ```\n    \n    持久化：\n    \n    ```shell\n     $ echo 'net.netfilter.nf_conntrack_tcp_timeout_established = 21600' \u003e\u003e /etc/sysctl.conf\n    ```\n    \n    其他几个 timeout 值（尤其是 `nf_conntrack_tcp_timeout_time_wait`，默认 `120s`）也可以适当调小， 但还是那句话：**如果不确定潜在后果，千万不要激进地调小**。\n\n\n### bridge-nf-call-iptables 与 conntrack 的关系\n\nnet.bridge.bridge-nf-call-iptables = 1\nKubernetes 的 Service 本质是个反向代理，访问 Service 时会进行 DNAT，将原本访问 ClusterIP:Port 的数据包 NAT 成 Service 的某个 Endpoint (PodIP:Port)，然后内核将连接信息插入 conntrack 表以记录连接，目的端回包的时候内核从 conntrack 表匹配连接并反向 NAT，这样原路返回形成一个完整的连接链路。\n\n但是 Linux Bridge（Linux 网桥）是一个虚拟的二层转发设备，而 iptables conntrack 工作在三层。所以问题来了，如果直接访问同一网桥内的地址，会走二层转发，不经过 conntrack，由于没有原路返回，客户端与服务端的通信就不在一个 「频道」 上，不认为处在同一个连接，也就无法正常通信。\n\n设置 bridge-nf-call-iptables 这个内核参数 (设置为 1)，表示 bridge 设备在二层转发时也去调用 iptables 配置的三层规则 (包含 conntrack)，所以开启这个参数就能够解决上述 Service 同节点通信问题。\n\n这也是为什么在 Kubernetes 环境中，大多都要求开启 bridge-nf-call-iptables 的原因。\n\n\n\n### 参数\n/proc/sys/net/netfilter/nf_conntrack_tcp_loose\n**不为不请自来的数据包创建nf_conntrack表项**\n\nnf_conntrack机制中有一个特性，该特性是nf_conntrack_tcp_loose系统参数带来的：\n\n\u003e nf_conntrack_tcp_loose - BOOLEAN 0 - disabled  \n\u003e not 0 - enabled (default)  \n\u003e If it is set to zero, we disable picking up already established connections.\n\n它的意思是，是否仅仅允许为经过TCP三次握手的流创建nf_conntrack表项还是说为任意收到的TCP数据包(有可能是一个构造出来的攻击包)查询未果后均创建新的nf_conntrack表项。  \n我们只需要将nf_conntrack_tcp_loose设置为0即可：\n\n```avrasm\nsysctl -w net.netfilter.nf_conntrack_tcp_loose=0\n```\n\n这样一来，那些铺天盖地而来的攻击数据包显然是未经三次握手的(这种攻击也叫做ACK攻击)，自然而然也就不会为它们创建任何nf_conntrack表项了。既然识别了不关联任何表项的数据包都是恶意的攻击包，那么显然下面的iptables规则将会阻止这类数据包进一步深入协议栈：\n\n```css\niptables -A INPUT -i eth4 -p tcp -m state --state INVALID -j DROP\n```\n\n这条规则会将数据包阻止在IP层。因此我们已经有了对抗纯ACK攻击(即发送海量仅携带ACK标识的数据包)的手段。  \n通过这个措施，便可以避免nf_conntrack为ACK攻击创建，删除不必要的表项，节省大量的CPU时间。\n\n修改后可能会有其他的网络问题，未经三次握手的ACK，不会为它们创建任何nf_conntrack表项。\n\n\n参考链接：\n- [连接跟踪（conntrack）：原理、应用及 Linux 内核实现](https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/)\n- [Conntrack tales - one thousand and one flows](https://blog.cloudflare.com/conntrack-tales-one-thousand-and-one-flows)\n- [连接跟踪 conntrack | 深入架构原理与实践](https://www.thebyte.com.cn/network/conntrack.html)\n- [kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt](https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt)\n- [记一次nf_conntrack模块导致的丢包问题](https://bugwz.com/2019/08/10/nf-conntrack/)","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/containerlab":{"title":"","content":"#containerlab #network #tools\n\n### 安装\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n\n### 配置\nvyos\n\n\n网络模式\n- 主机网络\n- 容器网络\n\n### 配置 spine + leaf \n安装 docker、kubectl \n```bash\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n\napt install bridge-utils\nbrctl addbr bridge0\n```\n#### 1. 使用 kind 创建 node 节点\n\n固定节点 ip \n\n[[Kind Tools]]\n```\nkind: Cluster\nname: cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n- role: worker\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n- role: worker\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\n- role: worker\n  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315\nnetworking:\n  disableDefaultCNI: true\n  podSubnet: 10.233.64.0/18\n  serviceSubnet: 10.233.0.0/18\n```\n\n2. 创建拓扑\n\n```\ncontainerlab deploy -t srl02.clab.yml\n# topo.yaml  \nname: bgp-cplane-demo  \ntopology:  \n  kinds:  \n    linux:  \n      cmd: bash  \n  nodes:  \n    router0:  \n      kind: linux  \n      image: frrouting/frr:v8.2.2  \n      labels:  \n        app: frr  \n      exec:  \n      - iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE  \n      - ip addr add 10.0.0.0/32 dev lo  \n      - ip route add blackhole 10.0.0.0/8  \n      - touch /etc/frr/vtysh.conf  \n      - sed -i -e 's/bgpd=no/bgpd=yes/g' /etc/frr/daemons  \n      - usr/lib/frr/frrinit.sh start  \n      - \u003e-  \n         vtysh -c 'conf t'  \n         -c 'router bgp 65000'  \n         -c ' bgp router-id 10.0.0.0'  \n         -c ' no bgp ebgp-requires-policy'  \n         -c ' neighbor ROUTERS peer-group'  \n         -c ' neighbor ROUTERS remote-as external'  \n         -c ' neighbor ROUTERS default-originate'  \n         -c ' neighbor net0 interface peer-group ROUTERS'  \n         -c ' neighbor net1 interface peer-group ROUTERS'  \n         -c ' address-family ipv4 unicast'  \n         -c '   redistribute connected'  \n         -c ' exit-address-family'  \n         -c '!'                          \n         \n    tor0:  \n      kind: linux  \n      image: frrouting/frr:v8.2.2    \n      labels:  \n        app: frr  \n      exec:  \n      - ip link del eth0  \n      - ip addr add 10.0.0.1/32 dev lo  \n      - ip addr add 10.0.1.1/24 dev net1  \n      - ip addr add 10.0.2.1/24 dev net2  \n      - touch /etc/frr/vtysh.conf  \n      - sed -i -e 's/bgpd=no/bgpd=yes/g' /etc/frr/daemons  \n      - /usr/lib/frr/frrinit.sh start  \n      - \u003e-  \n         vtysh -c 'conf t'  \n         -c 'frr defaults datacenter'  \n         -c 'router bgp 65010'  \n         -c ' bgp router-id 10.0.0.1'  \n         -c ' no bgp ebgp-requires-policy'  \n         -c ' neighbor ROUTERS peer-group'  \n         -c ' neighbor ROUTERS remote-as external'  \n         -c ' neighbor SERVERS peer-group'  \n         -c ' neighbor SERVERS remote-as internal'  \n         -c ' neighbor net0 interface peer-group ROUTERS'  \n         -c ' neighbor 10.0.1.2 peer-group SERVERS'  \n         -c ' neighbor 10.0.2.2 peer-group SERVERS'  \n         -c ' address-family ipv4 unicast'  \n         -c '   redistribute connected'  \n         -c '  exit-address-family'  \n         -c '!'                \n  \n    tor1:  \n      kind: linux  \n      image: frrouting/frr:v8.2.2  \n      labels:  \n        app: frr  \n      exec:  \n      - ip link del eth0  \n      - ip addr add 10.0.0.2/32 dev lo  \n      - ip addr add 10.0.3.1/24 dev net1  \n      - ip addr add 10.0.4.1/24 dev net2  \n      - touch /etc/frr/vtysh.conf  \n      - sed -i -e 's/bgpd=no/bgpd=yes/g' /etc/frr/daemons  \n      - /usr/lib/frr/frrinit.sh start  \n      - \u003e-  \n         vtysh -c 'conf t'  \n         -c 'frr defaults datacenter'  \n         -c 'router bgp 65011'  \n         -c ' bgp router-id 10.0.0.2'  \n         -c ' no bgp ebgp-requires-policy'  \n         -c ' neighbor ROUTERS peer-group'  \n         -c ' neighbor ROUTERS remote-as external'  \n         -c ' neighbor SERVERS peer-group'  \n         -c ' neighbor SERVERS remote-as internal'  \n         -c ' neighbor net0 interface peer-group ROUTERS'  \n         -c ' neighbor 10.0.3.2 peer-group SERVERS'  \n         -c ' neighbor 10.0.4.2 peer-group SERVERS'  \n         -c ' address-family ipv4 unicast'  \n         -c '   redistribute connected'  \n         -c '  exit-address-family'  \n         -c '!'            \n    server0:  \n      kind: linux  \n      image: nicolaka/netshoot:latest  \n      network-mode: container:control-plane  \n      exec:  \n      - ip addr add 10.0.1.2/24 dev net0  \n      - ip route replace default via 10.0.1.1  \n  \n    server1:  \n      kind: linux  \n      image: nicolaka/netshoot:latest  \n      network-mode: container:worker  \n      exec:  \n      - ip addr add 10.0.2.2/24 dev net0  \n      - ip route replace default via 10.0.2.1  \n  \n    server2:  \n      kind: linux  \n      image: nicolaka/netshoot:latest  \n      network-mode: container:worker2  \n      exec:  \n      - ip addr add 10.0.3.2/24 dev net0  \n      - ip route replace default via 10.0.3.1  \n  \n    server3:  \n      kind: linux  \n      image: nicolaka/netshoot:latest  \n      network-mode: container:worker3  \n      exec:  \n      - ip addr add 10.0.4.2/24 dev net0  \n      - ip route replace default via 10.0.4.1  \n  \n  \n  links:  \n  - endpoints: [\"router0:net0\", \"tor0:net0\"]  \n  - endpoints: [\"router0:net1\", \"tor1:net0\"]  \n  - endpoints: [\"tor0:net1\", \"server0:net0\"]  \n  - endpoints: [\"tor0:net2\", \"server1:net0\"]  \n  - endpoints: [\"tor1:net1\", \"server2:net0\"]  \n  - endpoints: [\"tor1:net2\", \"server3:net0\"]\n```\n\n安装 calico - bgp\n1. 部署拓扑\n\tclab deploy -t simple.yaml\n2. 销毁拓扑\n\tclab destory -t simple.yaml\n3. 生成网络拓扑\n\tclab graph -t topo.yaml\n\n存放 demo 的文件夹：/etc/containerlab/lab-examples\n\nssh 访问：\nvim ~/.ssh/config\nHost clab-*\n  User root\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n\n\ntopology 定义：[Topology definition - containerlab](https://containerlab.dev/manual/topo-def-file/)\nnode 各个字段说明：[Nodes - containerlab](https://containerlab.dev/manual/nodes/)\nkind 类型列表：[Kinds - containerlab](https://containerlab.dev/manual/kinds/)\n\n![upgit_20230314_1678761763.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230314_1678761763.png)\n\nspine1\ndocker exec -it clab-bgp-spine1 /bin/vbash\n```\n# spine1 —— 不能配置宣告默认路由 可能导致路由学习的不对\n#set protocols bgp neighbor 10.1.10.1 address-family ipv4-unicast default-originate\n#set protocols bgp neighbor 10.1.34.1 address-family ipv4-unicast default-originate\n\nset interfaces ethernet eth0 address '172.20.20.5/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.1.0.0/16'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.10.2/24'\nset interfaces ethernet eth2 address '10.1.34.2/24'\nset protocols bgp local-as 500 \nset protocols bgp neighbor 10.1.10.1 remote-as '65005'\nset protocols bgp neighbor 10.1.34.1 remote-as '65008'\nset protocols bgp parameters router-id '10.1.10.2'\n\n\n# spine2\n#set protocols bgp neighbor 10.1.11.1 address-family ipv4-unicast default-originate\n#set protocols bgp neighbor 10.1.12.1 address-family ipv4-unicast default-originate\n\nset interfaces ethernet eth0 address '172.20.20.4/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.1.0.0/16'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.12.2/24'\nset interfaces ethernet eth2 address '10.1.11.2/24'\nset protocols bgp local-as 800 \nset protocols bgp neighbor 10.1.11.1 remote-as '65008'\nset protocols bgp neighbor 10.1.12.1 remote-as '65005'\n\nset protocols bgp parameters router-id '10.1.12.2'\n\n\n# leaf-1\n# set interfaces ethernet eth0 address '172.20.20.2/24'\n# set interfaces ethernet eth0 description public\n# set protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\n# set nat source rule 100 outbound-interface 'eth0'\n# set nat source rule 100 source address '10.1.0.0/16'\n# set nat source rule 100 translation address 'masquerade'\n\n#set interfaces ethernet eth3 address '10.1.5.1/24'\n\nset interfaces bridge br0 address '10.1.5.1/24'\nset interfaces bridge br0 description 'leaf1-br'\nset interfaces bridge br0 member interface eth3\nset interfaces bridge br0 member interface eth4\n\nset protocols static route 10.1.34.0/24 next-hop 10.1.10.2\nset protocols static route 10.1.11.0/24 next-hop 10.1.12.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.10.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.12.2\n\nset interfaces ethernet eth1 address '10.1.10.1/24'\nset interfaces ethernet eth2 address '10.1.12.1/24'\nset protocols bgp local-as 65005\nset protocols bgp address-family ipv4-unicast network 10.1.5.0/24\nset protocols bgp neighbor 10.1.5.11 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.5.11 remote-as '65005'\nset protocols bgp neighbor 10.1.5.12 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.5.12 remote-as '65005'\nset protocols bgp neighbor 10.1.10.2 remote-as '500'\nset protocols bgp neighbor 10.1.12.2 remote-as '800'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.1.5.1'\n\n\n# leaf2\n# set interfaces ethernet eth0 address '172.20.20.3/24'\n# set interfaces ethernet eth0 description public\n# set protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\n# set nat source rule 100 outbound-interface 'eth0'\n# set nat source rule 100 source address '10.1.0.0/16'\n# set nat source rule 100 translation address 'masquerade'\nset interfaces ethernet eth3 address '10.1.8.1/24'\n\n\nset interfaces bridge br0 address '10.1.8.1/24'\nset interfaces bridge br0 description 'leaf2-br'\nset interfaces bridge br0 member interface eth3\nset interfaces bridge br0 member interface eth4\n\nset protocols static route 10.1.10.0/24 next-hop 10.1.34.2\nset protocols static route 10.1.12.0/24 next-hop 10.1.11.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.34.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.11.2\n\nset interfaces ethernet eth1 address '10.1.34.1/24'\nset interfaces ethernet eth2 address '10.1.11.1/24'\nset protocols bgp local-as 65008\nset protocols bgp address-family ipv4-unicast network 10.1.8.0/24\nset protocols bgp neighbor 10.1.8.13 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.8.13 remote-as '65008'\nset protocols bgp neighbor 10.1.8.14 address-family ipv4-unicast route-reflector-client\nset protocols bgp neighbor 10.1.8.14 remote-as '65008'\nset protocols bgp neighbor 10.1.11.2 remote-as '800'\nset protocols bgp neighbor 10.1.34.2 remote-as '500'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.1.8.1'\n```\n\n\n![upgit_20230305_1678030421.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230305_1678030421.png)\n\n![upgit_20230305_1678030430.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230305_1678030430.png)\n\n参考：[使用 Containerlab + Kind 快速部署 Cilium BGP 环境 (qq.com)](https://mp.weixin.qq.com/s/k25e7gTIIJLnL_FLlgdHUw)","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/debug-vscode-config":{"title":"debug vscode config","content":"\n```json\n\n        {\n            \"name\": \"debug install\",\n            \"type\": \"go\",\n            \"debugAdapter\": \"dlv-dap\", // the default\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 12345,\n            \"cwd\": \"/root/program/cloudnative/ryken/cilium/cilium-cli\",\n            \"program\": \"/root/program/cloudnative/ryken/cilium/cilium-cli/cmd/cilium/main.go\",\n            \"args\":[\n\t\t\t\t\"install\"\n            ],\n            // \"env\": { \"K8S_NODE_NAME\": \"develop\", \"CILIUM_K8S_NAMESPACE\": \"kube-system\", \"KUBERNETES_SERVICE_HOST\": \"172.31.18.200\", \"KUBERNETES_SERVICE_PORT\": \"6443\"}\n        },\n\t\t{\n            \"name\": \"debug dbg\",\n            \"type\": \"go\",\n            \"debugAdapter\": \"dlv-dap\", // the default\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 12345,\n            \"cwd\": \"/root/program/cloudnative/ryken/cilium/cilium-dbg\",\n            \"program\": \"/root/program/cloudnative/ryken/cilium/cilium-dbg/main.go\",\n            \"args\":[\n\t\t\t\t\"bpf\",\n\t\t\t\t\"policy\",\n\t\t\t\t\"get\",\n\t\t\t\t\"4064\"\n            ],\n            // \"env\": { \"K8S_NODE_NAME\": \"develop\", \"CILIUM_K8S_NAMESPACE\": \"kube-system\", \"KUBERNETES_SERVICE_HOST\": \"172.31.18.200\", \"KUBERNETES_SERVICE_PORT\": \"6443\"}\n        },\n        {\n            \"name\": \"debug daemon\",\n            \"type\": \"go\",\n            \"debugAdapter\": \"dlv-dap\", // the default\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 12345,\n            \"cwd\": \"/root/program/cloudnative/ryken/cilium\",\n            \"program\": \"/root/program/cloudnative/ryken/cilium/daemon/main.go\",\n            \"args\":[\n\t\t\t\t\"--config-dir=/root/test/cilium/config-map\", \"--k8s-kubeconfig-path=/root/.kube/config\"\n            ],\n            \"env\": { \"K8S_NODE_NAME\": \"develop\", \"CILIUM_K8S_NAMESPACE\": \"kube-system\", \"KUBERNETES_SERVICE_HOST\": \"172.31.18.200\", \"KUBERNETES_SERVICE_PORT\": \"6443\"}\n\t\t}\n```","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/devops-casc-%E5%8F%82%E6%95%B0":{"title":"devops casc 参数","content":"客户： 泉峰国际\n版本：kse v4.1.2\n问题：前端停止流水线后，agent pod 仍在运行（预计 6 min后清理）\n\nissue： https://github.com/kubesphere/project/issues/5302\n工单:  https://tenant.quanxiangyun.com/qingcloud/manage/tickets/261228\njira： https://track.yunify.com/browse/ENTTICKET-4079\n\n在jenkins console 中快速的运行和停止流水线也可复现这一问题，所以本质上是jenkins的bug，与ks-devops 的代码无关。 jenkins 内包含众多插件，且插件之间有很多依赖，所以不能单纯的升级jenkins 或某一个插件，这可能会造成兼容性问题或引起更多问题。\n\n- 将更新 jenkins 到最新的LTS版本, 并将所有插件也更新到较新版本，验证问题依旧存在\n- 创建的 pod 与 pipelinerun 在 Kubernetes yaml 定义中看出来直接的附属关系，无法 patch 自动回收。目前没有很好的解决方法，只能手动查看和删除仍在运行中的agent pod，或等待几分钟让 jenkins 删除。\n\n\n另外停止的流水线残留的 pod（jenkins node/agent） 会处于“空闲状态”，不会继续运行流水线，因此对于实际的业务、部署、发布是没有影响的。可以通过下面的 jenkinsfile 证明\n\n通过一个流水线隔 5s 左右向自己的 gitea 仓库中 push 提交，停止流水线后，push 也停止。\n\n```\npipeline {\n  agent any\n  stages {\n    stage('stage-7dbpf') {\n      agent none\n      steps {\n        git(url: 'https://gitee.com/rykren/devops-test.git', credentialsId: 'gitea', branch: 'master', changelog: true, poll: false)\n      }\n    }\n\n    stage('stage-1isyv') {\n      agent none\n      steps {\n        sh '''\ngit config --global user.email \"renyun_kang@163.com\"\ngit config --global user.name \"rykren\"'''\n      }\n    }\n\n    stage('stage-ewwli') {\n      agent none\n      steps {\n        sh '''#!/bin/bash\n\n\n# 替换自己的 username、password\nsed -i 's/gitee.com/rykren:xxxx@gitee.com/' .git/config\n\ncat .git/config\n\n\nfor i in $(seq 1 100); do\n  # 创建文件\n  echo \"--------\\n\"\n  echo \"add file $i.\"\n  touch \"$i\"\n  git add .\n  git commit -s -m \"Add file $i\"\n  git status\n  git push -u origin master\n\n  \n  # sleep 5~10秒\n  sleep $(( ( RANDOM % 6 )  + 5 )) # 生成5到10之间的随机数\n  \n\ndone\n\necho \"Finished.\"'''\n      }\n    }\n\n    stage('stage-zip2a') {\n      agent none\n      steps {\n        sh 'echo \"ok\"'\n      }\n    }\n\n  }\n}\n```\n\n---\n\n有关  configmap kubesphere-devops-system/jenkins-casc-config 中的一些配置：\n\nJenkins Kubernetes plugin 配置文档： https://plugins.jenkins.io/kubernetes/#plugin-content-configuration-reference\n\n- **retentionTimeout**：Kubernetes cloud 插件将在 retentionTimeout 分钟后清理尚未终止的空闲工作进程。最小值为 5min，未添加到说明文档中，可能不太建议用户修改\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2025/01/1a895467e141f292dc104817d9eba0ec.png)\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2025/01/d41f5b879bcfd6e46d114e99dbffbeb7.png)\n\n- **podRetention** 用于决定是否保留节点 pod。可以是 'never()'、 'onFailure()'、 'always()' 或 'default()'，如果为空的话，超过 `activeDeadlineSeconds` 设定的时间时间后会删除 pod\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2025/01/d6b2f8ec44d8eb09e80b93073b3e4692.png)\n\n\n- **activeDeadlineSeconds** 如果 `podRetention` 设置为 'never()' 或 'onFailure()' 的话，在时间超过后 pod 会被删除。ks-devops 默认为0 即不设置\n![image.png](https://images.cherryfloris.eu.org/ryken/2025/01/872d0fcb276c159ec87ea3364fc147cc.png)\n\n\n效果类似与流水线运行时，手动删除 pod，此时流水线依旧会处于 “运行中” 状态，日志中会打印 java.nio.channels.ClosedChannelException 的错误。\n\n```bash\nCannot contact xxxx-cd4lx-cbjww-8r7d8: hudson.remoting.RequestAbortedException: java.nio.channels.ClosedChannelException\nCould not connect to xxxx-cd4lx-cbjww-8r7d8 to send interrupt signal to process\n```\n经过 retentionTimeout 后流水线会由 jenkins ABORTED 显示 “已取消”。\n\n\n- **idleMinutes** 允许 pod 保持活跃以便再次使用，直到最后一次执行后的时间超过配置的分钟数， ks-devops 默认为0 即不设置\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2025/01/19a863d8ed902f78e7aaad59467f5711.png)\n\n\n实际测试下来，\n- 当流水线在某一个 stage 正常运行时停止流水线，pipelinerun 创建的 pod 会立即被删除\n- 当流水线刚刚运行，创建出 pipelinerun pod（pod 为 pending/creating/刚刚running ） 时立马停止，此时 pod 会为空闲状态，最终到 retentionTimeout 之后，jenkins aborted 掉\n\n如果配置 idleMinutes 会导致正常运行的完成的流水线也需要等待指定分钟后才会删除掉相应的 pod。同时如果配置 idleMinutes，上面提及的“刚创建出 pipelinerun pod就停止流水线”的 pod 的回收时间也会缩短到 idleMinutes\n\n\u003e 实际的时间会比 idleMinutes 长个半分钟一分钟，可能是 jenkins 的其他回收行为导致的\n\n\n遗留问题：\n- 通过 jenkins-casc-config podtemplate 中配置 activeDeadlineSeconds 最终在 jenkins 配置管理 Kubernetes cloud 中查看生效了，并且修改日志等级可以看到配置生效，但是在最终生成的 pod yaml 中却没有看到 spec.activeDeadlineSeconds 有值\n- 通过以下 jenkinsfile 创建流水线并运行时，却一切正常。最终生成的 pod yaml 中 spec.activeDeadlineSeconds 为 20\n\n```\npodTemplate(label: 'deadline', activeDeadlineSeconds: 20, containers: [\n        containerTemplate(name: 'busybox', image: 'busybox', ttyEnabled: true, command: '/bin/cat'),\n]) {\n\n    node ('deadline') {\n        stage('Run') {\n            container('busybox') {\n                sh \"\"\"\n            echo \"Hello from container!\"\n          \"\"\"\n            }\n        }\n    }\n}\n```\n","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/dlv-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85":{"title":"","content":"1. dlv官网： [https://github.com/derekparker/delve](https://github.com/derekparker/delve)\n2. 下载安装详看： [https://github.com/derekparker/delve/blob/master/Documentation/installation/linux/install.md](https://github.com/derekparker/delve/blob/master/Documentation/installation/linux/install.md)\n\n官方安装文档介绍 **Installation on Linux，**有两种方法在linux上安装dlv。\n第一种使用`go get`：\n\n| export GOPROXY=https://goproxy.cn\ngo get   github.com/go-delve/delve/cmd/dlv |\n| --- |\n\n注意：使用这种方法安装时，要在你的go module 文件夹之外运行这个命令，不然该命令会将dlv添加为你的工程依赖。\n\n第二种确保 $GOPATH 已经被设置:\n\n| $ git   clone [https://github.com/go-delve/delve.git](https://github.com/go-delve/delve.git)  $GOPATH/src/github.com/go-delve/delve\n    $ cd $GOPATH/src/github.com/go-delve/delve\n    $ make install |\n| --- |\n\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/dlv-%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8":{"title":"","content":"### 工程目录如下：\n| ├──   github.com/me/foo\n    ├── cmd\n    │   └── foo\n    │       └── main.go\n    ├── pkg\n    │   └── baz\n    │       ├── bar.go\n    │       └── bar_test.go |\n| --- |\n\n \n### 调试使用：\n#### 进入调试模式的方法：\n\n- dlv attach pid：类似与gdb attach pid，可以对正在运行的进程直接进行调试(pid为进程号)。\n- dlv run|debug：run命令已被debug命令取代，运行dlv debug test.go会先编译go源文件，同时执行attach命令进入调试模式，该命令会在当前目录下生成一个名为debug的可执行二进制文件，退出调试模式会自动被删除。\n- dlv exec executable_file：直接从二进制文件启动调试模式。\n- dlv core executable_file core_file：以core文件启动调试，通常进行dlv的目的就是为了找出可执行文件core的原因，通过core文件可直接找出具体进程异常的信息。\n\n#### dlv传递参数\n添加**--**来告诉dlv所有后续参数都应逐字传递到二进制文件，而无需尝试解析它们:\n`dlv exec /mypath/binary -- --config=config.yaml`\n#### dlv调试常用命令\n| args |  | 打印函数的参数 |\n| --- | --- | --- |\n| locals |  | 查看函数的局部变量 |\n| continue | c | 继续执行到设置的断点 |\n| next | n | 单步执行 |\n| break main.go:90 | b | 在main.go文件的第10行设置断点 |\n| breakpoints | bp | 打印出所有的断点信息 |\n| clear |  | 清除单个断点 |\n| clearall |  | 清除所有断点 |\n| on |  | 当运行到某断点时执行相应命令 |\n| condition |  | 有条件的中断断点 condition 1 number==20 |\n| stack | s | 打印调用堆栈信息 |\n| goroutine | gr | 查看当前Goroutine相关的信息，加上数字切换指定ID的routtinue |\n| goroutines | grs | 查看当前Goroutine相关的信息 |\n| backtrace | bt | 打印当前goroutine堆栈信息 |\n| frame + ID | f | 切换指定IDframe |\n| list + 行数 | l | 查看指定行数上下10行源代码【默认当前所运行处】 |\n| print | p | 打印变量值 |\n| trace |  | 类似于打断点，但程序运行到该处时不会中断而是继续执行，同时会输出一行提示信息。 |\n| call |  | 修改变量的值 call number = 12 |\n| help |  | 打印帮助信息 |\n\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/dlv-%E8%B0%83%E8%AF%95core%E6%96%87%E4%BB%B6":{"title":"dlv 调试core文件","content":"### linux环境下 生成core文件\n- 设置环境变量 `export GOTRACEBACK=crash`\n- 解除ulimit系统资源限制，允许生成core文件\n\n有关GOTRACEBACK参考官网：[https://pkg.go.dev/runtime?utm_source=godoc](https://pkg.go.dev/runtime?utm_source=godoc)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620287193372-3f678fce-aa1a-4460-b19b-4e55fc1af05d.png#align=left\u0026display=inline\u0026height=277\u0026originHeight=369\u0026originWidth=675\u0026size=56709\u0026status=done\u0026style=none\u0026width=506)\n```go\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n)\nfunc main() {\n    waitchan := make(chan struct{})\n    go func() {\n        for i := 0; i \u003c 10; i++ {\n            fmt.Println(\"count --\u003e \", i)\n            time.Sleep(2 * time.Second)\n            //if i == 9 {\n            // waitchan \u003c- struct{}{}\n            //}\n        }\n    }()\n    go func() {\n        time.Sleep(5 * time.Second)\n        panic(\"Panic.....\")\n    }()\n    fmt.Println(\"the main over\")\n    \u003c-waitchan\n}\n```\n### \n### dlv 调试core文件\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620288248778-2514c3e2-5fab-451e-9cec-af033cb0600a.png#align=left\u0026display=inline\u0026height=296\u0026originHeight=395\u0026originWidth=1210\u0026size=60955\u0026status=done\u0026style=none\u0026width=908)\n其余操作同dlv调试使用\n```bash\n(dlv) goroutines # 查看当前所有goroutines\n(dlv) goroutine 1 # 切换到gorouines 1\n(dlv) bt # 打印当前routine调用栈\n(dlv) frame 4 # 打印调用栈中的某一层栈的代码\n(dlv) exit\n```\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/ebpf-%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7":{"title":"","content":"排查工具：ftrace / bcc trace\n[问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会 | 深入浅出 eBPF](https://www.ebpf.top/post/ftrace_tools/)\n\n","lastmodified":"2025-03-26T03:48:43.172318567Z","tags":null},"/encoding%E5%BA%93":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/encoding_gob":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/encoding_json":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/envoy":{"title":"","content":"\nEnvoy 是一个强大且灵活的第 7 层开源代理。 \n它是一个 CNCF 毕业项目，用于各种服务网格解决方案。特别是，Envoy 为 Istio 服务网格提供支持，用作 sidecar 代理。\n\nCilium 已经使用 Envoy 来实现某些协议的 L7 策略和可观察性。 Cilium Service Mesh 使用无 sidecar 配置中利用 Envoy。\n\n在 Cilium 1.14 中，我们引入了对 Envoy 作为 DaemonSet 的支持。这提供了许多潜在的好处，例如： \n- Cilium Agent 重新启动（例如，升级）不会影响通过 Envoy 代理的实时流量。\n- Envoy 补丁版本升级不会影响 Cilium Agent。\n- 减少爆炸半径 - 在（不太可能）发生妥协时\n- Envoy 应用程序日志不会与 Cilium Agent 的日志混合。 \n- Envoy 代理的专用运行状况探测。\n\n使用 L7 Cilium 网络策略的一大好处是可观察性的提高。\n\nCilium 使用 Envoy 实现多种功能，并且添加了大量的 Ingress 和网关 API 支持（请参阅 Ingress 控制器和网关 API 实验室）。 然而，Envoy 是一个功能非常丰富的软件，虽然 Cilium 为 Envoy 配置提供了多种抽象，但它只涵盖了一些可以想象的场景。 为此，Cilium 提供了 Cilium Envoy Config CRD，让用户可以自己配置 Envoy 来实现他们想要的功能。\n\n标准 Kubernetes 网络策略允许在第 3 层和第 4 层过滤流量： \n第 3 层允许身份（通常是 IP 地址）进行通信，无论它们使用的端口和交换的内容如何。 \n第 4 层在端口（例如 TCP/80）上添加过滤，但仍然不过滤内容。\n\nCilium 利用 Envoy L7 代理来允许在第 7 层过滤流量。这意味着您可以过滤应用程序共享的信息类型，例如 HTTP 路径、标头等。\n\n\n在 Cilium 1.16 之前，只要 Cilium 需要（例如，如果需要为该节点上的工作负载强制执行 L7 网络策略），Envoy 进程就会默认在每个 Cilium pod 中以临时方式启动。 这意味着 Cilium 代理和 Envoy 代理不仅共享相同的生命周期，而且在发生泄露时也具有相同的爆炸半径。\n\n从 Cilium 1.16 开始，DaemonSet 选项现已成为在节点上部署 Envoy 的默认配置\n\n\nHubble 使用 Envoy 收集 L7 指标，这些指标可以通过 Prometheus 轻松导出。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/666191c518e93eb5cff5a2bf87536577.png)\n","lastmodified":"2025-03-26T03:48:43.138318686Z","tags":null},"/epoll%E7%9A%84LT%E6%A8%A1%E5%BC%8F%E4%B8%8EET%E6%A8%A1%E5%BC%8F":{"title":"epoll的LT模式与ET模式","content":"epoll的LT模式与ET模式哪个效率更高\n\nLT和ET的区别：\nLT对于存在未读完的数据，下一次调用epoll_wait还会触发，\nET无论是否读完，只触发一次，直到下一次EPOLLIN事件到来\n\nLT的优点：易于编码，未读完的数据下次还能继续读，不易遗漏\nET的缺点：难以编码，需要一次读完，有时会遗漏\n\nLT的缺点：在并发量高的时候，epoll_wait返回的就绪队列比较大，遍历比较耗时。因此LT适用于并发量小的情况\nET的优点：并发量大的时候，就绪队列要比LT小得多，效率更高\n### 应用\n\n- 使用ET的例子：nginx\n- 使用LT的例子：redis\n\n选取参考（nginx选用ET）\n\n- 看连接的空闲程度，连接的空闲程度很高就用ET，所以按照场景，http的客户端idel情况很高，用ET，如果是rpg的游戏服务器，用LT，ET差不多\n","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/felix":{"title":"","content":"![upgit_20221116_1668580534.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668580534.png)\n\nfelix 主要的工作组件：syncer, CalcGraph, dataplane\n- Syncer 协程负责监听 datastore 中的更新，并将更新的内容通过 channel 发送给 Validator 协程。Validator 完成校验后，将其发送给 Calc graph 协程。Calc graph 完成计算后，发送给dataplane协程。最后dataplane完成数据平面处理。\n\n1.  syncer, calicoctl 可以直接向 datastore 增删改查一系列 Resource。syncer 同步且监听这些Resource，当资源变动时，通过回调onUpdate 通知下游组件（比如CalcGraph）。\n2.  CalcGraph, syncer 传递的 datastore 数据通常不能直接使用，需要CalcGraph 做一些计算和归并再交给dataplane\n3.  dataplane 负责对 node 做出处理。\n- dataplane 分为本地和远程两种形态，如果是本地运行，则通过channel 直接传输 proto model，如果是dataplane 远程独立运行，则执行grpc 调用；\n\u003e `github.com/projectcalico/felix/proto/felixbackend.pb.go` \n- dataplane 一方面通过ifaceMonitor 监听网卡，另一方面接收 来自syncer/CalcGraph 的proto model。 dataplane 聚合一系列 Manager，监听上述两类事件变化并执行\n- InternalDataplane 基于 iptables 和 ipsets 实现进程内 Felix 数据平面驱动程序。通过 Send/RecvMessage 方法与 Felix 面向数据存储的部分进行通信。\n\n\n![upgit_20221116_1668580872.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221116_1668580872.png)\n\n参考：\n- [calico源码分析 | 李乾坤的博客 (qiankunli.github.io)](https://qiankunli.github.io/2020/07/12/calico_source.html)","lastmodified":"2025-03-26T03:48:43.135318697Z","tags":null},"/felix-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B":{"title":"","content":"#calico-felix #calico-ebpf\n\n入口处：`felix/dataplane/linux/int_dataplane.go` 的 `NewIntDataplaneDriver()` 函数，进行dataplane的初始化\n首先会判断是否开启了BPF，如果是开启状态，则进行以下操作：\n1）注册 map manager，该manager的作用是负责管理ebpf的map（map用于userspace和kernel之间进行数据的共享）\n2）注册endpoint manager，该manager的作用是负责各种ep的管理，包括host、workload等\n3）创建各种map，比如nat的frontendMap、backendMap、routeMap、conntrackMap等\n4）开启kube-proxy，注意此kube-proxy并非kubernetes的kube-proxy，而是proxy的一个封装，负责和kubernetes通信，维护各种map中的信息\n5）若BPFConnTimeEnabled开启，则安装connect_time_loadbalancer，即加载相关的eBPF程序\n6）启动dataplane（这部分暂不涉及connect_time_loadbalancer，本文暂不分析）\n\ncalico 全部的组件以及其进程树详见：[[CloudNative/cni-network/calico/组件分析/组件]]\nfelix 组件 [[felix]]\n\n启动程序 calico-node -felix\n配置文件：/etc/calico/felix.cfg\n```txt\nsh-4.4# cat /etc/calico/felix.cfg\n[global]\nMetadataAddr = None\nLogFilePath = None\nLogSeverityFile = None\nLogSeveritySys = None\n```\n\n启动注册 felix-startup - healthAggregator\n加载 KUBERNETES_SERVICE_HOST + KUBERNETES_SERVICE_PORT 环境变量\n加载配置\n- 加载环境变量\n- 加载配置文件\n- 加载datastore 配置文件 - globalConfig + hostConfig \n\t- global: felix defalut / cluster info default\n\t- host: felix node.nodename / node nodename\n- 创建数据存储的客户端\n启动数据面驱动 - 启动同步策略 server - 启动 datastore Syncer\n启动 asyncCalcGraph\n\n","lastmodified":"2025-03-26T03:48:43.132318708Z","tags":null},"/felix-env":{"title":"felix env","content":"日志：\n- FELIX_EARLYLOGSEVERITYSCREEN\n- FELIX_LOGSEVERITYSCREEN\n\ngo 垃圾回收\n- GOGC\n\nBPF 模式\n- KUBERNETES_SERVICE_HOST\n- KUBERNETES_SERVICE_PORT\n\n循环加载配置 - 直到 data store ready\n\n健康检查：healthAggregator\n\n\n\n","lastmodified":"2025-03-26T03:48:44.132315184Z","tags":null},"/flannel-%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86":{"title":"flannel 容器网络插件的设计实现原理","content":"# flannel 容器网络插件的设计实现原理\n\n\u003e 本文基于 flannel `v0.21.0` 版本源码分析.\n\nCNI, 它的全称是 `Container Network Interface`, 即容器网络的 API 接口. 平时比较常用的 CNI 实现有 Flannel、Calico 等.\n\nFlannel 支持 overlay/underlay 两种网络模式. 它使用 etcd 或者 kubernetes apiserver 存储整个集群的网络配置. 每个kubernetes 节点上会运行 flanneld 服务组件, 它从 etcd 或者 kubernetes api 中获取集群中各个 node 的网络地址 subset, 然后进行网络路由配置, 这样就可以实现跨主机的容器之间网络通信. \n\nflannel 目前支持 udp, vxlan, host-gw 等 backend 实现. \n\n- `udp` 模式少有人用, 其实现原理是在用户态实现 udp 转发服务, 数据会在内核和用户态之间拷贝, 从而影响转发性能. \n- `host-gw` (underlay 模式)  通过三层路由的方式实现通信, 不涉及vxlan 这类的封包解包, 所以也不需要 flannel.1 虚机网卡, 直接配置路由表的方式设置 pod 的下一跳, 达到实现跨主机的容器之间的通信的目的. flannel host-gw 方案无疑是性能最好的方案, 但需要 node 之间同在一个二层网络 (vlan) 里可达, 如果 node 之间不在同一个二层网络, 那么则需要使用 `calico` 这类路由网络方案.\n- `vxlan` (overlay 模式) 是 Flannel 默认和推荐的模式, vxlan 网络虚拟化技术, 它使用一种隧道协议, 将二层以太网帧封装在四层 UDP 报文中, 通过三层网络传输组成一个虚拟大二层网络.\n\n`host-gw` 的性能损失大约在 10% 左右，而 vxlan 这类网络方案性能损失在 20%~30% 左右.\n\n本文主要介绍 vxlan 和 host-gw 的 backend 下的跨主机容器通信过程及原理.\n\n**flannel 的设计实现基本流程**\n\n下图 subnet manager 使用 k8s kube-apiserver, backend 选用 vxlan 网络.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302041931615.png)\n\n下图 subnet manager 使用 k8s kube-apiserver, backend 选用 host-gw 网络.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302051020026.png)\n\n## flannel main 启动入口\n\n分析下 main 的运行流程原理.\n\n1. 实例化 subnet manager 管理对象, 当启用 `kube-subnet-mgr` 参数时, 使用 k8s apiserver 作为 subsetmgr, 其他情况使用 etcd 作为 subsetmgr.\n2. 根据 flannel backend 类型创建 backend 对象.\n3. 根据 backend 里配置创建获取 network 控制器对象.\n4. 启动 backend 的 network 控制器, 核心的处理逻辑都是各个 backend 的 network 里.\n5. 如果使用 systemd 管理进程, 则用 uds 跟 systemd 建连, 发送就绪消息.\n6. 等需要退出时, 向 apiserver 发送状态请求, 表明当前 flannel 在运行.\n7. 等待所有协程退出.\n\n这里涉及到了几个组件.\n\n- subnet manager, 实现了ip的租期管理, 申请，续约, 监听事件变动都是在这里实现的.\n- backend manager, 用来构建不同容器通信的 backend 对象. 启动阶段 udp, vxlan, host-gw 的 backend 都注册在这里, 通过 `GetBackend` 获取对应类型的 backend 对象.\n- network, 在各个 backend 里都有实现 network 控制器组件, 该组件用来真正的去实施网络策略配置.\n\n```go\nfunc main() {\n\t// ...\n\n\tctx, cancel := context.WithCancel(context.Background())\n\n\t// 实例化 subnet manager, 当启用 kube-subnet-mgr 参数时, 使用 k8s apiserver 作为 subsetmgr, 其他情况使用 etcd 作为 subsetmgr.\n\tsm, err := newSubnetManager(ctx)\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n\tlog.Infof(\"Created subnet manager: %s\", sm.Name())\n\n\tsigs := make(chan os.Signal, 1)\n\tsignal.Notify(sigs, os.Interrupt, syscall.SIGTERM)\n\n\twg := sync.WaitGroup{}\n\twg.Add(1)\n\tgo func() {\n\t\t// 监听 signal 信号, 收到后 cancel 退出.\n\t\tshutdownHandler(ctx, sigs, cancel)\n\t\twg.Done()\n\t}()\n\n\t// 获取 flannel 配置.\n\tconfig, err := getConfig(ctx, sm)\n\tif err == errCanceled {\n\t\twg.Wait()\n\t\tos.Exit(0)\n\t}\n\n\t...\n\n\t// 根据 flannel 类型创建 backend 对象.\n\tbm := backend.NewManager(ctx, sm, extIface)\n\tbe, err := bm.GetBackend(config.BackendType)\n\tif err != nil {\n\t\tcancel()\n\t\twg.Wait()\n\t\tos.Exit(1)\n\t}\n\n\t// 根据配置在 backend 里创建获取 network 对象.\n\tbn, err := be.RegisterNetwork(ctx, \u0026wg, config)\n\tif err != nil {\n\t\tcancel()\n\t\twg.Wait()\n\t\tos.Exit(1)\n\t}\n\n\t// ...\n\n\t// 启动 backend 的 network.\n\twg.Add(1)\n\tgo func() {\n\t\tbn.Run(ctx)\n\t\twg.Done()\n\t}()\n\n\t// 如果使用 systemd 管理进程, 则用 uds 跟 systemd 建连, 发送就绪消息.\n\t// 跟 systemd-notify 二进制一样的效果.\n\t_, err = daemon.SdNotify(false, \"READY=1\")\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to notify systemd the message READY=1 %v\", err)\n\t}\n\n\t// 等需要退出时, 向 apiserver 发送状态请求, 表明当前 flannel 在运行. \n\terr = sm.CompleteLease(ctx, bn.Lease(), \u0026wg)\n\tif err != nil {\n\t\tlog.Errorf(\"CompleteLease execute error err: %v\", err)\n\t}\n\n\t// 等待所有协程退出.\n\twg.Wait()\n\tos.Exit(0)\n}\n```\n\n## subnetManager 原理\n\n在 flannel 内部实现了两种 subnetManager, 一种是 k8s kube-apiserver, 另一种是 etcd. 这里拿 kube-apiserver 举例, 两者实现上大同小异, 无大差异.\n\n### 创建 subnetManager 子网管理器\n\n`newKubeSubnetManager` 会创建 node 资源的 informer 监听对象, 并注册 list/watch 过滤方法, 注册 eventHandler 事件回调方法. \n\n代码位置: `pkg/subnet/kube/kube.go`\n\n```go\nfunc newKubeSubnetManager(ctx context.Context, c clientset.Interface, sc *subnet.Config, nodeName, prefix string, useMultiClusterCidr bool) (*kubeSubnetManager, error) {\n\tvar ksm kubeSubnetManager\n\n\t// 构建 annotations 里 key 的名字, 跟 prefix 前缀组合后格式为 `{prefix}/key`\n\tksm.annotations, err = newAnnotations(prefix)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// ipv4 开关\n\tksm.enableIPv4 = sc.EnableIPv4\n\t// ipv6 开关\n\tksm.enableIPv6 = sc.EnableIPv6\n\t// kubeclient\n\tksm.client = c\n\tksm.nodeName = nodeName\n\tksm.subnetConf = sc\n\n\t// events 用来实现事件通知, 事件由 informer 监听获取后推入的.\n\tksm.events = make(chan subnet.Event, scale)\n\n\t// 如果类型为 alloc, 则无需启动 node informer 监听.\n\tif sc.BackendType == \"alloc\" {\n\t\tksm.disableNodeInformer = true\n\t}\n\tif !ksm.disableNodeInformer {\n\t\tindexer, controller := cache.NewIndexerInformer(\n\t\t\t\u0026cache.ListWatch{\n\t\t\t\tListFunc: func(options metav1.ListOptions) (runtime.Object, error) {\n\t\t\t\t\t// 设定 list 过滤的条件\n\t\t\t\t\treturn ksm.client.CoreV1().Nodes().List(ctx, options)\n\t\t\t\t},\n\t\t\t\tWatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {\n\t\t\t\t\t// 设定 watch 过滤的条件\n\t\t\t\t\treturn ksm.client.CoreV1().Nodes().Watch(ctx, options)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\u0026v1.Node{}, // 监听 node 资源对象.\n\t\t\tresyncPeriod,\n\t\t\tcache.ResourceEventHandlerFuncs{\n\t\t\t\tAddFunc: func(obj interface{}) {\n\t\t\t\t\t// 注册 add event 回调方法\n\t\t\t\t\tksm.handleAddLeaseEvent(subnet.EventAdded, obj)\n\t\t\t\t},\n\t\t\t\t// 注册 event 回调方法\n\t\t\t\tUpdateFunc: ksm.handleUpdateLeaseEvent,\n\t\t\t\tDeleteFunc: func(obj interface{}) {\n\t\t\t\t\t// 注册 delete event 回调方法\n\t\t\t\t\t_, isNode := obj.(*v1.Node)\n\t\t\t\t\tif !isNode {\n\t\t\t\t\t\tdeletedState, ok := obj.(cache.DeletedFinalStateUnknown)\n\t\t\t\t\t\tif !ok {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnode, ok := deletedState.Obj.(*v1.Node)\n\t\t\t\t\t\tif !ok {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj = node\n\t\t\t\t\t}\n\t\t\t\t\tksm.handleAddLeaseEvent(subnet.EventRemoved, obj)\n\t\t\t\t},\n\t\t\t},\n\t\t\t// informer indexer 索引方法.\n\t\t\tcache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},\n\t\t)\n\t\tksm.nodeController = controller\n\t\tksm.nodeStore = listers.NewNodeLister(indexer)\n\t}\n\n\t// 如果开启了多集群 cidr 支持, 则需要监听 k8s networkingv1alpha1.ClusterCIDR 资源.\n\tif useMultiClusterCidr {\n\t\t_, clusterController := cache.NewIndexerInformer(\n\t\t\t\u0026cache.ListWatch{\n\t\t\t\t...\n\t\t\t},\n\t\t\t\u0026networkingv1alpha1.ClusterCIDR{},\n\t\t\tresyncPeriod,\n\t\t\tcache.ResourceEventHandlerFuncs{\n\t\t\t\tAddFunc: func(obj interface{}) {\n\t\t\t\t\t// 注册 add 事件方法\n\t\t\t\t\tksm.handleAddClusterCidr(obj)\n\t\t\t\t},\n\t\t\t\tDeleteFunc: func(obj interface{}) {\n\t\t\t\t\t// 注册 delete 事件方法\n\t\t\t\t\tksm.handleDeleteClusterCidr(obj)\n\t\t\t\t},\n\t\t\t},\n\t\t\tcache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},\n\t\t)\n\t\tksm.clusterCIDRController = clusterController\n\t}\n\treturn \u0026ksm, nil\n}\n```\n\n`handleAddLeaseEvent` 是上面 informer 里 add/delete 的事件回调方法, 其逻辑根据 node 对象中的 spec.PodCIDR 和 annotations 一些字段来构建 lease 租约结构, 然后把 lease 写到管道里.\n\n```go\nfunc (ksm *kubeSubnetManager) handleAddLeaseEvent(et subnet.EventType, obj interface{}) {\n\tn := obj.(*v1.Node)\n\t// 如果 node 注释集合里没有 'kube-subnet-manager' 字段, 或者不为 true, 则直接跳出.\n\tif s, ok := n.Annotations[ksm.annotations.SubnetKubeManaged]; !ok || s != \"true\" {\n\t\treturn\n\t}\n\n\t// 根据 node 对象中的 spec.PodCIDR 和 annotations 信息来构建 lease 租约结构.\n\tl, err := ksm.nodeToLease(*n)\n\tif err != nil {\n\t\treturn\n\t}\n\n\t// 把解析到的 lease 租约结构写到 events 里做通知.\n\tksm.events \u003c- subnet.Event{Type: et, Lease: l}\n}\n```\n\n`nodeToLease` 会根据 v1.Node 对象里的数据构建 subnet.Lease 数据结构. 其转换过程看下面代码中的注释.\n\n```go\nfunc (ksm *kubeSubnetManager) nodeToLease(n v1.Node) (l subnet.Lease, err error) {\n\tif ksm.enableIPv4 {\n\t\t// 从 node annotations 里获取 node 的 publicip\n\t\tl.Attrs.PublicIP, err = ip.ParseIP4(n.Annotations[ksm.annotations.BackendPublicIP])\n\t\tif err != nil {\n\t\t\treturn l, err\n\t\t}\n\t\t// 获取 node annotations 的 BackendData 字段数据\n\t\tl.Attrs.BackendData = json.RawMessage(n.Annotations[ksm.annotations.BackendData])\n\n\t\tvar cidr *net.IPNet\n\t\tswitch {\n\t\tcase len(n.Spec.PodCIDRs) == 0:\n\t\t\t// 无效的 cidr\n\t\t\t_, cidr, err = net.ParseCIDR(n.Spec.PodCIDR)\n\t\t\tif err != nil {\n\t\t\t\treturn l, err\n\t\t\t}\n\t\tcase len(n.Spec.PodCIDRs) \u003c 3:\n\t\t\t// 如果 podCIDRS 小于 3 个, 循环遍历出一个 cidr 为 ipv4的.\n\t\t\tfor _, podCidr := range n.Spec.PodCIDRs {\n\t\t\t\t_, parseCidr, err := net.ParseCIDR(podCidr)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn l, err\n\t\t\t\t}\n\t\t\t\tif len(parseCidr.IP) == net.IPv4len {\n\t\t\t\t\tcidr = parseCidr\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\treturn l, fmt.Errorf(\"node %q pod cidrs should be IPv4/IPv6 only or dualstack\", ksm.nodeName)\n\t\t}\n\t\t// 把 cidr 转成 IP4Net 格式, 记录 ip 和 size\n\t\tl.Subnet = ip.FromIPNet(cidr)\n\t\t// 当前 subnet 为 ipv4\n\t\tl.EnableIPv4 = ksm.enableIPv4\n\t}\n\n\tif ksm.enableIPv6 {\n\t\t// ipv6 跟 ipv4 差不多.\n\t}\n\tl.Attrs.BackendType = n.Annotations[ksm.annotations.BackendType]\n\treturn l, nil\n}\n```\n\n`WatchLeases` 用来监听 ksm.events 管道, 当有数据时返回给调用方.\n\n```go\nfunc (ksm *kubeSubnetManager) WatchLeases(ctx context.Context, cursor interface{}) (subnet.LeaseWatchResult, error) {\n\tselect {\n\tcase event := \u003c-ksm.events:\n\t\treturn subnet.LeaseWatchResult{\n\t\t\tEvents: []subnet.Event{event},\n\t\t}, nil\n\tcase \u003c-ctx.Done():\n\t\treturn subnet.LeaseWatchResult{}, context.Canceled\n\t}\n}\n```\n\n## backend manager 实现原理\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302042054717.png)\n\n`BackendManager` 根据 backendType 获取注册表里的工厂方法, 然后创建对应的 backend 实例对象. flannel 在启动阶段, 各个 backend 会注册工厂方法到 backendManager 里.\n\n源码位置: `pkg/backend/manager.go`\n\n```go\nvar constructors = make(map[string]BackendCtor)\n\ntype manager struct {\n\tctx      context.Context\n\tsm       subnet.Manager\n\tmux      sync.Mutex\n\tactive   map[string]Backend\n\twg       sync.WaitGroup\n}\n\nfunc NewManager(ctx context.Context, sm subnet.Manager, extIface *ExternalInterface) Manager {\n\treturn \u0026manager{\n\t\tctx:      ctx,\n\t\tsm:       sm,\n\t\textIface: extIface,\n\t\tactive:   make(map[string]Backend),\n\t}\n}\n\nfunc (bm *manager) GetBackend(backendType string) (Backend, error) {\n\tbm.mux.Lock()\n\tdefer bm.mux.Unlock()\n\n\tbetype := strings.ToLower(backendType)\n\t// 如果已存在, 则直接返回.\n\tif be, ok := bm.active[betype]; ok {\n\t\treturn be, nil\n\t}\n\n\t// 在 constructors 里获取传入类型的 backend 工厂方法.\n\tbefunc, ok := constructors[betype]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"unknown backend type: %v\", betype)\n\t}\n\n\t// 创建 backend 对应.\n\tbe, err := befunc(bm.sm, bm.extIface)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 注册到活动 backend 字典里.\n\tbm.active[betype] = be\n\n\tbm.wg.Add(1)\n\tgo func() {\n\t\t\u003c-bm.ctx.Done()\n\n\t\t// 退出时需要删除\n\t\tbm.mux.Lock()\n\t\tdelete(bm.active, betype)\n\t\tbm.mux.Unlock()\n\n\t\tbm.wg.Done()\n\t}()\n\n\treturn be, nil\n}\n\nfunc Register(name string, ctor BackendCtor) {\n\t// 注册 backend\n\tconstructors[name] = ctor\n}\n```\n\n看下 vxlan 和 host-gw 是如何注册进来的.\n\n```go\n// 源码位置: pkg/backend/vxlan/vxlan.go\nfunc init() {\n\tbackend.Register(\"vxlan\", New)\n}\n\n// 源码位置: pkg/backend/hostgw/hostgw.go\nfunc init() {\n\tbackend.Register(\"host-gw\", New)\n}\n```\n\n## vxlan 网络通信的实现原理\n\n下图为 vxlan 跨主机的网络通信架构.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302042019492.png)\n\n下图为 vxlan network 的实现原理.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302042036994.png)\n\nvxlan 的 network 会从 kubeSubnetManager informer 中获取全量及增量的 node 事件. 然后从调用 `handleSubnetEvents` 方法对 vxlan 进行处理, 主要对 ARP / FDB / Route 进行配置.\n\n源码位置: `pkg/backend/vxlan/vxlan_network.go`\n\n### 创建 vxlan network 实例\n\nflannel 中每个 backend 对象都需要实现 `RegisterNetwork` 方法. 这里举例 `vxlan` 类型的 backend.\n\n`RegisterNetwork` 其内部流程如下.\n\n1. 创建 vxlan 设备, 其内部为幂等的, 其内部过程会解决冲突问题. \n2. 调用 subnet manager 的 AcquireLease 接口完成 lease 地址配置租约的申请.\n3. 为 flannel device 设备添加 ip 地址, 子网为 32. 通常地址该 cidr 的网络地址.\n4. 创建 network, 内部会监听集群变化, 按照变化事件做出增删改 vxlan 操作.\n\n```go\nfunc (be *VXLANBackend) RegisterNetwork(ctx context.Context, wg *sync.WaitGroup, config *subnet.Config) (backend.Network, error) {\n\tcfg := struct {\n\t\tVNI           int\n\t\tPort          int\n\t\tGBP           bool\n\t\tLearning      bool\n\t\tDirectRouting bool\n\t}{\n\t\tVNI: defaultVNI,\n\t}\n\n\t// backend 为空必然是异常的.\n\tif len(config.Backend) \u003e 0 {\n\t\tif err := json.Unmarshal(config.Backend, \u0026cfg); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error decoding VXLAN backend config: %v\", err)\n\t\t}\n\t}\n\n\tvar dev, v6Dev *vxlanDevice\n\tvar err error\n\tif config.EnableIPv4 {\n\t\tdevAttrs := vxlanDeviceAttrs{\n\t\t\t// ...\n\t\t}\n\n\t\t// 创建 vxlan 设备, 其内部为幂等的, 其内部过程会解决冲突问题.\n\t\tdev, err = newVXLANDevice(\u0026devAttrs)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdev.directRouting = cfg.DirectRouting\n\t}\n\tif config.EnableIPv6 {\n\t\t// ...\n\t}\n\n\t// 构建 subnetAttrs 对象, 后用来申请租约.\n\tsubnetAttrs, err := newSubnetAttrs(be.extIface.ExtAddr, be.extIface.ExtV6Addr, uint16(cfg.VNI), dev, v6Dev)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 调用 subnet manager 的 AcquireLease 接口完成 lease 地址配置租约的申请.\n\tlease, err := be.subnetMgr.AcquireLease(ctx, subnetAttrs)\n\tswitch err {\n\tcase nil:\n\tcase context.Canceled, context.DeadlineExceeded:\n\t\t// 超时或关闭\n\t\treturn nil, err\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"failed to acquire lease: %v\", err)\n\t}\n\n\tif config.EnableIPv4 {\n\t\t// 获取 flannel 地址信息.\n\t\tnet, err := config.GetFlannelNetwork(\u0026lease.Subnet)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// 为 flannel device 设备添加 ip 地址, 子网为 32. 通常地址该 cidr 的网络地址.\n\t\tif err := dev.Configure(ip.IP4Net{IP: lease.Subnet.IP, PrefixLen: 32}, net); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to configure interface %s: %w\", dev.link.Attrs().Name, err)\n\t\t}\n\t}\n\tif config.EnableIPv6 {\n\t\t// ...\n\t}\n\n\t// 这个重要. 创建 vxlan network, 内部会监听集群变化, 按照变化事件做出增删改 vxlan 操作.\n\treturn newNetwork(be.subnetMgr, be.extIface, dev, v6Dev, ip.IP4Net{}, lease)\n}\n```\n\n\n### vxlan network 启动入口\n\n```go\nfunc (nw *network) Run(ctx context.Context) {\n\twg := sync.WaitGroup{}\n\n\tevents := make(chan []subnet.Event)\n\twg.Add(1)\n\tgo func() {\n\t\t// 从 kube subnet 组件里监听集群内所有 node 的网络变化.\n\t\t// 收到变更事件后, 传入 evnets 管道中.\n\t\tsubnet.WatchLeases(ctx, nw.subnetMgr, nw.SubnetLease, events)\n\t\twg.Done()\n\t}()\n\n\tdefer wg.Wait()\n\n\tfor {\n\t\t// 获取来自 informer node 资源变化.\n\t\tevtBatch, ok := \u003c-events\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\n\t\t// 进行 vxlan 网络配置. 主要为添加 arp, fdb, route 等过程.\n\t\tnw.handleSubnetEvents(evtBatch)\n\t}\n}\n```\n\n### vxlan 的配置实现原理\n\n`handleSubnetEvents` 为配置 vlan 虚拟网络的核心方法, 实现原理是根据传入的事件和配置来添加或删除 vxlan 的 arp, fdb, route 配置.\n\n其详细实现过程看下面代码中注释. \n\n```go\nfunc (nw *network) handleSubnetEvents(batch []subnet.Event) {\n\tfor _, event := range batch {\n\t\tsn := event.Lease.Subnet\n\t\tv6Sn := event.Lease.IPv6Subnet\n\t\tattrs := event.Lease.Attrs\n\n\t\t// 只处理 vxlan 类型, 其他类型直接跳过.\n\t\tif attrs.BackendType != \"vxlan\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar (\n\t\t\tvxlanAttrs, v6VxlanAttrs           vxlanLeaseAttrs\n\t\t\tdirectRoutingOK, v6DirectRoutingOK bool\n\t\t\tdirectRoute, v6DirectRoute         netlink.Route\n\t\t\tvxlanRoute, v6VxlanRoute           netlink.Route\n\t\t)\n\n\t\tif event.Lease.EnableIPv4 \u0026\u0026 nw.dev != nil {\n\t\t\t// 获取属性信息\n\t\t\tif err := json.Unmarshal(attrs.BackendData, \u0026vxlanAttrs); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// 构建 vxlan 路由\n\t\t\tvxlanRoute = netlink.Route{\n\t\t\t\tLinkIndex: nw.dev.link.Attrs().Index,\n\t\t\t\tScope:     netlink.SCOPE_UNIVERSE,\n\t\t\t\tDst:       sn.ToIPNet(),\n\t\t\t\tGw:        sn.IP.ToIP(),\n\t\t\t}\n\t\t\tvxlanRoute.SetFlag(syscall.RTNH_F_ONLINK)\n\n\t\t\t// 创建直接路由\n\t\t\tdirectRoute = netlink.Route{\n\t\t\t\tDst: sn.ToIPNet(),\n\t\t\t\tGw:  attrs.PublicIP.ToIP(),\n\t\t\t}\n\t\t\tif nw.dev.directRouting {\n\t\t\t\tif dr, err := ip.DirectRouting(attrs.PublicIP.ToIP()); err != nil {\n\t\t\t\t\tlog.Error(err)\n\t\t\t\t} else {\n\t\t\t\t\tdirectRoutingOK = dr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// ...\n\n\t\tswitch event.Type {\n\n\t\t// 当事件类型为 add 时, 进行配置该子网路由.\n\t\tcase subnet.EventAdded: \n\t\t\tif event.Lease.EnableIPv4 {\n\t\t\t\tif directRoutingOK {\n\t\t\t\t\tif err := netlink.RouteReplace(\u0026directRoute); err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 添加 arp 配置\n\t\t\t\t\tif err := nw.dev.AddARP(neighbor{IP: sn.IP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\t// 添加 fdb 配置\n\t\t\t\t\tif err := nw.dev.AddFDB(neighbor{IP: attrs.PublicIP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\t// 如果发生异常则回滚删掉 arp.\n\t\t\t\t\t\tif err := nw.dev.DelARP(neighbor{IP: event.Lease.Subnet.IP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\t// 添加和更新 vxlan route 路由配置.\n\t\t\t\t\tif err := netlink.RouteReplace(\u0026vxlanRoute); err != nil {\n\t\t\t\t\t\t// 如果发生失败, 则尝试回收 arp 配置.\n\t\t\t\t\t\tif err := nw.dev.DelARP(neighbor{IP: event.Lease.Subnet.IP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 如果发生失败, 则尝试回收 fdb 配置.\n\t\t\t\t\t\tif err := nw.dev.DelFDB(neighbor{IP: event.Lease.Attrs.PublicIP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif event.Lease.EnableIPv6 {\n\t\t\t\t// ...\n\t\t\t}\n\t\tcase subnet.EventRemoved:\n\t\t\tif event.Lease.EnableIPv4 {\n\t\t\t\tif directRoutingOK {\n\t\t\t\t\t// 直接路由模式, 只需要删除路由，无需删除 arp 和 fdb.\n\t\t\t\t\tif err := netlink.RouteDel(\u0026directRoute); err != nil {\n\t\t\t\t\t\t// ...\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 先删除 arp 配置\n\t\t\t\t\tif err := nw.dev.DelARP(neighbor{IP: sn.IP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\tlog.Error(\"DelARP failed: \", err)\n\t\t\t\t\t}\n\n\t\t\t\t\t// 再删除 fdb 配置\n\t\t\t\t\tif err := nw.dev.DelFDB(neighbor{IP: attrs.PublicIP, MAC: net.HardwareAddr(vxlanAttrs.VtepMAC)}); err != nil {\n\t\t\t\t\t\tlog.Error(\"DelFDB failed: \", err)\n\t\t\t\t\t}\n\n\t\t\t\t\t// 删除 vxlan 路由信息.\n\t\t\t\t\tif err := netlink.RouteDel(\u0026vxlanRoute); err != nil {\n\t\t\t\t\t\tlog.Errorf(\"failed to delete vxlanRoute (%s -\u003e %s): %v\", vxlanRoute.Dst, vxlanRoute.Gw, err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif event.Lease.EnableIPv6 {\n\t\t\t\t// ...\n\t\t\t}\n\t\tdefault:\n\t\t\t// 非法事件, 当前的代码不会跳到这里.\n\t\t\tlog.Error(\"internal error: unknown event type: \", int(event.Type))\n\t\t}\n\t}\n}\n```\n\n## host-gw network 的实现原理\n\n下图为 host-gw 跨主机的网络通信原理.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302050019035.png)\n\n在 flannel host-gw 网络模式下, 不涉及 VXLAN 的封包解包, 不需要经过 flannel.1 虚机网卡. flanneld 负责为各节点设置路由, 将对应节点 Pod 子网的下一跳地址指向对应的节点的IP.\n\n源码位置: `pkg/backend/route_network.go`\n\n### host-gw network 启动入口\n\n`Run()` 方法会获取和监听 leases 对象, 并调用 `handleSubnetEvents` 来处理 host-gw 路由配置.\n\n```go\nfunc (n *RouteNetwork) Run(ctx context.Context) {\n\twg := sync.WaitGroup{}\n\n\tevts := make(chan []subnet.Event)\n\twg.Add(1)\n\tgo func() {\n\t\t// 从 etcd 或者 k8s apiserver 监听 node lease.\n\t\tsubnet.WatchLeases(ctx, n.SM, n.SubnetLease, evts)\n\t\twg.Done()\n\t}()\n\n\tn.routes = make([]netlink.Route, 0, 10)\n\twg.Add(1)\n\tgo func() {\n\t\t// 定时检查注册的路由跟实际 node 路由配置是否有缺失, 不存在时需要添加.\n\t\tn.routeCheck(ctx)\n\t\twg.Done()\n\t}()\n\n\tdefer wg.Wait()\n\n\tfor {\n\t\tevtBatch, ok := \u003c-evts\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\t// 根据 event 处理路由表\n\t\tn.handleSubnetEvents(evtBatch)\n\t}\n}\n```\n\n### host-gw 配置路由表的原理\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302051013266.png)\n\n`handleSubnetEvents` 用来根据 event type 来增减路由表, 其内部使用 `netlink` 的 `RouteAdd` 来添加路由条目, 调动 `RouteDel` 来清理路由.\n\n```go\nfunc (n *RouteNetwork) handleSubnetEvents(batch []subnet.Event) {\n\tfor _, evt := range batch {\n\t\tswitch evt.Type {\n\t\tcase subnet.EventAdded:\n\t\t\t// 当收到添加事件时, 在路由表里增加相关路由条目.\n\t\t\tif evt.Lease.EnableIPv4 {\n\t\t\t\tlog.Infof(\"Subnet added: %v via %v\", evt.Lease.Subnet, evt.Lease.Attrs.PublicIP)\n\n\t\t\t\t// 根据 lease 来构建 route 对象\n\t\t\t\troute := n.GetRoute(\u0026evt.Lease)\n\n\t\t\t\t// 添加路由表\n\t\t\t\trouteAdd(route, netlink.FAMILY_V4, n.addToRouteList, n.removeFromV4RouteList)\n\t\t\t}\n\n\t\t\tif evt.Lease.EnableIPv6 {\n\t\t\t\t// ipv6 暂时忽略\n\t\t\t}\n\n\t\tcase subnet.EventRemoved:\n\t\t\t// 当收到删除事件时, 进行相关路由条目删除.\n\t\t\t// ...\n\n\t\t\tif evt.Lease.EnableIPv4 {\n\t\t\t\tlog.Info(\"Subnet removed: \", evt.Lease.Subnet)\n\n\t\t\t\t// 根据 lease 构建 route 对象.\n\t\t\t\troute := n.GetRoute(\u0026evt.Lease)\n\t\t\t\t// 在 route list 里剔除》\n\t\t\t\tn.removeFromV4RouteList(*route)\n\n\t\t\t\t// 删除该路由.\n\t\t\t\tif err := netlink.RouteDel(route); err != nil {\n\t\t\t\t\tlog.Errorf(\"Error deleting route to %v: %v\", evt.Lease.Subnet, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif evt.Lease.EnableIPv6 {\n\t\t\t\t// ipv6 暂时忽略\n\t\t\t}\n\n\t\tdefault:\n\t\t\tlog.Error(\"Internal error: unknown event type: \", int(evt.Type))\n\t\t}\n\t}\n}\n```\n\n`GetRoute` 方法是在 `RegisterNetwork` 时赋值的匿名方法, 其内部会把传入的 lease 结构转换为 netlink.Route 路由结构. route 的 dst 字段为 subnet 地址段, gw 是路由的下一条地址, 这里其实就是该 subset 对应的 node 的地址.\n\n```go\nn.GetRoute = func(lease *subnet.Lease) *netlink.Route {\n\treturn \u0026netlink.Route{\n\t\tDst:       lease.Subnet.ToIPNet(),       // 目标地址\n\t\tGw:        lease.Attrs.PublicIP.ToIP(),  // 路由下一条地址\n\t\tLinkIndex: n.LinkIndex,\n\t}\n}\n```\n\n`routeAdd` 用来添加路由条目, 如果该路由条目存在时, 需要先剔除再添加.\n\n```go\nfunc routeAdd(route *netlink.Route, ipFamily int, addToRouteList, removeFromRouteList func(netlink.Route)) {\n\taddToRouteList(*route)\n\t// 先检查是否存在.\n\trouteList, err := netlink.RouteListFiltered(ipFamily, \u0026netlink.Route{Dst: route.Dst}, netlink.RT_FILTER_DST)\n\tif err != nil {\n\t\tlog.Warningf(\"Unable to list routes: %v\", err)\n\t}\n\n\t// 如果存在且配置不一致时, 需要先删除路由条目.\n\tif len(routeList) \u003e 0 \u0026\u0026 !routeEqual(routeList[0], *route) {\n\t\tif err := netlink.RouteDel(\u0026routeList[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tremoveFromRouteList(routeList[0])\n\t}\n\n\t// 再次获取跟传入的目标 dst 一致的路由列表.\n\trouteList, err = netlink.RouteListFiltered(ipFamily, \u0026netlink.Route{Dst: route.Dst}, netlink.RT_FILTER_DST)\n\tif err != nil {\n\t\tlog.Warningf(\"Unable to list routes: %v\", err)\n\t}\n\n\t// 有路由表, 而且配置一致, 则忽略, 否则进行添加路由表.\n\tif len(routeList) \u003e 0 \u0026\u0026 routeEqual(routeList[0], *route) {\n\t\tlog.Infof(\"Route to %v already exists, skipping.\", route)\n\n\t} else if err := netlink.RouteAdd(route); err != nil {\n\t\tlog.Errorf(\"Error adding route to %v: %s\", route, err)\n\t\treturn\n\t}\n\n\t// 是否可以正常获取对应条件的路由表, 不理解为什么又要判断. 😅\n\t_, err = netlink.RouteListFiltered(ipFamily, \u0026netlink.Route{Dst: route.Dst}, netlink.RT_FILTER_DST)\n\tif err != nil {\n\t\tlog.Warningf(\"Unable to list routes: %v\", err)\n\t}\n}\n```\n\n`host-gw` 的路由配置原理还是比较简单的. 首先读取整个集群里所有的 node 的 ip 和 cidr 子网等信息, 然后设置对应的路由策略. 在一个 node 节点上含有整个集群的路由信息.\n\n```\n10.230.10.0/24 dev cni0 proto kernel scope link src 10.230.10.1\n\n10.244.20.0/24 via 172.16.0.102 dev eth0\n10.244.21.0/24 via 172.16.0.121 dev eth0\n10.244.22.0/24 via 172.16.0.122 dev eth0\n10.244.23.0/24 via 172.16.0.123 dev eth0\n10.244.24.0/24 via 172.16.0.124 dev eth0\n10.244.25.0/24 via 172.16.0.125 dev eth0\n...\n```\n\n### 定时修复路由表\n\n`routeCheck` 会周期性的修复本地的路由表, 检测对比当前主机跟内存路由表, 如有缺失则添加路由规则. \n\n**为什么需要周期性的修复路由表 ?**\n\n1. 某个路由表的规则被手动删除 ? 正常没这个可能.\n2. `handleSubnetEvents` 在添加路由表时, 对失败的 `netlink.RouteAdd` 没有重试, 所以在失败后进行周期性的重试.\n\n```go\nconst (\n\trouteCheckRetries = 10\n)\n\n// 周期检查路由表是否有缺失, 有缺失下进行添加路由表.\nfunc (n *RouteNetwork) routeCheck(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase \u003c-ctx.Done():\n\t\t\treturn\n\t\tcase \u003c-time.After(routeCheckRetries * time.Second):\n\t\t\t// 每次间隔 10s 秒.\n\t\t\tn.checkSubnetExistInV4Routes()\n\t\t\tn.checkSubnetExistInV6Routes()\n\t\t}\n\t}\n}\n\nfunc (n *RouteNetwork) checkSubnetExistInV4Routes() {\n\tn.checkSubnetExistInRoutes(n.routes, netlink.FAMILY_V4)\n}\n\nfunc (n *RouteNetwork) checkSubnetExistInV6Routes() {\n\tn.checkSubnetExistInRoutes(n.v6Routes, netlink.FAMILY_V6)\n}\n\nfunc (n *RouteNetwork) checkSubnetExistInRoutes(routes []netlink.Route, ipFamily int) {\n\t// 首先通过 netlink 获取当前节点上的所有路由表\n\trouteList, err := netlink.RouteList(nil, ipFamily)\n\tif err == nil {\n\t\t// 内存里的配置跟当前的节点配置做遍历对比.\n\t\tfor _, route := range routes {\n\t\t\texist := false\n\t\t\tfor _, r := range routeList {\n\t\t\t\tif r.Dst == nil {\n\t\t\t\t\t// 跳过\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif routeEqual(r, route) {\n\t\t\t\t\t// 一致则标记已存在\n\t\t\t\t\texist = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 如不存在, 则进行路由表添加, 其实是个修复的过程.\n\t\t\tif !exist {\n\t\t\t\tif err := netlink.RouteAdd(\u0026route); err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tlog.Infof(\"Route recovered %v : %v\", route.Dst, route.Gw)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlog.Errorf(\"Error fetching route list. Will automatically retry: %v\", err)\n\t}\n}\n```\n\n### host-gw 适用于二层网络\n\nflannal host-gw 方案当前只适用于同一个二层网络下, node 之间需要在一个 vlan 里, 因为 host-gw 在数据链路层会把目标的 MAC 地址换成目标 node 上的 MAC. 但如果两个 node 在不同的 vlan 虚拟局域网里, 那么由于 vlan 会隔离抑制广播, 通过 arp 广播自然无法拿到目标的 mac 网卡地址, 自然就无法把数据报文发出去.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302052018408.png)\n\n## 总结\n\n下图 subnet manager 使用 k8s kube-apiserver, backend 选用 vxlan 网络.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302041931615.png)\n\n下图 subnet manager 使用 k8s kube-apiserver, backend 选用 host-gw 网络.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/202302051020026.png)\n\nflannel 的实现原理大体分析完了, 其原理就是监听 etcd 或者 k8s apiserver 的 node 对象, 从 node 资源对象中解析到 spec.PodCIDR 等字段来构建 lease 对象. 根据 backend 的类型构建不同的 network 对象. 同时将 lease 信息存储到 /run/flannel/subnet.env 文件\n\nnetwork 控制器从 subnet manager 监听获取 lease 对象, 然后配置网络. vxlan network 则需要进行 ARP, FDB, Route 配置流程, 而 host-gw 只需配置路由 route 规则即可.\n\n本文主要分析的 flannel 的代码实现过程, 后面会跟进继续分析 calico 和 cilium 的实现原理, 请关注订阅 [http://github.com/rfyiamcool/notes](http://github.com/rfyiamcool/notes)","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/fortio-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7":{"title":"","content":"![upgit_20221228_1672194984.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221228_1672194984.png)\n","lastmodified":"2025-03-26T03:48:43.172318567Z","tags":null},"/gdb%E8%B0%83%E8%AF%95go%E4%BB%A3%E7%A0%81":{"title":"","content":"官方使用gdb：Debugging Go Code with GDB [https://golang.org/doc/gdb](https://golang.org/doc/gdb)\n### linux 下载安装gdb\n`apt-get install gdb`\n\ngdb调试go代码时，gdb版本要≥7.5 同时禁用编译器的优化使得方便调试：`go build -gcflags=all=\"-N -l\"`\n### gdb调试常用命令\n\n- `r`：run，执行程序\n\n- `n`：next，下一步，不进入函数\n\n- `s`：step，下一步，会进入函数\n\n- `b`：breakponit，设置断点\n\n- `l`：list，查看源码\n\n- `c`：continue，继续执行到下一断点\n\n- `bt`：backtrace，查看当前调用栈\n\n- `p`：print，打印查看变量\n\n- `q`：quit，退出 GDB\n\n- `whatis`：查看对象类型\n\n- `info breakpoints`：查看所有的断点\n\n- `info locals`：查看局部变量\n\n- `info args`：查看函数的参数值及要返回的变量值\n\n- `info frame`：堆栈帧信息\n\n- `info goroutines`：查看 goroutines 信息。在使用前 ，需要注意先执行 source /usr/local/go/src/runtime/runtime-gdb.py\n\n- `goroutine 1 bt`：查看指定序号的 goroutine 调用堆栈\n\n比较优雅的打印：\n```bash\n# 在string array slice上使用$len $cap\n(gdb) p $len(utf)\n$23 = 4\n(gdb) p $cap(utf)\n$24 = 4\n\n(gdb) p i\n$4 = {str = \"cbb\"}\n(gdb) whatis i\ntype = regexp.input\n```\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/git-%E6%96%87%E6%A1%A3":{"title":"git 文档","content":"\n-   **feat：**提交新功能\n-   **fix**：修复了bug\n-   **docs**：只修改了文档\n-   **style**：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等）\n-   **refactor**：代码重构，既没修复bug也没有添加新功能\n-   **perf**：性能优化，提高性能的代码更改\n-   **test**：添加或修改代码测试\n-   **chore**：对构建流程或辅助工具和依赖库（如文档生成等）的更改\n\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/git-proxy":{"title":"git proxy","content":"\n[git 设置和取消代理 (github.com)](https://gist.github.com/laispace/666dd7b27e9116faece6)\n## windows git 设置代理\n简单方法：\n设置环境变量\n- http_proxy: 127.0.0.1:1080\n- https_proxy: 127.0.0.1:1080\n\n\nwindows git 相关的配置文件：`C:\\Users\\renyunkang\\.gitconfig`\n``` toml\n[user]\n\temail = rykren1998@gmail.com\n\tname = renyunkang\n\t\n[url \"git@github.com:\"]\n        insteadOf = https://github.com/\n        \n[core]\n\tautocrlf = false\n[http]\n    proxy = http://127.0.0.1:1080\n    # proxy = socks5://127.0.0.1:1080\n[https]\n    proxy = https://127.0.0.1:1080\n    # proxy = socks5://127.0.0.1:1080\n    \n# 只对 github 生效\n# [http \"https://github.com\"]\n #    proxy = http://127.0.0.1:1080\n# [https \"https://github.com\"]\n#     proxy = https://127.0.0.1:1080\n# 使用命令：\n# - git config --global http.https://github.com.proxy socks5://127.0.0.1:1080\n# - git config --global https.proxy socks5://127.0.0.1:1080\n```\n\n### 配置免密\n####  1. 保存用户信息\n// 配置输入一次密码 之后保存\ngit config --global credential.helper store\n通过store的方式会将你的账号密码以明文的形式存在`~/.git-credentials`文件里，大致长这样：\n```\n$ cat ~/.git-credentials  \nhttps://username:password@github.com\n```\n\n\n#### 2. 使用 ssh：\n创建/修改 `C:\\Users\\renyunkang\\.ssh\\config`  ~/.ssh/config(linux)\n```\nHost github.com\nUser git\nHostname github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 22\nProxyCommand connect -S 127.0.0.1:1080 %h %p\n```\n支持多个不同github 账号不同ssh\n```\nHost personal-username.github.com  \n  HostName github.com  \n  AddKeysToAgent yes\n  LogLevel=quiet\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github_personal \n\nHost company-username.github.com  \n  HostName github.com  \n  AddKeysToAgent yes\n  LogLevel=quiet\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github_company\n```\n\n\n\n没有梯子可以在对应的github.com后面添加[cnpmjs.org](https://github.com.cnpmjs.org/cpselvis/geektime-webpack-course.git)\n\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/git-submodule":{"title":"git  submodule","content":"\n1. 下载了项目之后初始化子模块\n\tgit submodule update --init --recursive\n2. 添加子模块\n\t*git submodule add url path*\n\tgit  submodule add -b dev https://github.com/xx/xx content\n3. 删除子模块\n\t- 删除 submodule 缓存  git rm --cached submodule_name\n\t- 删除文件 rm -rf content/\n\t- 删除项目目录下.gitmodules文件中子模块相关条目\n\t- 删除配置项中 .git/config 子模块相关条目\n\t- 删除模块下 .git/module/* 的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可\n4. 更新子模块\n\t- git submodule update --init --recursive\n\t- git submodule update --init xxx\n\t- git submodule update --recursive --remote  \n\n执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：\n- git add .\n- git rm --cached 子模块名称\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/git-sync":{"title":"git sync","content":"由于新的需求在仓库(upstream)新建了一个分支new，然而我fork的origin(远程个人仓库，非电脑中的本地仓库)中没有这个分支，我需要在new分支上进行开发并与upstream追踪，如何将新分支new插入origin中了，步骤如下:\n1：创建并切换到新的上游分支的本地版本 git checkout -b new upstream/new；\n2：将新的分支推送到个人远程仓库 git push -u origin new,-u跟踪指定的远程；\n\n\n**同步其他提交**\n```bash\ngit remote add upstream https://github.com/kubesphere/porter-website\ngit switch -c rename_to_openelb\n\ngit reset --soft HEAD^\ngit commit -s -m \"rename porterlb to openelb\"\ngit push -u origin rename_to_openelb\ngit push --force-with-lease origin rename_to_openelb\n\n\n# 同步\ngit fetch upstream \ngit checkout master\ngit rebase upstream/master\n\n# 在新分支开发\n# Then make your development branch in sync with master branch \ngit checkout new_feature \ngit rebase -i master\n\n\n./hack/verify-all.sh\nmake goimports\nmake tests\n```\n\ngit cherry-pick\n[Apply changes from one Git branch to another | GoLand Documentation (jetbrains.com)](https://www.jetbrains.com/help/go/apply-changes-from-one-branch-to-another.html#cherry-pick)\n- cherry-pick 一个提交\n\t- `git cherry-pick \u003cHashA\u003e`\n- cherry-pick 多个提交\n\t- `git cherry-pick \u003cHashA\u003e \u003cHashB\u003e`\n\t- 转移一系列的连续提交 `git cherry-pick A..B`，提交 A 必须早于提交 B\n\n\ngit 压缩提交\n```bash\ngit rebase -i HEAD~4\n\n修改第2-4行的第一个单词pick为squash（或者简写为 `s`），意味着将最后三次的提交压缩到倒数第四次的提交，即pick所在的提交做了4次动作\n\n或者使用提交 hash\ngit rebase --interactive [commit-hash]\n`[commit-hash]` 就是你要压缩的提交范围的起始提交之前的一次提交的 hash。\n\n可以创建新的提交\n```\n\n\n### 标签\n1. 拉取远程仓库标签到本地\n\tgit fetch --tags\n2. 拉取上游标签提交到远程仓库\n\t配置 upstream =\u003e fetch 到本地 =\u003e git push origin --tags\n3. 删除本地标签\n\tgit tag -d v0.6.1\n\tgit tag -d $(git tag -l)  或者 git tag -l | xargs git tag -d\n4. 删除远程标签\n\t- 删除本地之后推 git push origin :refs/tags/v0.6.1\n\t- 未尝试：git push --delete origin $(git tag -l)\n5. 打标签 + 推送\n\t- git tag v1.0\n\t- git push origin v1.0\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/github-release":{"title":"github release","content":"\n指导文档：\n- [发布 assets - GitHub 文档](https://docs.github.com/zh/rest/releases/assets?apiVersion=2022-11-28)\n- [Release CNI Plugins v1.3.0 · renyunkang/plugins (github.com)](https://github.com/renyunkang/plugins/releases/tag/v1.3.0)\n\napt-get install gridsite-clients\n\n```shell\n#!/bin/bash\n\nTOKEN=\"xxxx\"\nOWNER=\"renyunkang\"\nREPO=\"plugins\"\nRELEASEID=\"xxx\"\n\n# # get release id\n# curl -L -H \"Accept: application/vnd.github+json\" \\\n#  -H \"Authorization: Bearer $TOKEN\" \\\n#  -H \"X-GitHub-Api-Version: 2022-11-28\"  \\\n#  https://api.github.com/repos/$OWNER/$REPO/releases/latest\n##  https://api.github.com/repos/$OWNER/$REPO/releases/tags/v1.1.1\n\nfiles=(cni-plugins*)\n\nfor i in \"${files[@]}\"\ndo\n    echo \"$i\"\n    curl -L -X POST -H \"Accept: application/vnd.github+json\" \\\n     -H \"Authorization: Bearer $TOKEN\"  \\\n     -H \"X-GitHub-Api-Version: 2022-11-28\"   -H \"Content-Type: application/octet-stream\"  \\\n    \"https://uploads.github.com/repos/$OWNER/$REPO/releases/$RELEASEID/assets?name=$(urlencode \"$i\")\"  \\\n    --data-binary \"@$i\"\n    echo \"\"\n    echo \"\"\ndone\n```","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/go-%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4":{"title":"go 工作空间","content":"[go work 工作空间正确的使用方式](https://juejin.cn/post/7145855715565895710)\n- 初始化 go workspace\n\t- `go work init`\n- 使用项目\n\t- `go work use [-r] [项目1 项目2 ...]`    -r 递归查找\n- 删除项目\n\t- `go work -dropedit=项目`\n- 格式化 go.work\n\t- `go work edit -fmt go.work`\n```work\ngo 1.19\n\nuse (\n\t./hello\n\t./example \n)\n\nreplace (\n\tgithub.com/link1st/example =\u003e ./example \n)\n```\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/go-%E5%B9%B6%E5%8F%91":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-%E6%89%93%E5%8C%85%E5%92%8C%E5%B7%A5%E5%85%B7%E9%93%BE":{"title":"","content":"**go mod**\n```powershell\nverifying git.ghostcloud.cn/newben/log@v0.0.2: checksum mismatch\n        downloaded: h1:5bclc0fb8Q3FSzheOP1AhqYNSDvZu4i7021j5YEa3zQ=\n        go.sum:     h1:FUGx1ZtSCxsGW/BzbMrGp9XN6eKkigN3J4i1q5kughc=\n\nSECURITY ERROR\nThis download does NOT match an earlier download recorded in go.sum.\nThe bits may have been replaced on the origin server, or an attacker may\nhave intercepted the download attempt.\n\nFor more information, see 'go help module-auth'.\n```\n\n```\ngo clean -modcache\n删除 go.mod下面的go.sum 重新go mod tidy\n```\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-%E7%B1%BB%E5%9E%8B":{"title":"","content":"值类型给编译器提供`规模`和`表示`两部分\n当声明变量时，这个变量对应的值总是会被初始化。这个值要么用指定的值初始化，要么用零值（即变量类型的默认值）做初始化。对数值类型来说，零值是 0；对字符串来说，零值是空字符串；对布尔类型，零值是 false。对这个例子里的结构，结构里每个字段都会用零值初始化。\n\n```go\npackage main\n\ntype Duration int64\n\nfunc main() {\n\tvar dur Duration\n\tdur = int64(1000)\n}\n\n// # command-line-arguments\n// .\\main.go:7:6: cannot use int64(1000) (type int64) as type Duration in assignment\n```\n虽然 int64 类型是基础类型，Duration 类型依然是一个独立的类型。两种不同类型的值即便互相兼容，也不能互相赋值。**编译器不会对不同类型的值做隐式转换**。\n\n\n## 方法\n方法能给用户定义的类型添加新的行为。方法实际上也是函数，只是在声明时，在关键字func 和方法名之间增加了一个参数。\n关键字 func 和函数名之间的参数被称作接收者，将函数与接收者的类型绑在一起。如果一个函数有接收者，这个函数就被称为方法。\nGo 语言里有两种类型的接收者：`值接收者`和`指针接收者`。\n\n```go\n// 这个示例程序展示如何声明并使用方法\npackage main\n\nimport (\n    \"fmt\"\n)\n\n// user 在程序里定义一个用户类型\ntype user struct {\n    name string\n    email string\n}\n\n// notify 使用值接收者实现了一个方法\nfunc (u user) notify() {\n    fmt.Printf(\"Sending User Email To %s\u003c%s\u003e\\n\", u.name, u.email)\n}\n\n// changeEmail 使用指针接收者实现了一个方法\nfunc (u *user) changeEmail(email string) {\n    u.email = email\n}\n\n// main 是应用程序的入口\nfunc main() {\n    // user 类型的值可以用来调用\n    // 使用值接收者声明的方法\n    bill := user{\"Bill\", \"bill@email.com\"}\n    bill.notify()\n\n    // 指向 user 类型值的指针也可以用来调用\n    // 使用值接收者声明的方法\n    lisa := \u0026user{\"Lisa\", \"lisa@email.com\"}\n    lisa.notify()\n\n    // user 类型的值可以用来调用\n    // 使用指针接收者声明的方法\n    bill.changeEmail(\"bill@newdomain.com\")\n    bill.notify()\n\n    // 指向 user 类型值的指针可以用来调用\n    // 使用指针接收者声明的方法\n    lisa.changeEmail(\"lisa@newdomain.com\")\n    lisa.notify()\n}\n```\nnotify 方法的接收者被声明为 user 类型的值。如果使用值接收者声明方法，调用时会使用这个值的一个副本来执行。\n\n是使用值接收者还是指针接收者，不应该由该方法是否修改了接收到的值来决定。这个决策应该基于该类型的本质。\n这条规则的一个例外是，需要让类型值符合某个接口的时候，即便类型的本质是非原始本质的，也可以选择使用值接收者声明方法。这样做完全符合接口值调用方法的机制。\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-%E8%B0%83%E5%BA%A6%E5%99%A8":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-Convey%E6%B5%8B%E8%AF%95":{"title":"","content":"go convey在开启了一个协程，并在其中进行断言，触发panic\n```go\n//panic: Convey operation made without context on goroutine stack.Hint: Perhaps you meant to use `Convey(..., func(c C){...})` ?\n\n// 使用以下解决：\nfunc TestFoobar(t *testing.T) {\n\tConvey(\"Verify foobar\", t, func(c C) {\n\n\t\ttestChan := make(chan bool)\n\n\t\tgo func() {\n\t\t\terr := foobar()\n\n\t\t\tc.So(err, ShouldBeNil)\n\n\t\t\ttestChan \u003c- true\n\t\t}()\n\n\t\t_ = \u003c-testChan\n\t})\n}\n\n// 但是使用func(c C)当其中断言失败后，也会触发panic\nVerify foobar ✘panic: FAILURE_HALT\n\n\n// 解决办法如下：\n// 1.So() expressions normally panic when they fail (the FailureMode).\n// This occurs at github.com/smartystreets/goconvey/convey/context.go:270\n// 2.When a panic occurs in a goroutine, and nothing recover()'s it, go terminates the application.\nfunc TestFoobar(t *testing.T) {\n\tConvey(\"Verify foobar\", t, FailureContinues, func(c C) {\n\n\t\ttestChan := make(chan bool)\n\n\t\tgo func() {\n\t\t\terr := foobar()\n\n\t\t\tc.So(err, ShouldBeNil)\n\n\t\t\ttestChan \u003c- true\n\t\t}()\n\n\t\t_ = \u003c-testChan\n\t})\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/go-context":{"title":"","content":"context控制调用函数的超时返回\n```go\nfunc main() {\n    ...\n    // 使用 context.WithTimeout 创建具备超时检测能力的 context 对象来控制\n    ctx, _ := context.WithTimeout(context.Background(), time.Second)\n    var reply int\n    err := client.Call(ctx, \"Foo.Sum\", \u0026Args{1, 2}, \u0026reply)\n    ...\n}\n\n// Call invokes the named function, waits for it to complete,\n// and returns its error status.\nfunc (client *Client) Call(ctx context.Context, serviceMethod string, args, reply interface{}) error {\n\tcall := client.Go(serviceMethod, args, reply, make(chan *Call, 1))\n\tselect {\n\tcase \u003c-ctx.Done():\n\t\tclient.removeCall(call.Seq)\n\t\treturn errors.New(\"rpc client: call failed: \" + ctx.Err().Error())\n\tcase call := \u003c-call.Done:\n\t\treturn call.Error\n\t}\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.199318472Z","tags":null},"/go-defer":{"title":"","content":"### defer应用场景\nGO defer会在当前函数返回前执行传入的函数，经常被用于关闭文件描述符、关闭数据库连接以及解锁资源，在函数调用结束后完成一些收尾工作。\n\n常见问题：\n\n- `defer` 关键字的调用时机以及多次调用 `defer` 时执行顺序是如何确定的；\n- `defer` 关键字使用传值的方式传递参数时会进行预计算，导致不符合预期的结果；\n### 1. 执行顺序\n```go\nfunc defer_call() {\n\tdefer func() { fmt.Println(\"打印前\") }()\n\tdefer func() { fmt.Println(\"打印中\") }()\n\tdefer func() { fmt.Println(\"打印后\") }()\n\n\tfmt.Println(\"触发异常\")\n}\n// 执行结果\n// 触发异常\n// 打印后\n// 打印中\n// 打印前\n```\n注意：`defer` 传入的函数不是在退出代码块的作用域时执行的，它只会在当前函数和方法返回之前被调用。\n### 2. defer变量传递\n```go\nfunc calc(index string, a, b int) int {\n\tret := a + b\n\tfmt.Println(index, a, b, ret)\n\treturn ret\n}\n\nfunc main() {\n\ta := 1\n\tb := 2\n\tdefer calc(\"1\", a, calc(\"10\", a, b))\n\ta = 0\n\tdefer calc(\"2\", a, calc(\"20\", a, b))\n\tb = 1\n\tfmt.Println(\"hello\")\n}\n// 执行结果\n// 10 1 2 3\n// 20 0 2 2\n// hello\n// 2 0 2 2\n// 1 1 3 4\n```\n在go中所有的函数调用都是传值，调用defer关键字会立刻拷贝函数中引用的外部参数，所以calc(\"10\", a, b)的结果不是在main函数退出之前计算的，而是在关键字调用的时候进行预计算参数。如果想让函数在main函数退出时进行计算，我们只需要向defer关键字传入匿名函数即可。\n### 3. defer 崩溃恢复 recover + 打印栈信息\n【注意】**panic仅有最后一个可以被revover捕获**\n```go\n// print stack trace for debug\nfunc trace(message string) string {\n\tvar pcs [32]uintptr\n\tn := runtime.Callers(3, pcs[:]) // skip first 3 caller 过滤前3条记录\n\n\tvar str strings.Builder\n\tstr.WriteString(message + \"\\nTraceback:\")\n\tfor _, pc := range pcs[:n] {\n\t\tfn := runtime.FuncForPC(pc)\n\t\tfile, line := fn.FileLine(pc)\n\t\tstr.WriteString(fmt.Sprintf(\"\\n\\t%s:%d\", file, line))\n\t}\n\treturn str.String()\n}\n\n// 获取handler\nfunc Recovery() HandlerFunc {\n\treturn func(c *Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tmessage := fmt.Sprintf(\"%s\", err)\n\t\t\t\tlog.Printf(\"%s\\n\\n\", trace(message))\n\t\t\t}\n\t\t}()\n\n\t\txxx\n\t}\n}\n\n```\n```go\nfunc main()  {\n    defer func() {\n       if err:=recover();err!=nil{\n           fmt.Println(err)\n       }else {\n           fmt.Println(\"fatal\")\n       }\n    }()\n\n    defer func() {\n        panic(\"defer panic\")\n    }()\n    panic(\"panic\")\n}\n// defer panic\n// 触发panic(\"panic\")后顺序执行defer，但是defer中还有一个panic，所以覆盖了之前的panic(\"panic\")\n```\n### 4. defer 与 return执行顺序 -- 关注变量的作用域\ndefer 在 return 语句之后执行，但在函数退出之前，defer 可以修改返回值。\n```go\nfunc main() {\n\tprintln(DeferFunc1(1))\n\tprintln(DeferFunc2(1))\n\tprintln(DeferFunc3(1))\n}\n\nfunc DeferFunc1(i int) (t int) {\n\tt = i\n\tdefer func() {\n\t\tt += 3\n\t}()\n\treturn t\n}\n\nfunc DeferFunc2(i int) int {\n\tt := i\n\tdefer func() {\n\t\tt += 3\n\t}()\n\treturn t\n}\n\nfunc DeferFunc3(i int) (t int) {\n\tdefer func() {\n\t\tt += i\n\t}()\n\treturn 2\n}\n// 输出结果为： 4 1 3\n// 函数返回值名字会在函数起始处被初始化为对应类型的零值并且作用域为整个函数\n// DeferFunc1有函数返回值t作用域为整个函数，在return之前defer会被执行，所以t会被修改，返回4;\n// DeferFunc2函数中t的作用域为函数，返回1; \n// DeferFunc3同一，修改后返回3\n\n// 原因就是return会将返回值先保存起来，对于无名返回值来说，保存在一个临时对象中，defer是看不到这个临时对象的；而对于有名返回值来说，就保存在已命名的变量中。\n// 虽然打印出来i的地址是一致的，但go tool compile -S test.go得到汇编代码后观察：把1放到\"\".i+24(SP)这个内存地址上，然后又把1赋给了\"\".~r0+48(SP)。\n// 无名返回值的情况，在return的时候开辟了一个新内存空间，后续的defer读取的还是\"\".i+24(SP)这样的内存地址而无法读取临时空间的值。\n// return在函数最后返回的也是\"\".~r0+48(SP)对应的值即1000\n```\n### 参考：\n[https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/](https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/)\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-interface":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-mock-%E6%B5%8B%E8%AF%95":{"title":"","content":"```go\n=== RUN   Testxxx\n    Testxxx: box_test.go:239: missing call(s) to *xxxmock.Mockxxx.xxx(is anything, is anything, is anything) xxx/xxx/xxx/box_test.go:202\n    Testxxx: box_test.go:239: aborting test due to missing call(s)\n--- FAIL: Testxxx (0.00s)\n```\n\n这主要是因为打桩之后，允许对应的函数调用次数为大于等于1，因此可以打桩时设置调用次数为0或者更多次。\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/go-newmake":{"title":"","content":"Go语言中new和make是内建的两个函数，主要用来分配内存。\n在Go语言中对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。而对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。\n\n### new\n根据传入的类型分配一片内存空间并返回指向这片内存空间的指针。使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。new的函数签名如下：\n```go\nfunc new(Type) *Type\n```\n### \n### make\nmake也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建。我们在代码中往往都会使用如下所示的语句初始化这三类基本类型，这三个语句分别返回了不同类型的数据结构：\n```go\nslice := make([]int, 0, 100)\nhash := make(map[int]bool, 10)\nhash := make(map[int]bool)\nch := make(chan int, 5)\n\n// slice 是一个包含 data、cap 和 len 的结构体 reflect.SliceHeader；\n// hash 是一个指向 runtime.hmap 结构体的指针；\n// ch 是一个指向 runtime.hchan 结构体的指针；\n```\n引用类型需要使用make来构造，如果不先构造并将构造后的值赋值给变量的话，在使用这个引用类型的变量时就会出错，因为其引用类型的变量默认的零值为nil。\n### new与make的区别\n\n1. 二者都是用来做内存分配的。\n2. make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；\n3. 而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。\n\n参考：\n\n- [https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/](https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/)\n- [https://www.liwenzhou.com/posts/Go/07_pointer/](https://www.liwenzhou.com/posts/Go/07_pointer/)\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E5%BA%93":{"title":"","content":"go-ping: \n\n- [https://github.com/go-ping/ping](https://github.com/go-ping/ping)\n- [https://www.cnblogs.com/wlw-x/p/14169607.html](https://www.cnblogs.com/wlw-x/p/14169607.html)\n\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang%E5%9F%BA%E7%A1%80":{"title":"","content":"1. reflect 反射 - 获取某个结构体的所有方法\n\n通过反射实现结构体与服务的映射关系\n\ninterface与reflect\n\ninterface  \n![](https://cdn.nlark.com/yuque/0/2021/webp/12923798/1618642922443-99b264f1-2148-4b0f-8cd5-6ca6ed26e77e.webp#averageHue=%23b6d4b6\u0026height=600\u0026id=SYYi5\u0026originHeight=600\u0026originWidth=520\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=0\u0026status=done\u0026style=none\u0026title=\u0026width=520)\n\n类型转换  [https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-03-cgo-types.html](https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-03-cgo-types.html)\n\n\n2. Go解决现代编程难题\n   - 快速的开发/编译速度\n   - 内置并发机制，无须特定的线程库\n   - 类型系统简单高效，专注代码复用\n   - 自带垃圾回收器，无须自己管理内存\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/12923798/1623553559463-6fdc45e2-708c-40ff-8ba2-d32b421d43e8.jpeg)\ngo 包管理\n\n- vendor\n- go mod\n- package import\n\n一个包定义一组编译过的代码，包的名字类似命名空间，可以用来间接访问包内声明的标识符。这个特性可以把不同包中定义的同名标识符区别开。\nimport中使用下划线，为了让 Go 语言对包做初始化操作，但是并不使用包里的标识符。为了让程序的可读性更强， Go 编译器不允许声明导入某个包却不使用。下划线让编译器接受这类导入，并且调用对应包内的所有代码文件里定义的 init 函数。\n编译器查找包的时候，总是会到GOROOT和GOPATH环境变量引用的位置去查找。\n\n**go 函数的编码规范：**\n声明一个函数返回一个值和一个错误值。如果发生了错误，永远不要使用该函数返回的另一个值，这时必须忽略另一个值，否则程序会产生更多的错误，甚至崩溃。\n\n**go map**\n查找 map 里的键时，有两个选择：要么赋值给一个变量，要么为了精确查找，赋值给两个变量。赋值给两个变量时第一个值和赋值给一个变量时的值一样，是 map 查找的结果值。如果指定了第二个值，就会返回一个布尔标志，来表示查找的键是否存在于 map 里。如果这个键不存在， map 会返回其值类型的零值作为返回值，如果这个键存在， map 会返回键所对应值的副本。\n\n**goroutine**\n一个 goroutine 是一个独立于其他函数运行的函数。使用关键字 go 启动一个 goroutine，并对这个 goroutine 做并发调度。同时可能使用关键字 go 启动了一个匿名函数作为 goroutine。 匿名函数是指没有明确声明名字的函数。\n\n指针变量可以方便地在函数之间共享数据。使用指针变量可以让函数访问并修改一个变量的状态，而这个变量可以在其他函数甚至是其他 goroutine 的作用域里声明。在 Go 语言中，所有的变量都以值的方式传递。因为指针变量的值是所指向的内存地址，在函数间传递指针变量，是在传递这个地址值，所以依旧被看作以值的方式在传递。\n\n**Go闭包**\nGo 语言支持闭包。因为有了闭包，函数可以直接访问到那些没有作为参数传入的变量。匿名函数并没有拿到这些变量的副本，而是直接访问外层函数作用域中声明的这些变量本身。\n```go\n\t// Launch a goroutine for each feed to find the results.\n\tfor _, feed := range feeds {\n\t\t// Retrieve a matcher for the search.\n\t\tmatcher, exists := matchers[feed.Type]\n\t\tif !exists {\n\t\t\tmatcher = matchers[\"default\"]\n\t\t}\n\n\t\t// Launch the goroutine to perform the search.\n\t\tgo func(matcher Matcher, feed *Feed) {\n\t\t\tMatch(matcher, feed, searchTerm, results)\n\t\t\twaitGroup.Done()\n\t\t}(matcher, feed)\n\t}\n```\n这里就应用了闭包。实际上，在匿名函数内访问 searchTerm 和 results 变量，也是通过闭包的形式访问的。因为matcher 和 feed 变量每次调用时值不相同，所以并没有使用闭包的方式访问这两个变量\n\n命名接口的时候，也需要遵守 Go 语言的命名惯例。如果接口类型只包含一个方法，那么这个类型的名字以 er 结尾。 如\n果接口类型内部声明了多个方法，其名字需要与其行为关联。\n空结构在创建实例时，不会分配任何内存。这种结构很适合创建没有任何状态的类型。\n\n如果声明函数的时候带有接收者，则意味着声明了一个方法。这个方法会和指定的接收者的类型绑在一起。 在我们的例子里， Search 方法与 defaultMatcher 类型的值绑在一起。这意味着我们可以使用 defaultMatcher 类型的值或者指向这个类型值的指针来调用 Search 方法。无论我们是使用接收者类型的值来调用这个方，还是使用接收者类型值的指针来调用这个方法，编译器都会正确地引用或者解引用对应的值，作为接收者传递给 Search 方法。\n\n| func (m defaultMatcher) Search |\n| --- |\n\n\nappend内置函数，根据切片需要，决定是否要增加切片的长度和容量。\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/golang%E6%A0%87%E5%87%86%E5%BA%93":{"title":"","content":"# [Packages](https://golang.org/pkg/) ：[https://golang.org/pkg/](https://golang.org/pkg/)\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang-%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang-%E6%B5%8B%E8%AF%95":{"title":"","content":"go test -v  -run  测试函数名字\n\n[\n](https://geektutu.com/post/geecache-day1.html)\n[Go Test 单元测试简明教程](https://geektutu.com/post/quick-go-test.html)\n[Go Mock (gomock)简明教程链接](https://geektutu.com/post/quick-gomock.html)\n[go测试工具goconvey的使用](https://www.cnblogs.com/feixiangmanon/p/11531328.html)\n[GoConvey测试框架使用指南](https://www.cnblogs.com/WayneZeng/p/9290711.html)\n[goconvey - 课时 1：优雅的单元测试](https://studygolang.com/articles/1513)\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang-%E7%AE%A1%E9%81%93":{"title":"","content":"golang 管道的设计原因\n\n1.  阻塞  同步、通信  先进先出\n2. 管道用于进程间通信 -- 同步、利用阻塞读写 -- 类似与WaitGroup的同步示例\n3. 管道实现的生产者、消费者模型 \n4. 注意事项：管道关闭\n\n## 通信\n协程是并发编程的基础，而管道是并发中协程之间沟通的桥梁，很多时候我们启动一个协程去执行完一个操作，执行操作之后我们需要返回结果，或者多个协程之间需要相互协作，先看一个例子：\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar wg = sync.WaitGroup{}\n\nfunc main() {\n    wg.Add(2)\n\n    go say(\"Hello\")\n    go say(\"World\")\n\n    wg.Wait()\n}\n\nfunc say(s string) {\n    fmt.Println(\"I say: \" + s)\n    wg.Done()\n}\n```\n开启2个协程，打印了一个Hello 和 World，假设我们现在不需要直接打印结果，我们需要say函数把结果返回给主进程，该怎么做呢？直接return肯定是行不通的，这时候就需要使用管道来通信了：\n```go\npackage main\n\nimport \"fmt\"\n\nvar ch = make(chan string)\n\nfunc main() {\n    go say(\"Hello\")\n    go say(\"World\")\n\n    for i := 0; i \u003c 2; i++ {\n    \tfmt.Println(\u003c-ch)\n    }\n    close(ch)\n}\n\nfunc say(s string) {\n\tch \u003c- \"I say: \" + s\n}\n```\n\n## 不要通过共享内存来通信，而应通过通信来共享内存\n使用全局变量，存在同时读写的问题，并非线程安全\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nvar num = 0\n\nfunc main() {\n\twg := sync.WaitGroup{}\n\twg.Add(2)\n\tgo func() {\n\t\tfor i := 0; i \u003c 20000; i++ {\n\t\t\tadd(1)\n\t\t}\n\t\twg.Done()\n\t}()\n\n\tgo func() {\n\t\tfor i := 0; i \u003c 10000; i++ {\n\t\t\tadd(2)\n\t\t}\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\tfmt.Printf(\"num = %d\\n\", num)\n}\n\nfunc add(n int) {\n\tnum = num + n\n}\n```\n上面这段代码明显是有问题的，我们在2个协程里面同时对一个全局变量进行加法必然会存在数据竞争的这种情况，我们在执行的时候可以使用 `--race` 查看数据竞争的情况。\n\n\u003e jwang@jwang:~/Documents/Work/MyBlog/Other$ go run --race main.go\u003e  ================== WARNING: DATA RACE Read at 0x0000005f1648 by goroutine 7: main.main.func2() \u003e /home/jwang/Documents/Work/MyBlog/Other/main.go:37 +0x48 Previous write at 0x0000005f1648 by goroutine 6: main.main.func1()\n\u003e /home/jwang/Documents/Work/MyBlog/Other/main.go:37 +0x69 Goroutine 7 (running) created at: main.main() \n\u003e /home/jwang/Documents/Work/MyBlog/Other/main.go:23 +0x8b Goroutine 6 (running) created at: main.main() \n\u003e /home/jwang/Documents/Work/MyBlog/Other/main.go:16 +0x69\n\u003e  ================== num = 26447 Found 1 data race(s) exit status 66\n\u003e  \n本质上这是通过共享内存来通信，当然也不是说一定不能使用共享内存，想要解决这个问题也很简单，我们只需要给say函数里面加锁即可，关键代码如下：\n```go\nvar locker = sync.Mutex{}\nfunc add() {\n    locker.Lock()\n    defer locker.Unlock()\n    num++\n}\n```\n通过一把排它锁，我们保证同一时刻只能有一个协程操作该变量，就不会出现“data race”了\n使用channel，在add方式里面获取channel的值进行计算，因为channel是先进先出，类似队列，所以不会出现数据竞争的情况。\n\n使用channel通信，实现资源的共享\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar (\n\t\twg = sync.WaitGroup{}\n\t\twg1 = sync.WaitGroup{}\n\t\tnum = 0\n\t\tch = make(chan int)\n\t)\n\n\twg.Add(2)\n\twg1.Add(1)\n\tgo func() {\n\t\tfor i := 0; i \u003c 200000; i++ {\n\t\t\tch \u003c- 1\n\t\t}\n\t\twg.Done()\n\t}()\n\n\tgo func() {\n\t\tfor i := 0; i \u003c 100000; i++ {\n\t\t\tch \u003c- 2\n\t\t}\n\t\twg.Done()\n\t}()\n\n\tgo add(\u0026num, ch, \u0026wg1)\n\n\twg.Wait()\n\tclose(ch)\n\twg1.Wait()\n\n\tfmt.Printf(\"num = %d\\n\", num)\n}\n\nfunc add(num *int, ch chan int, wg *sync.WaitGroup) {\n\tfor v := range ch {\n\t\t*num = *num + v\n\t}\n\twg.Done()\n}\n```\n## 使用管道实现生产者消费者模型\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"time\"\n)\n\nfunc main() {\n    var ch = make(chan string)\n    go producer(ch)\n    go consumer(ch)\n\n    //阻塞，防止进程退出\n    for {\n    \tselect {}\n    }\n}\n\nfunc producer(ch chan string) {\n    ticker := time.NewTicker(time.Millisecond * 500)\n    for {\n        select {\n            case \u003c-ticker.C:\n            ch \u003c- \"msg: \" + strconv.Itoa(int(time.Now().Unix()))\n        }\n    }\n}\n\nfunc consumer(ch chan string) {\n    for i := 0; i \u003c 5; i++ {\n        go func(i int) {\n            for {\n                res := \u003c-ch\n                fmt.Printf(\"消费者 %d: %s\\n\", i, res)\n            }\n        }(i)\n    }\n}\n```\n\n## 注意：死锁、关闭\n**【死锁】**管道可以有一个缓存，比如说缓存为3个，意味着你可以先往管道里面放3个元素，然后再去接收。\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var ch = make(chan int, 3)\n    ch \u003c- 1\n    ch \u003c- 2\n    ch \u003c- 3\n    // 如果你尝试放第4个元素则会产生死锁！\n    //ch \u003c- 4\n    \n    for i := 0; i \u003c 3; i++ {\n    \tfmt.Println(\u003c-ch)\n    }\n}\n```\n**【关闭】**正常情况管道需要关闭，不然会产生内存泄露，使用close函数。正常来说，管道必须由发送者关闭，如果尝试从一个被关闭的管道接收值，则会返回该类型的零值，如果尝试向被关闭的管道输送值，则会报错！为了避免这种错误，有2种解决方案，一种是在每次从管道获取值的时候判断管理是否关闭，另一种则是使用for range 遍历。\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var ch = make(chan int)\n    \n    go func() {\n        ch \u003c- 1\n        ch \u003c- 2\n        ch \u003c- 3\n        close(ch)\n    }()\n    \n    //尝试从已关闭的管道接收数据，1 2 3 0 0\n    for i := 0; i \u003c 5; i++ {\n    \tfmt.Println(\u003c-ch)\n    }\n    \n    //手动判断管道是否关闭\n    for {\n        if v, ok := \u003c-ch; ok {\n        \tfmt.Println(v)\n    \t} else {\n    \t\tbreak\n    \t}\n    }\n    \n    //采用for range遍历，可以自动判断\n    for v := range ch {\n    \tfmt.Println(v)\n    }\n}\n```\n\n## 问题\n管道的关闭 -- 如何触发关闭\n如果没有读出管道中的内容，管道是否不会被关闭，对应的协程是不是不会退出\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/golang-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95":{"title":"","content":"### 总览\n1. File → Settings → Build,Execution… → Deployment 添加自己的远程主机的地址，以及Mapping代码上传到远程的存放目录\n2. 在工程名按下快捷键ctrl+alt+shrift+x，将代码上传到远程\n3. 在下方终端中ssh到终端，编译\n4. 进入编译出二进制路径，开始dlv调试\n| dlv --listen=:2345 --headless=true --api-version=2 exec ./main |\n| --- |\n\n或者在 main.go目录下执行 \n\n| dlv debug --headless --listen=:2345 --api-version=2 --accept-multiclient |\n| --- |\n\n5. run → debug → eidit configurations → 添加remote主机信息。\n6. 打上断点开始调试\n\n \n### 配置Deployment\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620285841383-8ec4cf72-f362-47f5-8a10-c0554fcf1ea8.png#align=left\u0026display=inline\u0026height=531\u0026originHeight=531\u0026originWidth=390\u0026size=30569\u0026status=done\u0026style=none\u0026width=390)\n \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620285841414-24ba172e-aba8-490f-a84c-d5677162c5d1.png#align=left\u0026display=inline\u0026height=878\u0026originHeight=878\u0026originWidth=1227\u0026size=58910\u0026status=done\u0026style=none\u0026width=1227)\n \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620285841435-f316c187-5fce-477a-9cca-a2dfab2e8ba3.png#align=left\u0026display=inline\u0026height=878\u0026originHeight=878\u0026originWidth=1227\u0026size=56494\u0026status=done\u0026style=none\u0026width=1227)\n \n### 代码上传到远程\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620285841429-99a71cdc-a0cc-464b-8c06-f7ce4f8c4d6e.png#align=left\u0026display=inline\u0026height=213\u0026originHeight=213\u0026originWidth=400\u0026size=14398\u0026status=done\u0026style=none\u0026width=400)\n \n### 添加远程调试信息\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1620285841462-7ae50f2e-b6a8-4ac2-a69d-0e31f4e59781.png#align=left\u0026display=inline\u0026height=852\u0026originHeight=852\u0026originWidth=1343\u0026size=58991\u0026status=done\u0026style=none\u0026width=1343)\n \n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/goroutine-%E5%8D%8F%E7%A8%8B":{"title":"","content":"\n\n\n","lastmodified":"2025-03-26T03:48:43.200318468Z","tags":null},"/grafana-%E5%8F%AF%E8%A7%86%E5%8C%96":{"title":"grafana 可视化","content":"\n```\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-config\n  namespace: calico-monitoring\ndata:\n  prometheus.yaml: |-\n    {\n        \"apiVersion\": 1,\n        \"datasources\": [\n            {\n               \"access\":\"proxy\",\n                \"editable\": true,\n                \"name\": \"calico-demo-prometheus\",\n                \"orgId\": 1,\n                \"type\": \"prometheus\",\n                \"url\": \"http://prometheus-dashboard-svc.calico-monitoring.svc:9090\",\n                \"version\": 1\n            }\n        ]\n    }\nEOF\n```\n\n```\nkubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/grafana-dashboards.yaml\n```\n\n创建 grafana pod\n```\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: grafana-pod\n  namespace: calico-monitoring\n  labels:\n    app:  grafana-pod\n    role: monitoring\nspec:\n  containers:\n  - name: grafana-pod\n    image: grafana/grafana:latest\n    resources:\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    volumeMounts:\n    - name: grafana-config-volume\n      mountPath: /etc/grafana/provisioning/datasources\n    - name: grafana-dashboards-volume\n      mountPath: /etc/grafana/provisioning/dashboards\n    - name: grafana-storage-volume\n      mountPath: /var/lib/grafana\n    ports:\n    - containerPort: 3000\n  volumes:\n  - name: grafana-storage-volume\n    emptyDir: {}\n  - name: grafana-config-volume\n    configMap:\n      name: grafana-config\n  - name: grafana-dashboards-volume\n    configMap:\n      name: grafana-dashboards-config\nEOF\n```\n\n创建 svc 访问\n账号密码：admin/admin\n```yaml\nkubectl apply -f - \u003c\u003cEOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana-dashboard-svc\n  namespace: calico-monitoring\nspec:\n  selector:\n    app:  grafana-pod\n    role: monitoring\n  ports:\n  - port: 3000\n    targetPort: 3000\n    protocol: TCP\n    nodePort: 30000\n  type: NodePort\nEOF\n```\n\n\n删除\n```\nkubectl delete namespace calico-monitoring\n```\n\n\n- 使用 prometheus 收集监控：[[监控 - monitor]]\n- metrics 详情：[[calico metrics]]\n![upgit_20230206_1675697893.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675697893.png)\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/helm-Tools":{"title":"","content":"#helm\n\n# 1. 官网地址\n[https://helm.sh/](https://helm.sh/)\n\n# 2. 在ubuntu上安装\n```bash\ncurl https://baltocdn.com/helm/signing.asc | sudo apt-key add -\nsudo apt-get install apt-transport-https --yes\necho \"deb https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n```\n\n# 3. 初始化以及安装\n```\n# 初始化 添加一个chart仓库\nroot@orange:~# helm repo add bitnami https://charts.bitnami.com/bitnami\n\n# 添加完成之后可以查看chart中可以安装的列表\nroot@orange:~# helm search repo bitnami\n\n# helm 安装示例\nroot@orange:~# helm repo update\nroot@orange:~# helm install bitnami/mysql --generate-name\nNAME: mysql-1641454438\nLAST DEPLOYED: Thu Jan  6 07:34:07 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nCHART NAME: mysql\nCHART VERSION: 8.8.20\nAPP VERSION: 8.0.27\n\n# 显示安装\nroot@orange:~# helm show chart bitnami/mysql\nannotations:\n  category: Database\napiVersion: v2\nappVersion: 8.0.27\ndependencies:\n- name: common\n  repository: https://charts.bitnami.com/bitnami\n  tags:\n  - bitnami-common\n  version: 1.x.x\ndescription: Chart to create a Highly available MySQL cluster\nhome: https://github.com/bitnami/charts/tree/master/bitnami/mysql\nicon: https://bitnami.com/assets/stacks/mysql/img/mysql-stack-220x234.png\nkeywords:\n- mysql\n- database\n- sql\n- cluster\n- high availability\nmaintainers:\n- email: containers@bitnami.com\n  name: Bitnami\nname: mysql\nsources:\n- https://github.com/bitnami/bitnami-docker-mysql\n- https://mysql.com\nversion: 8.8.20\n```\n\n\n# 4. 查看/管理\n\n## 1. 查看列表\n``` bash\nroot@orange:~# helm list\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION\nmysql-1641454438        default         1               2022-01-06 07:34:07.02836979 +0000 UTC  deployed        mysql-8.8.20    8.0.27\n```\n\n\n## 2. 查看状态\n``` bash\nroot@orange:~# helm status mysql-1641454438\nNAME: mysql-1641454438\nLAST DEPLOYED: Thu Jan  6 07:34:07 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nCHART NAME: mysql\nCHART VERSION: 8.8.20\nAPP VERSION: 8.0.27\n```\n\n## 3. 卸载\n如果在卸载时指定 --keep-history 参数，Helm会保留记录，并且可以通过status命令查询到状态，可以审计集群历史甚至回滚版本\n``` bash\nroot@orange:~# helm uninstall mysql-1641454438\nrelease \"mysql-1641454438\" uninstalled \n```\n\n# 5. 更多操作\n`root@orange:~# helm --help`\n`helm upgrade --namespace default mysql-1641454438 bitnami/mysql --set auth.rootPassword=$ROOT_PASSWORD`\n\n\n## 创建你自己的 charts\n$ **helm create test**\nCreating test\n现在，./test 目录下已经有一个 chart 了。你可以编辑它并创建你自己的模版。\n在编辑 chart 时，可以通过 helm lint 验证格式是否正确。\n\n当准备将 chart 打包分发时，你可以运行 helm package 命令：\n$ **helm package test test -0.1.0.tgz**\n\n然后这个 chart 就可以很轻松的通过 helm install 命令安装：\n$ **helm install test ./test -0.1.0.tgz ...**\n\n打包好的 chart 可以上传到 chart 仓库中。\nchart格式：[https://helm.sh/zh/docs/topics/charts/](https://helm.sh/zh/docs/topics/charts/)","lastmodified":"2025-03-26T03:48:43.130318715Z","tags":null},"/host-firewall":{"title":"host-firewall","content":"\n自成立以来，Cilium 一直支持 Kubernetes 网络策略，以在 L3/L4 上强制执行进出 pod 的流量控制。 但 Cilium 网络策略甚至更进一步：通过利用 eBPF，它可以提供对数据包的更大可见性并在 L7 上实施流量策略，并且可以根据 FQDN、协议（例如 kafka、grpc）等标准过滤流量......\n\n","lastmodified":"2025-03-26T03:48:44.13331518Z","tags":null},"/http%E8%AF%B7%E6%B1%82":{"title":"","content":"### http post body请求\n```http\n###\nPOST http://10.0.2.179:81/apis/license/update\nAccept: application/json\nAuthorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQ1Mjc3MTAsImlhdCI6MTYyNDUxNjkxMCwiaXNzIjoiY29yZXNlcnZlciIsInN1YiI6ImFkbWluIn0.yJs1iwR9NwFg2PLEKFv6WygiLTuU4xhLA3ne7mVuVOM\nContent-Type: application/json; charset=utf-8;\n\n{\"license\":\"AWFiY2RlZnAAshsmL9Ef9yuqW\"}\n```\n\n### http get url请求\n```http\n###\nGET http://10.0.1.30:81/apis/registryVm/detail?image=etcd\u0026page=1\u0026size=20\nAccept: application/json\nAuthorization: eyJhbGciOiJIUzI1NiIsInR5cmVuVOM...\n```\n\n### http post form-data请求\n```http\n###\nPOST http://10.0.1.30:81/apis/dockerfile?uid=b87cd160-515e-4644-ab2d-e616246fcc7b\u0026type=exec\u0026platform=linux/arm64\u0026image=ubuntu\u0026tag=20.04\nAccept: application/json\nAuthorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQ1Mjc3MTAsImlhdCI6MTYyNDUxNjkxMCwiaXNzIjoiY29yZXNlcnZlciIsInN1YiI6ImFkbWluIn0.yJs1iwR9NwFg2PLEKFv6WygiLTuU4xhLA3ne7mVuVOM\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"text\"\n\nfile\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"file\"; filename=\"hello\"\nContent-Type: application/octet-stream\n\n\u003c C:\\Users\\orange\\Desktop\\test\\hello\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n```\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/https%E7%9B%B8%E5%85%B3%E5%AE%89%E5%85%A8%E6%80%A7":{"title":"","content":"验证证书的颁发证书者是不是有效的\n证书类型\n\n- 域名验证 domain validated DV证书\n- 组织验证 organization validated OV证书\n- 扩展验证 extend validated EV证书\n\n安装certbot\n`apt-get install -y python3-certbot-nginx`\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/hubble":{"title":"hubble","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/da067f08dc9a5b0a3ff6511e055fd3a0.png)\n\nhubble labs：\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/hybirdnet-%E4%BD%BF%E7%94%A8":{"title":"","content":"#hybridnet  #cni\n\n[[hybirdnet.svg]]\n给节点打 label\n\n``` yaml\napiVersion: networking.alibaba.com/v1\nkind: Network\nmetadata:\n  name: underlay-network\nspec:\n  netID: 0\n  type: Underlay\n  nodeSelector:\n    network: \"network1\"\n---\napiVersion: networking.alibaba.com/v1\nkind: Subnet\nmetadata:\n  name: underlay-subnet\nspec:\n  network: underlay-network\n  netID: 0\n  range:\n    version: \"4\"\n    cidr: \"10.10.12.0/24\"\n    gateway: \"10.10.12.1\"\n```\n\n\n![upgit_20230330_1680168073.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230330_1680168073.png)\n\n交换机上创建对应的子接口，并宣告路由\n\n\nip rule\n\n","lastmodified":"2025-03-26T03:48:43.165318591Z","tags":null},"/hybirdnet-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86":{"title":"","content":"#hybridnet \n\n\n- crd 资源定义解释 [[hybridnet 自定义资源解释]]\n1. 整个流程：kubelet -\u003e cni -\u003e 打通网络\n- ipam 如何处理\n2. 环境的搭建\n\n\noverlay 模式实现原理\n封装的网卡\n路由\n创建的资源\n\nunderlay 模式实现原理\n\n\n多集群下的使用\n\n\ncni 配置 - kube-system/configmap/hybridnet-cni-conf\n```\ncat /etc/cni/net.d/06-hybridnet.conflist \n{\n    \"name\":\"hybridnet\",\n    \"cniVersion\":\"0.3.1\",\n    \"plugins\":[\n        {\n            \"type\":\"hybridnet\",\n            \"server_socket\":\"/run/cni/hybridnet.sock\"\n        },{\n            \"type\": \"bandwidth\",\n            \"capabilities\": {\"bandwidth\": true}\n        }\n    ]\n}\n```\n\n\n### 流量访问\n\n\n1. 为什么会使用 calico 相关组件\n\n对于安装的 kubernetes 1.26.0:\nkubectl label node node1 node-role.kubernetes.io/master=\"\"\nkubectl scale deployment -n kube-system hybridnet-webhook --replicas=2\nkubectl scale deployment -n kube-system hybridnet-manager --replicas=1\nkubectl scale deployment -n kube-system calico-typha --replicas=1\n\n\n![upgit_20230403_1680505379.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680505379.png)","lastmodified":"2025-03-26T03:48:43.165318591Z","tags":null},"/hybridnet-%E5%AE%89%E8%A3%85%E5%BB%BA%E8%AE%AE":{"title":"hybridnet 安装建议","content":"对于集群中不建议使用 10 11 21 22 的 vlan 网段，可以使用其他的 vlan，可以避免一些问题\n- 假设 10.11.22.2 使用了 native vlan ww，hybridnet 会创建 22 子接口，导致无法与网关通信，无法创建负载\n- 全部使用子接口 - 暂时没有问题\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/hybridnet-%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88":{"title":"hybridnet 测试方案","content":"\n需要验证网络插件的功能以及 kube-proxy 为 iptables 以及 ipvs 模式与网络插件的兼容性。\n\n提前规划：\n- node cidr\n- 集群可用的 vlan cidr\n\n\n根据文档使用 kk 进行部署环境\n- [kk 使用 hybridnet 插件安装集群](https://cwiki.yunify.com/pages/viewpage.action?pageId=168111551)\n\n验证 ipvs 时，修改相应 kk 的配置：\n```\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  ... ...\n  kubernetes:\n    ...\n    proxyMode: ipvs\n  network:\n    plugin: hybridnet\n    hybridnet:\n      init: false\n      ...\n    kubePodsCIDR: 10.233.64.0/18 # 替换为包含有所有 vlan cidr 的网段\n    kubeServiceCIDR: 10.233.0.0/18\n```\n  \n验证 iptables 时，修改相应 kk 的配置：\n```\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  ... ...\n  kubernetes:\n    ...\n    proxyMode: iptables\n  network:\n    plugin: hybridnet\n    hybridnet:\n      init: false\n      ...\n    kubePodsCIDR: 10.233.64.0/18  # 替换为其中一个 vlan cidr 网段\n    kubeServiceCIDR: 10.233.0.0/18\n```\n\n\n测试功能点：\n1. 能否成功部署，部署后所有 pod 状态是否全为 running\n2. 网络插件 ipam 功能是否正常（创建、删除负载能否正常申请、释放 ip）\n3. 网络插件网络策略功能是否正常\n4. 网络插件联通性功能是否正常\n\t1. 集群内访问\n\t\t1. pod-pod 同节点\n\t\t2. pod-pod 跨节点\n\t\t3. pod-svc 同节点\n\t\t4. pod-svc 跨节点\n\t\t5. pod-k8s apiserver svc 跨节点\n\t2. 集群外访问 pod ip\n5. subnet 被占满后扩容 vlan","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/hybridnet-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6":{"title":"hybridnet 网络插件","content":"\n[[vlan 配置]]\n\n### 一键安装\n```\nhelm repo add hybridnet https://alibaba.github.io/hybridnet/\nhelm repo update\nhelm install hybridnet hybridnet/hybridnet -n kube-system --set init.cidr=10.233.64.0/18\n```\n\n安装 CRD\n```yaml\nbgpconfigurations.crd.projectcalico.org\nclusterinformations.crd.projectcalico.org\nfelixconfigurations.crd.projectcalico.org\nglobalnetworkpolicies.crd.projectcalico.org\nglobalnetworksets.crd.projectcalico.org\nhostendpoints.crd.projectcalico.org\nippools.crd.projectcalico.org\nnetworkpolicies.crd.projectcalico.org\n\nremoteclusters.multicluster.alibaba.com\nremoteendpointslice.multicluster.alibaba.com\nremotesubnets.multicluster.alibaba.com\nremotevteps.multicluster.alibaba.com\n\nnetworks.networking.alibaba.com\nsubnets.networking.alibaba.com\nipinstances.networking.alibaba.com\nnodeinfoes.networking.alibaba.com\n```\n\n安装的组件\n- ds：\n\t- hybridnet-daemon\n\t\t- - ipam\n\t\t- bgp 路由宣告\n\t\t- vlan + vxlan 打通\n- deploy： 全部使用主机网络\n\t- hybridnet-manager 控制面\n\t- hybridnet-webhook\n\t\t- ValidatingWebhookConfiguration\n\t\t\t- pods、remoteclusters、remotesubnets、networks、subnets\n\t\t- MutatingWebhookConfiguration\n\t\t\t- pods - 添加 annotation + nodeSelector\n\t- calico-typha\n\t\t- 网络策略 + 减少 apiserver 负载\n\n\n模式\n- overlay 模式 - vxlan\n\t- Overlay = NetworkType(\"Overlay\")\n- underlay 模式 - vlan or bgp\n\t- Underlay = NetworkType(\"Underlay\")\n\t- GlobalBGP = NetworkType(\"GlobalBGP\")\n\n\n### 环境验证\n使用 kind + containerlad 搭建环境验证\n\n#### 网络拓扑\n![upgit_20230403_1680506964.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680506964.png)\n\n![upgit_20230403_1680507027.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680507027.png)\n\n![upgit_20230403_1680507201.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680507201.png)\n\n![upgit_20230403_1680507312.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680507312.png)\n\nhybirdnet 中有两个重要概念：网络域、子网\n1. 网络域 network - 实现了依赖特定网络资源 pod 的自动调度\n\t一个网络域具有这样的性质：“一个带有特定地址的 Pod 如果能被部署到网络域内的某一节点，那么带有相同地址的 Pod 应该能被调度到同一网络域内的其他任意节点”。Network 对象通过 nodeSelector 选择带有特定 label 的节点作为网络域中的节点。\n2. Subnet - 描述 ip 地址分配信息\n\n通过官方 [github 示例链接]([hybridnet/samples at main · alibaba/hybridnet (github.com)](https://github.com/alibaba/hybridnet/tree/main/samples))中可以创建不同模式的网络域以及子网，一个节点可以同时在多个网络域中,\n\n\n### 存在的问题：\n问题1：使用 kind 搭建 环境无法搭建起来\nkind 创建的 node 节点没有/proc/sys/net/ipv4/neigh/default/gc_thresh1 文件。也不能在 kind 创建的节点容器内部创建 `/proc/sys/net/ipv4/neigh/default/gc_thresh1` 文件，因为 `/proc` 文件系统是一个虚拟文件系统，它用于在内核和用户空间之间传递信息。也不能在容器内部启用内核模块，因为容器共享宿主机的内核。\n修改了源代码，注释掉相关部分后可以成功运行\n使用修改后的镜像 `docker pull rykren/hybridnet:release-amd64`\n\n\n2. bgp 建立 peer 时 ttl 为1，因此建立 bgp peer 时不能跨多个交换机建立 peer\n![upgit_20230403_1680503258.png](https://images.cherryfloris.eu.org/ryken/2023/04/upgit_20230403_1680503258.png)\n\n\n3. 高于1.24版本的可能存在问题\n[hybridnet 在k8s1.26.3中使用异常 · Issue #372 · alibaba/hybridnet (github.com)](https://github.com/alibaba/hybridnet/issues/372)\n可以使用 `--set daemon.enableFelixPolicy=false` 不启用calico-typha即不启用网络隔离\n```\nIt seems the version of felix we use (v3.20.2) is not compatible with higher version of kubernetes than 1.24, [projectcalico/calico#7032](https://github.com/projectcalico/calico/issues/7032).\n\nWe will fix it and you can deploy hybridnet without networkpolicy implementation by using the `--set daemon.enableFelixPolicy=false` helm parameter to avoid this in a v1.26.3 Kubernetes at present.\n```\n\n\n### 参考\n- [CNStack 网络插件：hybridnet 的设计与实现 (qq.com)](https://mp.weixin.qq.com/s/d_7GdrIHgPEVESXd6Rn1dA)\n- [alibaba/hybridnet(github.com)](https://github.com/alibaba/hybridnet)\n- [alibaba/hybridnet Wiki](https://github.com/alibaba/hybridnet/wiki/Home(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/hybridnet-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%A7%A3%E9%87%8A":{"title":"hybridnet 自定义资源解释","content":"\n[[hybridnet 网络插件]]\n\n| 资源        | 解释                |\n| ----------- | ------------------- |\n| networks    | 网络域              |\n| subnets     | 节点可用的网段资源  |\n| ipinstances | ip 分配情况（只读） |\n| nodeinfoes  | 节点情况 vxlan 信息 |\n\u003e1. 每个 Network 至少需要有一个 Subnet 才能真正被使用\n\u003e2. 目前还不支持一个节点属于多个 Underlay Network，但是支持一个节点属于多个不同 type（比如 Overlay、Underlay）的 Network\n\n### network\nnetwork.spec\n\n| 字段         | 说明                |\n| ------------ | ------------------- |\n| nodeSelector | 网络域中的节点选择器              |\n| netID        | 网络 id  |\n| type         | 类型：Underlay/Overlay/GlobalBGP |\n| mode         | 模式：BGP/VLAN/VXLAN/GlobalBGP |\n| config       |      bgp peer 的配置               |\n\n- 对于 vxlan 来说，netID 是 vxlan 使用的隧道ID\n- 对于 vlan 来说，netID 等于 vlan tag\n- 对于 bgp 来说，netID 等于 as number\n\n\nnetID: 0 # 如果是 VXLAN/BGP 网络，该字段不填； 对于 VLAN 网络，如果 Network 的 spec.netID 为空，Subnet 的 spec.netID 一定不能为空# 如果 Network 的 spec.netID 不为空，Subnet 的 spec.netID 只能为空或者与 Network 的值相同\n\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/hybridnet.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nleaf1 ^sDROrzpl\n\nserver1 ^eqxCtLQ4\n\nserver2 ^GBiLAyht\n\n10.1.5.11/24 ^de2Oms7o\n\n10.1.5.12/24 ^9fVphJfZ\n\nleaf2 ^JIReIgUw\n\nserver3 ^mUD4e9GS\n\n10.1.8.13/24 ^mjsGravC\n\n10.1.8.14/24 ^QpOmcUme\n\n10.1.10.1/24 ^JXp49FGf\n\n172.18.0.2/24 ^4369vzWO\n\n172.18.0.3/24 ^XkAu0H2k\n\n172.18.0.4/24 ^ieRHPajI\n\n172.18.0.5/24 ^SLeDd4Rs\n\nAS 65005 ^iJ19Ncnf\n\nAS 65008 ^VU3zxvaE\n\nspine1 ^A4Z8ZEJJ\n\nspine2 ^dn2eAlf0\n\n10.1.10.2/24 ^KPY1fs9z\n\n10.1.34.2/24 ^d3TPApah\n\n10.1.11.2/24 ^G3xUlx2A\n\n10.1.12.2/24 ^cNe4Srnh\n\nAS 500 ^P9JvBqVQ\n\nAS 800 ^lUFFAdH1\n\n10.1.12.1/24 ^LvXT323S\n\n10.1.5.1/24 ^3LfGFhru\n\n10.1.8.1/24 ^2D0Mzlzj\n\n10.1.34.1/24 ^OnGBzOer\n\n10.1.11.1/24 ^QRjF14mV\n\nserver4 ^OVyr1X7X\n\nleaf1 ^Oy33nt2w\n\nserver1 ^q1xje2rA\n\nserver2 ^jgGSaIXZ\n\n2001:db8:cafe:fe05::2/64 ^GBTnfqx8\n\n2001:db8:cafe:fe05::3/64 ^y3CC4JuC\n\nleaf2 ^g7FEAeS8\n\nserver3 ^gdKq05Bx\n\n2001:db8:cafe:fe08::2/64 ^3IGHyHRK\n\n2001:db8:cafe:fe08::3/64 ^5YSeSicv\n\n2001:db8:cafe:fe01:1::3/127 ^OdApLWI6\n\nAS 65005 ^V0KixCBp\n\nAS 65008 ^3rlDoN9N\n\nspine1 ^iVKDpj8O\n\nspine2 ^DLjLkpr5\n\n2001:db8:cafe:fe01:1::2/127 ^qa2S8vW2\n\n2001:db8:cafe:fe01:3::2/127 ^lwsTZiuS\n\n2001:db8:cafe:fe01:4::2/127 ^WScGWR4l\n\n2001:db8:cafe:fe01:2::2/127 ^Jd8gt05x\n\nAS 500 ^Z2EPLVa7\n\nAS 800 ^NUkOkbI8\n\n2001:db8:cafe:fe01:2::3/127 ^gU0gqRrw\n\n2001:db8:cafe:fe05::1/64 ^xVSk2CNe\n\n2001:db8:cafe:fe08::1/64 ^lqQE76nU\n\n2001:db8:cafe:fe01:3::3/127 ^QoKb6XUx\n\n2001:db8:cafe:fe01:4::3/127 ^WKGj6tgy\n\nserver4 ^gElU9SXL\n\n2001:db8:cafe:fe01::a/127 ^alo7yYc5\n\n3fff:172:30:30::2/80 ^jiotFDSb\n\n3fff:172:30:30::3/80 ^L5Au6m9a\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.4\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 481,\n\t\t\t\"versionNonce\": 464494990,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"bQY_UL6MjQ9FE0dAZm1sd\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -300.71066557458846,\n\t\t\t\"y\": -34.923484513932635,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 412383234,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qJMfCNjXoNS4LiNqytdbE\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"M6f_go9iXgH087avZWI3Q\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"cpQPO7-cnO1kLAYVKldos\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"aN4D5Hy0OMmx7oUd8jAQH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"sDROrzpl\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 471,\n\t\t\t\"versionNonce\": 1908377170,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sDROrzpl\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -265.55064665369,\n\t\t\t\"y\": -29.923484513932635,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.679962158203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1125155102,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf1\",\n\t\t\t\"rawText\": \"leaf1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"bQY_UL6MjQ9FE0dAZm1sd\",\n\t\t\t\"originalText\": \"leaf1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 515,\n\t\t\t\"versionNonce\": 815808462,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"43Ptvx_f5WZnQAYvdbCFa\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -391.35974876229443,\n\t\t\t\"y\": 107.55021093991218,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 352987074,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"M6f_go9iXgH087avZWI3Q\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"eqxCtLQ4\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 515,\n\t\t\t\"versionNonce\": 1482615826,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"eqxCtLQ4\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -366.76971427743115,\n\t\t\t\"y\": 112.55021093991218,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 65.81993103027344,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 903785822,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server1\",\n\t\t\t\"rawText\": \"server1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"43Ptvx_f5WZnQAYvdbCFa\",\n\t\t\t\"originalText\": \"server1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 537,\n\t\t\t\"versionNonce\": 308483598,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"UmFe_mVLcjWST4kTxr4MG\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -203.0264968091692,\n\t\t\t\"y\": 109.21689795163093,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 515104642,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qJMfCNjXoNS4LiNqytdbE\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"GBiLAyht\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 535,\n\t\t\t\"versionNonce\": 160143826,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GBiLAyht\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -182.84645835702077,\n\t\t\t\"y\": 114.21689795163093,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.63992309570312,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1050497438,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server2\",\n\t\t\t\"rawText\": \"server2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"UmFe_mVLcjWST4kTxr4MG\",\n\t\t\t\"originalText\": \"server2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 628,\n\t\t\t\"versionNonce\": 1508975694,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"M6f_go9iXgH087avZWI3Q\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -307.8068004703796,\n\t\t\t\"y\": 100.88355444577155,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 49.00372995711916,\n\t\t\t\"height\": 72.19294735826088,\n\t\t\t\"seed\": 30449474,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"43Ptvx_f5WZnQAYvdbCFa\",\n\t\t\t\t\"gap\": 6.666656494140625,\n\t\t\t\t\"focus\": 0.14153229957578503\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3LfGFhru\",\n\t\t\t\t\"gap\": 5.268317955272597,\n\t\t\t\t\"focus\": 0.04587059703524727\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49.00372995711916,\n\t\t\t\t\t-72.19294735826088\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 619,\n\t\t\t\"versionNonce\": 1415352210,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qJMfCNjXoNS4LiNqytdbE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -165.69616353658373,\n\t\t\t\"y\": 98.18177864396239,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 56.94242066309849,\n\t\t\t\"height\": 72.4666564941408,\n\t\t\t\"seed\": 947744222,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"UmFe_mVLcjWST4kTxr4MG\",\n\t\t\t\t\"gap\": 11.035119307668538,\n\t\t\t\t\"focus\": 0.0347893756489593\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"3LfGFhru\",\n\t\t\t\t\"gap\": 2.292833017583508,\n\t\t\t\t\"focus\": -0.23792626275568463\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-56.94242066309849,\n\t\t\t\t\t-72.4666564941408\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 446,\n\t\t\t\"versionNonce\": 421751438,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"de2Oms7o\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -393.2443946644878,\n\t\t\t\"y\": 163.1437800142694,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 717186818,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.11/24\",\n\t\t\t\"rawText\": \"10.1.5.11/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.11/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 474,\n\t\t\t\"versionNonce\": 218680658,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9fVphJfZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -207.7443946644878,\n\t\t\t\"y\": 164.3937800142694,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1888485918,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.12/24\",\n\t\t\t\"rawText\": \"10.1.5.12/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.12/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 745,\n\t\t\t\"versionNonce\": 1051912398,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"-L6yELzkYUJfsohyQDSxf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 73.4189094500125,\n\t\t\t\"y\": -39.80514422244687,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 570373826,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dbu8joI85D5e6T8Lc4-a1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8OJY8YyLdMJMMrxT3JPgQ\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"oR_ZL5HpWuio5aIOlzvi1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"RdX6w6TrpdW7V5qsr67ZM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"JIReIgUw\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 742,\n\t\t\t\"versionNonce\": 1759990546,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JIReIgUw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 104.1689323381961,\n\t\t\t\"y\": -34.80514422244687,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.49995422363281,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1774587486,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf2\",\n\t\t\t\"rawText\": \"leaf2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"-L6yELzkYUJfsohyQDSxf\",\n\t\t\t\"originalText\": \"leaf2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 759,\n\t\t\t\"versionNonce\": 2050531086,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gjE-OpekGZBwttRnBDkNJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0.9276406897329252,\n\t\t\t\"y\": 103.5107078925821,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 137301634,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dbu8joI85D5e6T8Lc4-a1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"mUD4e9GS\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 762,\n\t\t\t\"versionNonce\": 1517232338,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mUD4e9GS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 21.417676700475113,\n\t\t\t\"y\": 108.5107078925821,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.01992797851562,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 552637086,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server3\",\n\t\t\t\"rawText\": \"server3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"gjE-OpekGZBwttRnBDkNJ\",\n\t\t\t\"originalText\": \"server3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1146,\n\t\t\t\"versionNonce\": 539856206,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"dbu8joI85D5e6T8Lc4-a1\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 59.758257591207936,\n\t\t\t\"y\": 90.17739490430085,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.971419259751386,\n\t\t\t\"height\": 64.51416087315829,\n\t\t\t\"seed\": 302902850,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"gjE-OpekGZBwttRnBDkNJ\",\n\t\t\t\t\"gap\": 13.33331298828125,\n\t\t\t\t\"focus\": -0.33590166925976533\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"2D0Mzlzj\",\n\t\t\t\t\"gap\": 9.366359636000015,\n\t\t\t\t\"focus\": -0.002039694929302959\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.971419259751386,\n\t\t\t\t\t-64.51416087315829\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1139,\n\t\t\t\"versionNonce\": 1832334994,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"8OJY8YyLdMJMMrxT3JPgQ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 210.87279619765263,\n\t\t\t\"y\": 92.21248369439218,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 63.48534635816338,\n\t\t\t\"height\": 65.39064352874084,\n\t\t\t\"seed\": 1354796766,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"ubCBCHZh6wGVU2I0AfDiK\",\n\t\t\t\t\"gap\": 10.297241932846191,\n\t\t\t\t\"focus\": 0.4004044449566961\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"2D0Mzlzj\",\n\t\t\t\t\"gap\": 10.524965770508787,\n\t\t\t\t\"focus\": 0.026710023306753466\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-63.48534635816338,\n\t\t\t\t\t-65.39064352874084\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 683,\n\t\t\t\"versionNonce\": 233485198,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"mjsGravC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -0.45700521246067183,\n\t\t\t\"y\": 159.9375899552224,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 75159042,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.13/24\",\n\t\t\t\"rawText\": \"10.1.8.13/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.13/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 648,\n\t\t\t\"versionNonce\": 569807954,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"QpOmcUme\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 163.9492102261147,\n\t\t\t\"y\": 159.59352890240189,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 902234910,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.14/24\",\n\t\t\t\"rawText\": \"10.1.8.14/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.14/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 549,\n\t\t\t\"versionNonce\": 229183950,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"JXp49FGf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -383.1784476651567,\n\t\t\t\"y\": -64.84572727025443,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 812959170,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"aN4D5Hy0OMmx7oUd8jAQH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.10.1/24\",\n\t\t\t\"rawText\": \"10.1.10.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.10.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 516,\n\t\t\t\"versionNonce\": 1250179602,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"4369vzWO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -392.64565177817053,\n\t\t\t\"y\": 187.41266472585448,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1383395166,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.2/24\",\n\t\t\t\"rawText\": \"172.18.0.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 547,\n\t\t\t\"versionNonce\": 981575694,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"XkAu0H2k\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -205.89331279463715,\n\t\t\t\"y\": 185.77448631371772,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1864023426,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.3/24\",\n\t\t\t\"rawText\": \"172.18.0.3/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.3/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 591,\n\t\t\t\"versionNonce\": 1708599250,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ieRHPajI\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0.5171671345314053,\n\t\t\t\"y\": 181.67904028337853,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 857428894,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.4/24\",\n\t\t\t\"rawText\": \"172.18.0.4/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.4/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 641,\n\t\t\t\"versionNonce\": 1684895310,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"SLeDd4Rs\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 165.37940219886877,\n\t\t\t\"y\": 177.82998237055563,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 121.875,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 497794370,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"172.18.0.5/24\",\n\t\t\t\"rawText\": \"172.18.0.5/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"172.18.0.5/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 432,\n\t\t\t\"versionNonce\": 2080791954,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"iJ19Ncnf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -421.1212297887912,\n\t\t\t\"y\": -15.968544443296196,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 837496798,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65005\",\n\t\t\t\"rawText\": \"AS 65005\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65005\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 561,\n\t\t\t\"versionNonce\": 1950710926,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"VU3zxvaE\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 245.33997978879137,\n\t\t\t\"y\": -21.017431368029975,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 428262658,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65008\",\n\t\t\t\"rawText\": \"AS 65008\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65008\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 620,\n\t\t\t\"versionNonce\": 2051595090,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"YCZ3AY-rYpe9Fs6cGbytO\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -294.03678626688,\n\t\t\t\"y\": -240.37090439924123,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 989168670,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"aN4D5Hy0OMmx7oUd8jAQH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"oR_ZL5HpWuio5aIOlzvi1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"A4Z8ZEJJ\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 612,\n\t\t\t\"versionNonce\": 1338161870,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"A4Z8ZEJJ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -261.93675727518075,\n\t\t\t\"y\": -235.37090439924123,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 50.79994201660156,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1009439938,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine1\",\n\t\t\t\"rawText\": \"spine1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"YCZ3AY-rYpe9Fs6cGbytO\",\n\t\t\t\"originalText\": \"spine1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 586,\n\t\t\t\"versionNonce\": 250978578,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sP0iQlG2QEcQxRlgZkx3H\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 69.19989794283276,\n\t\t\t\"y\": -242.5970397258543,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 271274078,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"RdX6w6TrpdW7V5qsr67ZM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"cpQPO7-cnO1kLAYVKldos\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"dn2eAlf0\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 579,\n\t\t\t\"versionNonce\": 1031680270,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"dn2eAlf0\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 96.88993090181714,\n\t\t\t\"y\": -237.5970397258543,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.61993408203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1463217282,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine2\",\n\t\t\t\"rawText\": \"spine2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"sP0iQlG2QEcQxRlgZkx3H\",\n\t\t\t\"originalText\": \"spine2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 140,\n\t\t\t\"versionNonce\": 92516050,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"KPY1fs9z\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -372.52297469357177,\n\t\t\t\"y\": -184.38255508505335,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 224236702,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"aN4D5Hy0OMmx7oUd8jAQH\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.10.2/24\",\n\t\t\t\"rawText\": \"10.1.10.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.10.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1228,\n\t\t\t\"versionNonce\": 1223745358,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"aN4D5Hy0OMmx7oUd8jAQH\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -254.84702541950855,\n\t\t\t\"y\": -46.3520291216073,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 2.2130271745162986,\n\t\t\t\"height\": 151.13315649620063,\n\t\t\t\"seed\": 812256322,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"JXp49FGf\",\n\t\t\t\t\"focus\": 1.280562502450195,\n\t\t\t\t\"gap\": 15.831422245648128\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"KPY1fs9z\",\n\t\t\t\t\"focus\": -1.1226441256062405,\n\t\t\t\t\"gap\": 13.102630532754574\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.2130271745162986,\n\t\t\t\t\t-151.13315649620063\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 852,\n\t\t\t\"versionNonce\": 579470482,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"oR_ZL5HpWuio5aIOlzvi1\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 131.13527963148408,\n\t\t\t\"y\": -49.91469830892032,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 359.4581581480439,\n\t\t\t\"height\": 141.86577922617113,\n\t\t\t\"seed\": 1815957726,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QRjF14mV\",\n\t\t\t\t\"gap\": 13.528098675755018,\n\t\t\t\t\"focus\": -0.8409985850499824\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"YCZ3AY-rYpe9Fs6cGbytO\",\n\t\t\t\t\"gap\": 13.590426864149777,\n\t\t\t\t\"focus\": 0.692869163643391\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-359.4581581480439,\n\t\t\t\t\t-141.86577922617113\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 111,\n\t\t\t\"versionNonce\": 645121422,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"d3TPApah\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -197.8532111765602,\n\t\t\t\"y\": -185.19498596220365,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 2107847682,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.34.2/24\",\n\t\t\t\"rawText\": \"10.1.34.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.34.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 915,\n\t\t\t\"versionNonce\": 2143265362,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"RdX6w6TrpdW7V5qsr67ZM\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 141.5742712947523,\n\t\t\t\"y\": -49.32243524872807,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 4.895350968137365,\n\t\t\t\"height\": 153.73994895342923,\n\t\t\t\"seed\": 140215582,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"QRjF14mV\",\n\t\t\t\t\"gap\": 3.0891070124868065,\n\t\t\t\t\"focus\": -1.0491022628540119\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"sP0iQlG2QEcQxRlgZkx3H\",\n\t\t\t\t\"gap\": 4.534655523696983,\n\t\t\t\t\"focus\": -0.15979749596509443\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.895350968137365,\n\t\t\t\t\t-153.73994895342923\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1027,\n\t\t\t\"versionNonce\": 390063054,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cpQPO7-cnO1kLAYVKldos\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -245.86883736865278,\n\t\t\t\"y\": -45.13015721519332,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 277.28336856343697,\n\t\t\t\"height\": 113.09176805127419,\n\t\t\t\"seed\": 1625383874,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"bQY_UL6MjQ9FE0dAZm1sd\",\n\t\t\t\t\"gap\": 10.206672701260686,\n\t\t\t\t\"focus\": -0.7027680838923297\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"cNe4Srnh\",\n\t\t\t\t\"gap\": 8.366845257160548,\n\t\t\t\t\"focus\": -0.14563879983432954\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t277.28336856343697,\n\t\t\t\t\t-113.09176805127419\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 207,\n\t\t\t\"versionNonce\": 1744537618,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"G3xUlx2A\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 144.16669620399898,\n\t\t\t\"y\": -186.97633964647775,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 589902174,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.11.2/24\",\n\t\t\t\"rawText\": \"10.1.11.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.11.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 255,\n\t\t\t\"versionNonce\": 1299069454,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"cNe4Srnh\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 7.5962470763452075,\n\t\t\t\"y\": -185.78877052362805,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1682152322,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"cpQPO7-cnO1kLAYVKldos\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.12.2/24\",\n\t\t\t\"rawText\": \"10.1.12.2/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.12.2/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 493,\n\t\t\t\"versionNonce\": 859092434,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"P9JvBqVQ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -370.52076276239836,\n\t\t\t\"y\": -228.04125894619847,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 670520734,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 500\",\n\t\t\t\"rawText\": \"AS 500\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 500\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 537,\n\t\t\t\"versionNonce\": 1341638734,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"lUFFAdH1\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 204.35592427522806,\n\t\t\t\"y\": -233.38531999901898,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1980291906,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 800\",\n\t\t\t\"rawText\": \"AS 800\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 800\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 584,\n\t\t\t\"versionNonce\": 578956178,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"LvXT323S\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -213.88539433502388,\n\t\t\t\"y\": -59.312658940191795,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1878454750,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.12.1/24\",\n\t\t\t\"rawText\": \"10.1.12.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.12.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 649,\n\t\t\t\"versionNonce\": 1588956814,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3LfGFhru\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -297.60901749589004,\n\t\t\t\"y\": 4.222289132238075,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1687167746,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"M6f_go9iXgH087avZWI3Q\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qJMfCNjXoNS4LiNqytdbE\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.5.1/24\",\n\t\t\t\"rawText\": \"10.1.5.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.5.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 731,\n\t\t\t\"versionNonce\": 1008396626,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"2D0Mzlzj\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 77.91254883304907,\n\t\t\t\"y\": -2.9031256048574505,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 103.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 104400414,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dbu8joI85D5e6T8Lc4-a1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8OJY8YyLdMJMMrxT3JPgQ\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.8.1/24\",\n\t\t\t\"rawText\": \"10.1.8.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.8.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 72,\n\t\t\t\"versionNonce\": 1449168078,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"OnGBzOer\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 15.81212847810491,\n\t\t\t\"y\": -63.46970385295754,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1515745986,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.34.1/24\",\n\t\t\t\"rawText\": \"10.1.34.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.34.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 77,\n\t\t\t\"versionNonce\": 659943186,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"QRjF14mV\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 144.6633783072391,\n\t\t\t\"y\": -58.71942736156143,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1806602846,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"oR_ZL5HpWuio5aIOlzvi1\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"RdX6w6TrpdW7V5qsr67ZM\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"10.1.11.1/24\",\n\t\t\t\"rawText\": \"10.1.11.1/24\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"10.1.11.1/24\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 833,\n\t\t\t\"versionNonce\": 345096974,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"ubCBCHZh6wGVU2I0AfDiK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 150.69832637966942,\n\t\t\t\"y\": 102.50972562723837,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1510001282,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"8OJY8YyLdMJMMrxT3JPgQ\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"OVyr1X7X\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 836,\n\t\t\t\"versionNonce\": 145374418,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"OVyr1X7X\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 171.598366052521,\n\t\t\t\"y\": 107.50972562723837,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 73.19992065429688,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1529386654,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server4\",\n\t\t\t\"rawText\": \"server4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"ubCBCHZh6wGVU2I0AfDiK\",\n\t\t\t\"originalText\": \"server4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 630,\n\t\t\t\"versionNonce\": 1539453262,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jVXjjKihsziFQWeexlA4o\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -310.5406285821737,\n\t\t\t\"y\": 617.4715577910633,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1812678866,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qcVYLctNvxGT4sacZddJR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"V6kbCl7cc9ieVrry0Cpeg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x1AVW9Z0ppB8umjUOaleg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"PUq9R7fOCI4G3gtfNkj_8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"Oy33nt2w\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 620,\n\t\t\t\"versionNonce\": 1571738258,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Oy33nt2w\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -275.3806096612753,\n\t\t\t\"y\": 622.4715577910633,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 44.679962158203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1225678482,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf1\",\n\t\t\t\"rawText\": \"leaf1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"jVXjjKihsziFQWeexlA4o\",\n\t\t\t\"originalText\": \"leaf1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 661,\n\t\t\t\"versionNonce\": 927651726,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Cbe7-sI3KS2UNryvy81ed\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -401.1897117698798,\n\t\t\t\"y\": 759.9452532449081,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1219017810,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"V6kbCl7cc9ieVrry0Cpeg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"q1xje2rA\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 661,\n\t\t\t\"versionNonce\": 1494921298,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"q1xje2rA\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -376.5996772850165,\n\t\t\t\"y\": 764.9452532449081,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 65.81993103027344,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 682713618,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server1\",\n\t\t\t\"rawText\": \"server1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"Cbe7-sI3KS2UNryvy81ed\",\n\t\t\t\"originalText\": \"server1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 683,\n\t\t\t\"versionNonce\": 1600435662,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"sSc51zLOH8SPUuVi7gXpl\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -212.85645981675458,\n\t\t\t\"y\": 761.6119402566269,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1411338194,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qcVYLctNvxGT4sacZddJR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"jgGSaIXZ\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 681,\n\t\t\t\"versionNonce\": 1053087250,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jgGSaIXZ\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -192.67642136460614,\n\t\t\t\"y\": 766.6119402566269,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.63992309570312,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1057588626,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440475,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server2\",\n\t\t\t\"rawText\": \"server2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"sSc51zLOH8SPUuVi7gXpl\",\n\t\t\t\"originalText\": \"server2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1138,\n\t\t\t\"versionNonce\": 338170258,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"V6kbCl7cc9ieVrry0Cpeg\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -324.488492710793,\n\t\t\t\"y\": 753.2785967507675,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 38.30239503645083,\n\t\t\t\"height\": 63.987850453212786,\n\t\t\t\"seed\": 1118241618,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625531346,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"Cbe7-sI3KS2UNryvy81ed\",\n\t\t\t\t\"gap\": 6.666656494140625,\n\t\t\t\t\"focus\": 0.08983730563163207\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"xVSk2CNe\",\n\t\t\t\t\"gap\": 5.2683179552725505,\n\t\t\t\t\"focus\": 0.04587059703524858\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.30239503645083,\n\t\t\t\t\t-63.987850453212786\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1129,\n\t\t\t\"versionNonce\": 691688722,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qcVYLctNvxGT4sacZddJR\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -182.6569448879511,\n\t\t\t\"y\": 750.5768209489584,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 51.153327206917254,\n\t\t\t\"height\": 64.26155958909271,\n\t\t\t\"seed\": 2035206418,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625531346,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"sSc51zLOH8SPUuVi7gXpl\",\n\t\t\t\t\"gap\": 11.035119307668538,\n\t\t\t\t\"focus\": -0.03570539150448233\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"xVSk2CNe\",\n\t\t\t\t\"gap\": 2.2928330175834617,\n\t\t\t\t\"focus\": -0.23792626275568687\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-51.153327206917254,\n\t\t\t\t\t-64.26155958909271\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 640,\n\t\t\t\"versionNonce\": 157793422,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GBTnfqx8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -478.97185616966925,\n\t\t\t\"y\": 812.4618992423423,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 444061394,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625595327,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe05::2/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe05::2/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe05::2/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 626,\n\t\t\t\"versionNonce\": 242899534,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"y3CC4JuC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -221.67695307471735,\n\t\t\t\"y\": 811.6605545908999,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1454976146,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625605695,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe05::3/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe05::3/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe05::3/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 971,\n\t\t\t\"versionNonce\": 712220814,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"YU2a4TkDhhc_DI6YUOmY9\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 310.7685588222348,\n\t\t\t\"y\": 614.641148833751,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 868862546,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"077tQWgKOIap3QXnBLgV7\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xOHIif5pjHP4z8XPCBnSm\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"fNwYvEORMK42e8yDeyHe2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_MSofNFUFcqny2jpQzrEC\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"g7FEAeS8\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 968,\n\t\t\t\"versionNonce\": 545191762,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"g7FEAeS8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 341.5185817104184,\n\t\t\t\"y\": 619.641148833751,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.49995422363281,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1753264146,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"leaf2\",\n\t\t\t\"rawText\": \"leaf2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"YU2a4TkDhhc_DI6YUOmY9\",\n\t\t\t\"originalText\": \"leaf2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 984,\n\t\t\t\"versionNonce\": 1686920910,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"GL9vb8pueXtWr2RmS0nii\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 238.27729006195523,\n\t\t\t\"y\": 757.95700094878,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 953474514,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"077tQWgKOIap3QXnBLgV7\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"gdKq05Bx\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 987,\n\t\t\t\"versionNonce\": 1074281746,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gdKq05Bx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 258.7673260726974,\n\t\t\t\"y\": 762.95700094878,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 74.01992797851562,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1373459346,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server3\",\n\t\t\t\"rawText\": \"server3\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"GL9vb8pueXtWr2RmS0nii\",\n\t\t\t\"originalText\": \"server3\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1875,\n\t\t\t\"versionNonce\": 111679186,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"077tQWgKOIap3QXnBLgV7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 293.99665842277386,\n\t\t\t\"y\": 744.6236879604987,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 53.23262593123076,\n\t\t\t\"height\": 62.46281622171591,\n\t\t\t\"seed\": 634458450,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735627186223,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"GL9vb8pueXtWr2RmS0nii\",\n\t\t\t\t\"focus\": -0.38630027544233725,\n\t\t\t\t\"gap\": 13.33331298828125\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"lqQE76nU\",\n\t\t\t\t\"focus\": -0.002039694929302903,\n\t\t\t\t\"gap\": 9.36635963599997\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.23262593123076,\n\t\t\t\t\t-62.46281622171591\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1868,\n\t\t\t\"versionNonce\": 15338066,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xOHIif5pjHP4z8XPCBnSm\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 444.4641753915471,\n\t\t\t\"y\": 746.65877675059,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 64.18759319000105,\n\t\t\t\"height\": 63.33929887729846,\n\t\t\t\"seed\": 1208424210,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735627186223,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"A_4-Hyt51eiq4PrSr1KEF\",\n\t\t\t\t\"focus\": 0.3609076347195428,\n\t\t\t\t\"gap\": 10.297241932846191\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"lqQE76nU\",\n\t\t\t\t\"focus\": 0.02671002330675563,\n\t\t\t\t\"gap\": 10.524965770508743\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-64.18759319000105,\n\t\t\t\t\t-63.33929887729846\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 939,\n\t\t\t\"versionNonce\": 1364876622,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3IGHyHRK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 156.89264415976163,\n\t\t\t\"y\": 809.2557091832953,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1224107218,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625621771,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe08::2/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe08::2/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe08::2/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 885,\n\t\t\t\"versionNonce\": 1576956046,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"5YSeSicv\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 399.24770274737557,\n\t\t\t\"y\": 809.937320456196,\n\t\t\t\"strokeColor\": \"#0b7285\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 305527442,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625631262,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe08::3/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe08::3/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe08::3/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 761,\n\t\t\t\"versionNonce\": 309324174,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"OdApLWI6\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -550.0776327847146,\n\t\t\t\"y\": 579.6004110247309,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1115478098,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"PUq9R7fOCI4G3gtfNkj_8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:1::3/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:1::3/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:1::3/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 578,\n\t\t\t\"versionNonce\": 1495650770,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"V0KixCBp\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -430.9511927963766,\n\t\t\t\"y\": 636.4264978616998,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1058104594,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65005\",\n\t\t\t\"rawText\": \"AS 65005\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65005\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 786,\n\t\t\t\"versionNonce\": 305556558,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"3rlDoN9N\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 482.68962916101367,\n\t\t\t\"y\": 633.4288616881679,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 70.28125,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1166471890,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 65008\",\n\t\t\t\"rawText\": \"AS 65008\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 65008\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 766,\n\t\t\t\"versionNonce\": 602916754,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"nNdUNW_rJiUC9lTd1LNVK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -303.86674927446535,\n\t\t\t\"y\": 412.02413790575474,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 159697042,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"PUq9R7fOCI4G3gtfNkj_8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"fNwYvEORMK42e8yDeyHe2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"iVKDpj8O\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 758,\n\t\t\t\"versionNonce\": 696234638,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"iVKDpj8O\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -271.76672028276613,\n\t\t\t\"y\": 417.02413790575474,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 50.79994201660156,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 1120003666,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine1\",\n\t\t\t\"rawText\": \"spine1\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"nNdUNW_rJiUC9lTd1LNVK\",\n\t\t\t\"originalText\": \"spine1\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 811,\n\t\t\t\"versionNonce\": 1970603346,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"v-4h9c8k0l-uFsOb-hcCf\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 306.54954731505507,\n\t\t\t\"y\": 411.8492533303436,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 437603346,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_MSofNFUFcqny2jpQzrEC\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x1AVW9Z0ppB8umjUOaleg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"DLjLkpr5\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 804,\n\t\t\t\"versionNonce\": 205926606,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"DLjLkpr5\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 334.23958027403944,\n\t\t\t\"y\": 416.8492533303436,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 59.61993408203125,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 91617746,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"spine2\",\n\t\t\t\"rawText\": \"spine2\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"v-4h9c8k0l-uFsOb-hcCf\",\n\t\t\t\"originalText\": \"spine2\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 402,\n\t\t\t\"versionNonce\": 1728875282,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"qa2S8vW2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -530.4914199029449,\n\t\t\t\"y\": 460.0635501307096,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 603647890,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"PUq9R7fOCI4G3gtfNkj_8\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:1::2/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:1::2/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:1::2/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 312,\n\t\t\t\"versionNonce\": 1176692494,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"alo7yYc5\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -318.15594008567916,\n\t\t\t\"y\": 300.9689671892517,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 234.375,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 878444306,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01::a/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01::a/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01::a/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 346,\n\t\t\t\"versionNonce\": 1328371922,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"jiotFDSb\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -346.4551296811355,\n\t\t\t\"y\": 383.2316361897593,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 187.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 595522254,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"3fff:172:30:30::2/80\",\n\t\t\t\"rawText\": \"3fff:172:30:30::2/80\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"3fff:172:30:30::2/80\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 2077,\n\t\t\t\"versionNonce\": 1654396366,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"PUq9R7fOCI4G3gtfNkj_8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -261.4439410683618,\n\t\t\t\"y\": 576.907011001209,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0.40033168754325743,\n\t\t\t\"height\": 118.02084447631927,\n\t\t\t\"seed\": 433794386,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735628856533,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"OdApLWI6\",\n\t\t\t\t\"focus\": 1.2805625024501952,\n\t\t\t\t\"gap\": 15.831422245648128\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"qa2S8vW2\",\n\t\t\t\t\"focus\": -1.1226441256062405,\n\t\t\t\t\"gap\": 13.102630532754603\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.40033168754325743,\n\t\t\t\t\t-118.02084447631927\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1606,\n\t\t\t\"versionNonce\": 493776530,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"fNwYvEORMK42e8yDeyHe2\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 349.05088111689554,\n\t\t\t\"y\": 602.7772881927704,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 572.8675414605638,\n\t\t\t\"height\": 151.84303797841233,\n\t\t\t\"seed\": 1819128594,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"YU2a4TkDhhc_DI6YUOmY9\",\n\t\t\t\t\"focus\": 0.7412783087740324,\n\t\t\t\t\"gap\": 11.863860640980647\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"nNdUNW_rJiUC9lTd1LNVK\",\n\t\t\t\t\"focus\": 0.47136972415380335,\n\t\t\t\t\"gap\": 3.9101123086032885\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-572.8675414605638,\n\t\t\t\t\t-151.84303797841233\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 288,\n\t\t\t\"versionNonce\": 221055122,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"lwsTZiuS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -235.37548187645308,\n\t\t\t\"y\": 467.2000563427923,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1579778258,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"fNwYvEORMK42e8yDeyHe2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735627636042,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:3::2/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:3::2/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:3::2/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1648,\n\t\t\t\"versionNonce\": 914803794,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"_MSofNFUFcqny2jpQzrEC\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 377.86269909195175,\n\t\t\t\"y\": 602.0639094609777,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 3.9704849373163142,\n\t\t\t\"height\": 150.68000060693703,\n\t\t\t\"seed\": 1252365970,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"WKGj6tgy\",\n\t\t\t\t\"focus\": -1.0490008749744337,\n\t\t\t\t\"gap\": 3.0891070124868065\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"v-4h9c8k0l-uFsOb-hcCf\",\n\t\t\t\t\"focus\": -0.15979749596509416,\n\t\t\t\t\"gap\": 4.534655523697097\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.9704849373163142,\n\t\t\t\t\t-150.68000060693703\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"arrow\",\n\t\t\t\"version\": 1829,\n\t\t\t\"versionNonce\": 1935169998,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"x1AVW9Z0ppB8umjUOaleg\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -239.01700842394274,\n\t\t\t\"y\": 607.2648850898026,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 560.1062744498826,\n\t\t\t\"height\": 159.41563175945907,\n\t\t\t\"seed\": 43578450,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"startBinding\": {\n\t\t\t\t\"elementId\": \"jVXjjKihsziFQWeexlA4o\",\n\t\t\t\t\"focus\": -0.6987465769621667,\n\t\t\t\t\"gap\": 10.206672701260686\n\t\t\t},\n\t\t\t\"endBinding\": {\n\t\t\t\t\"elementId\": \"v-4h9c8k0l-uFsOb-hcCf\",\n\t\t\t\t\"focus\": -0.1852265810882159,\n\t\t\t\t\"gap\": 1\n\t\t\t},\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"startArrowhead\": null,\n\t\t\t\"endArrowhead\": null,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t560.1062744498826,\n\t\t\t\t\t-159.41563175945907\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 456,\n\t\t\t\"versionNonce\": 1347252754,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"WScGWR4l\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 391.772881032952,\n\t\t\t\"y\": 457.21355880335,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 668637714,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:4::2/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:4::2/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:4::2/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 650,\n\t\t\t\"versionNonce\": 207318354,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Jd8gt05x\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 111.61225011443298,\n\t\t\t\"y\": 457.3755025505984,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 157386706,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"x1AVW9Z0ppB8umjUOaleg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735627641030,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:2::2/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:2::2/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:2::2/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 639,\n\t\t\t\"versionNonce\": 1303994322,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"Z2EPLVa7\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -380.35072576998374,\n\t\t\t\"y\": 424.3537833587975,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 2135211410,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 500\",\n\t\t\t\"rawText\": \"AS 500\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 500\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 762,\n\t\t\t\"versionNonce\": 216710734,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"NUkOkbI8\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 441.70557364745036,\n\t\t\t\"y\": 421.0609730571789,\n\t\t\t\"strokeColor\": \"#364fc7\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 52.484375,\n\t\t\t\"height\": 18.4,\n\t\t\t\"seed\": 1186675538,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 2,\n\t\t\t\"text\": \"AS 800\",\n\t\t\t\"rawText\": \"AS 800\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"AS 800\",\n\t\t\t\"lineHeight\": 1.15\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 765,\n\t\t\t\"versionNonce\": 450991506,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gU0gqRrw\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -219.61276193996497,\n\t\t\t\"y\": 577.6977679801887,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1578893586,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:2::3/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:2::3/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:2::3/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 831,\n\t\t\t\"versionNonce\": 1136848402,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"xVSk2CNe\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -384.3620574265522,\n\t\t\t\"y\": 664.8224283422821,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1625165522,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"V6kbCl7cc9ieVrry0Cpeg\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"qcVYLctNvxGT4sacZddJR\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625531344,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe05::1/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe05::1/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe05::1/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 978,\n\t\t\t\"versionNonce\": 1443133394,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"lqQE76nU\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 250.64681358988662,\n\t\t\t\"y\": 653.5945121027828,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 225,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1670931602,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"077tQWgKOIap3QXnBLgV7\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xOHIif5pjHP4z8XPCBnSm\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625534413,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t},\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe08::1/64\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe08::1/64\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe08::1/64\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 334,\n\t\t\t\"versionNonce\": 1603142350,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"QoKb6XUx\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 112.6488947373465,\n\t\t\t\"y\": 588.9253384520384,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1342308946,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:3::3/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:3::3/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:3::3/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 329,\n\t\t\t\"versionNonce\": 711121170,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"WKGj6tgy\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 384.06437233090355,\n\t\t\t\"y\": 582.3935010612231,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 253.125,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1089595410,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"fNwYvEORMK42e8yDeyHe2\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_MSofNFUFcqny2jpQzrEC\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"2001:db8:cafe:fe01:4::3/127\",\n\t\t\t\"rawText\": \"2001:db8:cafe:fe01:4::3/127\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"2001:db8:cafe:fe01:4::3/127\",\n\t\t\t\"lineHeight\": 1.2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"version\": 1058,\n\t\t\t\"versionNonce\": 1151367438,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"A_4-Hyt51eiq4PrSr1KEF\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 388.0479757518917,\n\t\t\t\"y\": 756.9560186834362,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 115,\n\t\t\t\"height\": 35,\n\t\t\t\"seed\": 1583289810,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"xOHIif5pjHP4z8XPCBnSm\",\n\t\t\t\t\t\"type\": \"arrow\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"id\": \"gElU9SXL\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"customData\": {\n\t\t\t\t\"legacyTextWrap\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 1061,\n\t\t\t\"versionNonce\": 780789458,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"gElU9SXL\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 408.9480154247433,\n\t\t\t\"y\": 761.9560186834362,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 73.19992065429688,\n\t\t\t\"height\": 25,\n\t\t\t\"seed\": 962628498,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"text\": \"server4\",\n\t\t\t\"rawText\": \"server4\",\n\t\t\t\"textAlign\": \"center\",\n\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\"containerId\": \"A_4-Hyt51eiq4PrSr1KEF\",\n\t\t\t\"originalText\": \"server4\",\n\t\t\t\"lineHeight\": 1.25\n\t\t},\n\t\t{\n\t\t\t\"type\": \"text\",\n\t\t\t\"version\": 483,\n\t\t\t\"versionNonce\": 1149904718,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"L5Au6m9a\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 0,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 269.7146094383827,\n\t\t\t\"y\": 385.9150192115617,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 187.5,\n\t\t\t\"height\": 19.2,\n\t\t\t\"seed\": 1101024270,\n\t\t\t\"groupIds\": [],\n\t\t\t\"frameId\": null,\n\t\t\t\"roundness\": null,\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1735625440476,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"fontSize\": 16,\n\t\t\t\"fontFamily\": 3,\n\t\t\t\"text\": \"3fff:172:30:30::3/80\",\n\t\t\t\"rawText\": \"3fff:172:30:30::3/80\",\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"3fff:172:30:30::3/80\",\n\t\t\t\"lineHeight\": 1.2\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 1,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"scrollX\": 599.4648758758813,\n\t\t\"scrollY\": 310.477335866756,\n\t\t\"zoom\": {\n\t\t\t\"value\": 0.8\n\t\t},\n\t\t\"currentItemRoundness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"gridColor\": {\n\t\t\t\"Bold\": \"#C9C9C9FF\",\n\t\t\t\"Regular\": \"#EDEDEDFF\"\n\t\t},\n\t\t\"colorPalette\": {},\n\t\t\"currentStrokeOptions\": null,\n\t\t\"previousGridSize\": null,\n\t\t\"frameRendering\": {\n\t\t\t\"enabled\": true,\n\t\t\t\"clip\": true,\n\t\t\t\"name\": true,\n\t\t\t\"outline\": true\n\t\t}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2025-03-26T03:48:43.167318584Z","tags":null},"/icmp-tcp-dns-%E9%85%8D%E7%BD%AE":{"title":"","content":"```yaml\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring-system\n  labels:\n    app:  monitoring\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: blackbox-config\n  namespace: monitoring-system\ndata:\n  blackbox.yml: |-\n    modules:\n      dns:\n        prober: dns\n        dns:\n          transport_protocol: \"tcp\"  # 默认是 udp\n          preferred_ip_protocol: \"ip4\"  # 默认是 ip6\n          query_name: \"kubernetes.default.svc.cluster.local\"\n      icmp:\n        prober: icmp\n      icmp_ttl5:\n        prober: icmp\n        timeout: 5s\n        icmp:\n          ttl: 5\n      tcp_connect:\n        prober: tcp\n        tcp:\n          preferred_ip_protocol: \"ip4\"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blackbox\n  namespace: monitoring-system\nspec:\n  selector:\n    matchLabels:\n      app: blackbox\n  template:\n    metadata:\n      labels:\n        app: blackbox\n    spec:\n      containers:\n      - image: quay.io/prometheus/blackbox-exporter:v0.22.0\n        name: blackbox\n        args:\n        - --config.file=/etc/blackbox_exporter/blackbox.yml # ConfigMap 中的配置文件\n        - --log.level=error  # 错误级别控制\n        - --web.listen-address=:9115\n        ports:\n        - containerPort: 9115\n        volumeMounts:\n        - name: config\n          mountPath: /etc/blackbox_exporter\n      volumes:\n      - name: config\n        configMap:\n          name: blackbox-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: blackbox\n  namespace: monitoring-system\nspec:\n  selector:\n    app: blackbox\n  ports:\n  - port: 9115\n    targetPort: 9115\n```\n\n\nprometheus\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring-system\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      scrape_timeout: 15s\n    scrape_configs:\n    - job_name: 'prometheus'\n      static_configs:\n      - targets: ['localhost:9090']\n      \n    - job_name: \"kubernetes-service-dns\"\n      metrics_path: /probe # 不是 metrics，是 probe\n      params:\n        module: [dns] # 使用 DNS 模块\n      static_configs:\n      - targets:\n        - kube-dns.kube-system:53  # 不要省略端口号\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n\n    - job_name: 'blackbox_http_ping'\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [icmp]\n      static_configs:\n      - targets:\n        - 223.5.5.5\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n\n    - job_name: 'blackbox_tcp_connect'\n      scrape_interval: 30s\n      metrics_path: /probe\n      params:\n        module: [tcp_connect]\n      static_configs:\n      - targets:\n        - 172.30.10.2:179\n        - 172.30.10.4:179\n      relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox:9115\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus-user\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - endpoints\n  - services\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus-user\nsubjects:\n- kind: ServiceAccount\n  name: prometheus-user\n  namespace: monitoring-system\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: monitoring-system\n  labels:\n    app: prometheus-pod\nspec:\n  progressDeadlineSeconds: 600\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-pod\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: prometheus-pod\n    spec:\n      containers:\n      - image: prom/prometheus\n        name: prometheus-pod\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        resources: \n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/prometheus/prometheus.yml\n          subPath: prometheus.yml\n      volumes:\n      - name: config-volume\n        configMap:\n          name: prometheus-config\n      restartPolicy: Always\n      serviceAccountName: prometheus-user\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-dashboard-svc\n  namespace: monitoring-system\nspec:\n  selector:\n    app: prometheus-pod\n  ports:\n  - nodePort: 32000\n    port: 9090\n    targetPort: 9090\n    protocol: TCP\n  type: NodePort\n```\n\n\n\n\n```\n---\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: monitoring-system\n  labels:\n    app:  grafana\nspec:\n  progressDeadlineSeconds: 600\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grafana\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: grafana\n\tspec:\n\t  containers:\n\t  - name: grafana-pod\n\t    image: grafana/grafana:latest\n\t    resources:\n\t      limits:\n\t        memory: \"128Mi\"\n\t        cpu: \"500m\"\n\t    volumeMounts:\n\t    - name: grafana-config-volume\n\t      mountPath: /etc/grafana/provisioning/datasources\n\t    - name: grafana-dashboards-volume\n\t      mountPath: /etc/grafana/provisioning/dashboards\n\t    - name: grafana-storage-volume\n\t      mountPath: /var/lib/grafana\n\t    ports:\n\t    - containerPort: 3000\n\t  volumes:\n\t  - name: grafana-storage-volume\n\t    emptyDir: {}\n\t  - name: grafana-config-volume\n\t    configMap:\n\t      name: grafana-config\n\t  - name: grafana-dashboards-volume\n\t    configMap:\n\t      name: grafana-dashboards-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana-dashboard-svc\n  namespace: monitoring-system\nspec:\n  selector:\n    app:  grafana-pod\n  ports:\n  - port: 3000\n    targetPort: 3000\n    protocol: TCP\n    nodePort: 31100\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-config\n  namespace: monitoring-system\ndata:\n  prometheus.yaml: |-\n    {\n        \"apiVersion\": 1,\n        \"datasources\": [\n            {\n               \"access\":\"proxy\",\n                \"editable\": true,\n                \"name\": \"block-exporter-prometheus\",\n                \"orgId\": 1,\n                \"type\": \"prometheus\",\n                \"url\": \"http://prometheus-dashboard-svc.monitoring-system.svc:9090\",\n                \"version\": 1\n            }\n        ]\n    }\n---\n\n```","lastmodified":"2025-03-26T03:48:43.135318697Z","tags":null},"/images-repository":{"title":"images-repository","content":"\n\u003e *Moby = open source development\n\u003e Docker CE = free product release based on Moby\n\u003e Docker EE = commercial product release based on Docker CE.*\n\n## 登录信息\n`cat /root/.docker/config.json`\n```json\n{\n\t\"auths\": {\n\t\t\"https://index.docker.io/v1/\": {\n\t\t\t\"auth\": \"cn********jMxMjMu\"\n\t\t}\n\t},\n\t\"aliases\": {\n\t\t\"builder\": \"buildx\"\n\t}\n}\n```\n\n```bash\n~#: echo -n \"cn********MjMu\" | base64 -d\nuser:mima\n```\n\n## 手动 push 多架构镜像\n[https://blog.csdn.net/linmengmeng_1314/article/details/123231087](https://blog.csdn.net/linmengmeng_1314/article/details/123231087)\n```bash\ndocker manifest create --insecure rykren/jdk8:latest rykren/jdk8:amd64 rykren/jdk8:arm64\n\n\ndocker manifest annotate rykren/jdk8:latest rykren/jdk8:amd64 --os linux --arch amd64\ndocker manifest annotate rykren/jdk8:latest rykren/jdk8:arm64 --os linux --arch arm64\n\ndocker manifest push --insecure onlyonelmm/jdk8:latest\n\n# 删除 manifest\ndocker manifest rm docker manifest annotate rykren/jdk8:latest\n```\n\n\n## 配置 push 仓库信息\n在配置完Harbor 后发现 push 功能不可用出现以下问题\n==unauthorized: unauthorized to access repository: xuegod-web/redis-photon, action: push: unauthorized to access repository: xuegod-web/redis-photon, action: push==\n\n发现/root/.docker/config.json 中设置为IP地址，而在daemon.json 设的为主机名，更改为同样设置：\n``` bash\n~#: cat config.json \n{ \"auths\": { \"_win21.inno.com_\": { \"auth\": \"YWRt****QDIwMjA=\" } } } \n~#: cat /etc/docker/daemon.json \n{ \"insecure-registries\":[\"_win21.inno.com_\"] }\n```\n\n\n## 拉取镜像\n1.  普通拉取\n直接拉取该镜像的最新版,默认拉取tag为latest的镜像\n`docker pull ubuntu`\n\n2.  tag指定标签拉取\n`docker pull ubuntu:18.04`\n\n3.  摘要拉取\n`docker pull ubuntu@sha256:xxx`  \n\n4.  从其他镜像仓库中拉取\n默认情况下 `docker pull` 从Docker Hub拉取镜像。当然，我们可以设置从其他注册中心拉取镜像，注册中心的URL前不需要加`http://`或`https://`\n`docker pull localregistry.example:6666/testing/test-image`\n\n5.  从同一镜像库，一次拉取多个镜像\n使用`docker pull -a` 则可以拉取同一镜像库中所有镜像。\n\n\n## 国内镜像源\n-   docker官方中国区 https://registry.docker-cn.com\n-   网易 http://hub-mirror.c.163.com\n-   ustc http://docker.mirrors.ustc.edu.cn\n``` json\n{\n  \"registry-mirrors\" : [\n    \"https://registry.docker-cn.com\",\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"http://hub-mirror.c.163.com\"\n  ],\n  \"insecure-registries\" : [\n    \"registry.docker-cn.com\",\n    \"docker.mirrors.ustc.edu.cn\"\n  ],\n  \"debug\" : true,\n  \"experimental\" : true\n}\n```\n\n## 阿里云镜像\t\n`docker login --username=renyunkang registry.cn-hangzhou.aliyuncs.com`\n\n替换 entrypoint\n`docker run -it --entrypoint /bin/bash xxxx`\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/ingress-api-gateway-api":{"title":"ingress api - gateway api","content":"\nhttps://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/\nhttps://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/\n\n\nhttps://kubernetes.io/docs/concepts/services-networking/ingress/\nhttps://kubernetes.io/docs/concepts/services-networking/gateway/\nhttps://gateway-api.sigs.k8s.io/\n\n\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/networking/v1/types.go\nhttps://github.com/kubernetes-sigs/gateway-api/blob/main/apis/v1/gateway_types.go\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/88b4483b4cdbe73b272095c0ea915be6.png)\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/ingressAPI":{"title":"","content":"\n安装 以及 验证\n```bash\n--set ingressController.enabled=true\n```\n\n```bash\ncilium config view | grep ingress-controller\n```\n\n\nKubernetes 提供了标准的 Ingress 资源类型来配置 L7 负载均衡和流量管理。在大多数集群中，应用 Ingress 资源需要安装 Ingress Controller，例如使用Nginx、Traefik 或 Contour。\n\nCilium 自动在集群中实现 Ingress 并执行已配置的负载均衡配置。 因此无需选择 Ingress Controller 提供程序，也无需关心使其保持最新状态！\n\n```yaml\n# Copyright Istio Authors\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n##################################################################################################\n# This file defines the services, service accounts, and deployments for the Bookinfo sample.\n#\n# To apply all 4 Bookinfo services, their corresponding service accounts, and deployments:\n#\n#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\n#\n# Alternatively, you can deploy any resource separately:\n#\n#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l service=reviews # reviews Service\n#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l account=reviews # reviews ServiceAccount\n#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l app=reviews,version=v3 # reviews-v3 Deployment\n##################################################################################################\n\n##################################################################################################\n# Details service\n##################################################################################################\napiVersion: v1\nkind: Service\nmetadata:\n  name: details\n  labels:\n    app: details\n    service: details\nspec:\n  ports:\n  - port: 9080\n    name: http\n  selector:\n    app: details\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: bookinfo-details\n  labels:\n    account: details\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: details-v1\n  labels:\n    app: details\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: details\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: details\n        version: v1\n    spec:\n      serviceAccountName: bookinfo-details\n      containers:\n      - name: details\n        image: docker.io/istio/examples-bookinfo-details-v1:1.16.2\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9080\n        securityContext:\n          runAsUser: 1000\n---\n##################################################################################################\n# Ratings service\n##################################################################################################\napiVersion: v1\nkind: Service\nmetadata:\n  name: ratings\n  labels:\n    app: ratings\n    service: ratings\nspec:\n  ports:\n  - port: 9080\n    name: http\n  selector:\n    app: ratings\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: bookinfo-ratings\n  labels:\n    account: ratings\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ratings-v1\n  labels:\n    app: ratings\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ratings\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: ratings\n        version: v1\n    spec:\n      serviceAccountName: bookinfo-ratings\n      containers:\n      - name: ratings\n        image: docker.io/istio/examples-bookinfo-ratings-v1:1.16.2\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9080\n        securityContext:\n          runAsUser: 1000\n---\n##################################################################################################\n# Reviews service\n##################################################################################################\napiVersion: v1\nkind: Service\nmetadata:\n  name: reviews\n  labels:\n    app: reviews\n    service: reviews\nspec:\n  ports:\n  - port: 9080\n    name: http\n  selector:\n    app: reviews\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: bookinfo-reviews\n  labels:\n    account: reviews\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: reviews-v1\n  labels:\n    app: reviews\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: reviews\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: reviews\n        version: v1\n    spec:\n      serviceAccountName: bookinfo-reviews\n      containers:\n      - name: reviews\n        image: docker.io/istio/examples-bookinfo-reviews-v1:1.16.2\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: LOG_DIR\n          value: \"/tmp/logs\"\n        ports:\n        - containerPort: 9080\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: wlp-output\n          mountPath: /opt/ibm/wlp/output\n        securityContext:\n          runAsUser: 1000\n      volumes:\n      - name: wlp-output\n        emptyDir: {}\n      - name: tmp\n        emptyDir: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: reviews-v2\n  labels:\n    app: reviews\n    version: v2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: reviews\n      version: v2\n  template:\n    metadata:\n      labels:\n        app: reviews\n        version: v2\n    spec:\n      serviceAccountName: bookinfo-reviews\n      containers:\n      - name: reviews\n        image: docker.io/istio/examples-bookinfo-reviews-v2:1.16.2\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: LOG_DIR\n          value: \"/tmp/logs\"\n        ports:\n        - containerPort: 9080\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: wlp-output\n          mountPath: /opt/ibm/wlp/output\n        securityContext:\n          runAsUser: 1000\n      volumes:\n      - name: wlp-output\n        emptyDir: {}\n      - name: tmp\n        emptyDir: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: reviews-v3\n  labels:\n    app: reviews\n    version: v3\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: reviews\n      version: v3\n  template:\n    metadata:\n      labels:\n        app: reviews\n        version: v3\n    spec:\n      serviceAccountName: bookinfo-reviews\n      containers:\n      - name: reviews\n        image: docker.io/istio/examples-bookinfo-reviews-v3:1.16.2\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: LOG_DIR\n          value: \"/tmp/logs\"\n        ports:\n        - containerPort: 9080\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: wlp-output\n          mountPath: /opt/ibm/wlp/output\n        securityContext:\n          runAsUser: 1000\n      volumes:\n      - name: wlp-output\n        emptyDir: {}\n      - name: tmp\n        emptyDir: {}\n---\n##################################################################################################\n# Productpage services\n##################################################################################################\napiVersion: v1\nkind: Service\nmetadata:\n  name: productpage\n  labels:\n    app: productpage\n    service: productpage\nspec:\n  ports:\n  - port: 9080\n    name: http\n  selector:\n    app: productpage\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: bookinfo-productpage\n  labels:\n    account: productpage\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: productpage-v1\n  labels:\n    app: productpage\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: productpage\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: productpage\n        version: v1\n    spec:\n      serviceAccountName: bookinfo-productpage\n      containers:\n      - name: productpage\n        image: docker.io/istio/examples-bookinfo-productpage-v1:1.16.2\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 9080\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        securityContext:\n          runAsUser: 1000\n      volumes:\n      - name: tmp\n        emptyDir: {}\n---\n```\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/67273174222b99741e7f10c467d2aefc.png)\n\n请注意，使用 Cilium Service Mesh 时，不会与每个演示应用程序微服务一起创建 Envoy sidecar。通过 sidecar 实现(如 istio)，输出将显示 2/2 READY：一个用于微服务，一个用于 Envoy sidecar。\n\n```bash\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: basic-ingress\n  namespace: default\nspec:\n  ingressClassName: cilium\n  rules:\n    - http:\n        paths:\n          - backend:\n              service:\n                name: details\n                port:\n                  number: 9080\n            path: /details\n            pathType: Prefix\n          - backend:\n              service:\n                name: productpage\n                port:\n                  number: 9080\n            path: /\n            pathType: Prefix\n```\n\n\nHubble 是 Cilium 的可选组件，它为网络堆栈带来了可观察性。 \nHubble 提供了可视化流程： \n- 经过 Cilium 的每个请求\n- 使用 Cilium 身份 \n- 提供 L3/L4/L7 的可视性\n\n\n\n请注意，hubble当前仅涵盖 L3/L4 详细信息（协议、端口），但不涵盖 L7 详细信息（例如 HTTP 动词、路径或标头）\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/07/c9815e7a08e7c35c6836d13b521d1e25.png)\n\nCilium 提供了两种为哈勃流添加 L7 可见性的方法： \n- 通过注释 pod \n- 通过部署 CiliumNetworkPolicy 资源\n\n\n\n\n对任何系统（尤其是 Kubernetes 环境）都很重要的 4 类信号，包括延迟、吞吐量、错误和饱和度。每个人都有自己的健康定义，以及哪些指标和分析定义了这些阈值。\n\n延迟\n最常表示为应用层的响应时间（以毫秒 (ms) 为单位）。 应用程序响应时间受到所有核心系统资源（包括网络、存储、处理器 (CPU) 和内存）的延迟的影响。 应用程序层的延迟还需要与应用程序进程内部、pod/服务之间、网络/网格等内部可能发生的延迟和资源使用相关。\n\n吞吐量\n吞吐量有时称为流量，是指服务和应用程序从 Kubernetes 环境内部和外部发送和接收的请求的数量和类型。 吞吐量指标包括 Web 请求、API 调用等示例，并被描述为通常表示为每秒请求数的需求。 应该跨所有层进行测量，以识别发往和来自服务的请求，以及哪些 I/O 进一步向下到达节点。\n\n错误\n失败的请求（流量）数量，通常以绝对数字或错误请求与请求总数的百分比表示。 由于应用程序问题、可能的配置错误以及策略定义的某些错误，可能会发生错误。 策略驱动的错误可能表示意外的错误配置或潜在的恶意进程。\n\n饱和度\n资源的总体利用率，包括 CPU（容量、配额、限制）、内存（容量、分配）、存储（容量、分配和 I/O 吞吐量）和网络。 一些资源线性饱和（例如存储容量），而其他资源（内存、CPU 和网络）则随着容器化应用程序的短暂性而波动更大。 网络饱和是监控 Kubernetes 复杂性的一个很好的例子，因为存在节点网络、服务到服务的网络吞吐量，并且一旦服务网格到位，就会有更多的路径，并且可能有更多的瓶颈可能会饱和。\n\n\n\n```bash\nroot@server:~# helm get values -n kube-system cilium\nUSER-SUPPLIED VALUES:\nhubble:\n  metrics:\n    dashboards:\n      annotations:\n        grafana_folder: Hubble\n      enabled: true\n      namespace: monitoring\n    enableOpenMetrics: true\n    enabled:\n    - dns\n    - drop\n    - tcp\n    - icmp\n    - flow:sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\n    - kafka:labelsContext=source_namespace,source_workload,destination_namespace,destination_workload,traffic_direction;sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\n    - httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction;sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity\n    serviceMonitor:\n      enabled: true\n  relay:\n    prometheus:\n      enabled: true\n      serviceMonitor:\n        enabled: true\n    service:\n      type: NodePort\n  ui:\n    service:\n      type: NodePort\nk8sServiceHost: kind-control-plane\nk8sServicePort: 6443\nkubeProxyReplacement: true\noperator:\n  prometheus:\n    enabled: true\n    serviceMonitor:\n      enabled: true\n  replicas: 1\nprometheus:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n```\n\nexamplelars=true 将使我们能够将应用程序跟踪中的 OpenTelemetry 跟踪点显示为 Grafana 图表上的叠加层 \nlabelsContext 设置为向指标添加额外标签，包括源/目标 IP、源/目标命名空间、源/目标工作负载以及流量方向（入口或出口） \nsourceContext 设置源标签的构建方式，在这种情况下，尽可能使用工作负载名称，否则使用保留标识（例如世界） \ndestinationContext 对目的地执行相同的操作","lastmodified":"2025-03-26T03:48:43.138318686Z","tags":null},"/install-KubeOVN":{"title":"","content":"#kube-ovn #kubekey #install \n\n## overlay 安装\n1. 使用 kubekey 安装\n```yaml\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  ...\n  network:\n    plugin: kubeovn\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n  ...\n```\n2. 自定义安装 - 使用安装脚本\n```bash\nwget https://raw.githubusercontent.com/kubeovn/kube-ovn/release-1.10/dist/images/install.sh\n\n# 修改对应的参数\nREGISTRY=\"kubeovn\" # 镜像仓库地址\nPOD_CIDR=\"10.16.0.0/16\" # 默认子网 CIDR 不要和 SVC/NODE/JOIN CIDR 重叠\nSVC_CIDR=\"10.96.0.0/12\" # 需要和 apiserver 的 service-cluster-ip-range 保持一致 \nJOIN_CIDR=\"100.64.0.0/16\" # Pod 和node通信 CIDR，不要和 SVC/NODE/POD CIDR 重叠\nLABEL=\"node-role.kubernetes.io/master\" # 部署 OVN DB 节点的标签 \nTUNNEL_TYPE=\"geneve\" # 隧道封装协议(geneve/vxlan/stt,stt 要单独编译 ovs 内核模块)\nIFACE=\"\" # 容器网络所使用的的宿主机网卡名，如果为空则使用 Kubernetes 中的 Node IP 所在网卡，可以用正则表达式匹配\n\n# 执行安装\nbash install.sh\n```\n\n\n## underlay 安装\n### 环境要求\n在 Underlay 模式下， OVS 将会桥接一个节点网卡到 OVS 网桥，并将数据包直接通过该节点网卡对外发送，L2/L3 层面的转发能力需要依赖底层网络设备。 需要预先在底层网络设备配置对应的网关、Vlan 和安全策略等配置。\n\n1.  对于 OpenStack 的 VM 环境，需要将对应网络端口的 `PortSecurity` 关闭。\n2.  对于 VMware 的 vSwitch 网络，需要将 `MAC Address Changes`, `Forged Transmits` 和 `Promiscuous Mode Operation` 设置为 `allow`。\n3.  公有云，例如 AWS、GCE、阿里云等由于不支持用户自定义 Mac 无法支持 Underlay 模式网络。\n4.  桥接网卡不能为 Linux Bridge。\n\n对于管理网和容器网使用同一个网卡的情况下，Kube-OVN 会将网卡的 Mac 地址、IP 地址、路由以及 MTU 将转移或复制至对应的 OVS Bridge， 以支持单网卡部署 Underlay 网络。OVS Bridge 名称格式为 `br-PROVIDER_NAME`，`PROVIDER_NAME` 为 Provider 网络名称（默认为 provider）。\n\n### 安装\n使用 kubekey 安装 overlay 之后额外进行 CRD 配置\n```yaml\n---\napiVersion: kubeovn.io/v1\nkind: ProviderNetwork\nmetadata:\n  name: provider\nspec:\n  defaultInterface: eth0\n---\napiVersion: kubeovn.io/v1\nkind: Vlan\nmetadata:\n  name: vlan\nspec:\n  id: 10\n  provider: provider\n---\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet\nspec:\n  logicalGateway: false\n  cidrBlock: 172.30.10.0/24\n  gateway: 172.30.10.1\n  vlan: vlan\n  excludeIps:\n  - 172.30.10.1\n```\n\n修改 ovn-default 的 default 为 false\n修改 subnet 为 default 为 true\n\n### 使用脚本安装\n```bash\n# 下载脚本\nwget https://raw.githubusercontent.com/kubeovn/kube-ovn/release-1.10/dist/images/install.sh\n\n# 修改脚本中相应配置\n`NETWORK_TYPE          # 设置为 vlan \nVLAN_INTERFACE_NAME   # 设置为宿主机上承担容器流量的网卡，例如 eth1 \nVLAN_ID               # 交换机所接受的 VLAN Tag，若设置为 0 则不做 VLAN 封装 \nPOD_CIDR              # 设置为物理网络 CIDR， 例如 192.168.1.0/24 \nPOD_GATEWAY           # 设置为物理网络网关，例如192.168.1.1 \nEXCLUDE_IPS           # 排除范围，避免容器网段和物理网络已用 IP 冲突，例如 192.168.1.1..192.168.1.100`\n\n# 运行安装脚本\nbash install.sh\n```\n\n\n镜像：\n- registry.cn-beijing.aliyuncs.com/kubesphereio/kube-ovn:v1.10.6\n- kubeovn/kube-ovn:v1.10.6","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/ip-%E5%9C%B0%E5%9D%80":{"title":"ip 地址","content":"\n## IPv4\n\n| 地址块 CIDR | 范围 | 地址数 | 效用域 | 用途 |\n| --- | --- | --- | --- | --- |\n| 0.0.0.0/8 | 0.0.0.0 – 0.255.255.255 | 16,777,216 | 软件 | 用于广播信息到当前主机 |\n| 10.0.0.0/8 | 10.0.0.0 – 10.255.255.255 | 16,777,216 | 专用网络 | 用于专用网络中的本地通信 |\n| 100.64.0.0/10 | 100.64.0.0 – 100.127.255.255 | 4,194,304 | 专用网络 | 用于在电信级NAT环境中服务提供商与其用户通信 |\n| 127.0.0.0/8 | 127.0.0.0 – 127.255.255.255 | 16,777,216 | 主机 | 用于到本地主机的环回地址 |\n| 169.254.0.0/16 | 169.254.0.0 – 169.254.255.255 | 65,536 | 链路 | 用于单链路的两个主机之间的链路本地地址，而没有另外指定IP地址，例如通常从DHCP服务器所检索到的IP地址 |\n| 172.16.0.0/12 | 172.16.0.0 – 172.31.255.255 | 1,048,576 | 专用网络 | 用于专用网络中的本地通信 |\n| 192.0.0.0/24 | 192.0.0.0 – 192.0.0.255 | 256 | 专用网络 | 用于IANA的IPv4特殊用途地址表 |\n| 192.0.2.0/24 | 192.0.2.0 – 192.0.2.255 | 256 | 文档 | 分配为用于文档和示例中的“TEST-NET”（测试网），它不应该被公开使用 |\n| 192.88.99.0/24 | 192.88.99.0 – 192.88.99.255 | 256 | 互联网 | 用于6to4任播中继 |\n| 192.168.0.0/16 | 192.168.0.0 – 192.168.255.255 | 65,536 | 专用网络 | 用于专用网络中的本地通信 |\n| 198.18.0.0/15 | 198.18.0.0 – 198.19.255.255 | 131,072 | 专用网络 | 用于测试两个不同的子网的网间通信 |\n| 198.51.100.0/24 | 198.51.100.0 – 198.51.100.255 | 256 | 文档 | 分配为用于文档和示例中的“TEST-NET-2”（测试-网-2），它不应该被公开使用 |\n| 203.0.113.0/24 | 203.0.113.0 – 203.0.113.255 | 256 | 文档 | 分配为用于文档和示例中的“TEST-NET-3”（测试-网-3），它不应该被公开使用|\n| 224.0.0.0/4 | 224.0.0.0 – 239.255.255.255 | 268,435,456 | 互联网 | 用于多播|\n| 233.252.0.0/24 | 233.252.0.0 - 233.252.0.255 | 256 | 文档 | 分配为用于文档和示例中的“MCAST-TEST-NET”，它不应该被公开使用 |\n| 240.0.0.0/4 | 240.0.0.0 – 255.255.255.254 | 268,435,455 | 互联网 | 用于将来使用 |\n| 255.255.255.255/32 | 255.255.255.255 | 1 | 子网 | 用于受限广播地址 |\n\n## IPv6\n\n| 地址块（CIDR） | 范围 | 地址数 | 效用域 | 用途 |\n| --- | --- | --- | --- | --- |\n| ::/128 | :: | 1 | 软件 | 未指定地址。 |\n| ::1/128 | ::1 | 1 | 主机 | 用于到本地主机的环回地址 |\n| ::ffff:0:0/96 | ::ffff:0:0 –::ffff:ffff:ffff(::ffff:0.0.0.0 –::ffff:255.255.255.255) | 232 | 软件 | IPv4映射地址。 |\n| 100::/64 | 100:: –100::ffff:ffff:ffff:ffff | 264 |  | RFC 6666中废除的前缀。 |\n| 64:ff9b::/96 | 64:ff9b::64:ff9b::ffff:ffff(64:ff9b::0.0.0.0 –64:ff9b::255.255.255.255) | 232 | 全球互联网 |\n| 2001::/32 | 2001:: –2001::ffff:ffff:ffff:ffff:ffff:ffff | 296 | 全局 | 用于Teredo通道。 |\n| 2001:10::/28 | 2001:10:: –2001:1f:ffff:ffff:ffff:ffff:ffff:ffff | 2100 | 软件 | 已弃用（先前为ORCHID） |\n| 2001:20::/28 | 2001:20:: –2001:2f:ffff:ffff:ffff:ffff:ffff:ffff | 2100 | 软件 | ORCHIDv2 |\n| 2001:db8::/32 | 2001:db8:: –2001:db8:ffff:ffff:ffff:ffff:ffff:ffff | 296 | 文档 | 用于文档和示例源代码中的地址。 |\n| 2002::/16 | 2002:: –2002:ffff:ffff:ffff:ffff:ffff:ffff:ffff | 2112 | 全球互联网 | 用于6to4 |\n| fc00::/7 | fc00:: –fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | 2121 | 专用网络 | 用于专用网络中的本地通信 |\n| fe80::/10 | fe80:: –febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff | 2118 | 链路 | 用于主机之间的链路本地地址 |\n| ff00::/8 | ff00:: –ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | 2120 | 全球互联网 | 用于多播地址|\n\n[IPv6 address - Wikipedia](https://en.wikipedia.org/wiki/IPv6_address)","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/ipset":{"title":"ipset","content":"## iptables中使用ipset\n在iptables中使用`ipset`，只要加上-m set --match-set即可\n\n1. 目的ip使用ipset（ipset集合为bbb）\n\n`iptables -I INPUT -s 192.168.100.36 -m set --match-set bbb dst -j DROP`\n\n2. 源ip使用ipset（ipset集合为aaa）\n\n`iptables -I INPUT -m set --match-set aaa src -d 192.168.100.36  -j DROP`\n \n\n3. 源和目的都使用ipset（源ip集合为aaa，目的ip集合为bbb）\n\n`iptables -I INPUT -m set --match-set aaa src -m set --match-set bbb dst  -j DROP`\n \n可以使用 ipset 配置黑白名单\n```bash\nroot@orange:~# ipset -\nipset\u003e h\nipset v7.5\n\nUsage: ipset [options] COMMAND\n\nCommands:\ncreate SETNAME TYPENAME [type-specific-options]\n        Create a new set\nadd SETNAME ENTRY\n        Add entry to the named set\ndel SETNAME ENTRY\n        Delete entry from the named set\ntest SETNAME ENTRY\n        Test entry in the named set\ndestroy [SETNAME]\n        Destroy a named set or all sets\nlist [SETNAME]\n        List the entries of a named set or all sets\nsave [SETNAME]\n        Save the named set or all sets to stdout\nrestore\n        Restore a saved state\nflush [SETNAME]\n        Flush a named set or all sets\nrename FROM-SETNAME TO-SETNAME\n        Rename two sets\nswap FROM-SETNAME TO-SETNAME\n        Swap the contect of two existing sets\nhelp [TYPENAME]\n        Print help, and settype specific help\nversion\n        Print version information\nquit\n        Quit interactive mode\n\nOptions:\n-o plain|save|xml\n       Specify output mode for listing sets.\n       Default value for \"list\" command is mode \"plain\"\n       and for \"save\" command is mode \"save\".\n-s\n        Print elements sorted (if supported by the set type).\n-q\n        Suppress any notice or warning message.\n-r\n        Try to resolve IP addresses in the output (slow!)\n-!\n        Ignore errors when creating or adding sets or\n        elements that do exist or when deleting elements\n        that don't exist.\n-n\n        When listing, just list setnames from the kernel.\n\n-t\n        When listing, list setnames and set headers\n        from kernel only.\n-f\n        Read from the given file instead of standard\n        input (restore) or write to given file instead\n        of standard output (list/save).\n\nSupported set types:\n    list:set            3       skbinfo support\n    list:set            2       comment support\n    list:set            1       counters support\n    list:set            0       Initial revision\n    hash:mac            0       Initial revision\n    hash:ip,mac         0       Initial revision\n    hash:net,iface      7       skbinfo and wildcard support\n    hash:net,iface      6       skbinfo support\n    hash:net,iface      5       forceadd support\n    hash:net,iface      4       comment support\n    hash:net,iface      3       counters support\n    hash:net,iface      2       /0 network support\n    hash:net,iface      1       nomatch flag support\n    hash:net,iface      0       Initial revision\n    hash:net,port       7       skbinfo support\n    hash:net,port       6       forceadd support\n    hash:net,port       5       comment support\n    hash:net,port       4       counters support\n    hash:net,port       3       nomatch flag support\n    hash:net,port       2       Add/del range support\n    hash:net,port       1       SCTP and UDPLITE support\n    hash:net,port,net   2       skbinfo support\n    hash:net,port,net   1       forceadd support\n    hash:net,port,net   0       initial revision\n    hash:net,net        2       skbinfo support\n    hash:net,net        1       forceadd support\n    hash:net,net        0       initial revision\n    hash:net            6       skbinfo support\n    hash:net            5       forceadd support\n    hash:net            4       comment support\n    hash:net            3       counters support\n    hash:net            2       nomatch flag support\n    hash:net            1       Add/del range support\n    hash:net            0       Initial revision\n    hash:ip,port,net    7       skbinfo support\n    hash:ip,port,net    6       forceadd support\n    hash:ip,port,net    5       comment support\n    hash:ip,port,net    4       counters support\n    hash:ip,port,net    3       nomatch flag support\n    hash:ip,port,net    2       Add/del range support\n    hash:ip,port,net    1       SCTP and UDPLITE support\n    hash:ip,port,ip     5       skbinfo support\n    hash:ip,port,ip     4       forceadd support\n    hash:ip,port,ip     3       comment support\n    hash:ip,port,ip     2       counters support\n    hash:ip,port,ip     1       SCTP and UDPLITE support\n    hash:ip,mark        2       skbinfo support\n    hash:ip,mark        1       forceadd support\n    hash:ip,mark        0       initial revision\n    hash:ip,port        5       skbinfo support\n    hash:ip,port        4       forceadd support\n    hash:ip,port        3       comment support\n    hash:ip,port        2       counters support\n    hash:ip,port        1       SCTP and UDPLITE support\n    hash:ip             4       skbinfo support\n    hash:ip             3       forceadd support\n    hash:ip             2       comment support\n    hash:ip             1       counters support\n    hash:ip             0       Initial revision\n    bitmap:port         3       skbinfo support\n    bitmap:port         2       comment support\n    bitmap:port         1       counters support\n    bitmap:port         0       Initial revision\n    bitmap:ip,mac       3       skbinfo support\n    bitmap:ip,mac       2       comment support\n    bitmap:ip,mac       1       counters support\n    bitmap:ip,mac       0       Initial revision\n    bitmap:ip           3       skbinfo support\n    bitmap:ip           2       comment support\n    bitmap:ip           1       counters support\n    bitmap:ip           0       Initial revision\n\n```\n","lastmodified":"2025-03-26T03:48:44.134315177Z","tags":null},"/iptables":{"title":"iptables","content":"\nCalico 使用 iptables 数据面时会创建多个 iptables 规则来实现网络策略和流量控制。这些规则用于实现诸如流量隔离、流量转发、负载均衡和访问控制等功能。\nCalico 会根据定义的网络策略自动生成 iptables 规则。此外，Calico 还会创建一些基础规则来实现其核心功能，例如路由和网络隔离。所以说，即使您没有定义任何网络策略，Calico 仍然会在主机上创建一些 iptables 规则。\n\n\n\ncalico 使用 iptables \n\n与 service 有什么关系？\n```\nWhen using Calico with Kubernetes' `kube-proxy` in IPVS mode, Calico uses additional iptables mark bits to store an ID for each local Calico endpoint. For example, the default `IptablesMarkMask` value, `0xffff0000` gives Calico 16 bits, up to 6 of which are used for internal purposes, leaving 10 bits for endpoint IDs. 10 bits is enough for 1024 different values and Calico uses 2 of those for internal purposes, leaving enough for 1022 endpoints on the host.\n```\n\n```\n**iptables: when to change mark bits**\n\nTo police traffic in IPVS mode, Calico uses additional iptables mark bits to store an ID for each local Calico endpoint. If you are planning to run more than 1,022 pods per host with IPVS enabled, you may need to adjust the mark bit size using the `IptablesMarkMask` parameter in Calico FelixConfiguration.\n```\n\n![upgit_20230323_1679556881.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230323_1679556881.png)\n\n\n开启了网络策略：\ncalico - nat\n```\n:cali-OUTPUT - [0:0]\n:cali-POSTROUTING - [0:0]\n:cali-PREROUTING - [0:0]\n:cali-fip-dnat - [0:0]\n:cali-fip-snat - [0:0]\n:cali-nat-outgoing - [0:0]\n```\n\n\ncalico - filter\n```\n:cali-FORWARD - [0:0]\n:cali-INPUT - [0:0]\n:cali-OUTPUT - [0:0]\n:cali-cidr-block - [0:0]\n:cali-forward-check - [0:0]\n:cali-forward-endpoint-mark - [0:0]\n:cali-from-endpoint-mark - [0:0]\n:cali-from-hep-forward - [0:0]\n:cali-from-host-endpoint - [0:0]\n:cali-from-wl-dispatch - [0:0]\n... ...\n:cali-fw-cali00611cd3a35 - [0:0]\n... ...\n:cali-pri-_4yKiQwonO0KS2HOLn2 - [0:0]\n... ...\n:cali-pri-kns.kube-system - [0:0]\n:cali-pri-kns.namespace-b - [0:0]\n:cali-pri-kns.rykren - [0:0]\n:cali-pri-ksa.rykren.default - [0:0]\n:cali-pro-_4yKiQwonO0KS2HOLn2 - [0:0]\n... ...\n:cali-pro-kns.kube-system - [0:0]\n:cali-pro-kns.namespace-b - [0:0]\n:cali-pro-kns.rykren - [0:0]\n:cali-pro-ksa.rykren.default - [0:0]\n:cali-set-endpoint-mark - [0:0]\n... ...\n:cali-sm-cali00611cd3a35 - [0:0]\n... ...\n:cali-to-hep-forward - [0:0]\n:cali-to-host-endpoint - [0:0]\n:cali-to-wl-dispatch - [0:0]\n... ...\n:cali-tw-calife8377029c4 - [0:0]\n... ...\n:cali-wl-to-host - [0:0]\n```\n\n\ncalico mangle\n```\n:cali-POSTROUTING - [0:0]\n:cali-PREROUTING - [0:0]\n:cali-from-host-endpoint - [0:0]\n:cali-to-host-endpoint - [0:0]\n```\n\ncalico raw\n```\n:cali-OUTPUT - [0:0]\n:cali-PREROUTING - [0:0]\n:cali-from-host-endpoint - [0:0]\n:cali-rpf-skip - [0:0]\n:cali-to-host-endpoint - [0:0]\n```\n\n\n未开启网络策略\n\n\n\n### calico 数据平面\n- iptables 数据面\n- ebpf 数据面\n\n1. iptables 数据面如何工作的\n\t1. calico controller + daemonset + calico cni bin\n2. cni 是否支持配置 policy ：type-k8s   disabled-true\n\n\ncalico pod 流量走向\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/iptables%E5%92%8Cipvs%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1":{"title":"IPTables负载均衡","content":"# IPTables负载均衡\n1. 环境准备，准备nginx镜像，一个为正常访问的欢迎界面，一个修改为其他的界面，此处我修改为了50x.html\n```bash\nroot@orange:~# docker run --rm -d --privileged=true nginx-test:1.0\nroot@orange:~# docker run --rm -d --privileged=true nginx:latest\n\nroot@orange:~# docker ps\nCONTAINER ID   IMAGE            COMMAND                  CREATED       STATUS       PORTS     NAMES\nf9cb0ed7d989   nginx:latest     \"/docker-entrypoint.…\"   2 hours ago   Up 2 hours   80/tcp    elated_heyrovsky\nd3c2a3037908   nginx-test:1.0   \"/docker-entrypoint.…\"   2 hours ago   Up 2 hours   80/tcp    magical_wing\n\nroot@orange:~# docker inspect f9cb0ed7d989 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"172.17.0.3\",\n                    \"IPAddress\": \"172.17.0.3\",\n\nroot@orange:~# docker inspect d3c2a3037908 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"172.17.0.2\",\n                    \"IPAddress\": \"172.17.0.2\",\n```\n\n2. 测试 - random 随机模式\n```bash\n# random模式\niptables -A PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -m statistic --mode random --probability 0.5 -j DNAT --to-destination 172.17.0.2:80\niptables -A PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -j DNAT --to-destination 172.17.0.3:80\n\n\n# 添加filter 过滤\n# 确保开启forward转发  echo \"1\" \u003e /proc/sys/net/ipv4/ip_forward\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -s 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -d 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -d 172.17.0.3 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -s 172.17.0.3 --dport 80 -j ACCEPT\n\n\n# 客户端访问\nroot@orange: curl 192.168.72.128:30000\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003ctitle\u003eError\u003c/title\u003e\n\u003cstyle\u003e\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n\u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003ch1\u003eAn error occurred.\u003c/h1\u003e\n\u003cp\u003eSorry, the page you are looking for is currently unavailable.\u003cbr/\u003e\nPlease try again later.\u003c/p\u003e\n\u003cp\u003eIf you are the system administrator of this resource then you should check\nthe error log for details.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFaithfully yours, nginx.\u003c/em\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n                                                                                                                 ✔\n\n root@orange: curl 192.168.72.128:30000\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003ctitle\u003eWelcome to nginx!\u003c/title\u003e\n\u003cstyle\u003e\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n\u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003ch1\u003eWelcome to nginx!\u003c/h1\u003e\n\u003cp\u003eIf you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.\u003c/p\u003e\n\n\u003cp\u003eFor online documentation and support please refer to\n\u003ca href=\"http://nginx.org/\"\u003enginx.org\u003c/a\u003e.\u003cbr/\u003e\nCommercial support is available at\n\u003ca href=\"http://nginx.com/\"\u003enginx.com\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThank you for using nginx.\u003c/em\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n  \n\n# 清理环境\nroot@orange:~# iptables -D FORWARD -t filter -p tcp -s 172.17.0.3 --dport 80 -j ACCEPT\nroot@orange:~# iptables -D FORWARD -t filter -p tcp -d 172.17.0.3 --dport 80 -j ACCEPT\nroot@orange:~# iptables -D FORWARD -t filter -p tcp -d 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -D FORWARD -t filter -p tcp -s 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -D PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -j DNAT --to-destination 172.17.0.3:80\nroot@orange:~# iptables -D PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -m statistic --mode random --probability 0.5 -j DNAT --to-destination 172.17.0.2:80\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640525448671-68b0b619-4e5b-4315-ae9a-afc93aebe343.png#clientId=u5e373d72-3c35-4\u0026from=paste\u0026height=309\u0026id=ub3c9e5e4\u0026originHeight=309\u0026originWidth=646\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=27900\u0026status=done\u0026style=shadow\u0026taskId=uf95f75d1-0028-4418-8ca2-9e026b11413\u0026title=\u0026width=646)   ![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640525481341-c3fa34bf-2c21-48fb-b540-8cc2be98eaf6.png#clientId=u5e373d72-3c35-4\u0026from=paste\u0026height=299\u0026id=u753a9132\u0026originHeight=299\u0026originWidth=601\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=29657\u0026status=done\u0026style=shadow\u0026taskId=u6ca05f47-aaa1-47eb-83dd-898862053fd\u0026title=\u0026width=601)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640526188890-ec793f12-f016-4c29-b9d5-6ca5955a6593.png#clientId=u5e373d72-3c35-4\u0026from=paste\u0026height=309\u0026id=u9daa0d38\u0026originHeight=309\u0026originWidth=1339\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=50638\u0026status=done\u0026style=none\u0026taskId=ufba3a8bc-51f6-497a-ade0-1ce0c47aac9\u0026title=\u0026width=1339)\n\n3. 测试 - nth 轮询模式\n\n该模式实现了`round robin` 算法。该算法采用两个不同的参数：`every (n) and packet(p)`。从数据包 p 开始，每 n 个数据包将评估该规则。\n```bash\n# 添加相应的规则\nroot@orange:~# iptables -A PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 172.17.0.2:80\nroot@orange:~# iptables -A PREROUTING -t nat -p tcp -d 192.168.72.128 --dport 30000 -j DNAT --to-destination 172.17.0.3:80\n\n\n# 查看对应的规则\nroot@orange:~# iptables -L PREROUTING -t nat\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\nKUBE-SERVICES  all  --  anywhere             anywhere             /* kubernetes service portals */\nDOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL\nCNI-HOSTPORT-DNAT  all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL\nDNAT       tcp  --  anywhere             orange               tcp dpt:30000 statistic mode nth every 2 to:172.17.0.2:80\nDNAT       tcp  --  anywhere             orange               tcp dpt:30000 to:172.17.0.3:80\n\n\n# 添加filter 过滤\n# 确保开启forward转发  echo \"1\" \u003e /proc/sys/net/ipv4/ip_forward\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -s 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -d 172.17.0.2 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -d 172.17.0.3 --dport 80 -j ACCEPT\nroot@orange:~# iptables -A FORWARD -t filter -p tcp -s 172.17.0.3 --dport 80 -j ACCEPT\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640527211772-7cd7e32b-b148-4b84-9ca9-6d8a7fca7ffb.png#clientId=u5e373d72-3c35-4\u0026from=paste\u0026height=129\u0026id=ufa8bd1bb\u0026originHeight=129\u0026originWidth=1196\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=24054\u0026status=done\u0026style=none\u0026taskId=u62b99df3-b9a2-4175-8fff-559593a0cfb\u0026title=\u0026width=1196)\n其他相关命令\n\n- 清除所有的规则：iptables -F\n# IPVS负载均衡\n执行 `lsmod` 指令，会列出所有已载入系统的模块，查看是否载入了ipvs。\n```bash\nroot@orange:~# lsmod | grep ip_vs\nip_vs_sh               16384  0\nip_vs_wrr              16384  0\nip_vs_rr               16384  0\nip_vs                 155648  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr\nnf_conntrack          139264  6 xt_conntrack,nf_nat,xt_nat,nf_conntrack_netlink,xt_MASQUERADE,ip_vs\nnf_defrag_ipv6         24576  2 nf_conntrack,ip_vs\nlibcrc32c              16384  6 nf_conntrack,nf_nat,btrfs,xfs,raid456,ip_vs\n```\n加载 `modprobe ip_vs`，打开IPv4的转发 `echo \"1\" \u003e /proc/sys/net/ipv4/ip_forward`\n测试镜像在负载均衡端提前安装`net-tools`、`iproute2`、`ipvsadm`；真实服务端安装`net-tools`\n## 测试环境 - docker 环境中\n**server** ip 172.17.0.2 -- 虚拟ip 172.17.0.100\n**real server1** ip 172.17.0.3\n**real server2** ip 172.17.0.4\n## 负载均衡端\n\n1. 安装负载均衡器端\n2. 配置虚拟ip\n3. 添加后台服务规则\n```bash\nroot@023dbde97c05:/# ifconfig eth0:8 172.17.0.100/24\nroot@023dbde97c05:/# ipvsadm -A -t 172.17.0.100:80 -s rr //创建一个DR，并指定调度算法采用rr\nroot@023dbde97c05:/# ipvsadm -a -t 172.17.0.100:80 -r 172.17.0.3 -g -w 1\nroot@023dbde97c05:/# ipvsadm -a -t 172.17.0.100:80 -r 172.17.0.4 -g -w 1\nroot@023dbde97c05:/# ipvsadm\nIP Virtual Server version 1.2.1 (size=4096)\nProt LocalAddress:Port Scheduler Flags\n  -\u003e RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  172.17.0.100:80 rr\n  -\u003e 172.17.0.3:80                Route   1      0          0\n  -\u003e 172.17.0.4:80                Route   1      0          0\n```\n\n## 真实服务端\n\n1. 调整RS的响应。通告级别\n2. 配置RS的VIP\n```bash\n# 隐藏vip于真实服务器中\nroot@d0d1466bde82:/# echo 1 \u003e /proc/sys/net/ipv4/conf/eth0/arp_ignore\nroot@d0d1466bde82:/# echo 1 \u003e /proc/sys/net/ipv4/conf/all/arp_ignore\nroot@d0d1466bde82:/# echo 2 \u003e /proc/sys/net/ipv4/conf/eth0/arp_announce\nroot@d0d1466bde82:/# echo 2 \u003e /proc/sys/net/ipv4/conf/all/arp_announce\n\n# 设置隐藏的vip\nroot@d0d1466bde82:/# ifconfig lo:3 172.17.0.100 netmask 255.255.255.255\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640537572636-8410d5f8-a0c1-4d98-95a5-5775d6a87e5f.png#clientId=ud01b6118-5e84-4\u0026from=paste\u0026height=139\u0026id=u893938f7\u0026originHeight=139\u0026originWidth=594\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=20414\u0026status=done\u0026style=none\u0026taskId=ud67c0ae1-504c-454c-9442-2280086d936\u0026title=\u0026width=594)\n## 验证\n```bash\nroot@orange:~# curl 172.17.0.100\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003ctitle\u003eError\u003c/title\u003e\n\u003cstyle\u003e\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n\u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003ch1\u003eAn error occurred.\u003c/h1\u003e\n\u003cp\u003eSorry, the page you are looking for is currently unavailable.\u003cbr/\u003e\nPlease try again later.\u003c/p\u003e\n\u003cp\u003eIf you are the system administrator of this resource then you should check\nthe error log for details.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFaithfully yours, nginx.\u003c/em\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n\nroot@orange:~# curl 172.17.0.100\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003ctitle\u003eWelcome to nginx!\u003c/title\u003e\n\u003cstyle\u003e\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n\u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003ch1\u003eWelcome to nginx!\u003c/h1\u003e\n\u003cp\u003eIf you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.\u003c/p\u003e\n\n\u003cp\u003eFor online documentation and support please refer to\n\u003ca href=\"http://nginx.org/\"\u003enginx.org\u003c/a\u003e.\u003cbr/\u003e\nCommercial support is available at\n\u003ca href=\"http://nginx.com/\"\u003enginx.com\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThank you for using nginx.\u003c/em\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n\n# 查看偷窥记录本\nroot@023dbde97c05:/# ipvsadm -lnc\nIPVS connection entries\npro expire state       source             virtual            destination\nTCP 01:53  FIN_WAIT    172.17.0.1:45692   172.17.0.100:80    172.17.0.4:80\nTCP 01:55  FIN_WAIT    172.17.0.1:45700   172.17.0.100:80    172.17.0.3:80\n\n# FIN_WAIT： 连接过，偷窥了所有的包\n# SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题\n```\n### 配置项说明：\n### 1. arp_ignore: 定义接收到ARP请求时的响应级别；\n\n- 0：只要本地配置的有相应地址，就给予响应;\n- **1：仅在请求的目标地址配置在到达的接口上的时候，才给予响应；DR模型使用**\n### 2. arp_announce：定义将自己地址向外通告时的通告级别；\n\n- 0：将本地任何接口上的任何地址向外通告；\n- 1：试图仅向目标网络通告与其网络匹配的地址；\n- **2：仅向与本地接口上地址匹配的网络进行通告；DR模型使用**\n### 3. 配置网卡 - 虚拟ip\n\n- 网卡上增加一个IP：\n\nifconfig eth0:1 192.168.0.1 netmask 255.255.255.0\n\n- 删除网卡的第二个IP地址:\n\nip addr del 192.168.0.1 dev eth0\n\n【**总结**】这里十分推荐大家使用ipvs模式，iptables出了问题不好调试，而且规则一多性能显著下降，我们甚至出现规则丢失的情况，ipvs稳定很多。\n\n# 参考：\n\n- 【译文】将 IPTables 变成 TCP 负载均衡器： [https://vflong.github.io/sre/network/2020/02/23/turning-iptables-into-a-tcp-load-balancer.html](https://vflong.github.io/sre/network/2020/02/23/turning-iptables-into-a-tcp-load-balancer.html)\n- 使用Docker搭建LVS的DR模型：[https://blog.csdn.net/Evelyn_Jone/article/details/104533863](https://blog.csdn.net/Evelyn_Jone/article/details/104533863)\n\n","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/iptables-%E5%8C%B9%E9%85%8D%E6%9D%A1%E4%BB%B6":{"title":"iptables 匹配条件","content":"当规则中同时存在多个匹配条件时，多个条件之间默认存在”与”的关系，即报文必须同时满足所有条件，才能被规则匹配。\n## 基本匹配条件\n\n1. -s用于匹配报文的源地址,可以同时指定多个源地址，每个IP之间用逗号隔开，也可以指定为一个网段。\n```bash\niptables -t filter -I INPUT -s 192.168.1.111,192.168.1.118 -j DROP\niptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT\niptables -t filter -I INPUT ! -s 192.168.1.0/24 -j ACCEPT\n```\n\n- 逗号两侧均不能包含空格\n- 报文的源IP不是192.168.1.0/24时，会被接收，并不能代表，报文的源IP是192.168.1.0/24时，会被拒绝。这一条规则没有匹配到时，会继续匹配之后的规则，若最终没有匹配到规则时，该报文会执行该链上的默认策略\n- 不管是-s选项还是-d选项，取反操作与同时指定多个IP的操作不能同时使用。\n\n2. -d用于匹配报文的目标地址,可以同时指定多个目标地址，每个IP之间用逗号隔开，也可以指定为一个网段。\n```bash\niptables -t filter -I OUTPUT -d 192.168.1.111,192.168.1.118 -j DROP\niptables -t filter -I INPUT -d 192.168.1.0/24 -j ACCEPT\niptables -t filter -I INPUT ! -d 192.168.1.0/24 -j ACCEPT\n```\n\n3. -p用于匹配报文的协议类型,可以匹配的协议类型tcp、udp、udplite、icmp、esp、ah、sctp等（centos7中还支持icmpv6、mh）\n```bash\niptables -t filter -I INPUT -p tcp -s 192.168.1.146 -j ACCEPT\niptables -t filter -I INPUT ! -p udp -s 192.168.1.146 -j ACCEPT\n```\n\n4. -i用于匹配报文是从哪个网卡接口流入本机的，由于匹配条件只是用于匹配报文流入的网卡，所以在OUTPUT链与POSTROUTING链中不能使用此选项。\n```bash\niptables -t filter -I INPUT -p icmp -i eth4 -j DROP\niptables -t filter -I INPUT -p icmp ! -i eth4 -j DROP\n```\n\n5. -o用于匹配报文将要从哪个网卡接口流出本机，于匹配条件只是用于匹配报文流出的网卡，所以在INPUT链与PREROUTING链中不能使用此选项。\n```bash\niptables -t filter -I OUTPUT -p icmp -o eth4 -j DROP\niptables -t filter -I OUTPUT -p icmp ! -o eth4 -j DROP\n```\n\n- -i 选项只能用于PREROUTING链、INPUT链、FORWARD链\n- -o 选项只能用于FORWARD链、OUTPUT链、POSTROUTING链。\n## 扩展匹配条件\n扩展匹配条件被使用时，则需要依赖一些扩展模块，或者说，在使用扩展匹配条件之前，需要指定相应的扩展模块才行。\n使用-m 指定扩展模块。当使用-p选项指定了报文的协议时，如果在没有使用-m指定对应的扩展模块名称的情况下，使用了扩展匹配条件，iptables默认会调用与-p选项对应的协议名称相同的模块。\n### tcp扩展模块\n常用的扩展匹配条件如下：\n\n- -p tcp -m tcp –sport 用于匹配tcp协议报文的源端口，可以使用冒号**指定一个连续的端口范围**\n- -p tcp -m tcp –dport 用于匹配tcp协议报文的目标端口，可以使用冒号指定一个连续的端口范围\n```bash\niptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22:25 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport :22 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 80: -j REJECT\niptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp ! --sport 22 -j ACCEPT\n```\n### multiport扩展模块\n常用的扩展匹配条件如下：\n\n- -p tcp -m multiport –sports 用于匹配报文的源端口，可以**指定离散的多个端口号**,端口之间用”逗号”隔开\n- -p udp -m multiport –dports 用于匹配报文的目标端口，可以指定离散的多个端口号，端口之间用”逗号”隔开\n```bash\niptables -t filter -I OUTPUT -d 192.168.1.146 -p udp -m multiport --sports 137,138 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport ! --dports 22,80 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 80:88 -j REJECT\niptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80:88 -j REJECT\n```\n### iprange扩展模块\nIP段的始末IP使用 \"-\" 连接，能够使用 \"!\" 取反\n```bash\niptables -t filter -I INPUT -m iprange --src-range 192.168.1.127-192.168.1.146 -j DROP\niptables -t filter -I OUTPUT -m iprange --dst-range 192.168.1.127-192.168.1.146 -j DROP\niptables -t filter -I INPUT -m iprange ! --src-range 192.168.1.127-192.168.1.146 -j DROP\n```\n\n\n\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E5%8E%9F%E7%90%86":{"title":"iptables 原理","content":"在青云环境下进行测试openelb时发现了该问题，但是可能其他环境也存在这个问题，**集群中某一个节点无法发送和接收udp包，**由于集群中所使用的cni插件flannel默认为vxlan模式，vxlan使用了overlay的udpd封装，因此导致一个节点无法与集群中其他节点通信但是可以通过其他的tcp、http连接通信。\n\n在排查过程中怀疑，iptables被修改了，过滤了udp的协议包，因此使用iptables进行了排查，重新看了一下iptables\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1642489428702-f5604a0b-0c17-4b50-8443-b6fb39036acd.png#clientId=u0618a892-636a-4\u0026from=paste\u0026id=ud209bbaf\u0026originHeight=533\u0026originWidth=1012\u0026originalType=url\u0026ratio=1\u0026size=63939\u0026status=done\u0026style=none\u0026taskId=ue89a1a50-faa3-4aef-9fd8-59a6535007e)\n\n![bSPQB.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1642489620735-99177e3a-fa99-4c7b-9369-2c80cb7ef78d.png#clientId=u0618a892-636a-4\u0026from=drop\u0026id=u1c58fae5\u0026originHeight=1187\u0026originWidth=2248\u0026originalType=binary\u0026ratio=1\u0026size=744159\u0026status=done\u0026style=none\u0026taskId=u9a1c5fc9-e419-4dfc-bbf2-85814918b54)\n**各个表的功能如下**\n\n- filter表：负责过滤功能，防火墙；内核模块：iptables_filter\n- nat表：network address translation，网络地址转换功能；内核模块：iptable_nat\n- mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle\n- raw表：关闭nat表上启用的连接追踪机制；iptable_raw\n\n按道理这里只涉及到`filter`表，`filter`表在数据流入时，只会经过`INPUT`链，查看规则\n```bash\nroot@i-vszzg2k0:~ iptables --line-number -nvL INPUT -t filter\nChain INPUT (policy ACCEPT 12966 packets, 3234K bytes)\nnum   pkts bytes target     prot opt in     out     source               destination\n1     200K  151M KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes health check service ports */\n2     2109  146K KUBE-EXTERNAL-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes externally-visible service portals */\n3     200K  151M KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\n# 使用了自定义链，继续查看 - 至此有点不懂，这是全部drop？还是drop有mark的\nroot@i-vszzg2k0:~# iptables --line-number -nvL KUBE-FIREWALL -t filter\nChain KUBE-FIREWALL (2 references)\nnum   pkts bytes target     prot opt in     out     source               destination\n1        0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes firewall for dropping marked packets */ mark match 0x8000/0x8000\n2        0     0 DROP       all  --  *      *      !127.0.0.0/8          127.0.0.0/8          /* block incoming localnet connections */ ! ctstate RELATED,ESTABLISHED,DNAT\n```\n\n在规则首添加一条匹配规则【在末尾添加使用-A】，添加之后没有验证还是失败，删除规则\n```bash\nroot@i-vszzg2k0:~# iptables -t filter -I INPUT -p udp -m udp -j ACCEPT\nroot@i-vszzg2k0:~# iptables --line-number -nvL INPUT -t filter\nChain INPUT (policy ACCEPT 241 packets, 56859 bytes)\nnum   pkts bytes target     prot opt in     out     source               destination\n1        0     0 ACCEPT     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp\n2     203K  152M KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes health check service ports */\n3     2146  148K KUBE-EXTERNAL-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes externally-visible service portals */\n4     203K  152M KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\nroot@i-vszzg2k0:~# iptables -t filter -D INPUT -p udp -m udp -j ACCEPT\n```\n\n\n**疑惑 -- 为什么接收不了udp包**\n**抓包 tcpdump： **[https://www.jianshu.com/p/8d9accf1d2f1](https://www.jianshu.com/p/8d9accf1d2f1)\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E5%91%BD%E4%BB%A4%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5":{"title":"iptables 命令增删改查","content":"iptables预定了4张表，分别是raw表、mangle表、nat表、filter表，不同的表拥有不同的功能。\nfilter负责**过滤功能**，比如允许哪些IP地址访问，拒绝哪些IP地址访问，允许访问哪些端口，禁止访问哪些端口，filter表会根据我们定义的规则进行过滤，filter表应该是最常用到的表了。\n\n## iptable查看命令\n`iptables -L`：显示所有的规则（默认为filter表）\n![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625129532044-09fbb25c-59fb-44d6-ab22-653cb7c28535.png#align=left\u0026display=inline\u0026height=337\u0026originHeight=337\u0026originWidth=1000\u0026size=0\u0026status=done\u0026style=none\u0026width=1000)\n绿色标注的规则是Centos6启动iptables以后默认设置的规则，蓝色标注部分为链，INPUT链、FORWARD链、OUTPUT链，每条链中都有自己的规则。\n\n`iptables -t nat -L`：显示nat表中的所有规则（使用-t 选定表）\n\n`iptables -t filter -L INPUT`：显示filter表中的所有INPUT规则\n```bash\nroot@ubuntu:/home/mind/Program/test# iptables -t filter -L INPUT\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\nACCEPT     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED\nACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh\nACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http\nACCEPT     tcp  --  anywhere             anywhere             tcp dpt:https\nDROP       tcp  --  anywhere             anywhere             tcp dpt:mysql\nACCEPT     icmp --  anywhere             anywhere             icmp echo-request\n```\n`iptables -t filter -vL INPUT`：加上-v 显示更详细的信息\n```bash\nroot@ubuntu:/home/mind/Program/test# iptables -t filter -vL INPUT\nChain INPUT (policy ACCEPT 2242 packets, 257K bytes)\n pkts bytes target     prot opt in     out     source               destination\n 6076  601K ACCEPT     all  --  lo     any     anywhere             anywhere\n 982K   50M ACCEPT     all  --  any    any     anywhere             anywhere             state RELATED,ESTABLISHED\n    2   104 ACCEPT     tcp  --  any    any     anywhere             anywhere             tcp dpt:ssh\n    0     0 ACCEPT     tcp  --  any    any     anywhere             anywhere             tcp dpt:http\n    0     0 ACCEPT     tcp  --  any    any     anywhere             anywhere             tcp dpt:https\n    0     0 DROP       tcp  --  any    any     anywhere             anywhere             tcp dpt:mysql\n    0     0 ACCEPT     icmp --  any    any     anywhere             anywhere             icmp echo-request\n\n```\n\n- **pkts**:对应规则匹配到的报文的个数。\n- **bytes**:对应匹配到的报文包的大小总和。\n- **target**:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。\n- **prot**:表示规则对应的协议，是否只针对某些协议应用此规则。\n- **opt**:表示规则对应的选项。\n- **in**:表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。\n- **out**:表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。\n- **source**:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。\n- **destination**:表示规则对应的目标地址。可以是一个IP，也可以是一个网段。\n\n`iptables -t filter –line-numbers -L INPUT`\n使用–line-numbers即可显示规则的编号\n\n`iptables -t filter –line-numbers -nL INPUT`\n表示查看表的所有规则，并且在显示规则时，不对规则中的IP或者端口进行名称反解，-n选项表示不解析IP地址。\n\n`iptables -t filter –line-numbers -nvxL INPUT`\n表示查看表中的所有规则，并且显示更详细的信息(-v选项)，不过，计数器中的信息显示为精确的计数值，而不是显示为经过可读优化的计数值，-x选项表示显示计数器的精确值。\n\n## 添加规则\n`iptables -t 表名 -A 链名 匹配条件 -j 动作`\n`iptables -t 表名 -I 链名 匹配条件 -j 动作`\n`iptables -t filter -I INPUT -s 10.0.1.232 -j DROP`\n\n- -t选项：指定要操作的表， 不使用-t选项指定表时，默认为操作filter表。\n- -I选项：指明将规则插入（insert）至哪个链中，-I INPUT表示将规则插入于INPUT链中。\n- -s选项：指明匹配条件中的源地址source。\n- -j选项：指明当匹配条件被满足时，所对应的动作，上例中指定的动作为DROP（丢弃）。\n- -A选项：在对应的链中追加（append）规则，-A表示在链的尾部追加规则，-I表示在链的首部插入规则\n\n\n\n**规则的顺序很重要**。如果报文已经被前面的规则匹配到，iptables则会对报文执行对应的动作，即使后面的规则也能匹配到当前报文，很有可能也没有机会再对报文执行相应的动作了。这就是iptables的工作机制。\n### 指定编号插入\n`iptables -t 表名 -I 链名 规则序号 匹配条件 -j 动作`\n`iptables -t filter -I INPUT 2 -s 10.0.1.233 -j DROP`\n\n- -I INPUT 2表示在INPUT链中新增规则，新增的规则的编号为2\n## 删除规则\n### 根据编号删除\n`iptables -t 表名 -D 链名 规则序号`\n`iptables -t filter -D INPUT 2`\n### 根据具体的匹配条件与动作删除\n`iptables -t 表名 -D 链名 匹配条件 -j 动作`\n`iptables -D INPUT -s 10.0.1.232 -j DROP`\n### 删除某条链上的所有规则\n`iptables -t 表名 -F 链名`\n`iptables -t nat -F`\n`iptables -F INPUT`\n## 修改规则\n### 修改指定链的匹配规则\n`iptables -t 表名 -R 链名 规则序号 规则原本的匹配条件 -j 动作`\n`iptables -R INPUT 1 -j REJECT`\n-R选项表示修改指定的链\n-R INPUT 1表示修改INPUT链的第1条规则\n【注意】：使用-R修改某个规则时，必须指定规则对应的原本匹配条件\n```bash\nroot@ubuntu:/home/orange# iptables -nvL INPUT\nChain INPUT (policy ACCEPT 172K packets, 348M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n  727 68697 DROP       all  --  *      *       10.0.1.232           0.0.0.0/0           \n    0     0 DROP       all  --  *      *       10.0.1.233           0.0.0.0/0           \n    0     0 ACCEPT     all  --  *      *       10.0.1.232           0.0.0.0/0           \nroot@ubuntu:/home/orange# iptables -R INPUT 1 -j REJECT\nroot@ubuntu:/home/orange# iptables -nvL INPUT\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    1   332 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable\n    0     0 DROP       all  --  *      *       10.0.1.233           0.0.0.0/0           \n    0     0 ACCEPT     all  --  *      *       10.0.1.232           0.0.0.0/0  \n```\n从上例中看出因为没有指定原本的源地址，当前规则的源地址自动变为0.0.0.0/0。如果你想要修改某条规则，还不如先将这条规则删除，然后在同样位置再插入一条新规则，这样更好，当然，如果你只是为了修改某条规则的动作，那么使用-R选项时，不要忘了指明规则原本对应的匹配条件。\n### 修改指定链的默认策略\n当报文没有被链中的任何规则匹配到时，或者当链中没有任何规则时，防火墙会按照默认动作处理报文\n`iptables -t 表名 -P 链名 动作`\n`iptables -t filter -P INPUT DROP`\n-t指定要操作的表 \n-P选项指定要修改的链后加上默认策略\n```bash\nroot@ubuntu:/home/orange# iptables -nvL INPUT\nChain INPUT (policy ACCEPT 0 packets, 0 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    1   332 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable\n    0     0 DROP       all  --  *      *       10.0.1.233           0.0.0.0/0           \n    0     0 ACCEPT     all  --  *      *       10.0.1.232           0.0.0.0/0           \n\nroot@ubuntu:/home/orange# iptables -t filter -P INPUT DROP\nroot@ubuntu:/home/orange# iptables -nvL INPUT\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 1246  139K REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable\n    0     0 DROP       all  --  *      *       10.0.1.233           0.0.0.0/0           \n    0     0 ACCEPT     all  --  *      *       10.0.1.232           0.0.0.0/0    \n```\n## 保存规则\n### 1.Ubuntu 通用的保存/重载规则\n**保存现有的规则：**\n`iptables-save \u003e /etc/iptables.rules`\n\n然后新建一个bash脚本，并保存到/etc/network/if-pre-up.d/目录下：\n`#!/bin/bash`\n`iptables-restore \u003c /etc/iptables.rules`\n这样，每次系统重启后iptables规则都会被自动加载。\n注意：不要尝试在.bashrc或者.profile中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规\n\n### 2.CentOS, RedHat \n**保存iptables规则**\n`service iptables save`\n**重启iptables服务**\n`service iptables stop`\n`service iptables start`\n**查看当前规则：**\n`cat  /etc/sysconfig/iptables`\n```bash\n# centos7中配置iptables-service的步骤\n#配置好yum源以后安装iptables-service\nyum install -y iptables-services\n#停止firewalld\nsystemctl stop firewalld\n#禁止firewalld自动启动\nsystemctl disable firewalld\n#启动iptables\nsystemctl start iptables\n#将iptables设置为开机自动启动，以后即可通过iptables-service控制iptables服务\nsystemctl enable iptables\n```\n\n\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E6%9F%A5%E7%9C%8B%E6%B5%81%E5%90%91":{"title":"iptables 查看流向","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/00209e4655bca10ebec486435bcb04d0.png)\n\n\u003e 1. 可以使用 iptables 提供的 LOG target 或 mark set\u0026match 方式来跟踪 iptables 中的数据流，需要针对特定流程插入LOG target或match在入口包设定好的mark，对iptables规则的侵入较大，调试和观察也较为复杂；\n\u003e 2. iptables自身提供了TRACE功能，一旦设定，当数据包匹配到任意chain上任意table的处理规则时，iptables会在系统日志(/var/log/syslog)中自动输出此时的数据包状态日志。\n\nTRACE target 只能在 iptables 的 raw 表中添加，raw 表中有两条 iptables built-in chain: PREROUTING 和 OUTPUT，分别代表网卡数据入口和本地进程下推数据的出口。TRACE target 就添加在这两条 chain 上。\n### 1. 设置 iptables 规则\n```bash\niptables -t raw -I OUTPUT 1 -p icmp -j TRACE\niptables -t raw -I PREROUTING 1 -p icmp -j TRACE\n\niptables -t raw -I OUTPUT 1 -p tcp --dport 80 -j TRACE\niptables -t raw -I PREROUTING 1 -p tcp --dport 80 -j TRACE\n\n tail -f /var/log/syslog | grep kernel\n```\n\nTrace target 在数据包 match table、chains 的 policy 或 rules 时会输出日志，日志格式：”TRACE:tablename:chainname:type:rulenum”。\n- 当匹配到的是普通rules时，type=”rule”;\n- 当碰到一个user-defined chain的return target时，type=”return”；\n- 当匹配到built-in chain(比如：PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING)的default policy时，type=”policy”。\n### ebtables的调试设置\n\n我们的重点在 iptables，ebtables只是辅助，帮助我们看清数据包到底是在哪一层被hook进iptables的规则链中进行处理的。因此我们在**全图**中的每个ebtables的built-in chain上都加上LOG（ebtables目前还不支持TRACE）\n\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E8%A7%84%E5%88%99":{"title":"iptables 规则","content":"规则由匹配条件和处理动作组成。\n \n### 匹配条件\n匹配条件分为基本匹配条件与扩展匹配条件\n**基本匹配条件：**\n源地址Source IP，目标地址 Destination IP，可以作为基本匹配条件。\n**扩展匹配条件：**\n除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。\n源端口Source Port, 目标端口Destination Port，可以作为扩展匹配条件\n \n### **处理动作**\n处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。\n此处列出一些常用的动作\n\n- **ACCEPT**：允许数据包通过。\n- **DROP**：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。\n- **REJECT**：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。\n- **SNAT**：源地址转换，解决内网用户用同一个公网地址上网的问题。\n- **MASQUERADE**：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。\n- **DNAT**：目标地址转换。\n- **REDIRECT**：在本机做端口映射。\n- **LOG**：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。\n- **MARK**：为匹配的数据包设置标记，可以用于后续规则的匹配和处理。\n- **NOTRACK**：排除匹配的数据包不被连接跟踪系统跟踪。\n- **RETURN**：返回到调用链的上一个规则，用于在子链中执行完特定操作后返回。\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E8%BD%AC%E5%8F%91":{"title":"iptables 转发","content":"\n## 端口转发\n**将本机的8080端口转发至其他主机，主机IP：192.168.1.12，目标主机IP和端口：192.168.1.13:8088，规则如下**\n```bash\niptables -t nat -A PREROUTING -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.168.1.13:8088\niptables -t nat -A POSTROUTING -p tcp -m tcp --dport 8088 -j SNAT --to-source 192.168.1.12\necho 1 \u003e /proc/sys/net/ipv4/ip_forward #开启iptables forward转发功能。\n```\n\n**tcp范围端口映射**\n```bash\niptables -t nat -A PREROUTING -p tcp --dport 2000:2500 -j DNAT --to 192.168.66.2:2000-2500\n```\n\n**远程转发**\n```bash\niptables -A FORWARD -p tcp --dport 80 -j ACCEPT\niptables -A FORWARD -p tcp --sport 80 -j ACCEPT\n#把访问192.168.0.12的80端口转发到192.168.0.13的80端口\niptables -t nat -A PREROUTING -p tcp -i eth0 -d 192.168.0.12 --dport 80 -j DNAT --to-destination 192.168.0.13:80\n#配置地址伪装 \niptables -t nat -A POSTROUTING -p tcp -m tcp --dport 80 -j MASQUERADE\n```\n\n**本地转发**\n```bash\n#访问本机的8080端口转发到本地的80端口\niptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-ports 80\n```\n\n**清空转发规则（nat表）**\n```bash\niptables -F -t nat\n```\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E8%BD%AC%E5%8F%91-service-%E6%B5%81%E9%87%8F":{"title":"iptables 转发 service 流量未命名","content":"","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-%E8%BD%AF%E4%BB%B6%E9%98%B2%E7%81%AB%E5%A2%99":{"title":"iptables 软件防火墙","content":"## iptables基础\niptables一个命令行工具，位于用户空间，用这个工具操作防火墙真正的安全框架netfilter。\n用户通过iptables这个代理，将用户的安全设定执行到netfilter中\n\nnetfilter是linux平台下的**包过滤**防火墙，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。\n\n用户使用iptables命令添加、修改和删除对应的规则，iptables按照这些规则去执行对应的操作。规则储存在内核空间的信息包过滤表中，规则指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等以及iptable对于这些规则的处理策略（如放行accept、拒绝reject和丢弃drop）。\n```bash\nroot@ubuntu:/home/mind/Program/test# iptables -t nat -nL\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER     all  --  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\nMASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0\nMASQUERADE  all  --  172.16.238.0/24      0.0.0.0/0\nMASQUERADE  tcp  --  172.17.0.3           172.17.0.3           tcp dpt:4002\nMASQUERADE  tcp  --  172.17.0.3           172.17.0.3           tcp dpt:4001\nMASQUERADE  tcp  --  172.17.0.4           172.17.0.4           tcp dpt:2379\nMASQUERADE  tcp  --  172.17.0.2           172.17.0.2           tcp dpt:5000\n\nChain DOCKER (2 references)\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4002 to:172.17.0.3:4002\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4001 to:172.17.0.3:4001\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000 to:172.17.0.2:5000\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:2379 to:172.17.0.4:2379\n```\n\niptables 中有链的概念：路由前[PREROUTING]、转发[FORWARD]、路由后[POSTROUTING]\n![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625125574230-0a2a1703-2e8a-4c62-92b9-77b1a3a31d0c.png#align=left\u0026display=inline\u0026height=526\u0026originHeight=526\u0026originWidth=827\u0026size=0\u0026status=done\u0026style=none\u0026width=827)\n客户端发来的报文访问的目标地址不是本机，而是其他服务器时，当本机的内核支持IP_FORWARD时，本机便可以将报文转发给其他服务器。\n`cat /proc/sys/net/ipv4/ip_forward`\n\n所以，根据上图，我们能够想象出某些常用场景中，报文的流向：\n\n- 本机某进程接收的报文：PREROUTING –\u003e INPUT\n- 由本机转发的报文：PREROUTING –\u003e FORWARD –\u003e POSTROUTING\n- 由本机的某进程发出报文：OUTPUT –\u003e POSTROUTING\n\n## iptables链、表的概念：\n### 链的概念\n在路由前这一站，想要通过这个关口就要匹配到可以通过的规则才会通过，否则按照匹配的规则执行操作。当然该关口不会只有一条规则，当多个规则串到一起便成了链，每个经过这个关口的报文，都要将这条链上的所有规则匹配一遍，找到符合条件的规则，执行规则对应的动作。\n![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625126528515-e515ecf8-3fdf-40e7-b357-d39e0d695015.png#align=left\u0026display=inline\u0026height=530\u0026originHeight=530\u0026originWidth=576\u0026size=0\u0026status=done\u0026style=none\u0026width=576)\n\n### 表的概念\n这些关口中的有些规则是十分相似的。因此把一些能实现相同功能的规则放在一起组成相同功能的规则的集合，便形成了表。不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围\n\n- filter表：负责过滤功能，防火墙；内核模块：iptables_filter\n- nat表：network address translation，网络地址转换功能；内核模块：iptable_nat\n- mangle表：拆解报文，做出修改，并重新封装 的功能；内核模块：iptable_mangle\n- raw表：关闭nat表上启用的连接追踪机制；内核模块：iptable_raw\n\n### 表链关系：\n某些链中注定不会包含某种功能/某类规则，让我们看看每个链上的规则都存在于哪些表中\n\n- PREROUTING 的规则可以存在于：raw表，mangle表，nat表。\n- INPUT的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）\n- FORWARD 的规则可以存在于：mangle表，filter表。\n- OUTPUT 的规则可以存在于：raw表mangle表，nat表，filter表。\n- POSTROUTING 的规则可以存在于：mangle表，nat表。\n\n**我们在实际的使用过程中，往往是通过表作为操作入口，对规则进行定义的。**下面展示表中的规则可以被哪些链使用\n\n- raw表：PREROUTING，OUTPUT\n- mangle表：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING\n- nat表：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）\n- filter表：INPUT，FORWARD，OUTPUT\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625127784156-d029036a-092f-4d7a-aaa3-2704eff3739b.png#align=left\u0026display=inline\u0026height=276\u0026originHeight=276\u0026originWidth=576\u0026size=0\u0026status=done\u0026style=none\u0026width=576)\n\n### 匹配规则的优先级\n数据包经过一个链的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配。而相同功能类型的规则会汇聚在一张表中，那么，哪些表中的规则会放在链的最前面执行呢，这时候就需要有一个优先级的问题。\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12923798/1625126743939-5d4d8c3b-fe66-4d75-a348-0d007700c9ec.png#align=left\u0026display=inline\u0026height=533\u0026originHeight=533\u0026originWidth=1012\u0026size=0\u0026status=done\u0026style=none\u0026width=1012)\n\n\n为了更方便的管理，我们还可以在某个表里面创建自定义链，将针对某个应用程序所设置的规则放置在这个自定义链中，但是自定义链接不能直接使用，只能被某个默认的链当做动作去调用才能起作用，我们可以这样想象，自定义链就是一段比较短的链子，这条短链子上的规则都是针对某个应用程序制定的，但是这条短的链子并不能直接使用，而是需要”焊接”在iptables默认定义链子上，才能被IPtables使用，这就是为什么默认定义的链需要把自定义链当做动作去引用的原因\n","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/iptables-mark":{"title":"iptables mark","content":"--set-mark 用于设置数据包的 32 位标记值\n--set-xmark 用于设置数据包的 128 位标记值\n\nfff00000\n-m mark\n\nmark\nconnmark\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/04e334db5f19d5fa753180a1f7961e89.png)\n\n### calico mark\n\n#### raw 表\n主要用来决定是否对数据包进行状态跟踪。存在于PREROUTING 和 OUTPUT 链，对收到的数据包在连接跟踪前进行处理\n```bash\n-A cali-OUTPUT -m comment --comment \"cali:njdnLwYeGqBJyMxW\" -j MARK --set-xmark 0x0/0xf0000\n-A cali-PREROUTING -m comment --comment \"cali:XFX5xbM8B9qR10JG\" -j MARK --set-xmark 0x0/0xf0000\n-A cali-PREROUTING -i cali+ -m comment --comment \"cali:EWMPb0zVROM-woQp\" -j MARK --set-xmark 0x40000/0x40000\n```\n- 出入默认添加 0x0/0xf0000 mark\n- (在经过 cali-PREROUTING 链且)入接口为 cali+ 的流量设置 0x40000/0x40000 mark\n\n#### mangle 表\n可以拆解报文，做出修改，并重新封装。存在 build-in 的每一个链中。\n```bash\n-A cali-POSTROUTING -m comment --comment \"cali:N2faOPfc4DVQAfQj\" -j MARK --set-xmark 0x0/0xf0000\n```\n- 对于出口的流量设置 0x0/0xf0000 mark\n\n#### filter 表\n\n主要用于过滤一些数据包，存在于 INPUT/OUTPUT/FORWARD链\n- 0x10000/0x10000  （FORWARD 链有该条）\n- 0x0/0xe0000\n- 0x0/0xfff00000\n- 0x0/0xf0000\n- 0x0/0x10000\n- 0x100000/0xfff00000\n- 0xabe00000/0xfff00000\n```bash\n-A FORWARD -m comment --comment \"cali:mp77cMpurHhyjLrM\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-FORWARD -m comment --comment \"cali:vjrMJCRpqwy5oRoX\" -j MARK --set-xmark 0x0/0xe0000\n-A cali-INPUT -m comment --comment \"cali:ss8lEMQsXi-s6qYT\" -j MARK --set-xmark 0x0/0xfff00000\n-A cali-INPUT -m comment --comment \"cali:bhpnxD5IRtBP8KW0\" -j MARK --set-xmark 0x0/0xf0000\n-A cali-OUTPUT -m comment --comment \"cali:iz2RWXlXJDUfsLpe\" -j MARK --set-xmark 0x0/0xf0000\n-A cali-forward-endpoint-mark -m comment --comment \"cali:96HaP1sFtb-NYoYA\" -j MARK --set-xmark 0x0/0xfff00000\n-A cali-fw-cali32ef28b13d0 -m comment --comment \"cali:TC5VD9E3jiMp3TN2\" -j MARK --set-xmark 0x0/0x10000\n-A cali-fw-cali3e08bb7a8e7 -m comment --comment \"cali:UbzjqIepMnE6ChIo\" -j MARK --set-xmark 0x0/0x10000\n-A cali-set-endpoint-mark -m comment --comment \"cali:-vsL_8ZI3abNjibQ\" -m comment --comment \"Non-Cali endpoint mark\" -j MARK --set-xmark 0x100000/0xfff00000\n-A cali-sm-cali32ef28b13d0 -m comment --comment \"cali:IoD_zwg1kwNvZsqT\" -j MARK --set-xmark 0xabe00000/0xfff00000\n-A cali-sm-cali3e08bb7a8e7 -m comment --comment \"cali:okSHxg9seKZOdsgo\" -j MARK --set-xmark 0x3f400000/0xfff00000\n-A cali-sm-cali4d239ec8772 -m comment --comment \"cali:Ervla-ew-9QTrsA4\" -j MARK --set-xmark 0xfce00000/0xfff00000\n-A cali-sm-cali4de191e755a -m comment --comment \"cali:pqBI7OljF9__Zeol\" -j MARK --set-xmark 0x4f700000/0xfff00000\n-A cali-tw-cali32ef28b13d0 -m comment --comment \"cali:XFoMXAzP2JgPaS8a\" -j MARK --set-xmark 0x0/0x10000\n-A cali-tw-cali3e08bb7a8e7 -m comment --comment \"cali:Fb4m9TiwRDpM1Et-\" -j MARK --set-xmark 0x0/0x10000\n```\n\n```bash\n-A cali-pri-_JQLwGtim3bEmmp2WP8 -m comment --comment \"cali:eWV_weTiwZxlBj9x\" -m comment --comment \"Profile kns.kubesphere-system ingress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pri-_RRPF6JYgiXDfvzOhm- -m comment --comment \"cali:hxm6OJQ8CzkXaQJM\" -m comment --comment \"Profile kns.kubesphere-logging-system ingress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pri-kns.default -m comment --comment \"cali:WMSw8BmYOknRHfsz\" -m comment --comment \"Profile kns.default ingress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pri-kns.kube-system -m comment --comment \"cali:J1TyxtHWd0qaBGK-\" -m comment --comment \"Profile kns.kube-system ingress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pro-_JQLwGtim3bEmmp2WP8 -m comment --comment \"cali:oj7Bv0b9mgYXIzKE\" -m comment --comment \"Profile kns.kubesphere-system egress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pro-_RRPF6JYgiXDfvzOhm- -m comment --comment \"cali:VsLfFvRdy-M-YPms\" -m comment --comment \"Profile kns.kubesphere-logging-system egress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pro-kns.default -m comment --comment \"cali:Vr81boRqq4V77Sg8\" -m comment --comment \"Profile kns.default egress\" -j MARK --set-xmark 0x10000/0x10000\n-A cali-pro-kns.kube-system -m comment --comment \"cali:tgOR2S8DVHZW3F1M\" -m comment --comment \"Profile kns.kube-system egress\" -j MARK --set-xmark 0x10000/0x10000\n```\n\n- cali-fw-* ：calico from workload\n- cali-tw-* ：calico to workload\n- cali-sm-* ：calico source-marking， 用于在数据包离开发送节点之前为数据包添加源标记\n\n- input\n- output\n- forward\n\nnat 表\n- 主要为 kubeproxy 添加的\n- 0x8000/0x8000\n- 0x4000/0x4000\n- 0x4000/0x0\n\n\n### calico mark 后续匹配执行\n- 0x10000/0x10000  accept\n- 0x40000/0x40000\n- 0x0/0x40000\n\n#### mangle 表\n```bash\n-A cali-POSTROUTING -m comment --comment \"cali:NX-7roTexQ3fGRfU\" -m mark --mark 0x10000/0x10000 -j RETURN\n-A cali-POSTROUTING -m comment --comment \"cali:qaajsWArU1ku9saf\" -m mark ! --mark 0x0/0xfff00000 -j RETURN\n-A cali-POSTROUTING -m comment --comment \"cali:fcjhvOBNywbfCkS2\" -m comment --comment \"Host endpoint policy accepted packet.\" -m mark --mark 0x10000/0x10000 -j RETURN\n-A cali-PREROUTING -m comment --comment \"cali:KX7AGNd6rMcDUai6\" -m mark --mark 0x10000/0x10000 -j ACCEPT\n-A cali-PREROUTING -m comment --comment \"cali:Cg96MgVuoPm7UMRo\" -m comment --comment \"Host endpoint policy accepted packet.\" -m mark --mark 0x10000/0x10000 -j ACCEPT\n```\n- 匹配 mark 0x10000/0x10000 的返回；\n- 匹配 mark 不是 0x0/0xfff00000 的返回；相当于 带有 mark 0x0/0xfff00000 匹配后续规则，执行 `-m conntrack --ctstate DNAT -j cali-to-host-endpoint`\n\n\n#### nat 表\n```bash\n-A KUBE-POSTROUTING -m mark ! --mark 0x4000/0x4000 -j RETURN\n```","lastmodified":"2025-03-26T03:48:44.135315173Z","tags":null},"/ipvlan":{"title":"ipvlan","content":"### 介绍\n\n允许你在同一物理设备上创建多个虚拟网络接口，这些接口可以共享同一个 MAC 地址。\n\n当本地交换机对它可管理的 MAC 地址的总数施加约束时，IPVLAN 是一个很好的选择。\n\n### ipvlan 三种模式\n\n- L2\n- L3\n- L3s\n\n#### L2 模式\n\n在 IPVLAN **L2 模式** 中，虚拟设备接收并响应地址解析协议(ARP)请求。`netfilter` 框架仅在拥有虚拟设备的容器中运行。容器化流量的默认命名空间中不会执行 `netfilter` 链。使用**L2 模式**会提供良好的性能，但对网络流量的控制要小。\n\n在 L2 模式下，所有的 IPVLAN 接口都在同一广播域内，它们可以像在同一个交换网络中一样直接通信。\n\n#### L3 模式\n\n在 **L3 模式** 中，虚拟设备只处理 **L3** 以上的流量。虚拟设备不响应 ARP 请求，用户必须手动为相关点上的 IPVLAN IP 地址配置邻居条目。相关容器的出口流量位于默认命名空间中的 `netfilter` POSTROUTING 和 OUTPUT 链上，而入口流量以与 **L2 模式** 相同的方式被线程化。使用**L3 模式**会提供很好的控制，但可能会降低网络流量性能。\n\n在 L3 模式下，每个 IPVLAN 接口都在自己的 L3 域中。即使它们共享同一物理设备和 MAC 地址，它们也不能直接通信。这是因为在 L3 模式下，IPVLAN 接口是通过 IP 地址进行通信的，而不是通过 MAC 地址。这意味着，即使两个 IPVLAN 接口在同一个网络命名空间中，它们也不能直接通信，除非有一个路由进程或设备将数据包从一个接口路由到另一个接口。\n\n#### L3S 模式\n\n在 **L3S 模式** 中，虚拟设备处理方式与 **L3 模式** 中的处理方式相同，但相关容器的出口和入口流量都位于默认命名空间中的 `netfilter` 链上。**L3S 模式** 的行为方式和 **L3 模式** 相似，但提供了对网络的更大控制。\n\n\n\u003e 对于 **L3** 和 **L3S** 模式，IPVLAN 虚拟设备不接收广播和多播流量。\n\n\n### ipvlan l3/l3s模式的一些限制\n\nl3与l3s这两种模式， 在egress的时候，数据包都会经过host namespace进行路由，区别只是l3s在ingress的时候也会通过host namespace进行路由，这样host namespace里面的ct就对称了，这也是l3s里面这个s的由来。\n\n\n以下是l3/l3s的在路由的时候的一些限制\n\n- egress的时候， 路由查找会指定ipvlan 接口作为出口， 其他接口的路由并不会匹配，出现网络不通的情况，尤其要注意这一点\n- 在通过service访问的时候， service ip必须落在ipvlan接口上，原因如上。\n- 当backend与client在同一节点的时候， backend回包的目的地址，也就是client的地址， 他们都在同一个ipvlan范畴类， 底层传输的时候会ipvlan驱动会直接匹配地址直接转发到对应的接口，就不会再进入到host namespace了， 这样导致回到client的包的源地址并不是service地址（以ipvs nat模式举例）。","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/ipvs":{"title":"ipvs","content":"\nLVS - Linux Virtual Server 的简称，kubernetes 中主要包含 ipvs + ipvsadm。\n官方链接：[The Linux Virtual Server Project - Linux Server Cluster for Load Balancing](http://www.linuxvirtualserver.org/)\n\n\nipvs 的三种模式\n- NAT - Masq\n- IPIP\n- DR - 直接路由\n\nipvs 的负载调度算法：\n最常用的有四种：轮询（rr）、加权轮询(wrr)、最少连接(lc)和加权最少连接(wlc)。\n- 轮询（rr）：将收到的访问请求按照顺序轮流调度到不同的服务器上，不管后端真实服务器的实际连接数和系统负载。\n- 加权轮询（wrr）：给RS设置权重，权重越高，那么分发的请求数越多，权重的取值范围0–100。根据每台服务器的性能，给每台服务器添加权值，如果RS1的权值为1，RS2的权值为2，那么调度到RS2的请求会是RS1的2倍。权值越高的服务器，处理的请求越多。这种算法是对rr算法的一种优化和补充。\n- 最少连接（lc）：根据后端RS的连接数来决定把请求分发给谁，比RS1连接数比RS2连接数少，那么请求就优先发给RS1。\n- 加权最少连接（wlc）:根据后端RS的权重和连接数来决定把请求分发给谁，权重较高，连接数少的RS会优先处理请求。\n\n\nkubernetes ipvs 在以下方面依赖 iptables\n- kube-proxy start with --masquerade-all=true\n- Specify cluster CIDR in kube-proxy startup\n- Support Loadbalancer type service\n- Support NodePort type service","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/ipvs-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0":{"title":"ipvs 相关的内核参数","content":"\nipvs 相关内核文档：\n- [IPvs-sysctl — The Linux Kernel documentation](https://docs.kernel.org/networking/ipvs-sysctl.html)\n\n### 1. 参数 am_droprate\n```text\nam_droprate - INTEGER\n\tdefault 10\n\tIt sets the always mode drop rate, which is used in the mode 3 of the drop_rate defense.\n```\n该参数是 ipvs 中 always 模式下丢包率的设置，它用于 drop_rate 防护机制的第三种模式。\n1. ipvs 中有一个叫 drop_rate 的防护机制，用于防止 DDoS 攻击。它有 3 种模式:\n\t- 模式1:当连接速率超过阈值时丢弃部分连接请求。\n\t- 模式2:当连接速率超过阈值时丢弃所有连接请求。\n\t- 模式3:始终以一定概率丢弃部分连接请求。\n2. am_droprate 就是用于模式3的丢包率设置。它是一个 0-100 的整数,表示以该概率丢弃连接请求。默认是 10。\n3. 通过设置一个较低的 am_droprate,可以在高负载情况下提前丢弃部分请求,从而保护后端真实服务器。\n4. 一般推荐设置为 10 左右。数值越高,丢包率越高,可保护性越强,但也会丢弃更多正常请求。需要根据实际情况调整。所以简单来说,am_droprate 是 ipvs 在 always 模式下用于防护的丢包率设置。它越高可保护性越强,但也会损失更多正常请求。需要合理设置该值。\n\n### 2. 参数 amemthresh\n```text\namemthresh - INTEGER\n\tdefault 1024\n\tIt sets the available memory threshold (in pages), which is used in the automatic modes of defense. When there is no enough available memory, the respective strategy will be enabled and the variable is automatically set to 2, otherwise the strategy is disabled and the variable is set to 1.\n```\n该参数是 ipvs 中自动防护模式下的可用内存阈值设置。其含义如下：\n1. ipvs 中的一些防护机制(如连接速率限制)可以工作在自动模式下。\n2. 在自动模式下,ipvs 会监控系统的可用内存。\n3. 当可用内存低于 amemthresh 设置的阈值时,相关的防护机制会被自动激活。此时 amemthresh 变量会被设置为2。\n4. 当可用内存高于阈值时,防护机制会自动停用。amemthresh 变量被设置为1。\n5. amemthresh 的单位是页面数(page)。默认是1024，意思是当可用内存少于1024页时触发防护机制。\n6. 通过调整该值可以控制在什么内存使用情况下激活防护机制。数值越小,越容易激活防护;数值越大,需要内存使用越高才会防护。\n7. 一般推荐设置为物理内存的10%左右。\n综上，amemthresh 是 ipvs 自动防护模式下的内存可用阈值设置。它控制了在什么内存使用情况下激活防护机制。\n\n### 3. 参数 backup_only\n```text\nbackup_only - BOOLEAN\n\t- 0 - disabled (default) \n\t- not 0 - enabled\n\tIf set, disable the director function while the server is in backup mode to avoid packet loops for DR/TUN methods.\n```\n该参数用于控制 IPVS 在备份模式下的工作方式。其含义如下:\n1. 在 IPVS 的主备模式下，主节点负责请求转发和负载均衡，备份节点处于待命状态。\n2. 对于 DR 和 TUN 两种工作方式，如果备份节点没有禁用负载均衡和转发功能，会导致请求在主备节点之间循环转发，形成包环路。\n3. 将 backup_only 设置为非零值(启用)后，当 IPVS 进入备份模式时，会自动禁用负载均衡和转发功能。\n4. 这样就避免了在主备模式下使用 DR 和 TUN 方式时可能出现的包环路问题。\n5. 默认设置为 0 (禁用)，即备份节点也会工作。\n\n所以，backup_only 参数控制了 IPVS 在备份模式下是否禁用负载均衡和转发功能。启用它可以避免 DR 和 TUN 模式在主备切换时产生的包环路问题，但备份节点不再参与负载分担，仅作为冷备用。需要根据实际需要设置。\n\n### 4. 参数 conn_reuse_mode\n```text\nconn_reuse_mode - INTEGER\n\t1 - default\n\t\n\tControls how ipvs will deal with connections that are detected port reuse. It is a bitmap, with the values being:\n\t\t0: disable any special handling on port reuse. The new connection will be delivered to the same real server that was servicing the previous connection.\n\t\tbit 1: enable rescheduling of new connections when it is safe. That is, whenever expire_nodest_conn and for TCP sockets, when the connection is in TIME_WAIT state (which is only possible if you use NAT mode).\n\t\tbit 2: it is bit 1 plus, for TCP connections, when connections are in FIN_WAIT state, as this is the last state seen by load balancer in Direct Routing mode. This bit helps on adding new real servers to a very busy cluster.\n```\n\n该参数控制了 IPVS 在检测到端口复用时的处理方式，它是一个bitmap。具体含义如下：\n1. 端口复用指客户端重新使用了之前已关闭连接的源端口发起新连接。\n2. conn_reuse_mode 默认值为 1,表示启用安全的重调度机制。\n3. 设置位0：禁用任何端口复用的特殊处理。新连接会发送到之前为旧连接提供服务的同一真实服务器。\n4. 设置位1：在安全的情况下启用新连接的重调度。即当expire_nodest_conn设置生效时，以及对TCP连接，当连接处于TIME_WAIT状态时(仅NAT模式可用)。\n5. 设置位2：在位1的基础上,对TCP连接,当连接处于FIN_WAIT状态时也启用重调度。这在直接路由模式下添加新真实服务器到繁忙集群时很有帮助。\n6. 通过设置不同的位,可以控制在不同情况下是否重调度复用端口的新连接。综上，conn_reuse_mode控制复用端口连接的重调度策略，需要根据实际需求选择设置。\n\n### 5. 参数 expire_nodest_conn\n```text\nexpire_nodest_conn - BOOLEAN\n\t- 0 - disabled (default)\n\t- not 0 - enabled\n\n\tThe default value is 0, the load balancer will silently drop packets when its destination server is not available. It may be useful, when user-space monitoring program deletes the destination server (because of server overload or wrong detection) and add back the server later, and the connections to the server can continue.\n\tIf this feature is enabled, the load balancer will expire the connection immediately when a packet arrives and its destination server is not available, then the client program will be notified that the connection is closed. This is equivalent to the feature some people requires to flush connections when its destination is not available\n```\n该参数控制了当目标真实服务器不可用时，IPVS 如何处理连接的超时策略。含义如下:\n1. 默认值为0,表示禁用该功能。当目标服务器不可用时,IPVS会静默丢弃报文。这在用户空间监控程序因服务器过载或错误检测而删除服务器,之后又添加回该服务器时很有用。连接可以继续,无需客户端重新建立。\n2. 如果将该参数设置为非0(启用)，则当一个报文到达而其目标服务器不可用时，IPVS会立即使该连接过期，客户端程序会收到连接已关闭的通知。该功能等效于在目标不可用时刷新连接的要求，\n3. 启用该功能时，无可用目标服务器会触发主动连接关闭。\n4. 禁用该功能时，连接静默过期，等待目标服务器恢复。\n5. 根据需要决定是立即通知客户端服务器不可用,还是静默等待服务器可用。\n\n总结一下，expire_nodest_conn控制目标服务器不可用时IPVS的连接处理策略。根据实际需求选择启用或禁用它\n\n\n### 6. 参数 expire_quiescent_template\n```\nexpire_quiescent_template - BOOLEAN\n\t- 0 - disabled (default)\n\t- not 0 - enabled\n\n\tWhen set to a non-zero value, the load balancer will expire persistent templates when the destination server is quiescent. This may be useful, when a user makes a destination server quiescent by setting its weight to 0 and it is desired that subsequent otherwise persistent connections are sent to a different destination server. By default new persistent connections are allowed to quiescent destination servers.\n\tIf this feature is enabled, the load balancer will expire the persistence template if it is to be used to schedule a new connection and the destination server is quiescent.\n```\n该参数控制了目的地服务器处于静默状态(不再接受新的连接)时，IPVS 是否让持久连接模板过期的功能。其含义如下:\n1. 默认值为 0，表示禁用该功能。\n2. 如果设置为非零值，则当目的地服务器进入静默状态(权重为0)时，IPVS 会让指向该服务器的持久连接模板过期。这在用户通过设置服务器权重为0使其进入静默状态,并希望后续的持久连接转发到其他服务器时很有用。\n3. 默认情况下,新的持久连接仍然允许转发到静默状态的服务器。如果启用该功能,当持久模板要用于转发新连接到静默状态服务器时,该模板会被移除。\n4. 该功能可以在需要将持久连接转移离开静默服务器时使用。\n\n总结一下,expire_quiescent_template 控制静默服务器的持久模板过期,用于将持久连接转移到其他服务器。\n\n### 7. 参数 conntrack\n```\nconntrack - BOOLEAN\n\t- 0 - disabled (default)\n\t- not 0 - enabled\n\n\tIf set, maintain connection tracking entries for connections handled by IPVS.\n\tThis should be enabled if connections handled by IPVS are to be also handled by stateful firewall rules. That is, iptables rules that make use of connection tracking. It is a performance optimisation to disable this setting otherwise.\n\tConnections handled by the IPVS FTP application module will have connection tracking entries regardless of this setting.\n\tOnly available when IPVS is compiled with CONFIG_IP_VS_NFCT enabled.\n```\n\n该参数控制着 IPVS 是否维护其处理的连接的连接跟踪表项。其含义如下:\n1. 默认值为0，表示禁用该功能。\n2. 如果设置为非0，则IPVS会维护其处理的连接的连接跟踪(conntrack)表项。\n\t- 如果IPVS处理的连接也需要被状态防火墙规则处理,则需要启用该功能。比如基于连接跟踪的iptables规则。\n\t- 如果连接不需要防火墙跟踪,则禁用该功能可以优化性能。\n\t- IPVS处理的FTP连接会无条件维护连接跟踪表项。\n\t- 只有在IPVS编译时启用了CONFIG_IP_VS_NFCT配置时,该功能才可用。\n\nconntrack控制IPVS维护连接跟踪以供防火墙使用。需要防火墙处理连接则启用,否则禁用可优化。所以,conntrack参数控制IPVS是否维护连接状态用于防火墙,根据需要决定启用或禁用。\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/fe510cb5e87550536b556fb0b2f8c42d.png)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/09/cf8019c10d531c7ac7f6884f384da655.png)\n","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/ipvs-%E8%BD%AC%E5%8F%91-service-%E6%B5%81%E9%87%8F":{"title":"ipvs 转发 service 流量","content":"### 为什么引入了 ipvs\n\n### 是否完全替代了 iptables \n\n### 有哪些与 iptables 相关的配置参数\n```go\n\t// Generate the masquerade mark to use for SNAT rules.\n\tmasqueradeValue := 1 \u003c\u003c uint(masqueradeBit)\n\tmasqueradeMark := fmt.Sprintf(\"%#08x\", masqueradeValue)\n```\n\n\n\npod-\u003e service cluster ip\n\tpod-\u003e pod\n\ttunl0\n\npod-\u003e service hostNetwork\n\npod-\u003e service NodePort\n外部-\u003e service NodePort containerNetwork\n外部-\u003e service NodePort hostNetwork\n\n\n","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/ipvs-strictARP-%E5%8F%82%E6%95%B0":{"title":"ipvs strictARP 参数","content":"\n\n[[arp 相关内核参数]]\n设置为 true 时\n- net/ipv4/conf/all/arp_ignore =\u003e 1\n- net/ipv4/conf/all/arp_announce =\u003e 2","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/journalctl":{"title":"journalctl","content":"需更改设置,如上次系统崩溃，需要查看日志时，就要看上一次的启动日志。\njournalctl -b -1\n\n### 查看指定时间的日志\njournalctl --since=\"2012-10-3018:17:16\"\njournalctl --since \"20 minago\"\njournalctl --since yesterday\njournalctl --since\"2015-01-10\" --until \"2015-01-11 03:00\"\njournalctl --since 09:00 --until\"1 hour ago\"\njournalctl --since\"15:15\" --until now\n\n### 显示尾部的最新10行日志\njournalctl -n\n\n### 显示尾部指定行数的日志\n查看的是/var/log/messages的日志，但是格式上有所调整，如主机名格式不一样而已\njournalctl -n 20\n\n### 实时滚动显示最新日志\njournalctl -f\n\n### 查看指定服务的日志\njournalctl /usr/lib/systemd/systemd\n\n\njournalctl -xefu kubelet","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/k3s-%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85":{"title":"k3s 多节点安装","content":"\n项目地址： https://github.com/k3s-io/k3s/releases\n文档地址： https://docs.k3s.io/zh/\n\nk3s 架构\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/08/d6f71d5266f0cf95af0a523a12b7c04f.png)\n\n\n## 多节点安装\n### 安装 server 节点\n如果不要多节点部署实现高可用，可以禁用 servicelb 组件。traefik 虽然是 K3s 自带的网络组件，但是其默认会占用 80 和 443 端口，也可以禁用。\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=\"--docker --disable servicelb --disable traefik --disable-cloud-controller\" sh -\n# 或使用国内镜像\ncurl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_EXEC=\"--docker --disable servicelb --disable traefik --disable-cloud-controller\" sh -\n```\n\n安装完成之后 server 对应的服务文件在 `/etc/systemd/system/multi-user.target.wants/k3s.service`\n\n### 安装 agent 节点\n1. 获取主节点的 node-token\n`cat /var/lib/rancher/k3s/server/node-token`\n\n2. 安装 agent\n```bash\ncurl -sfL https://get.k3s.io | K3S_URL=https://172.16.10.51:6443 K3S_TOKEN=K103f44be477e828db7be78b4a58728fc5a08e0aac876358fd0d43a2ac6cd40773b::server:234ccdda43f340743bf2f4d38587c429   sh -\n```\n\n3. 复制 kubeconfig 文件到 agent 节点的 ~/.kube/config，并修改 server: https://127.0.0.1:6443 的配置\n\n安装完成之后 agent 服务配置文件位置：`/etc/systemd/system/multi-user.target.wants/k3s-agent.service`\n\n\nK3s 默认运行环境为 containerd，如果采用 docker 作为运行时的话，先提前安装 docker，并在安装 k3s 时指定或者安装完成后修改配置文件：\n- 安装时指定\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--docker --disable servicelb --disable traefik --disable-cloud-controller\" sh -\n```\n- 安装后修改配置文件\n```bash\n~#: vim /etc/systemd/system/multi-user.target.wants/k3s.service\n# 原值\n# ExecStart=/usr/local/bin/k3s server\n\n# 新值\nExecStart=/usr/local/bin/k3s server --docker --no-deploy traefik\n```\n\n重启服务\nsystemctl daemon-reload\nservice k3s restart\n\n### 指定版本安装\n版本列表： https://github.com/k3s-io/k3s/releases\nk3s 安装选项： https://docs.rancher.cn/docs/k3s/installation/install-options/_index/#%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%9A%84%E9%80%89%E9%A1%B9\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.26.7+k3s1 INSTALL_K3S_EXEC=\"--docker\" sh -\n```\n","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/k3s-+-rancher-%E5%AE%89%E8%A3%85":{"title":"k3s + rancher 安装","content":"\n文档链接：\n- 安装在docker： https://oldj.net/article/2022/04/17/install-k3s-and-rancher/\n- 安装到k3s 中： https://blog.lv5.moe/p/use-k3s-to-build-homelab-based-on-kubernetes\nrancher 官方文档： https://ranchermanager.docs.rancher.com/zh/\n- https://ranchermanager.docs.rancher.com/v2.5/pages-for-subheaders/load-balancer-and-ingress-controller\n\n安装 k3s：[[k3s 多节点安装]]\n安装 rancher：\n\n使用 helm 安装\n1. 安装 helm cli： https://github.com/helm/helm/releases\n2. 安装 cert-manager： https://cert-manager.io/docs/installation/\n```bash\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\n```\n\n2. 安装 rancher\nhttps://ranchermanager.docs.rancher.com/zh/pages-for-subheaders/install-upgrade-on-a-kubernetes-cluster\n```bash\ncp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nhelm repo add rancher-stable https://releases.rancher.com/server-charts/stable\nkubectl create namespace cattle-system\nhelm install rancher rancher-stable/rancher --namespace cattle-system --set hostname=rancher.my.org --set bootstrapPassword=admin --set global.cattle.psp.enabled=false --set replicas=1\n```\n\n\n报错： Error: Kubernetes cluster unreachable: Get \"http://localhost:8080/version?timeout=32s\": dial tcp 127.0.0.1:8080: connect: connection refused\n解决方法：拷贝 k3s 配置文件到 ~/.kube/config\n\n\n问题排查： https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster/troubleshooting\n\n","lastmodified":"2025-03-26T03:48:44.13631517Z","tags":null},"/k9s-Tools":{"title":"","content":"#k9s \n\nrelease url: [Releases · derailed/k9s (github.com)](https://github.com/derailed/k9s/releases)\n\n安装\n\n配置：[derailed/k9s: 🐶 Kubernetes CLI To Manage Your Clusters In Style! (github.com)](https://github.com/derailed/k9s#k9s-configuration)\n~/.config/k9s/config.yml\n```\nk9s:\n  refreshRate: 2\n  maxConnRetry: 5\n  enableMouse: false\n  headless: false\n  logoless: false\n  crumbsless: false\n  readOnly: false\n  noExitOnCtrlC: false\n  noIcons: false\n  logger:\n    tail: 100\n    buffer: 5000\n    sinceSeconds: 60\n    fullScreenLogs: false\n    textWrap: false\n    showTime: false\n  currentContext: kubernetes-admin@cluster.local\n  currentCluster: cluster.local\n  clusters:\n    cluster.local:\n      namespace:\n        active: all\n        lockFavorites: false\n        favorites:\n        - default\n      view:\n        active: po\n      featureGates:\n        nodeShell: false\n      shellPod:\n        image: busybox:1.35.0\n        command: []\n        args: []\n        namespace: default\n        limits:\n          cpu: 100m\n          memory: 100Mi\n      portForwardAddress: localhost\n  thresholds:\n    cpu:\n      critical: 90\n      warn: 70\n    memory:\n      critical: 90\n      warn: 70\n  screenDumpDir: /tmp/k9s-screens-root\n```","lastmodified":"2025-03-26T03:48:43.130318715Z","tags":null},"/kube-controller-manager":{"title":"kube-controller-manager","content":"\nCalico kube-controller-manager 是 Deployment。它包含以下控制器：\n-   policy controller：监视网络策略和 calico 策略，它会把Kubernetes的network policies同步到 datastore 中。\n-   namespace controller：监视命名空间和 calico 配置文件，它会把Kubernetes的namespace label变化同步到 datastore 中。\n-   serviceaccount controller：监视服务帐户和 calico 配置文件，它会把Kubernetes的service account变化同步到 datastore 中。\n-   workloadendpoint controller：监视pod标签的更改并更新Calico工作负载中的endpoints配置，它会把Kubernetes的pod label变化同步到 datastore 中。\n-   node controller：监视删除Kubernetes nodes节点的操作并从Calico中也删除相应的数据。\n\n","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-ovn":{"title":"","content":"#kube-ovn  #cni \n\n文档链接：[Kube-OVN 文档](https://kube-ovn.readthedocs.io/zh_CN/latest/)\n发布版本：[Releases · kubeovn/kube-ovn (github.com)](https://github.com/kubeovn/kube-ovn/releases)\n\nkube-ovn 1.9 版本自定义资源\n| 自定义资源 | 说明 | 备注|\n|---|---|--|\n| vpcs | 自定义vpc | |\n| vpc-nat-gateways | vpc 出口网关 | |\n| subnets | 子网/ippool 地址池 | |\n| provider-networks | underlay 网卡提供者 | |\n| vlans | vlan 信息 | |\n| ips | ip 分配记录 | |\n| htbqoses | pod 网络限速 | |\n| security-groups | 安全组信息 | |\n\nkube-ovn 1.10 自定义资源\n| 自定义资源 | 说明 | 备注|\n|---|---|--|\n| vpcs | 自定义vpc | |\n| vpc-nat-gateways | vpc 出口网关 | |\n| subnets | 子网/ippool 地址池 | |\n| provider-networks | underlay 网卡提供者 | |\n| vlans | vlan 信息 | |\n| ips | ip 分配记录 | |\n| vips | vip 分配记录 | |\n| htbqoses | pod 网络限速 | |\n| security-groups | 安全组信息 | |\n| iptables-snat-rules | snat 规则  | |\n| iptables-dnat-rules | dnat 规则 | |\n| iptables-eips | eip 信息 | |\n| iptables-fip-rules | float ip 信息 | |\n新版本 1.10 将耦合在 vpc-nat-gateways 中的 snat/dnat/eips/fip 信息抽离出来\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/kube-ovn-ipam":{"title":"","content":"#ipam #kube-ovn \n\n## ip 分配\n- **随机分配**\n\t对于工作负载的 ip 分配策略\n\t- 优先使用负载指定的：`ovn.kubernetes.io/logical_switch: subnet`\n\t- 如果负载没有指定使用，使用 namespace 绑定的 subnet\n\t- 如果 namespace 没有绑定 subnet，使用安装默认的 ovn-default \n\n- **静态分配**\n\t静态分配即在 pod 的 annotations 中添加对应的注解：如果 mac 地址为空，会随机申请出一个 mac 地址。\n``` yaml\n  annotations:\n    ovn.kubernetes.io/ip_address: 10.233.128.2\n    ovn.kubernetes.io/logical_switch: subnet\n    ovn.kubernetes.io/mac_address: 00:00:00:53:6B:B6\n```\n\n- **指定 ip-pool 分配**\n\tKube-OVN 支持给 Workload 设置固定 IP，包括Deployment/StatefulSet/DaemonSet/Job/CronJob。\n```yaml\n      annotations:\n        ovn.kubernetes.io/logical_switch: subnet\n        ovn.kubernetes.io/ip_pool: 10.233.128.200,10.233.128.201,10.233.128.202\n```\n\n## ip 预留\n创建 subnet 时可以预留 ip\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet\nspec:\n  protocol: IPv4\n  cidrBlock: 10.233.128.0/24\n  gateway: 10.233.128.1\n  excludeIps:\n  - 10.233.128.1..10.233.128.10\n  - 10.233.128.200\n```","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/kube-ovn-networkpolicy":{"title":"","content":"#network-policy #kube-ovn \n\n### 标准的 NetworkPolicy\nkube-ovn 支持标准的 NetworkPolicy，但是无法作用于 node 上的策略\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n```\n\n### 子网级别的网络隔离+访问控制\nkube-ovn 还支持子网级别的网络隔离和访问控制\n1. 【网络隔离】通过 subnet.spec.private 开启子网间的隔离，并自定义添加允许访问的 subnet \n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet\nspec:\n  private: true\n  allowSubnets:\n  - 10.233.129.0/24\n  - 10.233.130.0/24\n```\n\n2. 【访问控制】通过 subnet.spec.acls 使用更细粒度的访问控制\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet\nspec:\n  acls:                                                 // ACL 参数信息\n  - action: reject\n    direction: to-lport\n    match: ip4.src==172.30.2.201 \u0026\u0026 ip4.dst==172.30.3.201\n    priority: 2022\n  - action: allow\n    direction: to-lport\n    match: ip4.src==172.30.2.201 \u0026\u0026 ip4.dst==172.30.3.202\n    priority: 2222\n```\n| 字段 | 说明 | 取值 |\n|--|--|--|\n| action | 动作 | allow/reject/drop/allow-related/allow-stateless |\n| direction | 方向 | from-lport/to-lport |\n| match | 匹配规则 | `ip4.src==172.30.2.201 \u0026\u0026 ip4.dst==172.30.3.201` |\n| priority | 优先级 | 0~32767 |\n\n【注】：match 需要符合流表规则：[ovn-sb man page - ovn - File Formats | ManKier](https://www.mankier.com/5/ovn-sb#Logical_Flow_TABLE)\n\n### 安全组 SecurityGroup\n```yaml\napiVersion: kubeovn.io/v1\nkind: SecurityGroup\nmetadata:\n  name: sg1\nspec:\n  allowSameGroupTraffic: true\n  egressRules:\n    - ipVersion: ipv4 \n      policy: allow                           \n      priority: 1\n      protocol: all\n      remoteAddress: 0.0.0.0/0\n      remoteType: address\n  ingressRules:\n    - ipVersion: ipv4\n      policy: allow\n      priority: 10\n      protocol: icmp\n      remoteAddress: 0.0.0.0/0\n      remoteType: address\n    - ipVersion: ipv4\n      policy: allow\n      priority: 10\n      protocol: tcp\n      portRangeMin: 3306\n      portRangeMax: 3306\n      remoteAddress: 192.168.2.100\n      remoteType: address\n    - ipVersion: ipv4\n      policy: allow\n      priority: 10\n      protocol: all\n      remoteSecurityGroup: sg2\n      remoteType: securityGroup\n```\n\n| 字段 | 说明 | 取值 |\n|--|--|--|\n| allowSameGroupTraffic | 是否允许与安全组通信 | true/false |\n| ipVersion | ip 协议 | ipv4/ipv6 |\n| policy | 策略 | allow/drop |\n| priority | 优先级，值越小优先级越高 | 0~200 |\n| protocol | 协议 | tcp/udp/icmp/all |\n| portRangeMin | 端口范围 | 0~65535 |\n| portRangeMax | 端口范围，可以等于portRangeMin 值 | 0~65535 |\n| remoteType | 作用的对象类型 | address/securityGroup |\n| remoteSecurityGroup | 当remoteType取securityGroup，指定其名称 | string |\n\n\u003e 当 protocol 指定 tcp/udp 时，需要指定 portRange \n\n通过设置 pod 注解来使用安全组：\n```yaml\nmetadata:\n  annotations:\n    ovn.kubernetes.io/port_security: 'true'\n    ovn.kubernetes.io/security_groups: 'sg1,sg3,sgx'\n```\n\n官方PR: [[WIP] Security group by fanriming · Pull Request #932 · kubeovn/kube-ovn (github.com)](https://github.com/kubeovn/kube-ovn/pull/932)\n\n### 集成 cilium networkPolicy\n","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/kube-ovn-overlay-vpc":{"title":"","content":" #cni  #kube-ovn  #overlay\n\n\n### overlay 模式路由网络打通\n[Overlay 下路由方式网络打通 - Kube-OVN 文档](https://kube-ovn.readthedocs.io/zh_CN/latest/advance/overlay-with-route/)\n\n### 网关类型\n\u003e 仅在默认 vpc 下支持，*子网管理*\n\n#### 分布式网关\n子网的默认类型网关，每个 node 会作为当前 node 上 pod 访问外部网络的网关。数据包会通过本机的 `ovn0` 网卡流入主机网络栈，再根据主机的路由规则进行出网。 当 `natOutgoing` 为 `true` 时，Pod 访问外部网络将会使用当前所在宿主机的 IP。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: distributed\nspec:\n  ...\n  gatewayType: distributed\n  natOutgoing: true\n```\n\n#### 集中式网关\n如果希望子网内流量访问外网使用固定的 IP，以便审计和白名单等安全操作，可以在子网中设置网关类型为集中式网关。 在集中式网关模式下，Pod 访问外网的数据包会首先被路由到特定节点的 `ovn0` 网卡，再通过主机的路由规则进行出网。 当 `natOutgoing` 为 `true` 时，Pod 访问外部网络将会使用特定宿主机的 IP。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: centralized\nspec:\n  ...\n  gatewayType: centralized\n  gatewayNode: \"node1,node2\"\n  natOutgoing: true\n```\n其中 `gatewayType` 字段为 `centralized`，`gatewayNode` 为特定机器在 Kubernetes 中的 NodeName。\n- `gatewayNode` 字段可以为逗号分隔的多台主机。\n- 集中式网关如果希望指定机器的特定网卡进行出网，`gatewayNode` 可更改为 `kube-ovn-worker:172.18.0.2, kube-ovn-control-plane:172.18.0.3` 格式。\n- 集中式网关默认为主备模式，只有主节点进行流量转发，如果需要切换为 ECMP 模式修改 kube-ovn-controller Deployment 的参数：\n``` yaml\nargs:\n- --enable-ecmp=true \n```\n\n### Eip 和 Snat 配置\n\u003e 仅在默认 vpc 下支持\n\nKube-OVN 支持利用 OVN 中的 L3 Gateway 功能来实现 Pod 级别的 SNAT 和 EIP 功能。 \n- 通过使用 SNAT，一组 Pod 可以共享一个 IP 地址对外进行访问。 \n- 通过 EIP 的功能，一个 Pod 可以直接和一个外部 IP 关联， 外部服务可以通过 EIP 直接访问 Pod，Pod 也将通过这个 EIP 访问外部服务。\n\n#### 准备工作\n- 为了使用 OVN 的 L3 Gateway 能力，必须将一个单独的网卡接入 OVS 网桥中进行 Overlay 和 Underlay 网络的打通， 主机必须有其他的网卡用于运维管理。\n- 由于经过 NAT 后的数据包会直接进入 Underlay 网络，必须确认当前的网络架构下此类数据包可以安全通过。\n- 目前 EIP 和 SNAT 地址没有冲突检测，需要管理员手动分配避免地址冲突。\n\n#### 创建配置文件\n在 `kube-system` 下创建 ConfigMap `ovn-external-gw-config`：\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ovn-external-gw-config\n  namespace: kube-system\ndata:\n  enable-external-gw: \"true\"\n  external-gw-nodes: \"kube-ovn-worker\"\n  external-gw-nic: \"eth1\"\n  external-gw-addr: \"172.56.0.1/16\"\n  nic-ip: \"172.56.0.254/16\"\n  nic-mac: \"16:52:f3:13:6a:25\"\n```\n\n| 字段 | 描述|\n|--|--|\n| enable-external-gw | 是否开启 SNAT 和 EIP 功能 |\n| type | 默认为 centralized，如果使用 distributed，则集群所有节点都需要有同名网卡来承担网关功能 |\n| external-gw-nodes | centralized模式下，承担网关作用的节点名(逗号分隔) |\n| external-gw-nic | 节点上承担网关作用的网卡名 |\n| external-gw-addr | 物理网络网关的 IP 和掩码 |\n| nic-ip | 分配给逻辑网关端口的 IP，需为物理段未被占用的 IP |\n| nic-mac | 分配给逻辑网关端口的 Mac，需为物理段未被占用的 Mac |\n\n#### 观察 OVN 和 OVS 状态确认配置生效\n检查 OVN-NB 状态, 确认 `ovn-external` 逻辑交换机存在，并且 `ovn-cluster-ovn-external` 逻辑路由器端口上 绑定了正确的地址和 chassis。\n```bash\n# kubectl ko nbctl show\nswitch 3de4cea7-1a71-43f3-8b62-435a57ef16a6 (ovn-external)\n    port ln-ovn-external\n        type: localnet\n        addresses: [\"unknown\"]\n    port ovn-external-ovn-cluster\n        type: router\n        router-port: ovn-cluster-ovn-external\nrouter e1eb83ad-34be-4ed5-9a02-fcc8b1d357c4 (ovn-cluster)\n    port ovn-cluster-ovn-external\n        mac: \"ac:1f:6b:2d:33:f1\"\n        networks: [\"172.56.0.100/16\"]\n        gateway chassis: [a5682814-2e2c-46dd-9c1c-6803ef0dab66]\n```\n\n检查 OVS 状态，确认相应的网卡已经桥接进 `br-external` 网桥：\n```bash\n# kubectl ko vsctl ${gateway node name} show\ne7d81150-7743-4d6e-9e6f-5c688232e130\n    Bridge br-external\n        Port br-external\n            Interface br-external\n                type: internal\n        Port eno2\n            Interface eno2\n        Port patch-ln-ovn-external-to-br-int\n            Interface patch-ln-ovn-external-to-br-int\n                type: patch\n                options: {peer=patch-br-int-to-ln-ovn-external}\n```\n\n#### Pod 配置 EIP 和 SNAT\n可通过在 Pod 上增加 `ovn.kubernetes.io/snat` 或 `ovn.kubernetes.io/eip` annotation 来分别配置 SNAT 和 EIP：\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    ovn.kubernetes.io/snat: 172.56.0.200\n...\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    ovn.kubernetes.io/eip: 172.56.0.233\n...\n```\n\n可以动态调整 Pod 所配置的 EIP 或 SNAT 规则，更改时请注意要同时删除 `ovn.kubernetes.io/routed` annotation 触发路由的变更：\n```yaml\nkubectl annotate pod pod-gw ovn.kubernetes.io/eip=172.56.0.221 --overwrite\nkubectl annotate pod pod-gw ovn.kubernetes.io/routed-\n```\n\n#### 高级配置\n默认网络下如果无需使用 EIP 和 SNAT 的能力，可以选择关闭相关功能，以减少 `kube-ovn-controller` 在创建和更新 网络时的检查消耗，在大规模集群环境下可以提升处理速度。\n- 安装时关闭，可以在安装脚本中进行配置：`ENABLE_EIP_SNAT=false`\n- 安装后关闭，可以通过更改 `kube-ovn-controller` Deployment 的参数进行配置：\n``` yaml\nargs:\n- --enable-eip-snat=false\n```\n\n`kube-ovn-controller` 的其余参数可对 SNAT 和 EIP 功能进行高阶配置：\n-   `--external-gateway-config-ns`: Configmap `ovn-external-gw-config` 所属 Namespace， 默认为 `kube-system`。\n-   `--external-gateway-net`: 物理网卡所桥接的网桥名，默认为 `external`。\n-   `--external-gateway-vlanid`: 物理网络 Vlan Tag 号，默认为 0， 即不使用 Vlan。\n\n\n### 使用自定义 VPC\nKube-OVN 支持多租户隔离级别的 VPC 网络。不同 VPC 网络相互独立，可以分别配置 Subnet 网段、路由策略、安全策略、出网网关、EIP 等配置。\n\n#### 说明\n- VPC 主要用于有多租户网络强隔离的场景。部分 Kubernetes 网络功能在多租户网络下存在冲突。 例如节点和 Pod 互访，NodePort 功能，基于网络访问的健康检查和 DNS 能力在多租户网络场景暂不支持。 为了方便常见 Kubernetes 的使用场景，Kube-OVN 默认 VPC 做了特殊设计，该 VPC 下的 Subnet 可以满足 Kubernetes 规范。\n- 常见隔离需求可通过默认 VPC 下的网络策略和子网 ACL 实现\n- 用户自定义 VPC 支持静态路由、EIP、NAT 网关等功能。\n- 在使用自定义 VPC 前请明确是否需要 VPC 级别的隔离，并了解自定义 VPC 下的限制。\n\n**v1.10.6 支持的功能如下：**\n- 限制 namespace 访问\n- 自定义路由\n\t- 静态路由\n\t- 策略路由\n- 设置出网网关、EIP、SNAT、DNAT、浮动IP\n\n#### 限制 namespace + 自定义路由\n```yaml\nkind: Vpc\napiVersion: kubeovn.io/v1\nmetadata:\n  name: test-vpc-1\nspec:\n  namespaces:\n  - ns1\n---\nkind: Subnet\napiVersion: kubeovn.io/v1\nmetadata:\n  name: net1\nspec:\n  vpc: test-vpc-1 # 指定 vpc\n  cidrBlock: 10.0.1.0/24\n  namespaces:\n    - ns1\n```\n在创建 vpc 时，可以指定哪些 namesapce 可以访问该 vpc，设置为空则不限定。\n\n在自定义 VPC 内，用户可以自定义网络内部的路由规则，结合网关实现更灵活的转发。 Kube-OVN 支持静态路由和更为灵活的策略路由。\n**静态路由**\n```yaml\nkind: Vpc\napiVersion: kubeovn.io/v1\nmetadata:\n  name: test-vpc-1\nspec:\n  staticRoutes:\n    - cidr: 0.0.0.0/0\n      nextHopIP: 10.0.1.254\n      policy: policyDst\n    - cidr: 172.31.0.0/24\n      nextHopIP: 10.0.1.253\n      policy: policySrc\n```\n-   `policy`: 支持目的地址路由 `policyDst` 和源地址路由 `policySrc`。\n-   当路由规则存在重叠时，CIDR 掩码较长的规则优先级更高，若掩码长度相同则目的地址路由优先于源地址路由。\n\n**策略路由**\n策略路由提供了更精确的匹配规则，优先级控制 和更多的转发动作。针对静态路由匹配的流量，可通过策略路由进行更细粒度的控制。\n\u003e 该功能为 OVN 内部逻辑路由器策略功能的一个对外暴露，更多使用信息请参考 [Logical Router Policy](https://man7.org/linux/man-pages/man5/ovn-nb.5.html#Logical_Router_Policy_TABLE)\n```yaml\nkind: Vpc\napiVersion: kubeovn.io/v1\nmetadata:\n  name: test-vpc-1\nspec:\n  policyRoutes:\n    - action: drop\n      match: ip4.src==10.0.1.0/24 \u0026\u0026 ip4.dst==10.0.1.250\n      priority: 11\n    - action: reroute\n      match: ip4.src==10.0.1.0/24\n      nextHopIP: 10.0.1.252\n      priority: 10\n```\n\n#### VPC 出网网关\n\u003e 1. 使用自定义 vpc 并配置出口网关时，需要使用 multus-cni. [[CloudNative/cni-network/multus-cni]]\n\u003e 2. 自定义 VPC 下的子网不支持默认 VPC 下的分布式网关和集中式网关。\n\n自定义 VPC 内容器访问外部网络需要通过 VPC 网关，VPC 网关可以打通物理网络和租户网络，并提供浮动 IP、SNAT、DNAT 功能。\n##### 配置外部网络\n- 创建一个 `name` 必须为 ovn-vpc-external-network 的 Subnet 用来管理可用的外部地址，请和网络管理沟通给出可用的物理段 IP。\n- VPC 网关使用 Macvlan 做物理网络配置，`NetworkAttachmentDefinition` 的 `master` 需为对应物理网路网卡的网卡名。\n- `provider` 格式为 `\u003cnad Name\u003e.\u003cnad Namespace\u003e`。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: ovn-vpc-external-network\nspec:\n  protocol: IPv4\n  provider: ovn-vpc-external-network.kube-system\n  cidrBlock: 192.168.0.0/24\n  gateway: 192.168.0.1  # IP address of the physical gateway\n  excludeIps:\n  - 192.168.0.1..192.168.0.10\n---\napiVersion: \"k8s.cni.cncf.io/v1\"\nkind: NetworkAttachmentDefinition\nmetadata:\n  name: ovn-vpc-external-network\n  namespace: kube-system\nspec:\n  config: '{\n      \"cniVersion\": \"0.3.0\",\n      \"type\": \"macvlan\",\n      \"master\": \"eth1\",\n      \"mode\": \"bridge\",\n      \"ipam\": {\n        \"type\": \"kube-ovn\",\n        \"server_socket\": \"/run/openvswitch/kube-ovn-daemon.sock\",\n        \"provider\": \"ovn-vpc-external-network.kube-system\"\n      }\n    }'\n```\n##### 开启 VPC 网关功能\nVPC 网关功能需要通过 `kube-system` 下的 `ovn-vpc-nat-gw-config` 开启：\n```yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: ovn-vpc-nat-gw-config\n  namespace: kube-system\ndata:\n  image: 'kubeovn/vpc-nat-gateway:v1.11.0'  # 指定网关 pod 使用的镜像\n  enable-vpc-nat-gw: 'true' # 控制是否启用\n  # nic 字段已弃用\n```\n##### 创建 VPC 网关\n```yaml\nkind: VpcNatGateway\napiVersion: kubeovn.io/v1\nmetadata:\n  name: gw1\nspec:\n  vpc: test-vpc-1 # 指定 vpc \n  subnet: net1 # VPC 内某个 Subnet 名，网关 Pod 会用该 subnet 分配的 lanIp 来连接租户网络\n  lanIp: 10.0.1.254 # subnet 内某个未被使用的 IP，用于网关 Pod ip 分配\n  selector: # VPC 网关 Pod 的节点选择器\n    - \"kubernetes.io/hostname: kube-ovn-worker\"\n    - \"kubernetes.io/os: linux\"\n```\n创建之后会在 test-vpc-1 vpc 上配置对应的默认静态路由，`nextHopIP`即为 `lanIp`。\n##### 创建 EIP、DNAT、SNAT、Float IP\n```yaml\nkind: IptablesEIP\napiVersion: kubeovn.io/v1\nmetadata:\n  name: eip\nspec:\n  natGwDp: gw1\n   # 固定 EIP 地址分配\n  # v4ip: 10.0.1.111\n```\n\n```yaml\nkind: IptablesDnatRule\napiVersion: kubeovn.io/v1\nmetadata:\n  name: dnat01\nspec:\n  eip: eip\n  externalPort: '8888'\n  internalIp: 10.0.1.10\n  internalPort: '80'\n  protocol: tcp\n```\n\n```yaml\nkind: IptablesSnatRule\napiVersion: kubeovn.io/v1\nmetadata:\n  name: snat01\nspec\n  eip: eip\n  internalCIDR: 10.0.1.0/24\n``` \n\n```yaml\nkind: IptablesFIPRule\napiVersion: kubeovn.io/v1\nmetadata:\n  name: fip01\nspec:\n  eip: eip\n  internalIp: 10.0.1.5\n```\n\n#### VPC Peer\n[VPC 互联 - Kube-OVN 文档](https://kube-ovn.readthedocs.io/zh_CN/latest/advance/vpc-peering/)\n\n","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/kube-ovn-underlay":{"title":"","content":"#kube-ovn  #underlay  \n\n## 功能限制\n由于该模式下容器网络直接使用物理网络进行二层包转发，Overlay 模式下的 SNAT/EIP， 分布式网关/集中式网关等 L3 功能无法使用。\n\n## 使用\nunderlay 模式主要涉及的资源有：\n\n| 资源 | 说明 |\n|--|--|\n| provider-networks | underlay 网卡提供者 | \n| vlans | vlan 信息 | \n| subnets | 子网/ippool 地址池 | \n| ips | ip 分配记录 | \n\n### provider-networks 资源\nProviderNetwork 提供了主机网卡到物理网络映射的抽象，将同属一个网络的网卡进行统一管理， 并解决在复杂环境下同机器多网卡、网卡名不一致、对应 Underlay 网络不一致等情况下的配置问题。\n```yaml\napiVersion: kubeovn.io/v1\nkind: ProviderNetwork\nmetadata:\n  name: provider\nspec:\n  defaultInterface: eth0\n  customInterfaces:\n    - interface: eth2\n      nodes:\n        - node1\n  excludeNodes:\n    - node2\n```\n\n| 字段 | 选项 | 说明 |\n|--|--|--|\n| defaultInterface | 必选 | 为默认使用的节点网卡名称。 资源创建成功后，各节点(*除 excludeNodes 外*)中会创建名为 br-provider的 OVS 网桥,并将指定的节点网卡桥接至此网桥 | \n| customInterfaces | 可选 | 可针对特定节点指定需要使用的网卡 | \n| excludeNodes | 可选 | 用于指定不桥接网卡的节点 | \n\n相关 labels 标签如下：\n\n| 标签 | 取值 | 说明 |\n|--|--|--|\n| provider.provider-network.ovn.kubernetes.io/ready | true | 节点中的桥接工作已完成，ProviderNetwork 在节点中可用  | \n| provider.provider-network.ovn.kubernetes.io/interface | eth0 | 节点中被桥接的网卡的名称 | \n| provider.provider-network.ovn.kubernetes.io/mtu | 1500 | 节点中被桥接的网卡的 MTU |\n| provider.provider-network.ovn.kubernetes.io/exclude | true | 标记 excludeNodes 节点 |  \n\n\u003e 如果节点网卡上已经配置了 IP，则 IP 地址和网卡上的路由会被转移至对应的 OVS 网桥。\n\u003e **ProviderNetwork 资源名称的长度不得超过 12 **\n\n\n### vlan 资源\nVlan 提供了将 Vlan Tag 和 ProviderNetwork 进行绑定的能力。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Vlan\nmetadata:\n  name: vlan1\nspec:\n  id: 0\n  provider: provider\n```\n\n-   `provider`: 为需要使用的 ProviderNetwork 资源的名称。多个 vlan 可以引用同一个 ProviderNetwork\n-   `id`: 为 vlan id/tag，kube-ovn 会对该 Vlan 下的流量增加 Vlan tag，为 0 时不增加任何标签。\n\n\u003e vlan 的 tag 配置为其他数字时，对应的交换机端口应该配置为 trunk；同时配置成功后，应当让 ovs 收到的数据包带有 vlan tag，否则无法通信\n\n### subnet 资源\n- Vlan 与子网绑定\n\n将 `vlan` 的值指定为需要使用的 vlan 名称即可。多个 Subnet 可以引用同一个 VLAN。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet1\nspec:\n  protocol: IPv4\n  cidrBlock: 172.17.0.0/16\n  gateway: 172.17.0.1\n  vlan: vlan1\n```\n\n- 使用逻辑网关\n\n对于物理网络不存在网关的情况，Kube-OVN 支持在 Underlay 模式的子网中配置使用逻辑网关。 若要使用此功能，设置子网的 `spec.logicalGateway` 为 `true` 即可\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: subnet1\nspec:\n  protocol: IPv4\n  cidrBlock: 172.17.0.0/16\n  gateway: 172.17.0.1\n  vlan: vlan1\n  logicalGateway: true\n```\n开启此功能后，Pod 不使用外部网关，而是使用 Kube-OVN 创建的逻辑路由器。对于跨网段通信进行转发。\n\n### 三者的关系\n![upgit_20221103_1667439509.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221103_1667439509.png)\n\n\n### 问题：\n[Underlay/Overlay 混合网络的集群，机器重启后kube-ovn启动异常 · Issue #1964 · kubeovn/kube-ovn (github.com)](https://github.com/kubeovn/kube-ovn/issues/1964)\nhttps://raw.githubusercontent.com/kubeovn/kube-ovn/release-1.10/dist/images/start-ovs.sh\n\n采用一下方式恢复网络：\n```bash\n# 删除ovs 上 eth0 的端口\novs-vsctl show\novs-vsctl del-port br-provider eth0\n\n# 路由和 ip 转移\nip addr del 172.30.4.2/24 dev br-provider\nip addr replace 172.30.4.2/24 dev eth0\nip link set br-provider down\nip route replace default via 172.30.4.1 dev eth0\nip route replace 172.30.4.0/24 dev eth0 proto kernel scope link src 172.30.4.2\n```\n\n","lastmodified":"2025-03-26T03:48:43.169318577Z","tags":null},"/kube-proxy":{"title":"kube-proxy","content":"使用模式：ipvs or iptables or nftables\n\n切换方式\n```bash\n~#: kubectl -n kube-system edit cm kube-proxy\napiVersion: v1\ndata:\n  config.conf: |-\n    apiVersion: kubeproxy.config.k8s.io/v1alpha1\n    bindAddress: 0.0.0.0\n    bindAddressHardFail: false\n    clientConnection:\n      acceptContentTypes: \"\"\n      burst: 0\n      contentType: \"\"\n      kubeconfig: /var/lib/kube-proxy/kubeconfig.conf\n      qps: 0\n    clusterCIDR: 10.233.64.0/18\n    configSyncPeriod: 0s\n    conntrack:\n      maxPerCore: null\n      min: null\n      tcpCloseWaitTimeout: null\n      tcpEstablishedTimeout: null\n    detectLocalMode: \"\"\n    enableProfiling: false\n    healthzBindAddress: \"\"\n    hostnameOverride: \"\"\n    iptables:\n      masqueradeAll: false\n      masqueradeBit: 14\n      minSyncPeriod: 0s\n      syncPeriod: 30s\n    ipvs:\n      excludeCIDRs: null\n      minSyncPeriod: 0s\n      scheduler: \"\"\n      strictARP: false\n      syncPeriod: 0s\n      tcpFinTimeout: 0s\n      tcpTimeout: 0s\n      udpTimeout: 0s\n    kind: KubeProxyConfiguration\n    metricsBindAddress: \"\"\n    mode: ipvs\n    nodePortAddresses: null\n    oomScoreAdj: null\n    portRange: \"\"\n    showHiddenMetricsForVersion: \"\"\n    udpIdleTimeout: 0s\n    winkernel:\n      enableDSR: false\n      networkName: \"\"\n      sourceVip: \"\"\n  kubeconfig.conf: |-\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - cluster:\n        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        server: https://lb.kubesphere.local:6443\n      name: default\n    contexts:\n    - context:\n        cluster: default\n        namespace: default\n        user: default\n      name: default\n    current-context: default\n    users:\n    - name: default\n      user:\n        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\nkind: ConfigMap\nmetadata:\n  labels:\n    app: kube-proxy\n  name: kube-proxy\n  namespace: kube-system\n```\n\nipvs 工具 ipvsadm\nipvsadm -Ln 查看现有的 ipvs 规则\nipvsadm -D -t 10.0.0.100:80\n\n\n查询 kube-proxy 模式：`http://localhost:10249/proxyMode` \n\n有关源地址转换 SourceIP - 有关 networkPolicy\n- iptables 模式中，默认情况下在集群内发送到 ClusterIP 和 PodIP 的数据包不会进行源 NAT，如果设置 masqueradeAll 为 true，则源 IP 地址将修改为 节点 IP 或者 tunl0 IP\n- 默认情况下，发送到 LoadBalancer 或 NodePort 的 service 的数据包会进行源 NAT，因为处于就绪状态的所有可调度 Kubernetes 节点都符合负载平衡流量的条件。因此，如果数据包到达没有端点的节点，系统会将其代理到具有端点的节点，将数据包上的源 IP 替换为节点的 IP。但是，如果您将 service.spec.externalTrafficPolicy 字段设置为 Local，则数据包将仅发送到它们到达的节点，并且不会替换源 IP。\n\n保留客户端源 ip，如果将 `service.spec.externalTrafficPolicy` 设置为 `Local`， kube-proxy 只会将代理请求代理到本地端点，而不会将流量转发到其他节点。 但是如果没有本地端点，则发送到该节点的数据包将被丢弃。\n```bash\nkubectl patch svc nodeport -p '{\"spec\":{\"externalTrafficPolicy\":\"Local\"}}'\n```\n\n遇到的问题：\n1. 使用 nodeport 模式 以及 iptables 模式时，当 pod 调度到 node 节点时，访问nodeIP:port 不通，但是其他节点 ip 通\n\n\n对于 nftables 模式，1.29 时处于 alpha，1.31 时处于 beta","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-proxy-%E5%8E%9F%E7%90%86":{"title":"kube-proxy 原理","content":"\n\n[kube-proxy 如何实现流量转发](https://www.modb.pro/db/50708)\n\n```bash\nroot@node22:~# ps -elf | grep kube-proxy\n4 S root     39828 39784  0  80   0 - 188257 futex_ 10:04 ?       00:00:13 /usr/local/bin/kube-proxy --config=/var/lib/kube-proxy/config.conf --hostname-override=node22\n0 S root     43316 26243  0  80   0 -  1608 pipe_w 10:57 pts/0    00:00:00 grep kube-proxy\n```\n\n```yaml\napiVersion: v1\ndata:\n  config.conf: |-\n    apiVersion: kubeproxy.config.k8s.io/v1alpha1\n    bindAddress: 0.0.0.0\n    bindAddressHardFail: false\n    clientConnection:\n      acceptContentTypes: \"\"\n      burst: 0\n      contentType: \"\"\n      kubeconfig: /var/lib/kube-proxy/kubeconfig.conf\n      qps: 0\n    clusterCIDR: 10.233.64.0/18\n    configSyncPeriod: 0s\n    conntrack:\n      maxPerCore: null\n      min: null\n      tcpCloseWaitTimeout: null\n      tcpEstablishedTimeout: null\n    detectLocalMode: \"\"\n    enableProfiling: false\n    healthzBindAddress: \"\"\n    hostnameOverride: \"\"\n    iptables:\n      masqueradeAll: false\n      masqueradeBit: 14\n      minSyncPeriod: 0s\n      syncPeriod: 30s\n    ipvs:\n      excludeCIDRs: null\n      minSyncPeriod: 0s\n      scheduler: \"\"\n      strictARP: false\n      syncPeriod: 0s\n      tcpFinTimeout: 0s\n      tcpTimeout: 0s\n      udpTimeout: 0s\n    kind: KubeProxyConfiguration\n    metricsBindAddress: \"\"\n    mode: ipvs\n    nodePortAddresses: null\n    oomScoreAdj: null\n    portRange: \"\"\n    showHiddenMetricsForVersion: \"\"\n    udpIdleTimeout: 0s\n    winkernel:\n      enableDSR: false\n      networkName: \"\"\n      sourceVip: \"\"\n  kubeconfig.conf: |-\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - cluster:\n        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        server: https://lb.kubesphere.local:6443\n      name: default\n    contexts:\n    - context:\n        cluster: default\n        namespace: default\n        user: default\n      name: default\n    current-context: default\n    users:\n    - name: default\n      user:\n        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2023-10-19T02:03:46Z\"\n  labels:\n    app: kube-proxy\n  name: kube-proxy\n  namespace: kube-system\n  resourceVersion: \"259\"\n  uid: d782c705-8587-4b3e-bd94-19c9bed2692b\n```\n\niptables\n\n设置 pod 的 cidr\n- iptables -t nat -N TEST-SERVICES\n- iptables -t nat -A TEST-SERVICES ! -s 172.31.15.0/24 -m comment --comment \"Kubernetes service cluster ip + port for masquerade purpose\" -m set --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ\n- iptables -t nat -I PREROUTING 2 -m comment --comment \"kubernetes service portals test\" -j TEST-SERVICES\n- iptables -t nat -I OUTPUT 2 -m comment --comment \"kubernetes service portals test\" -j TEST-SERVICES\n\n\n\n\n\nipvs\n\n\n容器内 pod -\u003e service 路径\n","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-proxy-%E5%A4%84%E7%90%86":{"title":"kube-proxy 处理","content":"- user space\n- iptables\n- ipvs\n\n### 目的：\n将 service ip 转发到后端 pod ip 上\nnode -\u003e svc ip -\u003e pod ip\n\n### 需要解决哪些问题\n- 负载均衡\n- 跨节点访问 - nat 转换\n- 需要与 cni 同步吗 - 否\n\n### 有哪些解决方案\n- iptables\n- ipvs\n- ebpf\n\n\n### 如何实现\n\n\n\n","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-proxy-%E6%9B%BF%E6%8D%A2":{"title":"kube-proxy 替换","content":"将 ipvs 规则放入了 ebpf 数据面，转发过程可以通过 ebpf 来完成，但是还是需要有 kube-proxy 组件存在\n\n\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--write-kubeconfig /root/.kube/config --disable traefik --disable servicelb --disable-cloud-controller --kube-proxy-arg proxy-mode=ipvs cloud-provider=external --flannel-backend=none --disable-network-policy --cluster-cidr=10.42.0.0/16 --node-ip=172.30.10.110 --node-external-ip=172.30.10.110 --bind-address=172.30.10.110\" sh -\n\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server --docker --write-kubeconfig ~/.kube/config --disable traefik --disable servicelb --disable-cloud-controller --kube-proxy-arg metrics-bind-address=0.0.0.0 --kubelet-arg cloud-provider=external --kubelet-arg cgroup-driver=systemd\" K3S_KUBECONFIG_MODE=\"644\" sh -\n\nkubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml\n\nkubectl apply -f https://raw.githubusercontent.com/loxilb-io/kube-loxilb/main/manifest/service-proxy/kube-loxilb.yml\nkubectl apply -f https://raw.githubusercontent.com/loxilb-io/kube-loxilb/main/manifest/service-proxy/loxilb-service-proxy.yml\n```\n\nkube-loxilb 也是主机网络","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-proxy-replacement":{"title":"kube-proxy replacement","content":"### Kube-proxy\n\nKube-proxy 是 Kubernetes 中的网络组件，作为 daemonset 安装在集群中的每个节点上，负责 Service 和 Pod 之间的通信。其主要作用是维护 service-to-pod map的网络规则，包括必要时的NAT转换，以确保数据包到达预期目的地。Kube-proxy 利用 iptables 或 IPVS 充当 L3/L4 网络代理和负载均衡器，其中 iptables 作为开箱即用的默认设置。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/9cb1e9368bcea43c2d78de461b215580.png)\n\n\n**iptables**\n\n Iptables 作为 Linux 内核中的数据包过滤器和防火墙工具。它根据一组基于 IP 地址或基于端口的规则 (TCP/UDP) 的用户定义规则来分析、修改和过滤网络数据包。\n\niptables 虽然是一项可靠的技术，但其设计目的并不是为了处理现代 Kubernetes 部署的动态且广泛的网络需求。\n\n\n### eBPF - the Standard for Kubernetes Networking\n\n它允许直接在 Linux 内核中进行可编程处理，从而以高效的速度和灵活性实现广泛的网络、可观察性和安全相关任务\n\n对于负载平衡，iptables 从来都不是为高度扩展的操作而设计的。顺序规则匹配和严格的基于 IP 的规则很难应对频繁变化的 IP 地址；而 eBPF 使用高效的哈希表，允许几乎无限的规模。eBPF 接近 O(log n) 时间复杂度\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/afe19e35fd93121a0f843b2613805b3c.png)\n\n以下基准测试测量以下 TCP 连接/请求/响应 (CRR) 的延迟：打开 TCP 连接、发送有效负载、返回有效负载并关闭连接。（ 测试环境为 AWS 上的裸机）\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/c2caa3a2cb0cc4bddba3350e067da025.png)\n\n以下为使用 32 个流来测试高达 100Gbit/s 的高吞吐量流量，从而提高了网络处理并发连接的能力，并揭示了资源限制方面的潜在瓶颈。 CPU 利用率越低越好。\n\niptables（Cilium 1.9.6 旧版主机路由和 Calico 3.17.3）\neBPF（Cilium eBPF 1.9.6 和 Calico eBPF 3.17.3）\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/6e78eb5b14afea987733a01c24c4724b.png)\n\n\n### Kube-proxy replacement\n\n将 kube-proxy iptables 替换为 ebpf --- cilium，目前唯一毕业的 cni 项目。Cilium 在每个 Kubernetes 节点上安装 eBPF 和 XDP程序，绕过 iptables 的开销\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/4b61577d09e1f574ed671832f540d69b.png)\n\n\n向 eBPF 的过渡不仅仅是技术升级；这是一个战略举措。 eBPF 在处理大规模操作（例如负载均衡）方面的效率已经变得显而易见。通过使用高效的哈希表，eBPF 几乎可以无限扩展，从而减少延迟和开销。\n\n改进的应用程序性能、简化的网络操作和增强的安全性可转化为成本节约和更好的资源利用率。减少延迟直接影响用户体验。\n\n\n链接：\n- https://isovalent.com/blog/post/why-replace-iptables-with-ebpf\n- https://cilium.io/blog/2021/05/11/cni-benchmark/","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kube-proxy-strictARP":{"title":"kube-proxy strictARP","content":"\nipvs 模式下的 strictARP 作用于下面两个 arp 参数：[[arp 相关内核参数]]\n- net/ipv4/conf/all/arp_ignore\n- net/ipv4/conf/all/arp_announce\n\n","lastmodified":"2025-03-26T03:48:44.137315166Z","tags":null},"/kubeadm-install-k8s":{"title":"kubeadm install k8s","content":"## ubuntu 安装 kubernetes\n### 1. 安装 docker\n安装docker：\n-   curl -sSL https://get.daocloud.io/docker | sh\n-   curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n### 2. 准备源\n```shell\necho \"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n# 添加公钥\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8B57C5C2836F4BEB FEEA9169307EA071\napt-get update\n\n# 安装\napt-get install -y kubelet=1.23.9-00 kubeadm=1.23.9-00 kubectl=1.23.9-00 --allow-unauthenticated\n\n# 关闭 swap\nswapoff -a\nsed -ri 's/.*swap.*/#\u0026/' /etc/fstab\n\n# 修改 docker 与 cgroup 驱动\ncat \u003e /etc/docker/daemon.json \u003c\u003cEOF\n{\"exec-opts\": [\"native.cgroupdriver=systemd\"]}\nEOF\n```\n\n### 3. 提前准备镜像\n```shell\n# 使用下面的命令更简单\nfor  i  in  `kubeadm config images list`;  do\n    imageName=${i#k8s.gcr.io/}\n    docker pull registry.aliyuncs.com/google_containers/$imageName\n    docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n    docker rmi registry.aliyuncs.com/google_containers/$imageName\ndone\n\ndocker pull rykren/coredns:v1.8.6\ndocker tag rykren/coredns:v1.8.6 k8s.gcr.io/coredns:v1.8.6\ndocker rmi registry.aliyuncs.com/google_containers/$imageName\n\n```\n### 4. 安装\n`kubeadm init --pod-network-cidr 10.244.0.0/16 --kubernetes-version v1.23.9 --apiserver-advertise-address=192.168.0.101 --skip-phases=addon/kube-proxy`\n- --pod-network-cidr 指定 pod cidr\n- --kubernetes-version 指定安装 kubernetes 版本\n- --apiserver-advertise-address 指定 apiserver 监听的 ip 地址\n- --skip-phases=addon/kube-proxy 不安装 kube-proxy\n\n### 5. 配置用户\n-   普通用户\n`mkdir -p` `$HOME``/.kube`\n`sudo cp -i /etc/kubernetes/admin.conf` `$HOME``/.kube/config`\n`sudo chown $(id -u):$(id -g)` `$HOME``/.kube/config`\n\n-   root用户：\n`export KUBECONFIG=/etc/kubernetes/admin.conf`\n\n### 6. 配置网络信息\nflannel： `kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml`\ncalico：`curl https://projectcalico.docs.tigera.io/archive/v3.23/manifests/calico.yaml -O`\n\n### 7. 单节点运行、多节点加入\n#### 单节点 all-in-one\nkubeadm 在 Master 上也安装了 kubelet， 在默认情况下并不参与工作负载。 如果希望安装一个单机 All-In-One 的 Kubernetes 环境，则可以执行下面的命令（删除Node的Label“node-role.kubernetes.io/master”） ， 让Master成为一个Node：\n`kubectl taint nodes --all node-role.kubernetes.io/master-`\n`kubectl taint nodes k8s node-role.kubernetes.io/master=true:NoSchedule`\n\n#### 多节点加入\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/ad440296801dda10a0176f1825d8bc42.png)\n\n安装成功之后会打印出加入集群的命令，直接复制在另外一个安装有 kubeadm 的节点上运行即可。\n\n其他情况下没有该命令或者该 token 过期的情况下的安装：\n- 列举出可用的证书：`kubeadm token list`\n- 没有可用的时候可以新建一个 token：`kubeadm token create`\n`kubeadm config print join-defaults \u003e join-config.yaml`\n`vim join-config.yaml`\n``` yaml\napiVersion:   kubeadm.k8s.io/v1beta2\ncaCertPath:   /etc/kubernetes/pki/ca.crt\ndiscovery:\n  bootstrapToken:\n    apiServerEndpoint: 192.168.72.186:6443\n    token: cdfcka.5e7wxqkyh8nfjdvt\n    unsafeSkipCAVerification: true\n  timeout: 5m0s\n  tlsBootstrapToken: cdfcka.5e7wxqkyh8nfjdvt\nkind:   JoinConfiguration\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: orange\n  taints: null\n```\n加入到其他集群：`kubeadm join --config=join-config.yaml`\n\n可能会遇到 host 重名\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/b29ca277b7b106f4c26ce2377ddcbad7.png)\n\n修改host名：`hostnamectl set-hostname orange`\n\n## centos 安装 kubernetes\n[https://segmentfault.com/a/1190000037682150](https://segmentfault.com/a/1190000037682150)\n安装docker：\n-   curl -sSL https://get.daocloud.io/docker | sh\n-   curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n``` bash\n# 关闭防火墙\nsystemctl disable firewalld\nsystemctl stop firewalld\nsed -i 's/SELINUX=permissive/SELINUX=disabled/' /etc/sysconfig/selinux\nsed -i \"s/SELINUX=enforcing/SELINUX=disabled/g\" /etc/selinux/config\n# 关闭 swap\nswapoff -a\nsed -i 's/.*swap.*/#\u0026/' /etc/fstab\n\n# 修改内核参数\ncat \u003c\u003cEOF \u003e  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n\n# 加载源\ncat \u003c\u003cEOF \u003e /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 安装kubeadm、kubectl、kubelet、启动kubelet服务\nyum install -y kubectl-1.16.0-0 kubeadm-1.16.0-0 kubelet-1.16.0-0\nsystemctl enable kubelet \u0026\u0026 systemctl start kubelet\n```\n\n\n## 安装遇到的问题\n【注意】安装异常之后可以使用kubeadm reset重置。如果遇到一些错误可以通过`journalctl -u kubelet -f` 来查看日志\n\n\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/kubectl-ko":{"title":"","content":"#kube-ovn #kubectl\n\n有时候安装完成 kube-ovn 之后，kubectl ko 插件无法使用\n\n","lastmodified":"2025-03-26T03:48:43.169318577Z","tags":null},"/kubekey-%E5%AE%89%E8%A3%85%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4":{"title":"kubekey 安装高可用集群","content":"\nk8s 的HA 用kubekey的话支持三种：\n1. 外置 lb  \n2. 内置 haproxy （每个worker节点） \n3. 内置 kube-vip （每个master节点）\n\n```yaml\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.30.10.3, internalAddress: 172.30.10.3, privateKeyPath: \"~/.ssh/id_rsa\"}\n  - {name: node2, address: 172.30.10.5, internalAddress: 172.30.10.5, privateKeyPath: \"~/.ssh/id_rsa\"}\n  - {name: node3, address: 172.30.10.6, internalAddress: 172.30.10.6, privateKeyPath: \"~/.ssh/id_rsa\"}\n  - {name: node4, address: 172.30.10.7, internalAddress: 172.30.10.7, privateKeyPath: \"~/.ssh/id_rsa\"}\n  - {name: node5, address: 172.30.10.8, internalAddress: 172.30.10.8, privateKeyPath: \"~/.ssh/id_rsa\"}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane: \n    - node1\n    - node2\n    - node3\n    worker:\n    - node1\n    - node2\n    - node3\n    - node4\n    - node5\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    internalLoadbalancer: kube-vip\n    domain: lb.kubesphere.local\n    address: \"172.30.10.200\"\n    port: 6443\n  kubernetes:\n    version: v1.23.15\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: none\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: true\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n```","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/kubekey-install-k8s":{"title":"kubekey install k8s","content":"\n下载 kubekey\n```bash\nexport KKZONE=cn\ncurl -sfL https://get-kk.kubesphere.io | VERSION=v2.3.0 sh -\n```\n\n生成配置文件\n```bash\n./kk create cluster --with-kubernetes v1.22.10 --with-kubesphere v3.3.1 --with-local-storage\n./kk create cluster --with-kubernetes v1.22.10\n\n./kk create cluster --with-kubernetes v1.26.0 --container-manager containerd --with-local-storage \n\n单独安装 openebs\nkubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml\nkubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\": {\"storageclass.kubernetes.io/is-default-class\": \"true\"}}}'\n```\n\n- 使用 ssh user+password 安装\n- 使用 ssh privateKey 安装\n``` yaml\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.16.10.2, internalAddress: 172.16.10.2, privateKeyPath: \"~/.ssh/id_rsa\"}\n  - {name: node2, address: 172.16.10.3, internalAddress: 172.16.10.3, privateKeyPath: \"~/.ssh/id_rsa\"}\n  # - {name: node2, address: 172.16.10.3, internalAddress: 172.16.10.3, user: root, password: \"123456\", arch: arm64}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane:\n    - node1\n    worker:\n    - node1\n    - node2\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: v1.21.5\n    clusterName: cluster.local\n    autoRenewCerts: true\n  etcd:\n    type: kubekey\n  network:\n    plugin: kubeovn\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n```\n\ncni插件可选：none、calico、kube-ovn、cilium\n\n\nks-installer 修改镜像\n- kubectl -n kubesphere-system patch cc ks-installer -p '{\"spec\":{\"local_registry\":\"registry.cn-beijing.aliyuncs.com\"}}' --type=merge\n- kubectl -n kubesphere-system set image deploy ks-installer installer=registry.cn-beijing.aliyuncs.com/kubesphereio/ks-installer:v3.3.0-rc.2\n\n\nks-installer 修改镜像\n![upgit_20230323_1679550781.png](https://images.cherryfloris.eu.org/ryken/2023/03/upgit_20230323_1679550781.png)\n\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/kubernetes":{"title":"kubernetes","content":"[[kubeadm install k8s]]\n[[kubekey install k8s]]\n[[webhook]]\n[[runtime]]","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/kubernetes%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%9C%AF%E8%AF%AD":{"title":"","content":"Kubernetes中的大部分概念如Node、Pod、Replication Controller、Service等都可以被看作一种**资源对象**，几乎所有资源对象都可以通过kubectl工具（或者API编程调用）执行增、删、改、查等操作并将其保存在etcd中持久化存储。从个角度来看，**Kubernetes其实是一个高度自动化的资源控制系统，它通过跟踪对比etcd库里保存的“资源期望状态”与当前环境中的“实际资源状态”的差异来实现自动控制和自动纠错的高级功能**。\n声明资源时的一个关键属性：apiVersion。\n**Kubernetes平台采用了“核心+外围扩展”的设计思路，在保持平台核心稳定的同时具备持续演进升级的优势**。Kubernetes大部分常见的核心资源对象都归属于v1这个核心API，比如Node、Pod、Service、Endpoints、Namespace、RC、PersistentVolume等。在版本迭代过程中，Kubernetes先后扩展了extensions/v1beta1、apps/v1beta1、apps/v1beta2等API组，而在1.9版本之后引入了apps/v1这个正式的扩展API组，正式淘汰（deprecated）了extensions/v1beta1、apps/v1beta1、apps/v1beta2这三个API组。\n","lastmodified":"2025-03-26T03:48:43.170318574Z","tags":null},"/kubernetes-document":{"title":"kubernetes document","content":"官方文档 repo：\n- [Kubernetes website and documentation repo](https://github.com/kubernetes/website)\n- [grc images - Container Registry](https://console.cloud.google.com/gcr/images/k8s-staging-sig-docs/GLOBAL/k8s-website-hugo?pli=1)\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/kubernetes-service":{"title":"kubernetes service","content":"[服务（Service） | Kubernetes](https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/)\n\nexternalName service： [Kubernetes Tips - Part 1 (akomljen.com)](https://akomljen.com/kubernetes-tips-part-1/)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE":{"title":"linux 网络配置","content":"\n```\nroot@node1:~# cat /etc/network/interfaces\nsource /etc/network/interfaces.d/*.cfg\n\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static\n  address 192.168.0.2\n  netmask 255.255.255.0\n  gateway 192.168.0.1\n  dns-nameservers 8.8.8.8 114.114.114.114\n\niface eth0 inet6 static\n  pre-up modprobe ipv6\n  netmask 64\n  gateway 2402:e7c0:400:c000::1\n  address 2402:e7c0:400:c000:ffff:ffff:fffe:fffe\n  dns-nameservers 2001:4860:4860::8888 2001:4860:4860::8844\n```\n\nipv6 设置静态 ip\n```\nroot@node1:~/kubekey/kse# cat /etc/network/interfaces.d/60-default-with-ipv6.cfg \niface eth0 inet6 static\n    #autoconf 0\n    netmask 64\n    gateway 2402:e7c0:400:c000::1\n    address 2402:e7c0:400:c000:ffff:ffff:fffe:fffe\n```\n\n\n## 重启网络\n- ifup -v eth0 / ifdown eth0\n- ifconfig eth0 up/down\n- service network restart 或者/etc/init.d/networking restart\n\n\n\n添加默认路由\n- route -A inet6 add ::/0 gw 2001:da8:203:ec7::1\n\n添加路由\n- route add default gw  192.100.10.1\n- ip route add default via 192.168.0.1\n- ip route add 192.100.10.0/24 via 192.100.200.1 dev enp49s0f1\n- route add -net 192.100.10.0 netmask 255.255.255.0 dev eth0 \n\n[Configure dual stack or IPv6 only | Calico Documentation (tigera.io)](https://docs.tigera.io/calico/3.25/networking/ipam/ipv6)\n\n\n### vlan 配置\n[[vlan 配置]]\n\n1、  加载8021q模块\n- lsmod |grep ‘8021q’ 查看模块加载成功与否\n- modprobe  8021q  命令加载内核模块\n- 没有的话安装 apt-get install vlan\n\n2. 创建子接口\n- ip link add link eth1 name eth1.10 type vlan id 10\n- ip addr add 10.10.10.2/24 dev eth1.10\n- ip link set dev eth1.10 up\n\n配置为文件 - ubunt 永久配置\n```yaml\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static\naddress 10.163.201.184\nnetmask 255.255.255.0\ngateway 10.163.201.1\n\nauto eth0.101\niface eth0.101 inet static\naddress 192.168.200.2\nnetmask 255.255.255.0\nnetwork 192.168.200.0\nbroadcast 192.168.200.255\n```\n\nDebian 配置\n```yaml\nauto vlan10\niface vlan10 inet static\n    vlan-raw-device eth0\n    address 192.168.1.X\n    netmask 255.255.255.0\n    gateway 192.168.1.1\n```\n[vlan-interfaces(5) — vlan — Debian buster — Debian Manpages](https://manpages.debian.org/buster/vlan/vlan-interfaces.5.en.html)\n\n\n\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/mactap":{"title":"未命名","content":"## mactap\n\n和 macvlan 相似的技术还有一种是 mactap。和 macvlan 不同的是，mactap 收到包之后不是交给协议栈，而是交给一个 tapX 文件，然后通过这个文件，完成和用户态的直接通信。\n\n![Snipaste_2024-06-24_11-29-08.png](https://images.cherryfloris.eu.org/ryken/2024/06/133c2c8360d26836d149c45523a38762.png)\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/macvlan":{"title":"macvlan","content":"### macvlan 介绍\n\n\u003e一块物理网卡虚拟成多块虚拟网卡\n\nmacvlan可以看做是物理接口 eth（父接口）的子接口，每个macvlan都拥有独立的 mac 地址，可以被绑定 IP 作为正常的网卡接口使用。\n\n通过这个特性，可以实现在一个物理网络设备绑定多个IP，每个IP拥有独立的mac地址。该特性经常被应用在容器虚拟化中。\n\nmacvlan 这种技术听起来有点像 VLAN，但它们的实现机制是完全不一样的。macvlan 子接口和原来的主接口是完全独立的，可以单独配置 MAC 地址和 IP 地址，而 VLAN 子接口和主接口共用相同的 MAC 地址。VLAN 用来划分广播域，而 macvlan 共享同一个广播域。\n\n使用 macvlan 无法访问主机地址，这是 macvlan 特性，为了更好的实现网络的隔离。\n\n### macvlan 四种模式\n\n- bridge\n- private\n- passthru\n- vepa - default\n\n#### VEPA 模式\n\nVEPA为默认的工作模式，该模式下，所有macvlan发出的流量都会经过父接口，不管目的地是否与该macvlan共用一个父接口。\n\n因此这种模式下，子接口之间的通信流量需要导到外部支持 `802.1Qbg/VPEA` 功能的交换机上（可以是物理的或者虚拟的），经由外部交换机转发，再绕回来。\n\n注：`802.1Qbg/VPEA` 功能简单说就是交换机要支持 `发夹（hairpin）` 功能，也就是数据包从一个接口上收上来之后还能再扔回去。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/04/8a79de97a5bd4d2e11f802e73ad44f01.png)\n\n#### Private 模式\n\nPrivate mode 模式下，同一主接口下的子接口之间彼此隔离，不能通信。即使从外部的物理交换机导流，也会被无情地丢掉。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/d49d2c1bf39c87500e769018761bc431.png)\n\n\n#### Bridge 模式\n\nBridge 模式类似于传统的网桥模式，拥有相同父接口的 macvlan 可以直接进行通信，不需要将数据发给父接口转发。该模式下不需要交换机支持 hairpin 模式，性能比 VEPA 模式好。\n\n相对于传统的网桥模式，该模式不需要学习 mac 地址，不需要STP，使得其性能比传统的网桥性能好得多。但是如果父接口down 掉，则所有子接口也会 down，同时无法通信。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/1c867ae1d29221abc2bd0ec68f9fbac0.png)\n\n\n#### Passthru 模式\n\n这种模式会直接把父接口和相应的MacVLAN接口捆绑在一起，只允许单个子接口连接主接口，且必须设置成混杂模式，一般用于子接口桥接和创建 VLAN 子接口的场景。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/06/3345128a04fb0d41958fbe5d372b25d6.png)\n\n\n[CNI Macvlan](https://www.cni.dev/plugins/current/main/macvlan/)\n\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/map%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"## go map的底层机制\n\n\n## 操作go map时需要注意什么\nmap有两种取元素的方法\n```go\nvalue := my_map[\"key\"] \nvalue,exists := my_map[\"key\"]\n```\nmap的键可以是任何相等性操作符支持的类型， 如整数、浮点数、复数、字符串、指针、接口（只要其动态类型支持相等性判断）、结构以及数组。\n\n1. 无法对 map 的 key 或 value 进行取址\n\nmap中的元素并不是一个变量，而是一个值。因此，我们不能对map的元素进行取址操作，不能直接进行修改。\n修改map中对应value的值时，若value对应的类型不是指针时，不能直接进行修改，需要取一个临时变量进行赋值或者修改为指针类型\n\n2. map不是线程安全的\n\n可以通过互斥锁以及读写锁实现互斥访问\n## \ngo map底层实现\n```go\n// A header for a Go map.\ntype hmap struct {\n\t// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.\n\t// Make sure this stays in sync with the compiler's definition.\n\tcount     int // # live cells == size of map.  Must be first (used by len() builtin)\n\tflags     uint8\n\tB         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)\n\tnoverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details\n\thash0     uint32 // hash seed\n\n\t 吗，    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.\n\toldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing\n\tnevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)\n\n\textra *mapextra // optional fields\n}\n\n// mapextra holds fields that are not present on all maps.\ntype mapextra struct {\n\t// If both key and elem do not contain pointers and are inline, then we mark bucket\n\t// type as containing no pointers. This avoids scanning such maps.\n\t// However, bmap.overflow is a pointer. In order to keep overflow buckets\n\t// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.\n\t// overflow and oldoverflow are only used if key and elem do not contain pointers.\n\t// overflow contains overflow buckets for hmap.buckets.\n\t// oldoverflow contains overflow buckets for hmap.oldbuckets.\n\t// The indirection allows to store a pointer to the slice in hiter.\n\toverflow    *[]*bmap\n\toldoverflow *[]*bmap\n\n\t// nextOverflow holds a pointer to a free overflow bucket.\n\tnextOverflow *bmap\n}\n\nconst (\n\tbucketCntBits = 3\n\tbucketCnt     = 1 \u003c\u003c bucketCntBits\n    minTopHash     = 5 // minimum tophash for a normal filled cell\n)\n\n// A bucket for a Go map.\ntype bmap struct {\n\t// tophash generally contains the top byte of the hash value\n\t// for each key in this bucket. If tophash[0] \u003c minTopHash,\n\t// tophash[0] is a bucket evacuation state instead.\n\ttophash [bucketCnt]uint8\n\t// Followed by bucketCnt keys and then bucketCnt elems.\n\t// NOTE: packing all the keys together and then all the elems together makes the\n\t// code a bit more complicated than alternating key/elem/key/elem/... but it allows\n\t// us to eliminate padding which would be needed for, e.g., map[int64]int8.\n\t// Followed by an overflow pointer.\n}\n\n//go:notinheap\ntype bucket struct {\n\tnext    *bucket\n\tallnext *bucket\n\ttyp     bucketType // memBucket or blockBucket (includes mutexProfile)\n\thash    uintptr\n\tsize    uintptr\n\tnstk    uintptr\n}\n\n```\nmap扩容进行rehash\n\n- 当负载因子 \u003e 6.5时，\n- 当溢出的数量 \u003e 2^15时\n\n负载因子 = 键的数量 / backet数量\n\n扩容：\n\n- 增量扩容\n   1. 新建一个bucket，新bucket是原来bucket长度的double\n   2. 将原来的bucket数据搬迁到新的bucket中\n\n逐步搬迁，每次访问map就会触发一次搬迁\n\n- 等量扩容\n\n\nmap是线程安全的吗？\n不是。在查找、赋值、遍历、删除的过程中都会检测写标志，一旦发现写标志为1，就会直接panic，赋值和删除函数在检测完写标志是复位之后先将写标志位置位，才会执行之后的操作。\n```go\n\tif h.flags\u0026hashWriting == 0 {\n\t\tthrow(\"concurrent map writes\")\n\t}\n```\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/markdown-style":{"title":"","content":"#markdown\n\n[Extended Syntax | Markdown Guide](https://www.markdownguide.org/extended-syntax/#heading-ids)","lastmodified":"2025-03-26T03:48:43.178318545Z","tags":null},"/math%E5%BA%93":{"title":"","content":"### 浮点数保留N位小数\n```go\n // 2代表精度，这种方式会有小数点后无效的0的情况\n strconv.FormatFloat(123.123 'f', 2, 64)\n // 效果同上\n fmt.Sprintf(\"%.2f\", 123.123)\n\n // g可以去掉小数点后无效的0\n fmt.Sprintf(\"%g\", 123.00)\n // 效果同上，可以去掉0，但是达不到保留指定位数的效果\n strconv.FormatFloat(a, 'g', -1, 64)\n```\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/multipass":{"title":"multipass","content":"\n官方github：[https://github.com/canonical/multipass](https://github.com/canonical/multipass)\nwindows 环境下的安装以及使用：[https://multipass.run/docs/installing-on-windows](https://multipass.run/docs/installing-on-windows)\n\nwindows 支持以下两种模式：\n-   Hyper-V：（只能是windows Pro 或者 windows 企业版）\n-   VirtualBox：依赖 VirtualBox\n\n切换模式：\n-   multipass set local.driver=virtualbox\n-   multipass set local.driver=hyperv\n\n首先需要开启bios 的虚拟化功能，使用 hyper-v 模式，需要开启 windows 的 hyperv 功能，使用 virtualbox 模式时，需要要关闭 windows 的 hyperv 功能。\n\n使用 virtualbox：\n- [https://multipass.run/docs/using-virtualbox-in-multipass-windows](https://multipass.run/docs/using-virtualbox-in-multipass-windows)\n- D:\\software\\Develop\\PSTools\\PsExec.exe -s -i D:\\software\\Develop\\VirtualBox\\VirtualBox.exe\n\n查看本机的产品密钥：\n```powershell\nC:\\Windows\\system32\u003ewmic path SoftwareLicensingService get OA3xOriginalProductKey\nOA3xOriginalProductKey\nQF7JX-DNPKR-KYBWC-JB2KR-7H7CK\n```\n\n\n**windows Home 版本升级为 Pro 或者企业版**\n- windows 升级专业版：[https://www.win10gw.com/win10wenzhang/4602.html](https://www.win10gw.com/win10wenzhang/4602.html)\n- 这里采取更换产品密钥进行升级，如果出现激活不了的可以使用kms进行激活，因为在 home 版本使用 virtual Box 一直有问题网络情况一直为 N/A 且所有的 ip 均一致，于是更换为专业版的 hyperv，另外可能是 home 版本的 hyperv 和 virtual Box 存在冲突，这里是 home 安装/显示 hyperv 的方法，但是慎用，最好升级为专业版：[https://cloud.tencent.com/developer/article/1352777](https://cloud.tencent.com/developer/article/1352777)\n\n**win10家庭版升级专业版密钥：**\n-   VK7JG-NPHTM-C97JM-9MPGT-3V66T\n-   4N7JM-CV98F-WY9XX-9D8CF-369TT\n-   FMPND-XFTD4-67FJC-HDR8C-3YH26\n-   236TW-X778T-8MV9F-937GT-QVKBB\n-   87VT2-FY2XW-F7K39-W3T8R-XMFGF\n-   KH2J9-PC326-T44D4-39H6V-TVPBY\n-   TFP9Y-VCY3P-VVH3T-8XXCC-MF4YK\n-   J783Y-JKQWR-677Q8-KCXTF-BHWGC\n-   C4M9W-WPRDG-QBB3F-VM9K8-KDQ9Y\n-   2VCGQ-BRVJ4-2HGJ2-K36X9-J66JG\n-   MGX79-TPQB9-KQ248-KXR2V-DHRTD\n-   FJHWT-KDGHY-K2384-93CT7-323RC\n","lastmodified":"2025-03-26T03:48:44.138315162Z","tags":null},"/multus-cni":{"title":"multus-cni","content":"Kube-ovn network-attachment-definition (net-attach-def)\n```yaml\n- apiVersion: k8s.cni.cncf.io/v1\n  kind: NetworkAttachmentDefinition\n  metadata:\n    name: net-tu5s0zq2\n  spec:\n    config: |-\n      {\n        \"cniVersion\": \"0.3.0\",\n        \"type\": \"kube-ovn\",\n        \"server_socket\": \"/run/openvswitch/kube-ovn-daemon.sock\",\n        \"provider\": \"net-tu5s0zq2.kubesphere-virtualization-system.ovn\"\n      }\n- apiVersion: k8s.cni.cncf.io/v1\n  kind: NetworkAttachmentDefinition\n  metadata:\n    name: vxnet-3qygln0y\n  spec:\n    config: '{\"cniVersion\": \"0.3.1\",\"type\": \"macvtap\",\"mtu\": 1500}'\n```\n\nspiderpool\n```yaml\napiVersion: k8s.cni.cncf.io/v1\nkind: NetworkAttachmentDefinition\nmetadata:\n  name: macvlan-vlan200\n  namespace: kube-system\n  ownerReferences:\n  - apiVersion: spiderpool.spidernet.io/v2beta1\n    blockOwnerDeletion: true\n    controller: true\n    kind: SpiderMultusConfig\n    name: macvlan-vlan200\n    uid: b2ea4d51-e101-4d0f-b307-6f2cf676ceb5\nspec:\n  config: '{\"cniVersion\":\"0.3.1\",\"name\":\"macvlan-vlan200\",\"plugins\":[{\"vlanID\":200,\"type\":\"ifacer\",\"interfaces\":[\"eth0\"]},{\"type\":\"macvlan\",\"master\":\"eth0.200\",\"mode\":\"bridge\",\"ipam\":{\"type\":\"spiderpool\",\"default_ipv4_ippool\":[\"vlan200-v4\"],\"default_ipv6_ippool\":[\"vlan200-v6\"]}},{\"detectIPConflict\":false,\"detectGateway\":false,\"mode\":\"auto\",\"type\":\"coordinator\"}]}'\n```\n\n\n```bash\nls /opt/cni/bin/\nbandwidth  bridge  coordinator  dhcp  dummy  firewall  host-device  host-local  ib-sriov  ifacer  ipoib  ipvlan  loopback  macvlan  multus  ovs  portmap  ptp  sbr  spiderpool  static  tap  tuning  vlan  vrf\n```","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/net%E5%BA%93":{"title":"","content":"![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1618498992480-9d37279b-f93c-481a-a20f-36f3d8f28607.png#align=left\u0026display=inline\u0026height=331\u0026originHeight=331\u0026originWidth=1102\u0026size=101674\u0026status=done\u0026style=none\u0026width=1102)\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/net_http":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/net_http_cgi":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/net_http_cookiejar":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/net_rpc":{"title":"","content":"","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/netlab":{"title":"","content":"#netlab\n\n项目地址：[ipspace/netlab: Making virtual networking labs suck less (github.com)](https://github.com/ipspace/netlab)\n\n文档地址：[VLANs — Network Simulation Tools documentation (netsim-tools.readthedocs.io)](https://netsim-tools.readthedocs.io/en/latest/module/vlan.html)\n\n别人的一个 demo：[netlab Simple VLAN Example « ipSpace.net blog](https://blog.ipspace.net/2022/05/netsim-vlan-simple.html)","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/network-tools":{"title":"","content":"#nsenter\n\n`nsenter -u -n -t $pid bash`\n\n`nsenter --uts --net --target 3326 --ipc --mount --pid`\n\n网卡队列设置为1 + 网卡终端绑定至 CPU0\n[[Linux 性能调优] 网卡中断与CPU的绑定问题 - 巴蛮子 - 博客园 (cnblogs.com)](https://www.cnblogs.com/bamanzi/p/linux-irq-and-cpu-affinity.html)\n\nperf ftrace 查看报文经过哪些内核协议栈的路径\n\nqperf 测试吞吐\n\nnetperf\n\n\nTCP四元组\n\n测试环境使用了速率为 100 Gbit/s 的网口以确保网卡不会成为瓶颈\n\n\n#### 查看网卡速率\n```bash\n~#: cat /sys/class/net/eth0/speed \n-1\n\n~#: ethtool eth0\nSettings for eth0:\n        Supported ports: [ ]\n        Supported link modes:   Not reported\n        Supported pause frame use: No\n        Supports auto-negotiation: No\n        Supported FEC modes: Not reported\n        Advertised link modes:  Not reported\n        Advertised pause frame use: No\n        Advertised auto-negotiation: No\n        Advertised FEC modes: Not reported\n        Speed: Unknown!\n        Duplex: Unknown! (255)\n        Port: Other\n        PHYAD: 0\n        Transceiver: internal\n        Auto-negotiation: off\n        Link detected: yes\n```\n\n#### 设置网卡限速\n1. iproute 工具\n-  tc qdisc add dev eth0 root tbf rate 50kbit latency 50ms burst 1000\n-  tc qdisc del dev eth0 root tbf\n\n2. iptables 工具\n-m limit --limit \u003c[!]limitnum\u003e --limit-burst\n--limit: 速率限制/sec /minute /hour\n--limit-burst: 最大的连接数。用来限制最大可用数的。\n\n- iptables -A INPUT -p tcp -s 10.226.52.1 -m limit --limit 30/sec --limit-burst 3 -j ACCEPT\n- iptables -A INPUT -p tcp -s 10.226.52.1 -j DROP (INPUT默认规则是ACCEPT)\n- iptables -A OUTPUT -p tcp -d 10.226.52.1 -m limit --limit 30/sec --limit-burst 3 -j ACCEPT\n- iptables -A OUTPUT -p tcp -d 10.226.52.1 -j DROP\n\n\n3. 将千兆网卡改成10兆网卡\n","lastmodified":"2025-03-26T03:48:43.172318567Z","tags":null},"/networkPolicy-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5":{"title":"networkPolicy - 网络策略","content":"[网络策略 | Kubernetes](https://kubernetes.io/zh-cn/docs/concepts/services-networking/network-policies/)\n\n[https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n```\n","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/nginx-%E5%86%85%E9%83%A8%E6%B5%81%E7%A8%8B":{"title":"","content":"# 1. reload 流程\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641375830657-55f7f4c9-f84f-4d04-bcdd-e1bb7566b06c.png#clientId=u70bc52ac-ebc5-4\u0026from=paste\u0026height=287\u0026id=u5024505a\u0026originHeight=573\u0026originWidth=1059\u0026originalType=binary\u0026ratio=1\u0026size=193365\u0026status=done\u0026style=none\u0026taskId=u85ee7573-8852-4d6b-812a-24bf1153102\u0026width=529.5)\n\n- 第三步master进程可能引入了新的监听端口，子进程会继承父进程所有已经打开的端口。\n- master收到quit信号会优雅的关闭子进程。\n\n调用reload之后，master会使用新的配置文件启动新的worker进程，旧的worker进程关闭监听句柄，并在处理完当前的连接请求之后结束进程，如果客户端请求一直被阻塞长时间等待处理不了，nginx有对应的nginx配置项 worker-timeout-shutdown，指定时间之后进程会被强制退出。\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641377596245-caa3da36-56b8-4b9e-b95f-05a9f89f95a8.png#clientId=u70bc52ac-ebc5-4\u0026from=paste\u0026height=415\u0026id=u1e484585\u0026originHeight=553\u0026originWidth=1169\u0026originalType=binary\u0026ratio=1\u0026size=115102\u0026status=done\u0026style=none\u0026taskId=ud1f1a32d-5b0f-4f7c-8dc0-8e2e68cf40f\u0026width=877)\n# 2. 热升级的流程\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641378727984-a1f4a4d0-104d-4eac-a388-6e036a69e776.png#clientId=ud5bd2927-d3b9-4\u0026from=paste\u0026height=283\u0026id=u16763d52\u0026originHeight=566\u0026originWidth=1008\u0026originalType=binary\u0026ratio=1\u0026size=187984\u0026status=done\u0026style=none\u0026taskId=ubd664449-9f8a-4e51-9261-ddb751262c9\u0026width=504)\n\n- **升级**\n   1. 备份nginx可执行文件\n   2. 向nginx master发送信号进行热部署 **kill -USR2 pid**，此时会启动一个新的nginx master\n   3. 若向老的nginx matser发送优雅关闭的请求**kill -WINCH pid**，老的worker进行会优雅退出，但是老的master 还在运行，即允许在使用新版本出现问题时做版本回退\n   4. 若向老的nginx matser发送优雅关闭的请求**kill -QUIT pid**，老的master也会优雅退出\n- 回退\n   1. 向老的nginx master发送HUP信号【reload命令】，向新的nginx master发送QUIT优雅退出信号\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641378658022-d4ad536a-dad3-470d-acce-ff070085b688.png#clientId=ud0892d23-1a6b-4\u0026from=paste\u0026height=415\u0026id=u0a548e82\u0026originHeight=553\u0026originWidth=1206\u0026originalType=binary\u0026ratio=1\u0026size=103607\u0026status=done\u0026style=none\u0026taskId=u8f643d17-ef0d-4faa-ac74-c326fd2d18f\u0026width=905)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E5%91%BD%E4%BB%A4%E8%A1%8C":{"title":"","content":"```bash\nroot@orange:/opt/nginx/conf# nginx -?\nnginx version: nginx/1.20.1\nUsage: nginx [-?hvVtTq] [-s signal] [-p prefix]\n             [-e filename] [-c filename] [-g directives]\n\nOptions:\n  -?,-h         : this help\n  -v            : show version and exit\n  -V            : show version and configure options then exit\n  -t            : test configuration and exit\n  -T            : test configuration, dump it and exit\n  -q            : suppress non-error messages during configuration testing\n  -s signal     : send signal to a master process: stop, quit, reopen, reload\n  -p prefix     : set prefix path (default: /opt/nginx/)\n  -e filename   : set error log file (default: logs/error.log)\n  -c filename   : set configuration file (default: conf/nginx.conf)\n  -g directives : set global directives out of configuration file\n```\nnginx -s 发送信号也可以提换为对应的命令：\n\n- 立刻停止服务： stop\n- 优雅的停止服务：quit\n- 重载配置文件： reload\n- 重新打开记录文件：reopen\n\n1. nginx 重载配置文件**【SIGHUP】**\n\nnginx -s reload 在不停止对客户端服务的前提下重新载入配置文件\n\n2. nginx 热部署\n   1. 备份nginx可执行文件\n   2. 向nginx master发送信号进行热部署 **kill -USR2 pid**，此时会启动一个新的nginx master\n   3. 向老的nginx matser发送优雅关闭的请求**kill -WINCH pid**，老的worker进行会优雅退出，但是老的master 还在运行，不会退出即允许在使用新版本出现问题时做版本回退\n3. nginx 日志切割\n\n拷贝access.log文件，之后执行nginx -s reopen，之后会重新生成一个access.log文件\n一般的用法为：写一个脚本放置在corntable，拷贝之前的日志文件，nginx -s reopen【与向对应pid发送**USR1信号**效果相同】\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85":{"title":"","content":"官方地址：[https://nginx.org/](https://nginx.org/)\n通过编译安装才会将强大的第三方模块引入nginx\n文件结构\n```bash\nroot@orange:~/nginx-1.20.1# ll\ntotal 820\ndrwxr-xr-x 8 1001 1001   4096 May 25 12:35 ./\ndrwx------ 9 root root   4096 Sep  2 12:46 ../\ndrwxr-xr-x 6 1001 1001   4096 Sep  2 12:06 auto/\n-rw-r--r-- 1 1001 1001 311503 May 25 12:35 CHANGES\n-rw-r--r-- 1 1001 1001 475396 May 25 12:35 CHANGES.ru\ndrwxr-xr-x 2 1001 1001   4096 Sep  2 12:06 conf/\n-rwxr-xr-x 1 1001 1001   2590 May 25 12:35 configure*\ndrwxr-xr-x 4 1001 1001   4096 Sep  2 12:06 contrib/\ndrwxr-xr-x 2 1001 1001   4096 Sep  2 12:06 html/\n-rw-r--r-- 1 1001 1001   1397 May 25 12:35 LICENSE\ndrwxr-xr-x 2 1001 1001   4096 Sep  2 12:06 man/\n-rw-r--r-- 1 1001 1001     49 May 25 12:35 README\ndrwxr-xr-x 9 1001 1001   4096 Sep  2 12:06 src/\n\n# auto 目录为了辅助configure在执行中，判断nginx支持哪些模块，当前操作系统有什么样的特性可以供nginx使用\n# conf 示例配置文件\n# configure 用来生成中间文件，执行编译前的一个必备动作\n# contrib 提供了两个脚本和 vim 显示 nginx 语法工具\n# html 两个示例html文件，50x.html和index.html\n# man linux对nginx的帮助文件\n# src nginx源代码\n```\n使用vim的字体语法：\n\u003e mkdir -p ~/.vim/\n\u003e cp -r contrib/vim/* ~/.vim/\n\n\n编译自己的ngnix可以将强大的nginx的三方生态圈编译进二进制文件中\n```bash\nroot@orange:~/nginx-1.20.1# ./configure --help\n\n  --help                             print this message\n\n  --prefix=PATH                      set installation prefix\n  --sbin-path=PATH                   set nginx binary pathname\n  --modules-path=PATH                set modules path\n  --conf-path=PATH                   set nginx.conf pathname\n  --error-log-path=PATH              set error log pathname\n  --pid-path=PATH                    set nginx.pid pathname\n  --lock-path=PATH                   set nginx.lock pathname\n\n  --user=USER                        set non-privileged user for\n                                     worker processes\n  --group=GROUP                      set non-privileged group for\n                                     worker processes\n\n  --build=NAME                       set build name\n  --builddir=DIR                     set build directory\n\n  --with-select_module               enable select module\n  --without-select_module            disable select module\n  --with-poll_module                 enable poll module\n  --without-poll_module              disable poll module\n\n  --with-threads                     enable thread pool support\n\n  --with-file-aio                    enable file AIO support\n\n  --with-http_ssl_module             enable ngx_http_ssl_module\n  --with-http_v2_module              enable ngx_http_v2_module\n  --with-http_realip_module          enable ngx_http_realip_module\n  --with-http_addition_module        enable ngx_http_addition_module\n  --with-http_xslt_module            enable ngx_http_xslt_module\n  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module\n  --with-http_image_filter_module    enable ngx_http_image_filter_module\n  --with-http_image_filter_module=dynamic\n                                     enable dynamic ngx_http_image_filter_module\n  --with-http_geoip_module           enable ngx_http_geoip_module\n  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module\n  --with-http_sub_module             enable ngx_http_sub_module\n  --with-http_dav_module             enable ngx_http_dav_module\n  --with-http_flv_module             enable ngx_http_flv_module\n  --with-http_mp4_module             enable ngx_http_mp4_module\n  --with-http_gunzip_module          enable ngx_http_gunzip_module\n  --with-http_gzip_static_module     enable ngx_http_gzip_static_module\n  --with-http_auth_request_module    enable ngx_http_auth_request_module\n  --with-http_random_index_module    enable ngx_http_random_index_module\n  --with-http_secure_link_module     enable ngx_http_secure_link_module\n  --with-http_degradation_module     enable ngx_http_degradation_module\n  --with-http_slice_module           enable ngx_http_slice_module\n  --with-http_stub_status_module     enable ngx_http_stub_status_module\n\n  --without-http_charset_module      disable ngx_http_charset_module\n  --without-http_gzip_module         disable ngx_http_gzip_module\n  --without-http_ssi_module          disable ngx_http_ssi_module\n  --without-http_userid_module       disable ngx_http_userid_module\n  --without-http_access_module       disable ngx_http_access_module\n  --without-http_auth_basic_module   disable ngx_http_auth_basic_module\n  --without-http_mirror_module       disable ngx_http_mirror_module\n  --without-http_autoindex_module    disable ngx_http_autoindex_module\n  --without-http_geo_module          disable ngx_http_geo_module\n  --without-http_map_module          disable ngx_http_map_module\n  --without-http_split_clients_module disable ngx_http_split_clients_module\n  --without-http_referer_module      disable ngx_http_referer_module\n  --without-http_rewrite_module      disable ngx_http_rewrite_module\n  --without-http_proxy_module        disable ngx_http_proxy_module\n  --without-http_fastcgi_module      disable ngx_http_fastcgi_module\n  --without-http_uwsgi_module        disable ngx_http_uwsgi_module\n  --without-http_scgi_module         disable ngx_http_scgi_module\n  --without-http_grpc_module         disable ngx_http_grpc_module\n  --without-http_memcached_module    disable ngx_http_memcached_module\n  --without-http_limit_conn_module   disable ngx_http_limit_conn_module\n  --without-http_limit_req_module    disable ngx_http_limit_req_module\n  --without-http_empty_gif_module    disable ngx_http_empty_gif_module\n  --without-http_browser_module      disable ngx_http_browser_module\n  --without-http_upstream_hash_module\n                                     disable ngx_http_upstream_hash_module\n  --without-http_upstream_ip_hash_module\n                                     disable ngx_http_upstream_ip_hash_module\n  --without-http_upstream_least_conn_module\n                                     disable ngx_http_upstream_least_conn_module\n  --without-http_upstream_random_module\n                                     disable ngx_http_upstream_random_module\n  --without-http_upstream_keepalive_module\n                                     disable ngx_http_upstream_keepalive_module\n  --without-http_upstream_zone_module\n                                     disable ngx_http_upstream_zone_module\n\n  --with-http_perl_module            enable ngx_http_perl_module\n  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module\n  --with-perl_modules_path=PATH      set Perl modules path\n  --with-perl=PATH                   set perl binary pathname\n\n  --http-log-path=PATH               set http access log pathname\n  --http-client-body-temp-path=PATH  set path to store\n                                     http client request body temporary files\n  --http-proxy-temp-path=PATH        set path to store\n                                     http proxy temporary files\n  --http-fastcgi-temp-path=PATH      set path to store\n                                     http fastcgi temporary files\n  --http-uwsgi-temp-path=PATH        set path to store\n                                     http uwsgi temporary files\n  --http-scgi-temp-path=PATH         set path to store\n                                     http scgi temporary files\n\n  --without-http                     disable HTTP server\n  --without-http-cache               disable HTTP cache\n\n  --with-mail                        enable POP3/IMAP4/SMTP proxy module\n  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module\n  --with-mail_ssl_module             enable ngx_mail_ssl_module\n  --without-mail_pop3_module         disable ngx_mail_pop3_module\n  --without-mail_imap_module         disable ngx_mail_imap_module\n  --without-mail_smtp_module         disable ngx_mail_smtp_module\n\n  --with-stream                      enable TCP/UDP proxy module\n  --with-stream=dynamic              enable dynamic TCP/UDP proxy module\n  --with-stream_ssl_module           enable ngx_stream_ssl_module\n  --with-stream_realip_module        enable ngx_stream_realip_module\n  --with-stream_geoip_module         enable ngx_stream_geoip_module\n  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module\n  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module\n  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module\n  --without-stream_access_module     disable ngx_stream_access_module\n  --without-stream_geo_module        disable ngx_stream_geo_module\n  --without-stream_map_module        disable ngx_stream_map_module\n  --without-stream_split_clients_module\n                                     disable ngx_stream_split_clients_module\n  --without-stream_return_module     disable ngx_stream_return_module\n  --without-stream_set_module        disable ngx_stream_set_module\n  --without-stream_upstream_hash_module\n                                     disable ngx_stream_upstream_hash_module\n  --without-stream_upstream_least_conn_module\n                                     disable ngx_stream_upstream_least_conn_module\n  --without-stream_upstream_random_module\n                                     disable ngx_stream_upstream_random_module\n  --without-stream_upstream_zone_module\n                                     disable ngx_stream_upstream_zone_module\n\n  --with-google_perftools_module     enable ngx_google_perftools_module\n  --with-cpp_test_module             enable ngx_cpp_test_module\n\n  --add-module=PATH                  enable external module\n  --add-dynamic-module=PATH          enable dynamic external module\n\n  --with-compat                      dynamic modules compatibility\n\n  --with-cc=PATH                     set C compiler pathname\n  --with-cpp=PATH                    set C preprocessor pathname\n  --with-cc-opt=OPTIONS              set additional C compiler options\n  --with-ld-opt=OPTIONS              set additional linker options\n  --with-cpu-opt=CPU                 build for the specified CPU, valid values:\n                                     pentium, pentiumpro, pentium3, pentium4,\n                                     athlon, opteron, sparc32, sparc64, ppc64\n\n  --without-pcre                     disable PCRE library usage\n  --with-pcre                        force PCRE library usage\n  --with-pcre=DIR                    set path to PCRE library sources\n  --with-pcre-opt=OPTIONS            set additional build options for PCRE\n  --with-pcre-jit                    build PCRE with JIT compilation support\n\n  --with-zlib=DIR                    set path to zlib library sources\n  --with-zlib-opt=OPTIONS            set additional build options for zlib\n  --with-zlib-asm=CPU                use zlib assembler sources optimized\n                                     for the specified CPU, valid values:\n                                     pentium, pentiumpro\n\n  --with-libatomic                   force libatomic_ops library usage\n  --with-libatomic=DIR               set path to libatomic_ops library sources\n\n  --with-openssl=DIR                 set path to OpenSSL library sources\n  --with-openssl-opt=OPTIONS         set additional build options for OpenSSL\n\n  --with-debug                       enable debug logging\n```\n第一类参数：安装时的辅助文件目录\n第二类参数：确定使用哪些模块和不使用哪些模块\n第三类参数：指定nginx编译中需要的特殊参数 gcc编译的优化参数、编译过程中的打印debug日志等\n\n\u003e # 使用默认安装 缺少依赖包openssl、依赖包pcre、依赖包zlib\n\u003e sudo apt-get install openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev； \n\u003e # 配置安装\n\u003e ./configure --prefix=/home/orange/nginx\n\u003e make -j 4\n\u003e make install\n\n编译出来的中间文件在obj目录下，安装完成之后，在prefix目录下\n\n安装完成之后默认的文件目录\n```bash\nroot@orange:/opt/nginx# tree .\n.\n├── conf\n│   ├── fastcgi.conf\n│   ├── fastcgi.conf.default\n│   ├── fastcgi_params\n│   ├── fastcgi_params.default\n│   ├── koi-utf\n│   ├── koi-win\n│   ├── mime.types\n│   ├── mime.types.default\n│   ├── nginx.conf\n│   ├── nginx.conf.default\n│   ├── scgi_params\n│   ├── scgi_params.default\n│   ├── uwsgi_params\n│   ├── uwsgi_params.default\n│   └── win-utf\n├── html\n│   ├── 50x.html\n│   └── index.html\n├── logs\n└── sbin\n    └── nginx\n\n4 directories, 18 files\n\n```\n## \n\n[\n\n](https://blog.csdn.net/z920954494/article/details/52132125)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E6%9E%B6%E6%9E%84":{"title":"","content":"# 抛出问题\n1. 为什么nginx使用master-worker的进程架构模型\n2. 为什么worker进程数量要与cpu的核数相匹配\n3. 多个worker之间共享数据时，为什么在TLS/限流/限速的共享方式不同\n# nginx 请求的处理流程\n使用了非阻塞的事件驱动模型，因此使用状态机进行正确的识别和处理请求，nginx用作反向代理和静态资源服务器。\nnginx用作静态资源当内存不足以缓存所有信息时，一些sendFile或者AIO会退化为阻塞的磁盘调用因此使用了线程池。\nnginx用作反向代理时使用特定的协议将请求代理出去。\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641372917723-5f5f6dfd-cc00-401e-8eb6-8854b2d4dcf9.png#clientId=u4c6554d0-328d-4\u0026from=paste\u0026id=u312aff39\u0026originHeight=362\u0026originWidth=766\u0026originalType=binary\u0026ratio=1\u0026size=205479\u0026status=done\u0026style=none\u0026taskId=uc85f4fe7-5fea-4e64-998d-9815232a8e0)\n# nginx进程结构\n\n- 单进程结构 - 用于开发调式\n- 多进程结构 - 用于实际的生产环境，nginx可以利用多核的特性\n\n使用多进程模型而非多线程模型，保证了高可用性和高可靠性。如果使用多线程的模型，线程之间共享同一个地址空间，如果nginx导入的第三方模块引发一个地址空间导致的段错误时，整个nginx进程就会挂掉，而多进程模型就不会有这样的问题。\n\n**多进程结构运行情况：**\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641373402421-83195f81-be91-4f3b-9f34-9e16b3c365fd.png#clientId=u4c6554d0-328d-4\u0026from=paste\u0026height=177\u0026id=u702ab1e2\u0026originHeight=353\u0026originWidth=652\u0026originalType=binary\u0026ratio=1\u0026size=113056\u0026status=done\u0026style=none\u0026taskId=u9bd82f6c-0c95-4b5e-923c-803d42f30f3\u0026width=326)\n\n- master 进程用于监控worker进程是否正常工作，以及是否需要重新载入配置文件/热部署\n- cache Manager进程：cache的管理\n- cache loader 进程：cache的载入\n- worker 进程\n\n每一个请求使用的缓存还是由worker进程来操作的，缓存是要在各个worker进程进行共享的，使用共享内存来进行进程间的通信\nworker数量比较多是因为nginx采用了事件驱动的模型，希望worker进程从头到尾占用一颗CPU，因此往往我们将worker数量配置为我们CPU核数一致，同时会将worker进程与CPU核进行绑定，这样可以更好的利用cpu核上的cpu cache来减少cpu cache 失效的命中率\n# 进程间通信 - 信号\nmaster进程作为父进程启动很多子进程，nginx父子进程之间使用信号通信，子进程退出时会发送SIGCHILD信号；我们也可以直接给worker进程发送信号，但是我们一般都是发送信号给master，交由master去管理worker进程。调用nginx二进制文件也可以，实际上nginx会保存master对应的pid，二进制调用对应的命令时会发送对应的信号。\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641373468300-7f9e694b-8255-40f9-955d-aa76faae4aac.png#clientId=u4c6554d0-328d-4\u0026from=paste\u0026height=172\u0026id=u818f5afa\u0026originHeight=343\u0026originWidth=709\u0026originalType=binary\u0026ratio=1\u0026size=142130\u0026status=done\u0026style=none\u0026taskId=u2aaa83e8-9086-428e-bbe0-c469b479e27\u0026width=354.5)\n```bash\nroot@orange:~# nginx\nroot@orange:~# ps -elf | grep nginx\n1 S root     3643603       1  0  80   0 - 13818 sigsus 09:21 ?        00:00:00 nginx: master process nginx\n5 S www-data 3643604 3643603  0  80   0 - 13960 ep_pol 09:21 ?        00:00:00 nginx: worker process\n5 S www-data 3643605 3643603  0  80   0 - 13960 ep_pol 09:21 ?        00:00:00 nginx: worker process\n5 S www-data 3643606 3643603  0  80   0 - 13960 ep_pol 09:21 ?        00:00:00 nginx: worker process\n5 S www-data 3643607 3643603  0  80   0 - 13960 ep_pol 09:21 ?        00:00:00 nginx: worker process\n0 S root     3643611 3642242  0  80   0 -  1575 pipe_w 09:21 pts/1    00:00:00 grep --color=auto nginx\n\nroot@orange:~# cat /run/nginx.pid\n3643603\n```\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E7%AE%80%E4%BB%8B":{"title":"","content":"主流的web 服务器有：Nginx、Apache、Tomcat，可以搭建网站或者反向代理服务器。\n# 1. Nginx主要的应用场景\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640942727853-87112eeb-e3cb-43d2-b817-02a9cc3840ab.png#clientId=u4979f67d-b9ff-4\u0026from=paste\u0026height=467\u0026id=u5893fb24\u0026originHeight=467\u0026originWidth=798\u0026originalType=binary\u0026ratio=1\u0026size=87727\u0026status=done\u0026style=none\u0026taskId=u83ef4aef-4b96-429e-8252-3a76dcaa4f2\u0026width=798)\n\n- web请求先经过nginx，再到我们的应用服务，再到后面的数据库服务mysql、redis等，因为我们的应用开发效率高，所以其运行效率就会低，其QPS、TPS、并发受限，因此将很多的这样的一个应用服务组成一个集群提高高可用性，一旦形成集群就要求nginx具有反向代理功能，考虑容灾和动态扩容要求反向代理具备负载均衡\n- 在整个链路当中，nginx处于企业内网的边缘节点，随着网络链路的增长用户体验的时延会增加，因此将一段时间不变的动态内容缓冲到nginx中直接向用户提供访问\n- 访问一些jss、图片等静态资源时，无需由应用服务来访问，由系统上放置的本地文件资源直接由nginx提供访问就可以\n- 数据库服务业务场景简单，其QPS/TPS好于应用服务程序，因此由nginx直接访问数据库服务 -- API服务  强大的业务处理能力\n\n# 2. Nginx 出现的原因\nApache处理一个连接对应一个进程，导致进程间切换代价高，同时当连接数多时，无法开启那么多的进程。\n在多核的架构下 摩尔定律失效了【芯片中的晶体管和电阻器的数量每年会翻番】\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640946326929-d135c803-bca5-4cdd-b461-7bef989feb91.png#clientId=u4979f67d-b9ff-4\u0026from=paste\u0026height=423\u0026id=u2ba3f5dc\u0026originHeight=423\u0026originWidth=905\u0026originalType=binary\u0026ratio=1\u0026size=156792\u0026status=done\u0026style=none\u0026taskId=u978428d7-e383-4589-9030-66acf018cd2\u0026width=905)\n\n# 3. Nginx 5个主要优点\n\n1. 对操作系统和内核深度挖掘使得其高并发的同时实现了高吞吐量\n2. 优秀的模块设计使得生态丰富\n3. 三方模块块多可以实现大量的定制化需求\n4. BSD许可证给予很大的灵活性\n\n# 4. Nginx 组成 以及 发布情况\n## nginx组成：\n\n1. 二进制文件 - 类似于汽车的整个框架\n2. nginx配置文件 - 类似于驾驶员，决定nginx的行为\n3. access.log文件 - 类似于gps轨迹\n4. error.log错误日志 - 类似于黑匣子，用于排错\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641285011324-520006fd-8bb3-4744-9359-831846811998.png#clientId=ue2bb2c88-d1c6-4\u0026from=paste\u0026id=udd16be74\u0026originHeight=298\u0026originWidth=596\u0026originalType=binary\u0026ratio=1\u0026size=167280\u0026status=done\u0026style=none\u0026taskId=u8b755778-e640-431c-9939-8aa4c29397c)\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641285086467-a6c2243d-4ad4-467f-a3c9-c81c4c7fae3c.png#clientId=ue2bb2c88-d1c6-4\u0026from=paste\u0026id=u83382acd\u0026originHeight=392\u0026originWidth=709\u0026originalType=binary\u0026ratio=1\u0026size=223422\u0026status=done\u0026style=none\u0026taskId=u94959304-117c-4b49-b95b-7bd9833d41d)\n## Nginx 版本选择\nmainline  stable\n# 5. \n\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E5%85%B7%E6%9C%89%E7%BC%93%E5%86%B2%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8":{"title":"","content":"使用之前的作为一个上游服务再搭建一个反向代理服务器\n\n安装openresty：[https://openresty.org/cn/linux-packages.html](https://openresty.org/cn/linux-packages.html)，openresty默认的工作路径：/usr/local/openresty/nginx\n可以将请求按照负载均衡算法反向代理给多台上游服务器工作，这样就实现了水平扩展，在用户无感知的情况下增加服务器来提高处理性能，而当上游服务器出现问题时，nginx会将自动的将请求由出现灾难的服务器转交给正常的服务器。\n\n**设置缓冲功能**\n\n1. 设置缓冲存放的路径，设置cache的名称，开辟的共享内存，key要放置在共享内存中，\n2. 设置指定url使用的共享内存\n3. 同一个url 可能对不同的用户展示的内容是不同的，因此将用户设置到key中\n4. 设置哪些响应不返回\n\n上游服务器通常是不提供公网访问的，因此将之前的静态服务器作为上游服务，将server中的listen 8080修改为listen 127.0.0.1:8080;\n```bash\nroot@orange:~/nginx/nginx-test# cat /usr/local/openresty/nginx/conf/nginx.conf\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n\t\t# 设置缓存\n    proxy_cache_path /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m max_size=10g\n            inactive=60m use_temp_path=off;\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  off;\n    gzip_min_length 1;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n\n    # 配置上游服务\n    upstream local {\n        server 127.0.0.1:8080;\n    }\n\n    server {\n        listen       81;\n        server_name  nginx.test.pub;\n\n        #charset koi8-r;\n\n        access_log  logs/renyunkang-test.access.log  main;\n\n        location / {\n            # 反向代理节点相关变量\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-OP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\t\t\t\t\t\t# 设置缓存\n            proxy_cache my_cache;\n            proxy_cache_key $host$uri$is_args$args;\n            proxy_cache_valid 200 304 302 1d;\n\n            proxy_pass http://local;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n    }\n\n}\n\n```\n\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8":{"title":"","content":"# 配置文件\nlocation：后面为/ 表示所有请求\n指定url的后缀与文件目录后缀一一对应：\nroot：会将url中的路径带到文件路径中来\nalias：（通常使用）[\n\n](https://blog.csdn.net/z920954494/article/details/52132125)\ngzip：启动gzip压缩\ngzip_min_length：压缩的最小字节数\ngzip_comp_level：压缩等级\ngzip_types：针对某些类型的文件进行压缩\n```bash\n    gzip  on;\n    gzip_min_length 1; # 小于1字节的不再压缩\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n```\n\nautoindex：当访问的url以/结尾时可以对应到这个目录中的文件结构\nset $limit_rate设置nginx向客户浏览器发送响应的速度，limit_rate是core moudle中的内置变量，单位字节 -- 限制带宽\n\n**记录access日志：**\nlog_format：日志的格式，会对日志的格式进行命名，以满足不同url或者服务的日志格式的需求，使用了很多nginx内置变量。只要模块中定义了变量就可以使用\naccess_log：使用日志格式，access_log所属的位置表示这一类请求会使用对应的日志格式记录到对应的路径中\n\n- $remote_addr：远端的IP地址\n- $remote_user：远端的用户\n- $time_local：时间\n- $status：返回的状态\n\n命名，因为我们会对不同的域名下做不同格式的日志记录，或者对一些url、一些大文件、反向代理的不同用户做不同日志格式\n\n```bash\nroot@orange:/opt/nginx/conf# cat nginx.conf\n\nuser  root;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  off;\n    gzip_min_length 1;\n    gzip_comp_level 2;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n\n    server {\n        listen       8080;\n        server_name  renyunkang.pub;\n\n        #charset koi8-r;\n\n        access_log  logs/renyunkang-test.access.log  main;\n\n        location / {\n            alias dlib/;\n            autoindex on;\n            #set $limit_rate 1k;\n            #root   html;\n            #index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n[\n\n](https://blog.csdn.net/z920954494/article/details/52132125)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95":{"title":"","content":"配置文件通用语法\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/12923798/1641285318172-55f12ed4-89d7-46dd-b1c6-11a080397320.png#clientId=udc8c803d-3984-4\u0026from=paste\u0026id=ued081937\u0026originHeight=317\u0026originWidth=677\u0026originalType=binary\u0026ratio=1\u0026size=211796\u0026status=done\u0026style=none\u0026taskId=u3d61c5e5-afd7-4ad0-916a-0c4cbed25da)\n有的指令块有名字，有的指令块没有名字，这取决于提供指令块的nginx子模块决定。\n**http配置的指令块**\n\n- server：对应的一个或一组域名\n- http：里面的所有的指令都是由http模块去解析/执行\n- upstream：上游服务\n- location：url表达式\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/nodeIPAM":{"title":"nodeIPAM","content":"\n下面为 kube-controller-manager 1.25.3 的启动命令，可以看出 cluster-cidr 指定了 podCIDRs，node-cidr-mask-size 用于指定 cluster-cidr 的分块大小，service-cluster-ip-range 用于指定 serviceCIDR\n\n```yaml\n    - kube-controller-manager\n    - --allocate-node-cidrs=true\n    - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf\n    - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf\n    - --bind-address=0.0.0.0\n    - --client-ca-file=/etc/kubernetes/pki/ca.crt\n    - --cluster-cidr=10.233.64.0/18\n    - --cluster-name=cluster.local\n    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt\n    - --cluster-signing-duration=87600h\n    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key\n    - --controllers=*,bootstrapsigner,tokencleaner\n    - --feature-gates=ExpandCSIVolumes=true,CSIStorageCapacity=true,RotateKubeletServerCertificate=true\n    - --kubeconfig=/etc/kubernetes/controller-manager.conf\n    - --leader-elect=true\n    - --node-cidr-mask-size=24\n    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt\n    - --root-ca-file=/etc/kubernetes/pki/ca.crt\n    - --service-account-private-key-file=/etc/kubernetes/pki/sa.key\n    - --service-cluster-ip-range=10.233.0.0/18\n    - --use-service-account-credentials=true\n```\n\n对于使用不同的 cni node-cidr-mask-size字段有哪些影响呢？让我们来看看\n\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/86e626eb3b0acb0b1314d059e27deb10.png)\n\n\u003e 基于 kubernetes v1.27.0 版本对 nodeipam controller 源码分析\n\n在 k8s 的 `kube-controller-manager` 中 `nodeipam controller` 是用来为 node 节点分配可用的 ip cidr 地址段的控制器, 每个 node 拿到的 cidr 地址范围不会冲突的. 在为 node 分配地址段后, k8s kubelet 根据 node 关联的 cidr 地址段来为 pod 添加 ip 地址.\n\n\n记一下可能于此相关的两个问题：\n- [node.spec.podcidr not set for node-掘金 (juejin.cn)](https://juejin.cn/s/node.spec.podcidr%20not%20set%20for%20node)\n- [k8s集群flannel部署错误异常排查：pod cidr not assigned | 滩之南 (hyhblog.cn)](https://www.hyhblog.cn/2021/02/21/k8s-flannel-pod-cidr-not-assigned/)\n","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/nodeIPAM-%E6%BA%90%E7%A0%81":{"title":"kubernetes nodeipam 实现原理","content":"\n# kubernetes nodeipam 实现原理\n\n\u003e 原文档链接：[notes/kubernetes_nodeipam_controller_code.md at main · rfyiamcool/notes (github.com)](https://github.com/rfyiamcool/notes/blob/main/kubernetes_nodeipam_controller_code.md)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/86e626eb3b0acb0b1314d059e27deb10.png)\n\n\u003e 基于 kubernetes v1.27.0 版本对 nodeipam controller 源码分析\n\n在 k8s 的 `kube-controller-manager` 中 `nodeipam controller` 是用来为 node 节点分配可用的 ip cidr 地址段的控制器, 每个 node 拿到的 cidr 地址范围不会冲突的. 在为 node 分配地址段后, k8s kubelet 根据 node 关联的 cidr 地址段来为 pod 添加 ip 地址, 这里的又涉及到 cni 网络插件的调用, 后面再做分析.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/686389778df87031cee2e6febc8f83f8.png)\n\n这里分析下 kubernetes nodeipam controller 控制器的流程原理. nodeipam controller 控制器启动时通过 `--cluster-cidr`, `--node-cidr-mask-size` 和 `--cidr-allocator-type` 等参数生成 cidr 地址段生成器. 控制器内部又会启动 node informer 来监听 node 对象资源变化, 当触发 node 新增事件时, 为 node 申请分配 cidr 地址段, 然后向 apiserver 请求更新 node podcidrs 配置信息, 当触发删除事件时, 则释放这些 ip cidr 地址段.\n\nnodeipam 只负责 pod cidr 地址, 至于 service clusterIP cidr 是在 apiserver 负责的.\n\n## 实例化入口\n\n实例化 `nodeIpamController` 控制器, allocatorType 分配器类型通过 `--cidr-allocator-type` 参数指定, 其默认值为 `RangeAllocator`.\n\n```go\nfunc NewNodeIpamController(\n\t...) (*Controller, error) {\n\n\t// 判空\n\tif kubeClient == nil {\n\t\tklog.Fatalf(\"kubeClient is nil when starting Controller\")\n\t}\n\n\t// cloud 分配模式必须首先需要确保 cidr 段不为空, 然后判断 masksize 是否合法.\n\tif allocatorType != ipam.CloudAllocatorType {\n\t\tif len(clusterCIDRs) == 0 {\n\t\t\tklog.Fatal(\"Controller: Must specify --cluster-cidr if --allocate-node-cidrs is set\")\n\t\t}\n\n\t\tfor idx, cidr := range clusterCIDRs {\n\t\t\tmask := cidr.Mask\n\t\t\tif maskSize, _ := mask.Size(); maskSize \u003e nodeCIDRMaskSizes[idx] {\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n\n\t// 实例化 ipam controller 控制器对象\n\tic := \u0026Controller{\n\t\tcloud:                cloud,\n\t\tkubeClient:           kubeClient,\n\t\teventBroadcaster:     record.NewBroadcaster(),\n\t\tlookupIP:             net.LookupIP,\n\t\tclusterCIDRs:         clusterCIDRs,\n\t\tserviceCIDR:          serviceCIDR,\n\t\tsecondaryServiceCIDR: secondaryServiceCIDR,\n\t\tallocatorType:        allocatorType,\n\t}\n\n\t// 根据 allocator 的 type 实例化不同的 cidr allocator 分配器\n\tif ic.allocatorType == ipam.IPAMFromClusterAllocatorType || ic.allocatorType == ipam.IPAMFromCloudAllocatorType {\n\t\tic.legacyIPAM = createLegacyIPAM(ic, nodeInformer, cloud, kubeClient, clusterCIDRs, serviceCIDR, nodeCIDRMaskSizes)\n\t} else {\n\t\t// 构建 ip 分配器的参数\n\t\tallocatorParams := ipam.CIDRAllocatorParams{\n\t\t\tClusterCIDRs:         clusterCIDRs,\n\t\t\tServiceCIDR:          ic.serviceCIDR,\n\t\t\tSecondaryServiceCIDR: ic.secondaryServiceCIDR,\n\t\t\tNodeCIDRMaskSizes:    nodeCIDRMaskSizes,\n\t\t}\n\n\t\t// 实例化 ip cidr 分配器\n\t\tic.cidrAllocator, err = ipam.New(kubeClient, cloud, nodeInformer, clusterCIDRInformer, ic.allocatorType, allocatorParams)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// 赋值 node informer lister\n\tic.nodeLister = nodeInformer.Lister()\n\tic.nodeInformerSynced = nodeInformer.Informer().HasSynced\n\n\treturn ic, nil\n}\n```\n\n## 启动入口\n\n启动 ipam 控制器, 内部根据分配类型启动不同的 cidr 分配器, 本文暂不分析 cloud 相关的分配器.\n\n```go\nfunc (nc *Controller) Run(stopCh \u003c-chan struct{}) {\n\tklog.Infof(\"Starting ipam controller\")\n\tdefer klog.Infof(\"Shutting down ipam controller\")\n\n\t// 等待 nodeinfomrer 数据同步到本地\n\tif !cache.WaitForNamedCacheSync(\"node\", stopCh, nc.nodeInformerSynced) {\n\t\treturn\n\t}\n\n\t// 根据分配类型启动不同的分配器.\n\tif nc.allocatorType == ipam.IPAMFromClusterAllocatorType || nc.allocatorType == ipam.IPAMFromCloudAllocatorType {\n\t\tgo nc.legacyIPAM.Run(stopCh)\n\t} else {\n\t\t// 启动 cidr 分配器\n\t\tgo nc.cidrAllocator.Run(stopCh)\n\t}\n\n\t\u003c-stopCh\n}\n```\n\n## cidr allocator 分配器的原理\n\n### 创建 CIDRAllocator 实例的入口\n\n下面为 cidrAllocator 实例的创建入口, 篇幅原因只分析 `RangeAllocator` 类型.\n\n代码位置: `pkg/controller/nodeipam/ipam/cidr_allocator.go`\n\n```go\nfunc New(...) (CIDRAllocator, error) {\n\t// 获取所有的 node 列表\n\tnodeList, err := listNodes(kubeClient)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 根据 allocator 类型实例化 cidr 分配器\n\tswitch allocatorType {\n\tcase RangeAllocatorType:\n\t\t// RangeAllocator 为默认分配类型.\n\t\treturn NewCIDRRangeAllocator(kubeClient, nodeInformer, allocatorParams, nodeList)\n\n\tcase MultiCIDRRangeAllocatorType:\n\t\treturn NewMultiCIDRRangeAllocator(kubeClient, nodeInformer, clusterCIDRInformer, allocatorParams, nodeList, nil)\n\n\tcase CloudAllocatorType:\n\t\treturn NewCloudCIDRAllocator(kubeClient, cloud, nodeInformer)\n\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"invalid CIDR allocator type: %v\", allocatorType)\n\t}\n}\n```\n\n### rangeAllocator 的实现原理\n\n代码位置: `pkg/controller/nodeipam/ipam/range_allocator.go`\n\n```go\nfunc NewCIDRRangeAllocator(client clientset.Interface, nodeInformer informers.NodeInformer, allocatorParams CIDRAllocatorParams, nodeList *v1.NodeList) (CIDRAllocator, error) {\n\t// 遍历配置中的 cidrs 列表, 生成 cidrset 对象放到集合中.\n\tcidrSets := make([]*cidrset.CidrSet, len(allocatorParams.ClusterCIDRs))\n\tfor idx, cidr := range allocatorParams.ClusterCIDRs { \n\t\t// cidr 只有 ip 和子网, 通过参数 cidr 生成 cidr set 对象.\n\t\tcidrSet, err := cidrset.NewCIDRSet(cidr, allocatorParams.NodeCIDRMaskSizes[idx])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcidrSets[idx] = cidrSet\n\t}\n\n\tra := \u0026rangeAllocator{\n\t\t// kube client\n\t\tclient:                client,\n\t\t// 参数信息\n\t\tclusterCIDRs:          allocatorParams.ClusterCIDRs,\n\t\t// cidr 配置集合\n\t\tcidrSets:              cidrSets,\n\t\t// node lister\n\t\tnodeLister:            nodeInformer.Lister(),\n\t\t// 异步通知给 worker 协程, 请求 apiserver 更新 node 对象\n\t\tnodeCIDRUpdateChannel: make(chan nodeReservedCIDRs, cidrUpdateQueueSize),\n\t\t// 用来处理并发\n\t\tnodesInProcessing:     sets.NewString(),\n\t}\n\n\t// 如果有配置 service 专用的 cidr 段, 则进行配置.\n\tif allocatorParams.ServiceCIDR != nil {\n\t\tra.filterOutServiceRange(allocatorParams.ServiceCIDR)\n\t} else {\n\t\tklog.V(0).Info(\"No Service CIDR provided. Skipping filtering out service addresses.\")\n\t}\n\n\tif nodeList != nil {\n\t\t// 遍历当前的所有 node 对象.\n\t\tfor _, node := range nodeList.Items {\n\t\t\t// 如果 node podcidrs 为空, 说明没有配置过可直接忽略.\n\t\t\tif len(node.Spec.PodCIDRs) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// 如果当前 node 有分配过 pods cidrs 范围,  则需要占位处理.\n\t\t\tif err := ra.occupyCIDRs(\u0026node); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\t// nodeinformer 注册 eventHandler 事件方法.\n\tnodeInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\t// 当有新 node 上来时, 进行分配\n\t\tAddFunc: controllerutil.CreateAddNodeHandler(ra.AllocateOrOccupyCIDR),\n\n\t\t// 当 node 对象发生变更时, 且 PodCIDRs 段为空时才分配 cidr 段.\n\t\tUpdateFunc: controllerutil.CreateUpdateNodeHandler(func(_, newNode *v1.Node) error {\n\t\t\tif len(newNode.Spec.PodCIDRs) == 0 {\n\t\t\t\treturn ra.AllocateOrOccupyCIDR(newNode)\n\t\t\t}\n\t\t\treturn nil\n\t\t}),\n\n\t\t// 当 node 被清理时, 尝试释放其关联的 pod cidrs.\n\t\tDeleteFunc: controllerutil.CreateDeleteNodeHandler(ra.ReleaseCIDR),\n\t})\n\n\treturn ra, nil\n}\n```\n\n启动 `rangeAllocator` 分配器, 内部启动 30 个协程 worker 去处理 node cidr 的信息更新. worker 内部从 `nodeCIDRUpdateChannel` 管道消费事件, 并调用 `updateCIDRsAllocation` 向 apiserver 更新 node cidr 地址段的关系.\n\n```go\nconst cidrUpdateWorkers = 30\n\nfunc (r *rangeAllocator) Run(stopCh \u003c-chan struct{}) {\n\tklog.Infof(\"Starting range CIDR allocator\")\n\tdefer klog.Infof(\"Shutting down range CIDR allocator\")\n\n\tif !cache.WaitForNamedCacheSync(\"cidrallocator\", stopCh, r.nodesSynced) {\n\t\treturn\n\t}\n\n\t// 启动 30 个协程处理 worker 方法.\n\tfor i := 0; i \u003c cidrUpdateWorkers; i++ {\n\t\tgo r.worker(stopCh)\n\t}\n\n\t\u003c-stopCh\n}\n\nfunc (r *rangeAllocator) worker(stopChan \u003c-chan struct{}) {\n\tfor {\n\t\tselect {\n\t\tcase workItem, ok := \u003c-r.nodeCIDRUpdateChannel:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// 已经为 node 分配 cidr 地址段, 调用方法向 apiserver 更新 node 对象.\n\t\t\tif err := r.updateCIDRsAllocation(workItem); err != nil {\n\t\t\t\t// 如果更新发生失败, 则重新入队\n\t\t\t\tr.nodeCIDRUpdateChannel \u003c- workItem\n\t\t\t}\n\t\tcase \u003c-stopChan:\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n`updateCIDRsAllocation` 方法把更新的 node spec.PodCIDRs 信息更新到 apiserver 上.\n\n```go\nfunc (r *rangeAllocator) updateCIDRsAllocation(data nodeReservedCIDRs) error {\n\t// 如果 node 的 PodCIDRs 跟分配的指标一样, 则直接跳出\n\tif len(node.Spec.PodCIDRs) == len(data.allocatedCIDRs) {\n\t\tmatch := true\n\t\tfor idx, cidr := range cidrsString {\n\t\t\tif node.Spec.PodCIDRs[idx] != cidr {\n\t\t\t\tmatch = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif match {\n\t\t\tklog.V(4).Infof(\"Node %v already has allocated CIDR %v. It matches the proposed one.\", node.Name, data.allocatedCIDRs)\n\t\t\treturn nil\n\t\t}\n\t}\n\n\t// 如果 node 的 cidr 不为空, 则需要在地址生成器里清理相关的 cidr 地址段.\n\tif len(node.Spec.PodCIDRs) != 0 {\n\t\tfor idx, cidr := range data.allocatedCIDRs {\n\t\t\t// 尝试清理\n\t\t\tif releaseErr := r.cidrSets[idx].Release(cidr); releaseErr != nil {\n\t\t\t\tklog.Errorf(\"Error when releasing CIDR idx:%v value: %v err:%v\", idx, cidr, releaseErr)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\t// 尝试向 apiserver 更新 node cidrs 信息.\n\tfor i := 0; i \u003c cidrUpdateRetries; i++ {\n\t\tif err = nodeutil.PatchNodeCIDRs(r.client, types.NodeName(node.Name), cidrsString); err == nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\t// 当请求访问 apiserver 发生超时时, 主动释放下 cidr 地址段.\n\tif !apierrors.IsServerTimeout(err) {\n\t\tfor idx, cidr := range data.allocatedCIDRs {\n\t\t\tif releaseErr := r.cidrSets[idx].Release(cidr); releaseErr != nil {\n\t\t\t\tklog.Errorf(\"Error releasing allocated CIDR for node %v: %v\", node.Name, releaseErr)\n\t\t\t}\n\t\t}\n\t}\n\n\t// 如果 apiserver 更新 node cidrs 失败时, 则返回错误, 由调用方 worker 重写入队.\n\t// 不会丢失\n\treturn err\n}\n```\n\n### nodeinformer eventHandler 方法的实现\n\n`AllocateOrOccupyCIDR` 方法用来为 node 新申请分配和占位 cidr.\n\n```go\nfunc (r *rangeAllocator) AllocateOrOccupyCIDR(node *v1.Node) error {\n\t// 防御式编程\n\tif node == nil {\n\t\treturn nil\n\t}\n\t// 规避并发问题, 使用 nodesInProcessing set 集合避免并发处理同一个 node 对象.\n\tif !r.insertNodeToProcessing(node.Name) {\n\t\treturn nil\n\t}\n\n\t// 如果 node 对象中 PodCIDRs 不为空, 则对 node 所属的 cidrs ip范围进行关联占用.\n\tif len(node.Spec.PodCIDRs) \u003e 0 {\n\t\treturn r.occupyCIDRs(node)\n\t}\n\n\tallocated := nodeReservedCIDRs{\n\t\tnodeName:       node.Name,\n\t\tallocatedCIDRs: make([]*net.IPNet, len(r.cidrSets)),\n\t}\n\n\tfor idx := range r.cidrSets {\n\t\t// 从对应的 cidr 集合里分配\n\t\tpodCIDR, err := r.cidrSets[idx].AllocateNext()\n\t\tif err != nil {\n\t\t\t// 如果有异常则在 nodesInProcessing 集合中删除\n\t\t\tr.removeNodeFromProcessing(node.Name)\n\t\t\treturn fmt.Errorf(\"failed to allocate cidr from cluster cidr at idx:%v: %v\", idx, err)\n\t\t}\n\t\tallocated.allocatedCIDRs[idx] = podCIDR\n\t}\n\n\t// 上面的逻辑只是为 node 申请分配 cidr 地址段\n\t// 而具体更新 node 对象信息则是异步由 worker 协程处理.\n\tr.nodeCIDRUpdateChannel \u003c- allocated\n\treturn nil\n}\n```\n\n`ReleaseCIDR` 方法是用来释放 cidr 地址段, 在 ipam controller 里只有 node 资源对象被清理后, 才会调用 `ReleaseCIDR` 来释放 cidr 地址段.\n\n```go\nfunc (r *rangeAllocator) ReleaseCIDR(node *v1.Node) error {\n\t// 当 podCIDRs 为空时, 说明已经被释放过了.\n\tif node == nil || len(node.Spec.PodCIDRs) == 0 {\n\t\treturn nil\n\t}\n\n\t// 遍历当前 node 的 podCIDRS 配置项.\n\tfor idx, cidr := range node.Spec.PodCIDRs {\n\t\t// 把 cidr stirng 格式转换为 *net.IPNet\n\t\t_, podCIDR, err := netutils.ParseCIDRSloppy(cidr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to parse CIDR %s on Node %v: %v\", cidr, node.Name, err)\n\t\t}\n\n\t\t...\n\n\t\t// 释放 cidr 地址段\n\t\tif err = r.cidrSets[idx].Release(podCIDR); err != nil {\n\t\t\treturn fmt.Errorf(\"error when releasing CIDR %v: %v\", cidr, err)\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n### cidrset 的设计实现原理\n\n`CidrSet` 是用来实现申请分配新的 cidr, 释放老的 cidr 和占位已存在 cidr 地址段的类.\n\n源码位置: `pkg/controller/nodeipam/ipam/cidrset/cidr_set.go`\n\n#### 实例化 cidrset 地址计算器\n\n`NewCIDRSet` 里需要使用 `getMaxCIDRs` 计算出 clusterCIDR 地址段按照 `subNetMaskSize` 切分, 可以给 node 分配 cidr 的个数.\n\n```go\nfunc NewCIDRSet(clusterCIDR *net.IPNet, subNetMaskSize int) (*CidrSet, error) {\n\tclusterMask := clusterCIDR.Mask\n\n\t// 获取 clusterCIDR 的子网掩码\n\tclusterMaskSize, bits := clusterMask.Size()\n\n\t// 地址为空或者掩码相减大于 16, 子网配置不合理, 大家可以算下.\n\tif (clusterCIDR.IP.To4() == nil) \u0026\u0026 (subNetMaskSize-clusterMaskSize \u003e clusterSubnetMaxDiff) {\n\t\treturn nil, ErrCIDRSetSubNetTooBig\n\t}\n\n\t...\n\n\t// 计算出 cidr 地址段的个数\n\tmaxCIDRs := getMaxCIDRs(subNetMaskSize, clusterMaskSize)\n\tcidrSet := \u0026CidrSet{\n\t\tclusterCIDR:     clusterCIDR,\n\t\tnodeMask:        net.CIDRMask(subNetMaskSize, bits),\n\t\tclusterMaskSize: clusterMaskSize,\n\t\tmaxCIDRs:        maxCIDRs,\n\t\tnodeMaskSize:    subNetMaskSize,\n\t\tlabel:           clusterCIDR.String(),\n\t}\n\n\treturn cidrSet, nil\n}\n```\n\n通过下面的例子分析下 `getMaxCIDRs` 过程. 比如 clusetrCIDR 参数为 `10.0.0.0/16`, 主机子网大小为 `24`, 那么通过 `getMaxCIDRs(24, 16)` 可以拿到的 256 个 cidr 配置段 (0-255), 每个 cidr 可以分配 254 个地址 (0 为网络号, 255 为广播地址). k8s node 默认下可以开 110 个 pod, 这个 cidr 地址是足够了.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\tnetutils \"k8s.io/utils/net\"\n)\n\nfunc main() {\n\tcidr := \"10.0.0.0/16\"\n\t_, clusterCIDR, _ := netutils.ParseCIDRSloppy(cidr)\n\tfmt.Println(\"clusterCIDR:\", clusterCIDR.String()) // output: 10.0.0.0/16\n\n\tclusterMaskSize, _ := clusterCIDR.Mask.Size()\n\tfmt.Println(\"clusterMaskSize: \", clusterMaskSize) // output: 16\n\n\tmax := getMaxCIDRs(24, clusterMaskSize)\n\tfmt.Println(\"getMaxCIDRs:\", max) // output: 256\n}\n\nfunc getMaxCIDRs(subNetMaskSize, clusterMaskSize int) int {\n\treturn 1 \u003c\u003c uint32(subNetMaskSize-clusterMaskSize)\n}\n```\n\nipam 代码中有不少子网掩码换算和子网划分等地址换算的调用, 这需要一定的网络基础知识才方便理解.\n\n####  申请 cidr 地址段 (AllocateNext)\n\n`AllocateNext` 方法用来申请分配可用的 cidr 地址段. `used` 类型是 `bit.Int`, 其目的通过 bitmap 结构来标记 cidr 是否被分配.\n\n比如通过 getMaxCIDRs 得出当前最多可以分配 256 个 cidr 地址段, 把已经分配过的 cidr 段在 used bitmap 对应位置标记为 1, 没被分配过的 cidr 标记为 0.\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/c5600e7df3d41461e10ab98990f0973a.png)\n\n代码位置: `pkg/controller/nodeipam/ipam/cidrset/cidr_set.go`\n\n```go\nfunc (s *CidrSet) AllocateNext() (*net.IPNet, error) {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\t// 如果当前分配的 cidr 已经等于 maxCIDRs, 则直接无剩余 cidr 地址段错误.\n\tif s.allocatedCIDRs == s.maxCIDRs {\n\t\treturn nil, ErrCIDRRangeNoCIDRsRemaining\n\t}\n\n\tcandidate := s.nextCandidate\n\tvar i int\n\t// 从上次的 candidate 开始循环遍历, 直到找到可用的 cidr.\n\tfor i = 0; i \u003c s.maxCIDRs; i++ {\n\t\t// 如果当前位还未使用, 则使用该 candidate.\n\t\tif s.used.Bit(candidate) == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\t// 跟 maxCIDRs 取摸计算出 candidate\n\t\tcandidate = (candidate + 1) % s.maxCIDRs\n\t}\n\n\t// 下次的 candidate 位置\n\ts.nextCandidate = (candidate + 1) % s.maxCIDRs\n\n\t// 配置 used bitmap 中 candidate 位置 bit 为 1\n\ts.used.SetBit(\u0026s.used, candidate, 1)\n\n\t// 每次分配成功都会加一\n\ts.allocatedCIDRs++\n\n\treturn s.indexToCIDRBlock(candidate), nil\n}\n```\n\n`indexToCIDRBlock` 方法可通过 index 位置进行位运算后获取 cidr 地址段.\n\n```go\nfunc (s *CidrSet) indexToCIDRBlock(index int) *net.IPNet {\n\tvar ip []byte\n\tswitch {\n\tcase s.clusterCIDR.IP.To4() != nil:\n\t\t{\n\t\t\tj := uint32(index) \u003c\u003c uint32(32-s.nodeMaskSize)\n\t\t\tipInt := (binary.BigEndian.Uint32(s.clusterCIDR.IP)) | j\n\t\t\tip = make([]byte, net.IPv4len)\n\t\t\tbinary.BigEndian.PutUint32(ip, ipInt)\n\t\t}\n\tcase s.clusterCIDR.IP.To16() != nil:\n\t\t...\n\t}\n\n\treturn \u0026net.IPNet{\n\t\tIP:   ip,\n\t\tMask: s.nodeMask,\n\t}\n}\n```\n\n通过单元测试分析下 `indexToCIDRBlock` 执行的过程. 比如 ipam 可分配的地址段为 `127.123.3.0/16`, 分给 node 的子网为 `24`, 那么可以分配的 cidr 地址范围是 `127.123.0.0 - 127.123.255.0`. 当 index 为 0 时, cidr 为 `127.123.0.0`, index 为 10 时, cidr 为 `127.123.10.0`.\n\n```go\nfunc TestIndexToCIDRBlock(t *testing.T) {\n\tcases := []struct {\n\t\tclusterCIDRStr string\n\t\tsubnetMaskSize int\n\t\tindex          int\n\t\tCIDRBlock      string\n\t\tdescription    string\n\t}{\n\t\t{\n\t\t\tclusterCIDRStr: \"127.123.3.0/16\",\n\t\t\tsubnetMaskSize: 24,\n\t\t\tindex:          0,\n\t\t\tCIDRBlock:      \"127.123.0.0/24\",\n\t\t\tdescription:    \"1st IP address indexed with IPv4\",\n\t\t},\n\t\t{\n\t\t\tclusterCIDRStr: \"127.123.0.0/16\",\n\t\t\tsubnetMaskSize: 24,\n\t\t\tindex:          15,\n\t\t\tCIDRBlock:      \"127.123.15.0/24\",\n\t\t\tdescription:    \"16th IP address indexed with IPv4\",\n\t\t},\n\t\t{\n\t\t\tclusterCIDRStr: \"192.168.5.219/28\",\n\t\t\tsubnetMaskSize: 32,\n\t\t\tindex:          5,\n\t\t\tCIDRBlock:      \"192.168.5.213/32\",\n\t\t\tdescription:    \"5th IP address indexed with IPv4\",\n\t\t},\n\t}\n\tfor _, tc := range cases {\n\t\t_, clusterCIDR, _ := netutils.ParseCIDRSloppy(tc.clusterCIDRStr)\n\t\ta, err := NewCIDRSet(clusterCIDR, tc.subnetMaskSize)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"error for %v \", tc.description)\n\t\t}\n\t\tcidr := a.indexToCIDRBlock(tc.index)\n\t\tif cidr.String() != tc.CIDRBlock {\n\t\t\tt.Fatalf(\"error for %v index %d %s\", tc.description, tc.index, cidr.String())\n\t\t}\n\t}\n}\n```\n\n#### 释放不用的 cidr 地址段\n\n`Release` 方法用做在地址分配器里释放对应的 cidr 地址段, 标记为空闲 ( 0 ).\n\n```go\n// Release releases the given CIDR range.\nfunc (s *CidrSet) Release(cidr *net.IPNet) error {\n\t// 通过 cidr 获取 begin 和 end\n\tbegin, end, err := s.getBeginningAndEndIndices(cidr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.Lock()\n\tdefer s.Unlock()\n\n\t// 从 begin - end 进行遍历, 把对应的的位配置为空位, 0 为未使用.\n\tfor i := begin; i \u003c= end; i++ {\n\t\tif s.used.Bit(i) != 0 {\n\t\t\ts.used.SetBit(\u0026s.used, i, 0)\n\t\t\ts.allocatedCIDRs--\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n`getBeginningAndEndIndices` 方法用来获取 cidr 在 used bitmap 中的索引偏移量. 函数实现原理还是颇为繁杂, 其内部有不少的位运算, 这里就分析地址的换算原理.\n\n#### 占位已被使用 CIDR 地址段\n\n`Occupy` 主要是在 ipam 里占位已经在 node 里配置过 cidr 的地址. 分配器在启动时会遍历集群中 node 对象列表, 把这些 node 的 cidr 都在 ipam 中占住, 避免被新的 node 分配占用.\n\n`Occupy` 方法跟 `Release` 相反, Release 是把指定的 cidr 给释放掉, 而 `Occupy` 是把指定的 cidr 给占位, 只是在 cidr 分配器里标记该 cidr 段已经被分配, 无需向 apiserver 请求更新.\n\n```go\nfunc (s *CidrSet) Occupy(cidr *net.IPNet) (err error) {\n\t// 通过 cidr 获取 index 的 begin 和 end\n\tbegin, end, err := s.getBeginningAndEndIndices(cidr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.Lock()\n\tdefer s.Unlock()\n\tfor i := begin; i \u003c= end; i++ {\n\t\tif s.used.Bit(i) == 0 {\n\t\t\t// 设置该位 bit 为 1, 也就是已被使用.\n\t\t\ts.used.SetBit(\u0026s.used, i, 1)\n\t\t\ts.allocatedCIDRs++\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n## 总结\n\nnodeIpamController 的原理就是这样的. 控制器启动时通过 `--cluster-cidr` 和 `--cidr-allocator-type` 生成 cidr 地址段生成器. 其内部启动 nodeInformer 监听 node 对象资源, 当触发 node 新增事件时, 为 node 申请分配 cidr 地址段, 然后向 apiserver 请求更新 node podcidrs 配置信息, 当触发删除事件时, 则释放这些 ip cidr 地址段.\n![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/686389778df87031cee2e6febc8f83f8.png)\n\npod 的 ip 地址是依赖 nodeipma 分配的, 而 service 的 clusetrIP 则是 kube apiserver 来实现的, 其 clusterIP 集群地址范围是由参数 `--service-cluster-ip-range` 控制的, 默认是 `10.0.0.0/24` 地址范围, 当然是不足够的了, 通常会把子网调整到 `16`. service 和 pod 的 cidr 范围尽量不要冲突, ipam controller 启动时会读取 `--service-cluster-ip-range` 参数作为 service 的 cidr 地址段, 然后在分配器调用 `Occupy` 占位 service 地址范围以规避分配冲突.\n","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/nodeIPAM-%E9%97%AE%E9%A2%98":{"title":"nodeIPAM 问题","content":"\n1. 对于 controller-manager 无法修改 cluster-cidr 即 podCIDR\n[Can't change kube-controller-manager cluster cidr · Issue #75461 · kubernetes/kubernetes (github.com)](https://github.com/kubernetes/kubernetes/issues/75461)\n","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90":{"title":"perf 性能分析","content":"\n[[网卡多队列 + 中断绑定]]\n\n[Wiki - Linux 效能分析工具: Perf (ncku.edu.tw)](http://wiki.csie.ncku.edu.tw/embedded/perf-tutorial)\n![upgit_20221118_1668759156.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221118_1668759156.png)\n\n\n![upgit_20221118_1668758187.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221118_1668758187.png)\n\n### 网络测试工具\n一、iperf\niperf是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。\n\n- 服务端10.74.148.74启动iperf3，监听端口12345，请求间断时间1s\n~# iperf3 -s -p 12345 -i 1\n- 客户端向10.74.148.74发起请求，请求间断时间1s，测试时间长度10s\n~# iperf3 -c 10.74.148.74 -p 12345  -i 1 -t 10\n\n二、netperf\nnetperf是一种网络性能的测量工具，主要针对基于TCP或UDP的传输。Netperf根据应用的不同，可以进行不同模式的网络性能测试，**即批量数据传输（bulk data transfer）模式和请求/应答（request/reponse）模式。**\n- 服务端10.74.148.74开起12865的netserver程序监听\n~# netserver\nStarting netserver with host 'IN(6)ADDR_ANY' port '12865' and family AF_UNSPEC\n\n- 客户端向10.74.148.74发起请求，测试时间长度10s\n~# netperf -H 10.74.148.74 -l 10\n\n三、qperf\n- qperf -t 60 10.233.96.11 tcp_bw\n- qperf\nqperf 可以用来测试两个节点之间的带宽（bandwidth）和延迟（latency），除了支持tcp/udp/sctp外， qperf值得提的亮点是：第一可以支持RDMA测量，第二可进行循环遍历测试。这两点也是推荐该工具的主要原因。使用方法是：一个节点运行 qperf 作为服务端，另一个节点则运行 qperf 作为客户端，与服务端建立连接之后打流，获取带宽和延迟等数据。\n\n\n### iperf3 性能测试\niperf -c 10.233.94.214 -u -t 120 -p 8000\niperf -s -u -i 1 -p 8000\n\n使用 iperf 测试，deploy1 暴露 svc，deploy2 通过 svc 访问 deploy1\niperf3 -s -p 8000\niperf3 -c 10.233.94.220 -u -p 8000 -b 1500M -t 120\n\n\n手动创建 veth-pair 设备来进行测试：[[手动创建 netns + 跨主机通信]]，测试结果如下：\n\n![upgit_20221121_1669020131.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221121_1669020131.png)\n\n![upgit_20221121_1669020150.png](https://images.cherryfloris.eu.org/ryken/2022/11/upgit_20221121_1669020150.png)\n\n\n![upgit_20221206_1670292224.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221206_1670292224.png)\n\n![upgit_20221206_1670292233.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221206_1670292233.png)\n\n![upgit_20221206_1670292242.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221206_1670292242.png)\n\n![upgit_20221206_1670292249.png](https://images.cherryfloris.eu.org/ryken/2022/12/upgit_20221206_1670292249.png)\n\n\n带宽测试工具：\n主要会用到iperf和iperf3，2个版本有所区别\n1. 用tcp测试带宽时，最好用iperf进行测试。（iperf3是单线程程序， 使用25G或以上的网卡时，可能存在测不满的情况）\n2. 用udp测试带宽时， 最好用iperf3。（iperf 低版本有bug，导致测udp带宽无法超过800MB）\n\n**原因是 iperf3 是单线程：**  \nps -eLf | grep iperf3 只有一个  \n即使指定了 -P 4 线程，还是只有一个 iperf3 client\n\n**iperf 是多线程：**  \nps -eLf | grep iperf 有多个，而且会多于 -P 4 指定的数量，会多两个，这样带宽能打满","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/policy-%E7%AE%A1%E7%90%86":{"title":"policy 管理","content":"\npolicyRepository\n\npolicyK8s\n\npolicyDirectory\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n\t- key: \"io.kubernetes.pod.namespace\"\n\t  operator: \"NotIn\"\n\t  values:\n\t  - \"kube-system\"\nenableDefaultDeny:\n  egress: true\n  ingress: true\n```\n\n\n使用 1.16 之前的版本没有 enableDefaultDeny 字段，升级之后 enableDefaultDeny 会变为 {}\n\n 1.16 版本之后如果 enableDefaultDeny 为 {}，但是存在 ingress、egress、egressDeny、ingressDeny 默认相应的 enableDefaultDeny 中会自动为 true\n\n\n修改之后的预期：\n如果 enableDefaultDeny 为 {}（升级），升级上来的不得影响之前的功能\n\n- 【拒接】设置为 true：表示启用默认拒绝所有流量（旧版本以及没有设置且有设定 ingress/egress ）\n- 【放行】设置为 false：表示禁用默认拒绝，则会添加一条 any 的规则\n\n如果没有 ingress、egress、egressDeny、ingressDeny 这些字段。\n\t当 enableDefaultDeny 中有值，以定义的为主；\n\t当 enableDefaultDeny 中未定义，默认为 true？\n\nenableDefaultDeny 的值是否依赖  ingress、egress、egressDeny、ingressDeny 中的值来决定呢？如果都没有值由应当如何处理\n\n**区别设置 enableDefaultDeny{} 与 不设置 enableDefaultDeny 字段的**\n\t如果无法区别那就要对没有定义 ingress、egress、egressDeny、ingressDeny 的规则进行验证并添加不合规的信息，升级上来的同理\n如何区别下面的两个定义呢\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n\t- key: \"io.kubernetes.pod.namespace\"\n\t  operator: \"NotIn\"\n\t  values:\n\t  - \"kube-system\"\nenableDefaultDeny: {}\n```\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n\t- key: \"io.kubernetes.pod.namespace\"\n\t  operator: \"NotIn\"\n\t  values:\n\t  - \"kube-system\"\n```\n\n\n\n如果 daemon 配置了EnableNonDefaultDenyPolicies 为 true\n需要配置其中之一皆可 Ingress/IngressDeny/Egress/EgressDeny/EnableDefaultDeny.Ingress/EnableDefaultDeny.Egress ，否则认为该策略配置错误\n\n对于有 Ingress/IngressDeny 规则的，用户指定 EnableDefaultDeny.Ingress  时使用其指定的值，未指定时默认为 true，egress 同理。\n\n\n如果 daemon 配置了EnableNonDefaultDenyPolicies 为 false，沿用之前的逻辑\n需要配置其中之一皆可 Ingress/IngressDeny/Egress/EgressDeny ，否则认为该策略配置错误。EnableDefaultDeny 默认为 {ingress: true, false: true}\n\n\n---\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n      - key: \"io.kubernetes.pod.namespace\"\n        operator: \"NotIn\"\n        values:\n        - \"kube-system\"\n  egress:\n  - toFQDNs:\n    - matchName: \"api.github.com\"\n  - toEndpoints:\n    - matchLabels:\n        \"k8s:io.kubernetes.pod.namespace\": kube-system\n        \"k8s:k8s-app\": kube-dns\n    toPorts:\n    - ports:\n      - port: \"53\"\n        protocol: ANY\n      rules:\n        dns:\n        - matchPattern: \"*\"\n  enableDefaultDeny:\n    egress: true\n```\n\n**v 1.16.x 配置** \n对于 egress 的限制：\n- enableDefaultDeny.egress: true - 访问不通 同一 ns 下的 pod\n- enableDefaultDeny.egress: false - 可以访问通 同一 ns 下的 pod\n- 没有该字段 - 访问不通 同一 ns 下的 pod\n\n对于 ingress 的限制：\n- enableDefaultDeny.egress: true - kube-system 下的 pod 可以访问 default ns 下的 pod\n- enableDefaultDeny.egress: false - kube-system 下的 pod 可以访问 default ns 下的 pod\n- 没有该字段 -  kube-system 下的 pod 可以访问 default ns 下的 pod\n\n\n\n**v 1.15.x 配置** \n对于 egress 的限制：\n- 没有 enableDefaultDeny 字段 - 访问不通 同一 ns 下的 pod\n\n对于 ingress 的限制：\n- kube-system 下的 pod 可以访问 default ns 下的 pod\n\n\n好的，我根据你的描述，再以一个例子展开描述：\n存在的问题：\n在 v1.16.0 之前，下面的规则放行所有的 ingress 流量\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n      - key: \"io.kubernetes.pod.namespace\"\n        operator: \"NotIn\"\n        values:\n        - \"kube-system\"\n  egress:\n  - toFQDNs:\n    - matchName: \"api.github.com\"\n  - toEndpoints:\n    - matchLabels:\n        \"k8s:io.kubernetes.pod.namespace\": kube-system\n        \"k8s:k8s-app\": kube-dns\n    toPorts:\n    - ports:\n      - port: \"53\"\n        protocol: ANY\n      rules:\n        dns:\n        - matchPattern: \"*\"  \n```\n\nv1.16 加入了 enableDefaultDeny 之后，存在的问题配置了如上的规则，不管 enableDefaultDeny.ingress 为 true 和 false 都是会放行所有 ingress 流量\n\n这个配置对于用户来说有点困惑，因为配置后没有效果。\n\n提出的解决方式：\n一个处理方式：your proposal was to change the semantics so that it takes effect.\n另一个处理方式：宣布策略无效\n\n我的理解：\n方式1 的处理方式很容易理解\n对于方式2 的处理应该如何理解呢？对于检测策略无效适用于下面的策略，但是对于上面的例子可能不太适用，那对于上面的策略是否还用方式2来解决吗因为没有 ingress/ingressdeny 所以不能配置 enableDefaultDeny.ingress？\n\n```yaml\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  endpointSelector:\n    matchExpressions:\n      - key: \"io.kubernetes.pod.namespace\"\n        operator: \"NotIn\"\n        values:\n        - \"kube-system\"\n  enableDefaultDeny:\n    egress: true\n    ingress: true\n```\n\n另外如果 enableDefaultDeny.ingress 为 true 和 false 都会拒绝所有 ingress 流量，如果用户从v1.15.x 或者更低版本升级之后，对于那些没有 enableDefaultDeny 字段的策略，行为是否会发生改变\nFor existing policies written without the `enableDefaultDeny` field, the behavior must not change","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/pprof":{"title":"","content":"\u003e # 下载cpu profile，默认从当前开始收集30s的cpu使用情况，需要等待30sgo tool pprof [http://localhost:6060/debug/pprof/profile](http://localhost:6060/debug/pprof/profile)   # 30-second CPU profilego tool pprof [http://localhost:6060/debug/pprof/profile?seconds=120](http://localhost:6060/debug/pprof/profile?seconds=120)     # wait 120s# 下载heap profilego tool pprof [http://localhost:6060/debug/pprof/heap](http://localhost:6060/debug/pprof/heap)      # heap profile# 下载goroutine profilego tool pprof [http://localhost:6060/debug/pprof/goroutine](http://localhost:6060/debug/pprof/goroutine) # goroutine profile# 下载block profilego tool pprof [http://localhost:6060/debug/pprof/block](http://localhost:6060/debug/pprof/block)     # goroutine blocking profile# 下载mutex profilego tool pprof [http://localhost:6060/debug/pprof/mutex](http://localhost:6060/debug/pprof/mutex)\n\n\n\u003e go tool pprof http://localhost:6060/debug/pprof/heap \n\u003e Fetching profile over HTTP from http://localhost:6060/debug/pprof/heapSaved profile in /home/ubuntu/pprof/pprof.demo.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz //\u003c--- 下载到的内存profile文件File: demo // 程序名称Build ID: a9069a125ee9c0df3713b2149ca859e8d4d11d5aType: inuse_spaceTime: May 16, 2019 at 8:55pm (CST)Entering interactive mode (type \"help\" for commands, \"o\" for options)(pprof)(pprof)(pprof) \n\u003e help // 使用help打印所有可用命令 \n\n\ngo tool pprof -http=:8080 cpu.prof\n\n# Golang 大杀器之性能剖析 PProf\n[https://www.jianshu.com/p/4e4ff6be6af9](https://www.jianshu.com/p/4e4ff6be6af9)\n","lastmodified":"2025-03-26T03:48:43.201318464Z","tags":null},"/reflect%E5%BA%93":{"title":"","content":"```go\nfunc Copy(dst, src Value) int\nfunc DeepEqual(x, y interface{}) bool\nfunc Swapper(slice interface{}) func(i, j int)\ntype ChanDir\n    func (d ChanDir) String() string\ntype Kind\n    func (k Kind) String() string\ntype MapIter\n    func (it *MapIter) Key() Value\n    func (it *MapIter) Next() bool\n    func (it *MapIter) Value() Value\ntype Method\ntype SelectCase\ntype SelectDir\ntype SliceHeader\ntype StringHeader\ntype StructField\ntype StructTag\n    func (tag StructTag) Get(key string) string\n    func (tag StructTag) Lookup(key string) (value string, ok bool)\ntype Type\n    func ArrayOf(count int, elem Type) Type\n    func ChanOf(dir ChanDir, t Type) Type\n    func FuncOf(in, out []Type, variadic bool) Type\n    func MapOf(key, elem Type) Type\n    func PtrTo(t Type) Type\n    func SliceOf(t Type) Type\n    func StructOf(fields []StructField) Type\n    func TypeOf(i interface{}) Type\ntype Value\n    func Append(s Value, x ...Value) Value\n    func AppendSlice(s, t Value) Value\n    func Indirect(v Value) Value\n    func MakeChan(typ Type, buffer int) Value\n    func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value\n    func MakeMap(typ Type) Value\n    func MakeMapWithSize(typ Type, n int) Value\n    func MakeSlice(typ Type, len, cap int) Value\n    func New(typ Type) Value\n    func NewAt(typ Type, p unsafe.Pointer) Value\n    func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)\n    func ValueOf(i interface{}) Value\n    func Zero(typ Type) Value\n    func (v Value) Addr() Value\n    func (v Value) Bool() bool\n    func (v Value) Bytes() []byte\n    func (v Value) Call(in []Value) []Value\n    func (v Value) CallSlice(in []Value) []Value\n    func (v Value) CanAddr() bool\n    func (v Value) CanInterface() bool\n    func (v Value) CanSet() bool\n    func (v Value) Cap() int\n    func (v Value) Close()\n    func (v Value) Complex() complex128\n    func (v Value) Convert(t Type) Value\n    func (v Value) Elem() Value\n    func (v Value) Field(i int) Value\n    func (v Value) FieldByIndex(index []int) Value\n    func (v Value) FieldByName(name string) Value\n    func (v Value) FieldByNameFunc(match func(string) bool) Value\n    func (v Value) Float() float64\n    func (v Value) Index(i int) Value\n    func (v Value) Int() int64\n    func (v Value) Interface() (i interface{})\n    func (v Value) InterfaceData() [2]uintptr\n    func (v Value) IsNil() bool\n    func (v Value) IsValid() bool\n    func (v Value) IsZero() bool\n    func (v Value) Kind() Kind\n    func (v Value) Len() int\n    func (v Value) MapIndex(key Value) Value\n    func (v Value) MapKeys() []Value\n    func (v Value) MapRange() *MapIter\n    func (v Value) Method(i int) Value\n    func (v Value) MethodByName(name string) Value\n    func (v Value) NumField() int\n    func (v Value) NumMethod() int\n    func (v Value) OverflowComplex(x complex128) bool\n    func (v Value) OverflowFloat(x float64) bool\n    func (v Value) OverflowInt(x int64) bool\n    func (v Value) OverflowUint(x uint64) bool\n    func (v Value) Pointer() uintptr\n    func (v Value) Recv() (x Value, ok bool)\n    func (v Value) Send(x Value)\n    func (v Value) Set(x Value)\n    func (v Value) SetBool(x bool)\n    func (v Value) SetBytes(x []byte)\n    func (v Value) SetCap(n int)\n    func (v Value) SetComplex(x complex128)\n    func (v Value) SetFloat(x float64)\n    func (v Value) SetInt(x int64)\n    func (v Value) SetLen(n int)\n    func (v Value) SetMapIndex(key, elem Value)\n    func (v Value) SetPointer(x unsafe.Pointer)\n    func (v Value) SetString(x string)\n    func (v Value) SetUint(x uint64)\n    func (v Value) Slice(i, j int) Value\n    func (v Value) Slice3(i, j, k int) Value\n    func (v Value) String() string\n    func (v Value) TryRecv() (x Value, ok bool)\n    func (v Value) TrySend(x Value) bool\n    func (v Value) Type() Type\n    func (v Value) Uint() uint64\n    func (v Value) UnsafeAddr() uintptr\ntype ValueError\n    func (e *ValueError) Error() string\nBugs\n```\n\ngo中的type枚举\n```go\nconst (\n\tInvalid Kind = iota\n\tBool\n\tInt\n\tInt8\n\tInt16\n\tInt32\n\tInt64\n\tUint\n\tUint8\n\tUint16\n\tUint32\n\tUint64\n\tUintptr\n\tFloat32\n\tFloat64\n\tComplex64\n\tComplex128\n\tArray\n\tChan\n\tFunc\n\tInterface\n\tMap\n\tPtr\n\tSlice\n\tString\n\tStruct\n\tUnsafePointer\n)\n```\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/ringbuffer-%E5%AF%B9%E5%B8%A6%E5%AE%BD%E7%9A%84%E5%BD%B1%E5%93%8D":{"title":"ringbuffer 对带宽的影响","content":"ringbuffer是网卡收发报文的缓冲区。ring的意思就是环形，数据往环里可以不停写入，如果到了头，就会再写一圈，把老的数据覆盖了。\n\n报文到达这个缓冲区后，如果没有及时被cpu处理，就会积累，超过buffer大小后，就会覆盖之前的数据，导致丢包。\n\nringbuffer越大越不容易写满，丢包概率就越低，但是cpu处理到报文的响应时间就越长，所以网络延时就会变高。\n\n  \n理解ringbuffer的作用，可以类比到机场的行李传送带。这个传送带是个环， 其中一边有行李被不断送到传送带上，另一边有很多旅客把行李取走。当传送带不够长，并且旅客少的时候，就会出现新的行李没地方放，只能把老行李扔了，腾出位置放新行李，这就是丢包的情况。\n\n把传送带加长可以缓解丢行李的问题，带来的问题是旅客要等待更多时间才能取到行李，这就是网络延时会变高的原因。\n\n```bash\nroot@pekt3dr01n08:~# ethtool -g enp66s0f0\nRing parameters for enp66s0f0:\nPre-set maximums:\nRX:     8192\nRX Mini:    0\nRX Jumbo:   0\nTX:     8192\nCurrent hardware settings:\nRX:     1024\nRX Mini:    0\nRX Jumbo:   0\nTX:     1024\n\nroot@pekt3dr01n07:~# iperf -c pekt3dr01n08 -i 1 -t 3 -P 1\n------------------------------------------------------------\nClient connecting to pekt3dr01n08, TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  3] local 10.16.13.25 port 41378 connected with 10.16.13.26 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0- 1.0 sec   285 MBytes  2.39 Gbits/sec\n[  3]  1.0- 2.0 sec  62.2 MBytes   522 Mbits/sec\n[  3]  2.0- 3.0 sec  32.9 MBytes   276 Mbits/sec\n[  3]  0.0- 3.0 sec   381 MBytes  1.06 Gbits/sec\n\n# 调整大小后再测试，速度恢复正常\nroot@pekt3dr01n08:~# ethtool -G enp66s0f0 rx 8192 tx 8192\n\n# 虽然是25G网卡，由于这台服务器比较老（E5-2620），而且主频低，所以只能到12G带宽\nroot@pekt3dr01n07:~# iperf -c pekt3dr01n08 -i 1 -t 3 -P 1\n------------------------------------------------------------\nClient connecting to pekt3dr01n08, TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  3] local 10.16.13.25 port 42686 connected with 10.16.13.26 port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  3]  0.0- 1.0 sec  1.42 GBytes  12.2 Gbits/sec\n[  3]  1.0- 2.0 sec  1.41 GBytes  12.2 Gbits/sec\n[  3]  2.0- 3.0 sec  1.27 GBytes  10.9 Gbits/sec\n[  3]  0.0- 3.0 sec  4.11 GBytes  11.8 Gbits/sec\n```","lastmodified":"2025-03-26T03:48:44.139315159Z","tags":null},"/rp_filter-%E9%97%AE%E9%A2%98":{"title":"rp_filter 问题","content":"### 背景\ncalico ipip模式的 pod 与 bgp 模式的 pod，无法正常通信；节点收到回包之后将包给丢弃了，在 ubuntu 20 上行不通，但是在 ubuntu 22 上可行，(先把两边的 sysctl -a 拿出来，做下 diff，在 net 区块部分能看出来有差异) \nnet.ipv4.conf.all.rp_filter = 2\n\n\nrp_filter 反向路由校验\n- 0：关闭反向路由校验\n- 1：开启严格的反向路由校验。对每个进来的数据包，校验其反向路由是否是最佳路由。如果反向路由不是最佳路由，则直接丢弃该数据包。\n- 2：开启松散的反向路由校验。对每个进来的数据包，校验其源地址是否可达，即反向路由是否能通（通过任意网口），如果反向路径不通，则直接丢弃该数据包。\n\n### 开启rp_filter参数的作用\n\n1. 减少DDoS攻击  \n    校验数据包的反向路径，如果反向路径不合适，则直接丢弃数据包，避免过多的无效连接消耗系统资源。\n2. 防止IP Spoofing  \n    校验数据包的反向路径，如果客户端伪造的源IP地址对应的反向路径不在路由表中，或者反向路径不是最佳路径，则直接丢弃数据包，不会向伪造IP的客户端回复响应。\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/runtime":{"title":"runtime","content":"crio\n```bash\n# 1. 安装cri-o \nyum install git make \ncurl -OL https://github.com/cri-o/cri-o/releases/download/v1.18.4/crio-v1.18.4.tar.gz \ntar -zxf crio-v1.18.4.tar.gz \ncd crio-v1.18.4\nmkdir -p /etc/crio /opt/cni/bin /usr/local/share/oci-umount/oci-umount.d /usr/local/lib/systemd/system \nmake install \necho \"fs.may_detach_mounts=1\" \u003e\u003e /etc/sysctl.conf\nsysctl -p \n\n# 2. 配置cri-o \nvi /etc/crio/crio.conf \n# 找到如下参数进行修改 \npause_image = \"kubesphere/pause:3.2\" \nregistries = [ \"docker.io\" ## 这里可替换成dockerhub的镜像加速器 ] \n\n# 3. 启动crio \nsystemctl enable crio \u0026\u0026 systemctl restart crio\n```\n\ncentos 7\n安装 crio\n```bash\ncurl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo\ncurl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:1.25.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/CentOS_7/devel:kubic:libcontainers:stable:cri-o:1.25.repo\nyum -y install cri-o\nsystemctl enable crio \u0026\u0026 systemctl restart crio \ncrio config\nvim /etc/crio/crio.conf \n```\n\n\n\n**安装 crictl** \n[Releases · kubernetes-sigs/cri-tools (github.com)](https://github.com/kubernetes-sigs/cri-tools/releases)\n```bash\nCRICTL_VERSION=\"v1.25.0\"\nmkdir -p /opt/bin\ncurl -L \"https://github.com/kubernetes-incubator/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz\" | tar -C /opt/bin -xz\n\nln -s /opt/bin/crictl /usr/bin/crictl\n\nyum install -y ebtables\n```\n\n**containerd load docker 镜像：**\n使用 ctr 工具\n```bash\n# show namespaces\n% ctr -a /var/run/containerd/containerd.sock namespace ls\nNAME    LABELS\ndefault\nk8s.io\n\n# import into namespace k8s.io\n% ctr -a /var/run/containerd/containerd.sock --namespace k8s.io image import --base-name foo/bar container_import.tar\nunpacking foo/bar:VERSION (sha256:123ff...123ff)...done\nctr import --base-name    4,49s user 0,95s system 23% cpu 22,719 total\n\n# check import with\n% ctr -a /var/run/kube-containerd/containerd.sock --namespace k8s.io image ls\nREF TYPE DIGEST SIZE PLATFORMS LABELS\n```\n\n[Crictl not support load images? · Issue #546 · kubernetes-sigs/cri-tools (github.com)](https://github.com/kubernetes-sigs/cri-tools/issues/546)","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/rust-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83":{"title":"rust 编码规范","content":"常量的命名规范：使用下划线分隔的大写字母单词，并且可以在数字字面值中插入下划线来提升可读性。\n```rust\nfn main() {\n    const MAX_POINTS: u32 = 100_000;\n}\n```\n\n\nRust 代码中的函数和变量名使用 snake case 规范风格。在 snake case 中，所有字母都是小写并使用下划线分隔单词。\n\n\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/rust-%E9%A1%B9%E7%9B%AE%E4%B8%8A%E6%89%8B":{"title":"rust 项目上手","content":"- openelb 修改为 rust 语言\n\t- [kube-rs/controller-rs: A kubernetes reference controller (github.com)](https://github.com/kube-rs/controller-rs)\n\t- [kube-rs/kube: Rust Kubernetes client and controller runtime (github.com)](https://github.com/kube-rs/kube)\n\t- [j7nw4r/test-controller: Writing a test Kubernetes controller for fast environment allocation. (github.com)](https://github.com/j7nw4r/test-controller)\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/sctp":{"title":"","content":"SCTP（流控制传输协议）是用于应用程序之间通信的传输层协议。它与 TCP 类似，但它提供了额外的功能，例如多宿主和消息分段。需要可靠、有序的数据传输，同时还需要能够同时处理多个数据流的应用程序可以使用 SCTP。 \nSCTP 主要由服务提供商和移动运营商使用。 \n使用 SCTP 的应用程序示例包括： \n- 4G 和 5G 移动网络中的信令传输 VoIP（IP 语音）\n- 系统中的 SIP（​​会话发起协议）信令 \n\n虽然 Kubernetes 1.12（Beta）中引入了对 Kubernetes 服务、Endpoint 和 NetworkPolicy 的 SCTP 支持（并在 Kubernetes 1.20 中升级为稳定版），但您仍然需要 CNI 来支持它。\n好消息：Cilium 1.13 中引入了对 SCTP（测试版）的基本支持。","lastmodified":"2025-03-26T03:48:43.163318598Z","tags":null},"/servicemesh":{"title":"servicemesh","content":"https://isovalent.com/blog/post/cilium-service-mesh/\n[What is Cilium Service Mesh? - Interview with Thomas Graf on eCHO Livestream (youtube.com)](https://www.youtube.com/watch?v=lZskwr3uXn8\u0026t=1s)\n\n\n随着分布式应用程序的引入，额外的可见性、连接性和安全性要求也随之浮现。 \n应用程序组件通过不受信任的网络跨云和本地边界进行通信，需要负载平衡来理解应用程序协议，弹性变得至关重要，并且安全性必须发展到发送者和接收者可以验证彼此身份的模型。在分布式应用程序的早期，这些需求是通过将所需的逻辑直接嵌入到应用程序中来解决的。 \n服务网格从应用程序中提取这些功能，并将它们作为基础设施的一部分提供给所有应用程序使用，因此不再需要更改每个应用程序。\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/08/822ea2af9528e4346cf083148bc9df34.png)\n\n弹性连接\n服务间通信必须能够跨越云、集群和场所等边界。通信必须具有弹性和容错能力\n\nL7流量管理\n负载平衡、速率限制和弹性必须支持 L7（HTTP、REST、gRPC、WebSocket 等）\n\n基于身份的安全\n依靠网络标识符来实现安全性已不再足够，发送和接收服务都必须能够基于身份而不是网络标识符来相互验证。\n\n可观察性和追踪\n跟踪和指标形式的可观察性对于理解、监控应用程序的稳定性、性能和可用性以及对其进行故障排除至关重要。\n\n透明度\n该功能必须以透明的方式可供应用程序使用，即无需更改应用程序代码。","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/shell-%E5%B8%B8%E7%94%A8":{"title":"移动光标","content":"\n\n# 移动光标\n-   **ctrl+a****: 移到行首（a是首字母）**\n-   **ctrl+e****: 移到行尾（end）**\n\n-   ctrl+b: 前移一个字符(backward)\n-   ctrl+f: 后移一个字符(forward)\n-   alt+b: 前移一个单词\n-   alt+f: 后移一个单词\n-   ctrl+x: 行首到当前光标替换\n\n# 编辑命令\n-   **alt+d: 删除当前光标到临近右边单词开始(delete)**\n-   **ctrl+w: 删除当前光标到临近左边单词结束(word)**\n-   **ctrl+u: 删除光标左边所有**\n-   **ctrl+k: 删除光标右边所有**\n-   **ctrl+l: 清屏**\n-   alt+.: 粘帖最后一次命令最后的参数（通常用于mkdir long-long-dir后, cd配合着alt+.）\n-   ctrl+h: 删除光标前一个字符（相当于backspace）\n-   ctrl+d: 删除光标后一个字符（相当于delete）\n-   ctrl+shift+c: 复制（相当于鼠标左键拖拽）\n-   ctrl+shift+v: 粘贴（相当于鼠标中键）\n\n# 其它\n-   ctrl+n: 下一条命令\n-   ctrl+p: 上一条命令\n-   shift+PageUp: 向上翻页\n-   shift+PageDown: 向下翻页\n-   **ctrl+r: 进入历史查找命令记录， 输入关键字。 多次按返回下一个匹配项**\n\n# Vim\n## 移动光标\n-   b: 向前移动一个单词\n-   w: 向后移动一个单词\n-   :s/foo/bar/ # 仅替换光标所在行的第一个匹配项\n-   :s/foo/bar/g # 替换光标所在行的所有匹配项\n-   **:%s/foo/bar/g** # 在整个文件中搜索替换foo\n-   :s/foo//g # 将光标当前行的foo替换为空字符串\n*(注意转移 / . 等符号)*\n## 删除\n-   dw: 从当前光标开始删除到下一个单词头\n-   de: 从当前光标开始删除到单词尾\n- :1 或者 gg 跳到第一行\n- :$ 或者 shift + g 跳到最后一行\n\n\n## shell 没有历史记录\n临时生效：export HISTSIZE=500\n永久生效：vim /etc/profile 修改HISTSIZE\nhistory 带有时间：export HISTTIMEFORMAT='%F %T'\n\n## base64 编码/解码\n- echo 'Hello world' | base64\n- echo 'SGVsbG8gd29ybGQK' | base64 --decode","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"## slice的底层机制\n切片之后共享一块空间【指针】，需要触发cap不足才会去扩容\n```go\ntype slice struct {\n\tarray unsafe.Pointer\n\tlen   int\n\tcap   int\n}\n```\n![c5af0eef31d54ffb9fc03a66b562ddac_tplv-k3u1fbpfcp-watermark.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640227393887-1a8053b4-558d-4090-8b5b-fbc737e5d5ee.png#averageHue=%23a7dd8a\u0026clientId=u35fc4f26-12ef-4\u0026from=drop\u0026id=u10b76010\u0026originHeight=313\u0026originWidth=464\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=84778\u0026status=done\u0026style=none\u0026taskId=u9aa05396-099d-42f2-bbf8-5f536e4dc4c\u0026title=)\n### 1. slice与数组的区别，为什么需要有一个cap容量\n\n- array是固定长度的数组；array的长度也是类型的部分之一；array是值类型的，赋值的操作相当于拷贝了一份\n- slice是不定长的数组，可以动态扩容。slice是引用类型，拷贝时若不触发扩容的前提下两个slice指向一片相同的内存空间。\n- 切片有大小和容量，数组只有大小的概念\n- 数组也可以进行切片，返回值是slice，改变slice时会同步修改数组内容，相当于取得这个数组的指针\n### 2. 扩容机制 - append的时候发生扩容的动作 + 内存管理\n\n- append单个元素，或者append少量的多个元素，这里的少量指double之后的容量能容纳，这样就会走以下扩容流程，不足1024，双倍扩容，超过1024的，1.25倍扩容。\n- 若是append多个元素，且double后的容量不能容纳，直接使用预估的容量。\n\n**此外，以上两个分支得到新容量后，均需要根据slice的类型size，算出新的容量所需的内存情况capmem，然后再进行capmem向上取整，得到新的所需内存，除上类型size，得到真正的最终容量,作为新的slice的容量。**\n```go\nfunc sliceCapacityExpansion() {\n\ta := make([]int, 20)\n\tb := make([]int, 42)\n\ta = append(a, b...)\n\tfmt.Println(len(a), cap(a))\n\n\te := []int32{1,2,3}\n\tfmt.Println(\"cap of e before:\",cap(e))\n\te = append(e,4)\n\tfmt.Println(\"cap of e after:\",cap(e))\n\n\tf := []int{1,2,3}\n\tfmt.Println(\"cap of f before:\",cap(f))\n\tf = append(f,4)\n\tfmt.Println(\"cap of f after:\",cap(f))\n\n\tints := []int{1, 2}\n\tints = append(ints, 3, 4, 5)\n\tfmt.Println(\"cap of this:\",cap(ints))\n}\n\n// =======================================\n// 62 64\n// cap of e before: 3\n// cap of e after: 6\n// cap of f before: 3\n// cap of f after: 6\n// cap of this: 6\n\n// 解释第三种情况，预估之后的容量应当为5 * 8 = 40，但是go的内存管理中是以span为一个管理的基本单位，因此此时会向上选择一个最近的span_size来进行保存，因此选用48,48 / 8 = 6。\n```\n```go\n// class  bytes/obj  bytes/span  objects  tail waste  max waste\n//     1          8        8192     1024           0     87.50%\n//     2         16        8192      512           0     43.75%\n//     3         24        8192      341           8     29.24%\n//     4         32        8192      256           0     21.88%\n//     5         48        8192      170          32     31.52%\n//     6         64        8192      128           0     23.44%\n//     7         80        8192      102          32     19.07%\n//     8         96        8192       85          32     15.95%\n//     9        112        8192       73          16     13.56%\n//    10        128        8192       64           0     11.72%\n//    11        144        8192       56         128     11.82%\n//    12        160        8192       51          32      9.73%\n//    13        176        8192       46          96      9.59%\n//    14        192        8192       42         128      9.25%\n//    15        208        8192       39          80      8.12%\n//    16        224        8192       36         128      8.15%\n//    17        240        8192       34          32      6.62%\n//    18        256        8192       32           0      5.86%\n//    19        288        8192       28         128     12.16%\n//    20        320        8192       25         192     11.80%\n//    21        352        8192       23          96      9.88%\n//    22        384        8192       21         128      9.51%\n//    23        416        8192       19         288     10.71%\n//    24        448        8192       18         128      8.37%\n//    25        480        8192       17          32      6.82%\n//    26        512        8192       16           0      6.05%\n//    27        576        8192       14         128     12.33%\n//    28        640        8192       12         512     15.48%\n//    29        704        8192       11         448     13.93%\n//    30        768        8192       10         512     13.94%\n//    31        896        8192        9         128     15.52%\n//    32       1024        8192        8           0     12.40%\n//    33       1152        8192        7         128     12.41%\n//    34       1280        8192        6         512     15.55%\n//    35       1408       16384       11         896     14.00%\n//    36       1536        8192        5         512     14.00%\n//    37       1792       16384        9         256     15.57%\n//    38       2048        8192        4           0     12.45%\n//    39       2304       16384        7         256     12.46%\n//    40       2688        8192        3         128     15.59%\n//    41       3072       24576        8           0     12.47%\n//    42       3200       16384        5         384      6.22%\n//    43       3456       24576        7         384      8.83%\n//    44       4096        8192        2           0     15.60%\n//    45       4864       24576        5         256     16.65%\n//    46       5376       16384        3         256     10.92%\n//    47       6144       24576        4           0     12.48%\n//    48       6528       32768        5         128      6.23%\n//    49       6784       40960        6         256      4.36%\n//    50       6912       49152        7         768      3.37%\n//    51       8192        8192        1           0     15.61%\n//    52       9472       57344        6         512     14.28%\n//    53       9728       49152        5         512      3.64%\n//    54      10240       40960        4           0      4.99%\n//    55      10880       32768        3         128      6.24%\n//    56      12288       24576        2           0     11.45%\n//    57      13568       40960        3         256      9.99%\n//    58      14336       57344        4           0      5.35%\n//    59      16384       16384        1           0     12.49%\n//    60      18432       73728        4           0     11.11%\n//    61      19072       57344        3         128      3.57%\n//    62      20480       40960        2           0      6.87%\n//    63      21760       65536        3         256      6.25%\n//    64      24576       24576        1           0     11.45%\n//    65      27264       81920        3         128     10.00%\n//    66      28672       57344        2           0      4.91%\n//    67      32768       32768        1           0     12.50%\n```\n### 3. 复制/操作时注意的问题\n共享一块空间【指针】，需要触发cap不足才会去扩容\n```go\nfunc main() {\n\tsli := []int{1,2,3,4,5,6}\n\tfmt.Println(sli)\n\tfmt.Println(SliceTest(sli))\n\tfmt.Println(sli)\n}\n\nfunc SliceTest(test []int) []int {\n\ttest[5] = 0\n\ttest = append(test, 6)\n\treturn test\n}\n\n// ==================================\n// [1 2 3 4 5 6]\n// [1 2 3 4 5 0 6] \n// [1 2 3 4 5 0]\n// 经历的过程：通过参数传递，两个slice共享内存的同一个空间，对切片中的第6个元素进行修改操作，此时仍然只有一份数据，对新slice进行append，因为参数传递时的切片的长度等于切片的容量，因此此时的操作会触发slice的扩容，因此数据会被重新拷贝一份，扩容的容量为12.\n```\n\n\n参考链接：\n\n- 终于理解了Slice扩容机制：[https://yqqy.top/golang-slice-expand-capacity/](https://yqqy.top/golang-slice-expand-capacity/)\n- Go slice扩容深度分析：[https://juejin.cn/post/6844903812331732999](https://juejin.cn/post/6844903812331732999)\n- https://juejin.cn/post/6844903812331732999\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/ss-%E5%91%BD%E4%BB%A4":{"title":"","content":"#network #tool \n\nss 命令用于显示socket状态. 他可以显示PACKET sockets, TCP sockets, UDP sockets, DCCP sockets, RAW sockets, Unix domain sockets等等统计. 它比其他工具展示等多tcp和state信息. 它是一个非常实用、快速、有效的跟踪IP连接和sockets的新工具.\n\n功能类似：netstat\n```bash\nroot@node3:~# ss -h\nUsage: ss [ OPTIONS ]\n       ss [ OPTIONS ] [ FILTER ]\n   -h, --help          this message\n   -V, --version       output version information\n   -n, --numeric       don't resolve service names\n   -r, --resolve       resolve host names\n   -a, --all           display all sockets\n   -l, --listening     display listening sockets\n   -o, --options       show timer information\n   -e, --extended      show detailed socket information\n   -m, --memory        show socket memory usage\n   -p, --processes     show process using socket\n   -i, --info          show internal TCP information\n       --tipcinfo      show internal tipc socket information\n   -s, --summary       show socket usage summary\n       --tos           show tos and priority information\n   -b, --bpf           show bpf filter socket information\n   -E, --events        continually display sockets as they are destroyed\n   -Z, --context       display process SELinux security contexts\n   -z, --contexts      display process and socket SELinux security contexts\n   -N, --net           switch to the specified network namespace name\n\n   -4, --ipv4          display only IP version 4 sockets\n   -6, --ipv6          display only IP version 6 sockets\n   -0, --packet        display PACKET sockets\n   -t, --tcp           display only TCP sockets\n   -S, --sctp          display only SCTP sockets\n   -u, --udp           display only UDP sockets\n   -d, --dccp          display only DCCP sockets\n   -w, --raw           display only RAW sockets\n   -x, --unix          display only Unix domain sockets\n       --tipc          display only TIPC sockets\n       --vsock         display only vsock sockets\n   -f, --family=FAMILY display sockets of type FAMILY\n       FAMILY := {inet|inet6|link|unix|netlink|vsock|tipc|xdp|help}\n\n   -K, --kill          forcibly close sockets, display what was closed\n   -H, --no-header     Suppress header line\n   -O, --oneline       socket's data printed on a single line\n\n   -A, --query=QUERY, --socket=QUERY\n       QUERY := {all|inet|tcp|udp|raw|unix|unix_dgram|unix_stream|unix_seqpacket|packet|netlink|vsock_stream|vsock_dgram|tipc}[,QUERY]\n\n   -D, --diag=FILE     Dump raw information about TCP sockets to FILE\n   -F, --filter=FILE   read filter information from FILE\n       FILTER := [ state STATE-FILTER ] [ EXPRESSION ]\n       STATE-FILTER := {all|connected|synchronized|bucket|big|TCP-STATES}\n         TCP-STATES := {established|syn-sent|syn-recv|fin-wait-{1,2}|time-wait|closed|close-wait|last-ack|listening|closing}\n          connected := {established|syn-sent|syn-recv|fin-wait-{1,2}|time-wait|close-wait|last-ack|closing}\n       synchronized := {established|syn-recv|fin-wait-{1,2}|time-wait|close-wait|last-ack|closing}\n             bucket := {syn-recv|time-wait}\n                big := {established|syn-sent|fin-wait-{1,2}|closed|close-wait|last-ack|listening|closing}\n```\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/ssh":{"title":"ssh","content":" \n```\n          WARNING: UNPROTECTED PRIVATE KEY FILE! \nPermissions 0777 for '/root/.ssh/id_rsa' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\nbad permissions: ignore key: /root/.ssh/id_rsa\n```\n解决办法：\n```\nchmod 600 /root/.ssh/id_rsa\n```\n\nssh -L 0.0.0.0:30880:172.30.30.2:32626 172.30.30.2 -N","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/ssh-%E9%A6%96%E6%AC%A1%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BE%93%E5%85%A5-yes":{"title":"ssh 首次连接自动化输入 yes","content":"`sshpass -p PASSWORD ssh -o StrictHostKeyChecking=no root@${ip1}'echo 1'`\n避免交互输入密码\n`sshpass -p PASSWORD scp xx xx@xxx:/xx`\n\n\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/sync%E5%BA%93":{"title":"","content":"# 类型与方法总览\n```go\ntype Cond\n    func NewCond(l Locker) *Cond\n    func (c *Cond) Broadcast()\n    func (c *Cond) Signal()\n    func (c *Cond) Wait()\ntype Locker\ntype Map\n    func (m *Map) Delete(key interface{})\n    func (m *Map) Load(key interface{}) (value interface{}, ok bool)\n    func (m *Map) LoadAndDelete(key interface{}) (value interface{}, loaded bool)\n    func (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)\n    func (m *Map) Range(f func(key, value interface{}) bool)\n    func (m *Map) Store(key, value interface{})\ntype Mutex\n    func (m *Mutex) Lock()\n    func (m *Mutex) Unlock()\ntype Once\n    func (o *Once) Do(f func())\ntype Pool\n    func (p *Pool) Get() interface{}\n    func (p *Pool) Put(x interface{})\ntype RWMutex\n    func (rw *RWMutex) Lock()\n    func (rw *RWMutex) RLock()\n    func (rw *RWMutex) RLocker() Locker\n    func (rw *RWMutex) RUnlock()\n    func (rw *RWMutex) Unlock()\ntype WaitGroup\n    func (wg *WaitGroup) Add(delta int)\n    func (wg *WaitGroup) Done()\n    func (wg *WaitGroup) Wait()\n```\n## WaitGroup实现协程间同步\nWaitGroup对象内部有一个计数器，最初从0开始，有三个方法来控制计数器的数量\n\u003e Add(n)函数：将计数器设置成n\n\u003e Done()函数：每次将计数器-1\n\u003e Wait()函数：阻塞代码的运行，直到计数器的值减为0\n\n**使用WaitGroup的注意事项：**\n\n- 计数器不能为负数\n\nAdd设置为负数，代码panic；Done也要注意不能将计数器的值设置为负\n\n- waitGroup对象不是一个引用类型，在通过函数传参时，需要使用地址\n```go\n// 使用sleep实现的一个简单的协程，主协程的等待\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main(){\n    for i := 0; i \u003c 100 ; i++{\n        go fmt.Println(i)\n    }\n    time.Sleep(time.Second)\n}\n```\n```go\n// 使用管道实现简单的协程之间的同步 -- 大材小用\nfunc main() {\n    c := make(chan bool, 100)\n    for i := 0; i \u003c 100; i++ {\n        go func(i int) {\n            fmt.Println(i)\n            c \u003c- true\n        }(i)\n    }\n\n    for i := 0; i \u003c 100; i++ {\n        \u003c-c\n    }\n}\n```\n```go\n// 使用WaitGroup实现协程间的同步\nfunc main() {\n    wg := sync.WaitGroup{}\n    wg.Add(100)\n    for i := 0; i \u003c 100; i++ {\n        go f(i, \u0026wg)\n    }\n    wg.Wait()\n}\n\n// 一定要通过指针传值，不然进程会进入死锁状态\nfunc f(i int, wg *sync.WaitGroup) { \n    defer wg.Done()\n    fmt.Println(i)\n}\n```\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/sync.Map":{"title":"","content":"![](https://cdn.nlark.com/yuque/0/2021/webp/12923798/1629363075425-b90f9c1d-e987-48d2-83d0-6ad85ba12303.webp#align=left\u0026display=inline\u0026height=768\u0026originHeight=768\u0026originWidth=1024\u0026size=0\u0026status=done\u0026style=none\u0026width=1024)\namended 为 fase，说明 dirty 为空，那直接返回 空和 false\namended 为 true，说明 dirty 中可能存在我们要找的 key。\nread.amended为true代表dirty map中含有read.map中没有的元素\n\nstore 如果 dirty为空\nread中有直接改，修改成功\nread中有但是read没有修改成功\nread 对应key的value为空，确定dirty不为空，插入到dirty中\nread 对应key的value不为空，更新entry\n\nread中没有，dirty中存在，直接修改\nread中没有，dirty中也不存在，\n判断dirty是否为空，\n为空创建你map并且拷贝read map中未删除的元素\n不为空 添加到dirty\n\n[https://www.cnblogs.com/ricklz/p/13659397.html](https://www.cnblogs.com/ricklz/p/13659397.html)\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/sync.Mutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"## 用一张图说明go中的Mutex的演变\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640229811535-bfab578a-30c8-4fe1-9e3d-df39a4078abc.png#averageHue=%23f8f5e4\u0026clientId=u878167a0-3299-4\u0026from=paste\u0026id=uf8681107\u0026originHeight=405\u0026originWidth=720\u0026originalType=url\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=163457\u0026status=done\u0026style=none\u0026taskId=u6dfbac69-9eb4-4835-a7f5-b7ab9173a67\u0026title=)\n\n1. 初期使用一个flag标记，是否有人在持有锁。\n2. 考虑goroutine的唤醒机制性能低下的问题，让申请获取锁的goroutine自旋获取锁，如果固定次数获取不到之后，继续阻塞等待.\n3. 让新来的和刚刚唤醒的goroutine继续进行自旋一段时间来获取锁\n4. 多给了新人和唤醒的goroutine机会，会导致一些goroutine一直拿不到锁，因此加入了饥饿模式\n## Mutex底层实现\n源码位置：`src/sync/mutex.go`，Mutex也是简单的实现了`Lock`和`Unlock`方法\n```go\ntype Locker interface {\n\tLock()\n\tUnlock()\n}\n\ntype Mutex struct {\n\tstate int32\n\tsema  uint32\n}\n\nconst (\n    mutexLocked = 1 \u003c\u003c iota // mutex is locked\n    mutexWoken\n    mutexStarving // 从state字段中分出一个饥饿标记\n    mutexWaiterShift = iota\n    starvationThresholdNs = 1e6    \n)\n// mutexLocked，mutexWoken，mutexStarving，mutexWaiterShift 的值分别是1，2，4，3。\n// starvationThresholdNs = 1e6 表示1ms内如果被唤醒的协程还没有抢到锁，就进入饥饿状态，可以直接获取锁。\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640230377940-01b19e38-9621-4cfc-b7f0-1b7575c21bc9.png#averageHue=%23f7f3e3\u0026clientId=u878167a0-3299-4\u0026from=paste\u0026id=u4ebc4d7f\u0026originHeight=382\u0026originWidth=720\u0026originalType=url\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=111875\u0026status=done\u0026style=none\u0026taskId=u8d206e92-9e6c-4cec-a0b6-8827cd61f95\u0026title=)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1640233521410-c9846455-cbfe-4584-be9c-ec6c726c099c.png#averageHue=%23262626\u0026clientId=u434ba801-543b-4\u0026from=paste\u0026id=ub8641ff7\u0026originHeight=237\u0026originWidth=735\u0026originalType=url\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=12851\u0026status=done\u0026style=none\u0026taskId=u1ded2d28-d2f6-4317-8be1-f37a004a59d\u0026title=)\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(\u0026m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}\n\n\nfunc (m *Mutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = m.state\n\t\trace.Release(unsafe.Pointer(m))\n\t}\n\n\t// Fast path: drop lock bit.\n\tnew := atomic.AddInt32(\u0026m.state, -mutexLocked)\n\tif new != 0 {\n\t\t// Outlined slow path to allow inlining the fast path.\n\t\t// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.\n\t\tm.unlockSlow(new)\n\t}\n}\n```\n简述一下流程：是否持有锁查看的即是state字段的最后一位，对于获取锁与释放锁都有一个快速操作，如果快速操作成功即返回，以下说明慢操作。\n\n   - 正常模式：\n      - 获取锁：当一个goroutine来申请获取锁，正常模式下，该goroutine会先进入一个自旋状态，当自旋一定次数之后仍然没有获取锁，调用runtime_SemacquireMutex阻塞到信号量上，加到信号量队列的尾部。\n      - 释放锁：设置唤醒标志，唤醒goroutine；被唤醒的goroutine会根据自己等待时间判断是否要进入饥饿模式，若为正常模式，继续上述的获取锁的流程\n   - 饥饿模式：\n      - 获取锁：唤醒时判断之前是否为饥饿模式，现在是否应该为饥饿模式，若之前为饥饿模式，只会唤醒队列头的goroutine，因此直接获取锁，之前不为饥饿模式，现在应该为饥饿模式，会切换为饥饿模式，饥饿模式下新来获取锁的goroutine不会进入自旋状态，直接阻塞在信号量的队尾。\n      - 释放锁：释放锁，唤醒队列头的goroutine。\n## 注意事项\n**Unlock 调用无限制问题**\nMutex 本身并没有包含当前 goroutine 的任何信息，因此 Unlock 方法能被任意的 goroutine 调用。这样会导致一个问题，如果某个 goroutine 不按套路来，随便调用 Unlock 函数，让标志位 key 清零，那么数据竞争的问题还是会出现。\nMutex 的这个特性一直保留至今。因此使用 Mutex 的时候，一定要遵循 “**谁加锁，谁解锁**” 的原则。\n\n**多次执行Unlock()会panic**\n仔细想想Unlock的逻辑就可以理解，这实际上很难做到。Unlock过程分为将Locked置为0，然后判断Waiter值，如果值\u003e0，则释放信号量。如果多次Unlock()，那么可能每次都释放一个信号量，这样会唤醒多个协程，多个协程唤醒后会继续在Lock()的逻辑里抢锁，势必会增加Lock()实现的复杂度，也会引起不必要的协程切换。\n\n参考链接：\n\n- [https://www.kancloud.cn/luoyoub/go-note/1927194](https://www.kancloud.cn/luoyoub/go-note/1927194)\n- [https://zhuanlan.zhihu.com/p/339981535](https://zhuanlan.zhihu.com/p/339981535)\n- [https://segmentfault.com/a/1190000023874384](https://segmentfault.com/a/1190000023874384)\n","lastmodified":"2025-03-26T03:48:44.140315156Z","tags":null},"/sync.RWMutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"## 底层实现\n```go\ntype RWMutex struct {\n\tw           Mutex  // held if there are pending writers\n\twriterSem   uint32 // semaphore for writers to wait for completing readers\n\treaderSem   uint32 // semaphore for readers to wait for completing writers\n\treaderCount int32  // number of pending readers\n\treaderWait  int32  // number of departing readers\n}\n\nconst rwmutexMaxReaders = 1 \u003c\u003c 30\n\n\nfunc (rw *RWMutex) RLock() {...}\nfunc (rw *RWMutex) RUnlock() {...}\nfunc (rw *RWMutex) Lock() {...}\nfunc (rw *RWMutex) Unlock() {...}\nfunc (rw *RWMutex) RLocker() Locker {...}\n```\n\n- 读上锁的流程：readerCounter加1，判断返回值是否小于0，若小于0表示当前有写锁在等待或处理中，因此阻塞到readerSem信号量上。\n- 读解锁的流程：readerCounter减1，判断返回值是否小于0，若小于0表示有写锁在等待，将readerWait减1，若结果为0唤醒阻塞到writerSem的写goroutine。\n- 写上锁的流程：\n   - w上锁，与其他的写者进行互斥，将readerCounter取允许读最大值的补数的相反数，用于标记此时有写锁来；\n   - 若之前readerCounter不为0，readerWait加之前readerCounter，若结果也不为0，将写goroutine阻塞到writerSem信号量上\n- 写解锁的流程：\n   - 解除标志，将readerCounter还原，唤醒所有的阻塞到readerSem上面的读者，释放w锁，写写锁。\n\n两个数字，readerCounter小于0，表示有写者来，读者进行阻塞，同时把之前的读者的数量放到readerWait，当readerWait释放锁，减为0时唤醒写者。\n\n## 注意事项\n\n1. **不可复制**\n\n显然，RWMutex 的定义里面，有各种计数器，信号量，以及 Mutex，如果直接复制的话，这些状态都会被复制。如果有需要，只能再声明一个新的 RWMutex 变量了。\n\n2. **不可重入**\n\n和 Mutex 一样，RWMutex 定义中仍然没有记录协程相关的信息，所以单纯依赖 RWMutex，无法区分出当前是那个进程持有锁，当然也就不能重入了。\n但是因为 RWMutex 中有读写两种场景，所以不可重入的场景还可以细分一下。\n\n- **场景1**：\n\n写进程调用 Lock 函数之后，又调用了一次 Lock 操作，结果第二个 Lock 只能等第一个 Lock 释放锁才能进行，而第一个 Lock 也在等第二个 Lock 完成才能进行下一步，这就形成了死锁。这个其实就是互斥锁 Mutex 的重入问题。\n\n- **场景2**：\n\n进程中同时包含读写操作，导致形成死锁。比如进程A先读数据，加 RLock，读的过程中，执行了 Lock 操作。这个时候，Lock 会等待 RLock，而 RLock 会等待 Lock，又形成了死锁。\n\n- **场景3**：\n\n递归读导致死锁。比如进程A递归读，进程B写，假设A进程衍生出了A1，然后在A执行的过程中（加读锁），B执行（加写锁），A1则进入阻塞状态。这个时候形成了B等待A，A等待A1，A1等待B的死循环\n\n3. **释放未加锁的 RWMutex**\n\n无论是读锁，还是写锁，加锁和解锁操作都要成对出现。Unlock 和 RUnlock 多余的调用会导致 panic。所以，在使用读写锁的时候，一定要注意，不遗漏不多余。\n\n参考链接：\n\n- [https://zhuanlan.zhihu.com/p/349590549](https://zhuanlan.zhihu.com/p/349590549)\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/sync.WaitGroup%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"### WaitGroup底层实现原理\n```go\ntype WaitGroup struct {\n\tnoCopy noCopy\n\tstate1 [3]uint32\n}\n\n// noCopy 是 golang 源码中检测禁止拷贝的技术，在不考虑内存对齐和并发的因素下可以将其看为如下结构\ntype WaitGroup struct {\n\tcounter int32\n\twaiter  uint32\n\tsema    uint32\n}\n// count：代表目前尚未完成的个数\n// waiter：代表目前已经调用waitGroup.Wait()的goroutine个数\n// sema：代表golang runtime内部的信号量的实现，\n// \t· runtime_Semacquire表示增加一个信号量，并挂起该goroutine；\n// \t· runtime_Semrelease表示减少一个信号量，并唤醒sema上一个正在等待的goroutinue\n\n// 当调用WaitGroup.Add(n)时，counter将自增 counter += n\n// 当调用WaitGroup.Wait()时，waiter将waiter++，同时调用runtime_Semacquire增加一个信号量，并挂起该goroutine\n// 当调用WaitGroup.Done()时，counter将自减 count--，如果counter == 0 说明WaitGroup的等待过程结束了，调用runtime_Semrelease，唤醒WaitGroup.Wait的goroutinue\n\n\nfunc (wg *WaitGroup) Add(delta int) {...}\nfunc (wg *WaitGroup) Done() {...}\nfunc (wg *WaitGroup) Wait() {...}\n```\n\n- ADD操作：将counter加delta，如果counter\u003e0或者waiter==0直接返回，否则唤醒seam上面的waiter\n- Done操作：执行ADD操作，增加-1\n- Wait操作：获取waiter与counter，当count == 0直接返回，当counter 不为0时，waiter加1，阻塞到sema信号量上。\n\nWaitGroup的counter 和 waiter 在改变时需要保证并发安全。为了不使用锁，此处有一个巧妙的设计，利用了内存对齐以及原子操作实现了counter 和 waiter 在改变时的并发安全\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1639490121052-94af6d6a-5a19-4c80-b100-e604f29d9362.png#averageHue=%23f9f5ec\u0026clientId=u0c8083e8-836c-4\u0026from=paste\u0026id=u1f185b7f\u0026originHeight=329\u0026originWidth=491\u0026originalType=url\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=22642\u0026status=done\u0026style=none\u0026taskId=u9c244abc-6610-4e87-827a-24ae3f223f5\u0026title=)\n如果\t变量是64位对齐，则变量的起始地址是8的倍数，如果变量是32位对齐，则变量的起始地址是4的倍数。\n\n- 在64位对齐时，state1中的元素第一个为waiter，第二个为counter，第三个为sema\n- 在32位对齐时，state1中的元素第一个为sema，第二个为waiter，第三个为counter\n\n巧妙的设计，只不过是改变了sema的位置顺序，就既可以保证counter+waiter一定会64位对齐，可以实现无锁的WaitGroup\n```go\n// 判断当前变量是 32 位对齐还是 64 位对齐的方法:\nuintptr(unsafe.Pointer(\u0026x)) % unsafe.Alignof(x) == 0\nuintptr(unsafe.Pointer(\u0026wg.state1))%8 == 0 // 64位\n```\n参考：\n\n- [https://www.cyhone.com/articles/golang-waitgroup/](https://www.cyhone.com/articles/golang-waitgroup/)\n","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/sync.map-%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0":{"title":"","content":"## sync.map底层实现\nsync.map 采用读写分离技术，用空间换时间\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12923798/1638966436619-01803601-196f-48d5-93c6-30c6876e57de.png#averageHue=%23f2f2f1\u0026clientId=u943951e7-ebf0-4\u0026from=paste\u0026height=77\u0026id=uda7dd149\u0026originHeight=77\u0026originWidth=298\u0026originalType=binary\u0026ratio=1\u0026rotation=0\u0026showTitle=false\u0026size=1843\u0026status=done\u0026style=none\u0026taskId=ufd4f53f6-332f-43ff-9689-6694b8c3d23\u0026title=\u0026width=298)\n```go\ntype Map struct {\n\tmu Mutex\n\tread atomic.Value // readOnly\n\tdirty map[interface{}]*entry\n\tmisses int\n}\n\ntype readOnly struct {\n\tm       map[interface{}]*entry\n\tamended bool // true if the dirty map contains some key not in m.\n}\n\nvar expunged = unsafe.Pointer(new(interface{}))\n\ntype entry struct {\n\tp unsafe.Pointer // *interface{}\n}\n\n\n\nfunc (m *Map) Load(key interface{}) (value interface{}, ok bool) {...}\nfunc (m *Map) Store(key, value interface{}) {...}\nfunc (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool) {...}\nfunc (m *Map) LoadAndDelete(key interface{}) (value interface{}, loaded bool) {...}\nfunc (m *Map) Delete(key interface{}) {...}\nfunc (m *Map) Range(f func(key, value interface{}) bool) {...}\n```\n\n\n","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/sync_atomic":{"title":"","content":"```go\nfunc AddInt32(addr *int32, delta int32) (new int32)\nfunc AddInt64(addr *int64, delta int64) (new int64)\nfunc AddUint32(addr *uint32, delta uint32) (new uint32)\nfunc AddUint64(addr *uint64, delta uint64) (new uint64)\nfunc AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\nfunc CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\nfunc CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\nfunc CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\nfunc CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\nfunc CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\nfunc CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\nfunc LoadInt32(addr *int32) (val int32)\nfunc LoadInt64(addr *int64) (val int64)\nfunc LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\nfunc LoadUint32(addr *uint32) (val uint32)\nfunc LoadUint64(addr *uint64) (val uint64)\nfunc LoadUintptr(addr *uintptr) (val uintptr)\nfunc StoreInt32(addr *int32, val int32)\nfunc StoreInt64(addr *int64, val int64)\nfunc StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\nfunc StoreUint32(addr *uint32, val uint32)\nfunc StoreUint64(addr *uint64, val uint64)\nfunc StoreUintptr(addr *uintptr, val uintptr)\nfunc SwapInt32(addr *int32, new int32) (old int32)\nfunc SwapInt64(addr *int64, new int64) (old int64)\nfunc SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\nfunc SwapUint32(addr *uint32, new uint32) (old uint32)\nfunc SwapUint64(addr *uint64, new uint64) (old uint64)\nfunc SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\ntype Value\n    func (v *Value) Load() (x interface{})\n    func (v *Value) Store(x interface{})\n```\n\n","lastmodified":"2025-03-26T03:48:43.202318461Z","tags":null},"/tc":{"title":"tc","content":"\n\ntc ebpf 的 direct-action (da) 模式：(https://arthurchiao.art/blog/understanding-tc-da-mode-zh/)\n\n![image.png](https://images.cherryfloris.eu.org/ryken/2024/09/015f7db5b32673eb8dfff56301f3b8a4.png)\n\n用作 action 时，eBPF 程序的返回值 提示系统接下来对这个包执行什么动作，下面的内容来自 `tc-bpf(8)`：\n- `TC_ACT_OK (0)`：结束处理过程，放行（allows the packet to proceed）。\n- `TC_ACT_SHOT (2)`：==丢弃包==。\n- `TC_ACT_UNSPEC (-1)`：使用 tc 的默认 action（与 classifier/filter 返回 `-1` 时类似）。\n- `TC_ACT_PIPE (3)`：如果有下一个 action，执行之。\n- `TC_ACT_RECLASSIFY (1)`：从头开始，重新执行分类过程。\n- 其他值：定义在 [include/uapi/linux/pkt_cls.h](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/pkt_cls.h)。 [BPF and XDP Reference Guide from Cilium](http://docs.cilium.io/en/latest/bpf/#tc-traffic-control) 有进一步介绍。\n- 没有定义在以上头文件中的值，属于未定义返回值（unspecified return codes）。","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/tc-tbf":{"title":"","content":"tbf - token bucket Filter 令牌桶过滤器\n\ntbf  sfq \n无类算法\n流量控制 TBF\n队列控制 SFQ  随机公平队列\n\n分类算法：PRIO/CBQ/HTB\n对多种数据流区别对待\n- PRIO：分类优先算法 (从左至右优先发包), 队列规定并不进行整形，它仅仅根据配置的过滤器把流量进一步细分\n- CBQ：工作机制是确认链路的闲置时间足够长，以达到降低链路实际带宽的目的\n- HTB：分层的令牌桶一个分类的令牌桶过滤器\n\nlinux 流量控制：\n- 队列控制 - Qos：常见SFQ  PRIO\n- 流量控制/带宽控制：队列的排队整形，一般为 TBF  HTB\n\nlinux 流量控制算法：\n- 无类控制算法：用于树叶级无分支的队列，如 SFQ\n- 分类控制算法：用于多分支的队列，如PRIO  TBF  HTB\n\n\n时延\n装 k8s 之后，时延变高\ncalico veth 时延变高","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/tcpdump":{"title":"","content":"\ntcpdump -i any -w mycap.pacp","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/termshark":{"title":"","content":"#wireshark  #tcpdump #termshark\n\n安装：[Releases · gcla/termshark (github.com)](https://github.com/gcla/termshark/releases)\n\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/todo":{"title":"todo","content":"### 1. 编译 ebpf - 调试\n\n#### 遇到的问题\u0026解决\n\n**问题：**\nmake build 编译各个二进制，编译 bpf 会报错，相关类型转换的错误\n同时运行 daemon cilium-agent 失败，无法编译 bpf 程序\n\n```bash\nerror: implicit conversion loses integer precision: 'const __u64' (aka 'const unsigned long long') to '__u32' (aka 'unsigned int') [-Werror,-Wshorten-64-to-32]，\n```\n\n去掉编译中的参数 -Werror 后，编译成功，使用 tc filter add 到网卡上时提示：\n```bash\ntc filter add dev lxcb0593b277315 ingress bpf da obj test.o sec tc\nlibbpf: BTF is required, but is missing or corrupted.\nERROR: opening BPF object file failed\nUnable to load program\n```\n\n注释掉所有的 lib/xxx.h 之后重新编译，便可以 tc filter add 成功\n\n**解决：**\n需要使用下面的 clang 以及 llvm 进行编译\nhttps://github.com/llvm/llvm-project.git\n\n```bash\nclang version 17.0.6 (https://github.com/llvm/llvm-project.git 6009708b4367171ccdbf4b5905cb6a803753fe18)\nTarget: unknown\nThread model: posix\nInstalledDir: /usr/local/bin\n```\n\n\n【注】：\n- 镜像中存放 bpf 源代码路径: /var/lib/cilium/bpf/ - （类似 make install 后的路径）\n- 编译后的存放路径为：/run/cilium/state - /var/run/cilium/state 软连接\n\n\n#### 正常安装\n\n- make kind - 安装一个 kind 集群\n- make kind-image - 构建本地镜像并将需要的本地镜像拷贝到集群中\n- make kind-install-cilium - 使用 cilium-cli 安装 cilium\n- make kind-down - 删除 kind 集群\n\n#### 调试安装\n\n- make kind-debug - 安装一个 kind 集群 + 构建带有调试信息的镜像并拷贝到集群中 + 使用cilium-cli 安装 cilium\n\n- make kind-debug-agent - 安装一个 kind 集群 + 构建带有调试信息的镜像(只有agent)并拷贝到集群中 + 使用cilium-cli 安装 cilium\n\n\n### 2. bpf maps\n\n容器中 bpf fs 路径为：/sys/fs/bpf\n挂载的主机目录一样为：/sys/fs/bpf\n\n```bash\n/sys/fs/bpf\n|-- cilium\n|   |-- devices\n|   |   |-- cilium_host\n|   |   |   `-- links\n|   |   |-- cilium_net\n|   |   |   `-- links\n|   |   `-- eth0\n|   |       `-- links\n|   `-- endpoints\n|       |-- 806\n|       |   `-- links\n|       `-- 969\n|           `-- links\n`-- tc\n    `-- globals\n        |-- cilium_auth_map\n        |-- cilium_call_policy\n        |-- cilium_calls_00806\n        |-- cilium_calls_00969\n        |-- cilium_calls_hostns_00518\n        |-- cilium_calls_netdev_00004\n        |-- cilium_calls_netdev_00053\n        |-- cilium_ct4_global\n        |-- cilium_ct_any4_global\n        |-- cilium_events\n        |-- cilium_ipcache\n        |-- cilium_ipv4_frag_datagrams\n\t        |-- cilium_l2_responder_v4\n        |-- cilium_lb4_backends_v3\n        |-- cilium_lb4_reverse_nat\n        |-- cilium_lb4_services_v2\n        |-- cilium_lxc\n        |-- cilium_metrics\n        |-- cilium_node_map\n        |-- cilium_node_map_v2\n        |-- cilium_policy_00518\n        |-- cilium_policy_00806\n        |-- cilium_policy_00969\n        |-- cilium_ratelimit\n        |-- cilium_runtime_config\n        `-- cilium_signals\n```\n\nhttps://docs.cilium.io/en/stable/network/ebpf/maps/\n\n```bash\ncilium bpf endpoint list\nIP ADDRESS     LOCAL ENDPOINT INFO\n172.18.0.7:0   (localhost)                                                                                      \n10.0.1.146:0   (localhost)                                                                                      \n10.0.1.69:0    id=969   sec_id=5860  flags=0x0000 ifindex=17  mac=72:AB:DB:01:4D:53 nodemac=36:88:15:A2:E1:68   \n10.0.1.200:0   id=806   sec_id=4     flags=0x0000 ifindex=7   mac=CA:AC:CD:C7:79:E9 nodemac=66:CA:84:93:B3:D3   \n```\n\n相关命令：\n```bash\ncilium-dbg map list --verbose\ncilium-dbg map events cilium_lxc -o json\n\nUsage: bpftool map { show | list }   [MAP]\n       bpftool map create     FILE type TYPE key KEY_SIZE value VALUE_SIZE \\\n                                  entries MAX_ENTRIES name NAME [flags FLAGS] \\\n                                  [inner_map MAP] [offload_dev NAME]\n       bpftool map dump       MAP\n       bpftool map update     MAP [key DATA] [value VALUE] [UPDATE_FLAGS]\n       bpftool map lookup     MAP [key DATA]\n       bpftool map getnext    MAP [key DATA]\n       bpftool map delete     MAP  key DATA\n       bpftool map pin        MAP  FILE\n       bpftool map event_pipe MAP [cpu N index M]\n       bpftool map peek       MAP\n       bpftool map push       MAP value VALUE\n       bpftool map pop        MAP\n       bpftool map enqueue    MAP value VALUE\n       bpftool map dequeue    MAP\n       bpftool map freeze     MAP\n       bpftool map help\n\n       MAP := { id MAP_ID | pinned FILE | name MAP_NAME }\n       DATA := { [hex] BYTES }\n       PROG := { id PROG_ID | pinned FILE | tag PROG_TAG | name PROG_NAME }\n       VALUE := { DATA | MAP | PROG }\n       UPDATE_FLAGS := { any | exist | noexist }\n       TYPE := { hash | array | prog_array | perf_event_array | percpu_hash |\n                 percpu_array | stack_trace | cgroup_array | lru_hash |\n                 lru_percpu_hash | lpm_trie | array_of_maps | hash_of_maps |\n                 devmap | devmap_hash | sockmap | cpumap | xskmap | sockhash |\n                 cgroup_storage | reuseport_sockarray | percpu_cgroup_storage |\n                 queue | stack | sk_storage | struct_ops | ringbuf | inode_storage |\n                 task_storage | bloom_filter | user_ringbuf | cgrp_storage | arena }\n       OPTIONS := { {-j|--json} [{-p|--pretty}] | {-d|--debug} |\n                    {-f|--bpffs} | {-n|--nomount} }\n```\n\n\n- CALLS_MAP\n\t类型：BPF_MAP_TYPE_PROG_ARRAY\n\t- cilium_calls_{epID}\n\t- hostns_{epID}\n\n\n\n[[1. ebpf map 类型 | 更多 ebpf map 相关]]\n### 3. monitor 实现原理\n\n\n### 4.尾调\n\n```c\n#ifndef __section_tail\n# define __section_tail(ID, KEY)\t__section(__stringify(ID) \"/\" __stringify(KEY))\n#endif\n\n#define CILIUM_MAP_CALLS    2\n\nstruct bpf_elf_map __section_maps CALLS_MAP = {\n\t.type\t\t= BPF_MAP_TYPE_PROG_ARRAY,\n\t.id\t\t= CILIUM_MAP_CALLS,\n\t.size_key\t= sizeof(__u32),\n\t.size_value\t= sizeof(__u32),\n\t.pinning\t= CILIUM_PIN_REPLACE,\n\t.max_elem\t= CILIUM_CALL_SIZE,\n};\n\n__section_tail(CILIUM_MAP_CALLS, CILIUM_CALL_IPV4_FROM_LXC)\nint tail_handle_ipv4(struct __ctx_buff *ctx)\n{\n\t... ...\n}\n```\n\n```bash\n#define CILIUM_CALL_DROP_NOTIFY\t\t\t1\n#define CILIUM_CALL_ERROR_NOTIFY\t\t2\n/*\n * A gap in the macro numbering sequence was created by #24921.\n * It can be reused for a new macro in the future, but caution is needed when\n * backporting changes as it may conflict with older versions of the code.\n */\n#define CILIUM_CALL_HANDLE_ICMP6_NS\t\t4\n#define CILIUM_CALL_SEND_ICMP6_TIME_EXCEEDED\t5\n#define CILIUM_CALL_ARP\t\t\t\t6\n#define CILIUM_CALL_IPV4_FROM_LXC\t\t7\n#define CILIUM_CALL_IPV4_FROM_NETDEV\t\tCILIUM_CALL_IPV4_FROM_LXC\n#define CILIUM_CALL_IPV4_FROM_OVERLAY\t\tCILIUM_CALL_IPV4_FROM_LXC\n#define CILIUM_CALL_IPV46_RFC8215\t\t8\n#define CILIUM_CALL_IPV64_RFC8215\t\t9\n#define CILIUM_CALL_IPV6_FROM_LXC\t\t10\n#define CILIUM_CALL_IPV6_FROM_NETDEV\t\tCILIUM_CALL_IPV6_FROM_LXC\n#define CILIUM_CALL_IPV6_FROM_OVERLAY\t\tCILIUM_CALL_IPV6_FROM_LXC\n#define CILIUM_CALL_IPV4_TO_LXC_POLICY_ONLY\t11\n#define CILIUM_CALL_IPV4_TO_HOST_POLICY_ONLY\tCILIUM_CALL_IPV4_TO_LXC_POLICY_ONLY\n#define CILIUM_CALL_IPV6_TO_LXC_POLICY_ONLY\t12\n#define CILIUM_CALL_IPV6_TO_HOST_POLICY_ONLY\tCILIUM_CALL_IPV6_TO_LXC_POLICY_ONLY\n#define CILIUM_CALL_IPV4_TO_ENDPOINT\t\t13\n#define CILIUM_CALL_IPV6_TO_ENDPOINT\t\t14\n#define CILIUM_CALL_IPV4_NODEPORT_NAT_EGRESS\t15\n#define CILIUM_CALL_IPV6_NODEPORT_NAT_EGRESS\t16\n#define CILIUM_CALL_IPV4_NODEPORT_REVNAT\t17\n#define CILIUM_CALL_IPV6_NODEPORT_REVNAT\t18\n#define CILIUM_CALL_IPV4_NODEPORT_NAT_FWD\t19\n#define CILIUM_CALL_IPV4_NODEPORT_DSR\t\t20\n#define CILIUM_CALL_IPV6_NODEPORT_DSR\t\t21\n#define CILIUM_CALL_IPV4_FROM_HOST\t\t22\n#define CILIUM_CALL_IPV6_FROM_HOST\t\t23\n#define CILIUM_CALL_IPV6_NODEPORT_NAT_FWD\t24\n#define CILIUM_CALL_IPV4_FROM_LXC_CONT\t\t25\n#define CILIUM_CALL_IPV6_FROM_LXC_CONT\t\t26\n#define CILIUM_CALL_IPV4_CT_INGRESS\t\t27\n#define CILIUM_CALL_IPV4_CT_INGRESS_POLICY_ONLY\t28\n#define CILIUM_CALL_IPV4_CT_EGRESS\t\t29\n#define CILIUM_CALL_IPV6_CT_INGRESS\t\t30\n#define CILIUM_CALL_IPV6_CT_INGRESS_POLICY_ONLY\t31\n#define CILIUM_CALL_IPV6_CT_EGRESS\t\t32\n#define CILIUM_CALL_SRV6_ENCAP\t\t\t33\n#define CILIUM_CALL_SRV6_DECAP\t\t\t34\n/* Unused CILIUM_CALL_SRV6_REPLY\t\t35 */\n#define CILIUM_CALL_IPV4_NODEPORT_NAT_INGRESS\t36\n#define CILIUM_CALL_IPV6_NODEPORT_NAT_INGRESS\t37\n#define CILIUM_CALL_IPV4_NODEPORT_SNAT_FWD\t38\n#define CILIUM_CALL_IPV6_NODEPORT_SNAT_FWD\t39\n/* Unused CILIUM_CALL_IPV4_NODEPORT_DSR_INGRESS\t40\n * Unused CILIUM_CALL_IPV6_NODEPORT_DSR_INGRESS\t41\n */\n#define CILIUM_CALL_IPV4_INTER_CLUSTER_REVSNAT\t42\n#define CILIUM_CALL_IPV4_CONT_FROM_HOST\t\t43\n#define CILIUM_CALL_IPV4_CONT_FROM_NETDEV\t44\n#define CILIUM_CALL_IPV6_CONT_FROM_HOST\t\t45\n#define CILIUM_CALL_IPV6_CONT_FROM_NETDEV\t46\n#define CILIUM_CALL_IPV4_NO_SERVICE\t\t47\n#define CILIUM_CALL_IPV6_NO_SERVICE\t\t48\n#define CILIUM_CALL_MULTICAST_EP_DELIVERY       49\n#define CILIUM_CALL_SIZE\t\t\t50\n\n```\n\n\n### 5. conntrack 实现\n\n调整 conntrack 大小的方式：\n```bash\nsysctl -w net.netfilter.nf_conntrack_max=1000000  \necho \"net.netfilter.nf_conntrack_max=1000000\" \u003e\u003e /etc/sysctl.conf\n```\n\n\n\ncilium map list 没有显示 cilium_ct/cilium_call 相关的\n\ncilium ct - BPF_MAP_TYPE_LRU_HASH\n\n\n","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/typha-%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88":{"title":"typha 的测试方案","content":"### Typha 引入前后性能对比测试方案：\n\n### 测试目标：\n\n对比引入 Typha 前后 Calico 在大规模 Kubernetes 集群中的性能表现，特别强调 Typha 引入后解决的问题，即减少每个节点对数据存储的直接访问以增加规模。\n\n### 测试环境：\n\n- 大型 Kubernetes 集群\n- Calico 未使用 Typha 的情况\n- Calico 使用 Typha 的情况\n\n### 测试方案：\n\n1. 开启 kubernetes 审计。\n2. 记录引入 Typha 前后，calico 访问 kubernetes 次数，同时记录 kubernetes apiserver 负载情况\n\n### 测试步骤：\n1. 开启 kubernetes 审计\n- 定义审计规则\n```yaml\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n  - level: RequestResponse\n    users:\n    - system:serviceaccount:kube-system:calico-node\n```\n- 编辑 apiserver\n```yaml\nspec:\n  containers:\n  - command:\n    - kube-apiserver\n    - --audit-log-maxage=30\n    - --audit-log-maxsize=200\n    - --audit-log-path=/var/log/calico/audit/kube-audit.log\n    - --audit-policy-file=/etc/ssl/certs/auditpolicy.yaml\n    volumeMounts:\n    - mountPath: /var/log/calico/audit\n      name: audit-logs\n  volumes:\n  - hostPath:\n      path: /var/log/calico/audit\n      type: DirectoryOrCreate\n    name: audit-logs\n```\n对应的审计日志会存放在 /var/log/calico/audit/kube-audit.log 中。\n\n- 收集刚启动时的情况以及一段时间之后的情况，使用 `jq '. | select(.user.username==\"system:serviceaccount:kube-system:calico-node\")' /var/log/calico/audit/*.log | jq -r '[.objectRef.resource,.verb,.level][-3:] | @csv' | sort | uniq -c | sort -b -n`来直观观察收集情况。\n\u003e Tips：\n\u003e 1. 开启审计会重启 apiserver\n\u003e 2. 为了使数据同一，在开启 typha 时，应当备份之前审计日志，并开始重新记录审计写入到新日志文件，并重启 apiserver\n\n2. 收集审计的同时观察 apiserver 负载(选做)\napiserver 负载受其他多种因素影响，最后的统计结果只能作为参考，无法直接反映本次测试目的。\n- 获取 apiserver 进程 id\n`ps -elf | grep apiserver`\n- 统计 cpu 以及内存数据\n`pidstat -u -p 716349 2 \u003e cpu_usage.log`\n`pidstat -r -p 716349 2 \u003e mem_usage.log`\n- 绘制折线图\n将最后的收集结果使用 python 工具绘制成折线图。该工具需要在有 ui 的机器上运行，且会依赖 matplotlib，运行前可以使用 `pip install matplotlib` 进行安装依赖。\n将统计的 cpu、mem 数据与 main.py 放置在同一文件夹，python main.py 运行\n\n### 测试指标和分析：\n\n- **节点对数据存储的直接访问次数：** 比较未使用 Typha 时每个节点直接与数据存储的访问次数和引入 Typha 后的访问次数。\n- **直接访问次数减少的百分比：** 计算 Typha 引入后直接访问次数相较未使用 Typha 减少了多少百分比。这突出了 Typha 如何减少了每个节点对数据存储的访问压力。\n- **apiserver负载指标：** 对比 apiserver 内存和CPU 使用量，观察 Typha 是否降低了其负载。\n\n### 数据收集和分析：\n\n- 对比未使用 Typha 时每个节点对数据存储的实际访问次数，以及 Typha 启用后的访问次数。\n- 计算 Typha 带来的直接访问次数减少百分比，并通过可视化图表或数据汇总来突出 Typha 减轻了每个节点对数据存储的压力。\n\n### 结论：\n\n- 强调 Typha 如何减少了每个节点对数据存储的直接访问，从而提高了整个系统的扩展性和规模化能力。\n- 提供百分比数据以及直观的图表，以明确地展示 Typha 带来的改进，特别是在减少节点对数据存储的访问压力方面。\n\n### 注意事项：\n\n- 保持测试环境的稳定性和一致性。\n- 多次运行测试，以获得准确的平均值和稳定性。\n- 测试过程中记录系统日志，以便分析可能出现的问题或异常。\n\n这个测试方案将允许您以明确的方式展示 Typha 如何减少每个节点对数据存储的直接访问，从而增加整个系统的规模化能力。\n\n### 补充\n设置 FELIX_TYPHAK8SSERVICENAME 来让calico-node启动、关闭 typha。安装 typha 还需要其他步骤。此处 typha 已经安装，故略过。\n```yaml\n            # Typha support: controlled by the ConfigMap.\n            - name: FELIX_TYPHAK8SSERVICENAME\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: typha_service_name\n```\n![企业微信截图_1698286786121.png](https://images.cherryfloris.eu.org/ryken/2023/11/ece61a5d90d4e526d1feaf92c16ae750.png)\n\n\nPython 工具\n```python\nimport matplotlib.pyplot as plt\n\ndef plot_graph(log_file, label):\n    with open(log_file, 'r') as f:\n        lines = f.readlines()\n\n    timestamps = []\n    values = []\n\n    # Skip the first line (header)\n    for line in lines[3:-2]:\n        parts = line.split()\n        if len(parts) \u003e= 9:  # Ensure that the line has at least 9 columns\n            timestamps.append(parts[0])\n            values.append(float(parts[7]))  # Adjust the index based on the column you want to plot\n\n    plt.plot(timestamps, values, label=label)\n    plt.xlabel('Timestamp')\n    plt.ylabel('Value')  # You may want to adjust the label based on the column you're plotting\n    plt.title('Process Resource Usage Over Time')\n    plt.legend()\n    plt.show()\n\nplot_graph('cpu_usage.log', 'CPU Usage (%)')\nplot_graph('mem_usage.log', 'Memory Usage (KB)')\n```\n\n参考链接：\n- [Why use Typha in your Kubernetes Calico Deployments? | by Bikram Gupta | Medium](https://medium.com/@bikramgupta/why-use-typha-in-your-kubernetes-calico-deployments-5c0ca4da30dd)","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/typha-%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88-old":{"title":"typha 的测试方案","content":"### Typha 引入前后性能对比测试方案：\n\n### 测试目标：\n\n对比引入 Typha 前后 Calico 在大规模 Kubernetes 集群中的性能表现，特别强调 Typha 引入后解决的问题，即减少每个节点对数据存储的直接访问以增加规模。\n\n### 测试环境：\n\n- 大型 Kubernetes 集群\n- Calico 未使用 Typha 的情况（基准测试）\n- Calico 使用 Typha 的情况\n\n### 测试方案：\n\n1. **基准测试（未启用 Typha）：**\n    \n    - 部署一个大规模 Kubernetes 集群，并使用默认的 Calico 配置（未启用 Typha）。\n    - 在集群中部署应用程序，例如一组简单的微服务。\n    - 运行压力测试或模拟真实负载，同时记录每个节点对数据存储的直接访问次数（API 请求、数据拉取等）。\n    - 收集并记录在负载下的网络延迟、吞吐量和节点间的通信频率。\n2. **引入 Typha 后的测试：**\n    \n    - 修改 Calico 配置，启用 Typha 组件。\n    - 重新部署相同规模的负载，确保集群适应 Typha 的配置。\n    - 重复相同的压力测试，同时记录 Typha 启用后节点对数据存储的直接访问次数。\n    - 同样，收集网络性能数据，如网络延迟和吞吐量。\n\n### 测试指标和分析：\n\n- **节点对数据存储的直接访问次数：** 比较未使用 Typha 时每个节点直接与数据存储的访问次数和引入 Typha 后的访问次数。\n- **直接访问次数减少的百分比：** 计算 Typha 引入后直接访问次数相较未使用 Typha 减少了多少百分比。这突出了 Typha 如何减少了每个节点对数据存储的访问压力。\n- **网络性能指标：** 对比网络延迟和吞吐量，观察在负载增加时 Typha 是否改善了网络性能。\n\n\u003e 光大的 calico 使用 kubernetes 作为数据存储，因此可以通过检测 apiserver 的监控来记录数据，并进行比较。\n\n### 数据收集和分析：\n\n- 对比未使用 Typha 时每个节点对数据存储的实际访问次数，以及 Typha 启用后的访问次数。\n- 计算 Typha 带来的直接访问次数减少百分比，并通过可视化图表或数据汇总来突出 Typha 减轻了每个节点对数据存储的压力。\n\n### 结论：\n\n- 强调 Typha 如何减少了每个节点对数据存储的直接访问，从而提高了整个系统的扩展性和规模化能力。\n- 提供百分比数据以及直观的图表，以明确地展示 Typha 带来的改进，特别是在减少节点对数据存储的访问压力方面。\n\n### 注意事项：\n\n- 保持测试环境的稳定性和一致性。\n- 多次运行测试，以获得准确的平均值和稳定性。\n- 测试过程中记录系统日志，以便分析可能出现的问题或异常。\n\n这个测试方案将允许您以明确的方式展示 Typha 如何减少每个节点对数据存储的直接访问，从而增加整个系统的规模化能力。\n\n### 补充\n设置 FELIX_TYPHAK8SSERVICENAME 来让calico-node启动、关闭 typha。安装 typha 还需要其他步骤。此处 typha 已经安装，故略过。\n```yaml\n            # Typha support: controlled by the ConfigMap.\n            - name: FELIX_TYPHAK8SSERVICENAME\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: typha_service_name\n```\n![企业微信截图_1698286786121.png](https://images.cherryfloris.eu.org/ryken/2023/11/ece61a5d90d4e526d1feaf92c16ae750.png)\n","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/typha-%E7%BB%84%E4%BB%B6":{"title":"typha 组件","content":"![image.png](https://images.cherryfloris.eu.org/ryken/2023/11/cfc23131ac612416b5428d1803238b45.png)\n\n主要任务：\n通过减少每个节点对数据存储的影响来增加规模。\n作为数据存储和 Felix 实例之间的守护进程运行。默认安装，但未配置。\nTypha 代表所有客户端（例如 Felix 和 confd）维护单个数据存储连接。它缓存数据存储状态并删除重复事件，以便将它们分散到许多侦听器。由于一个 Typha 实例可以支持数百个 Felix 实例，因此它大大减少了数据存储上的负载。而且由于 Typha 可以过滤掉与 Felix 无关的更新，因此也降低了 Felix 的 CPU 使用率。在大规模（100+节点）Kubernetes集群中，这是至关重要的，因为API服务器生成的更新数量随着节点数量的增加而变化。\n\n\n\ntypha 位于 datastore (如 kubernetes api server)和很多Felix实例之间，其主要目的是通过减少每个节点对数据存储的影响来扩大规模。\n\n如果直接使用 etcdv3 作为存储的话，可以不必使用 typha\n\n\n贾玄的需求：\n引入组件，要考虑带来的好处和坏处。 Typha 类似etcd，如果提升仅仅一点的话，还要维护类似 etcd 的功能，得不偿失。\n科学统计数据，要的带有可量化的结论。\n\n测试方案：\nhttps://www.tigera.io/blog/why-use-typha-in-your-calico-kubernetes-deployments/\n采用审计serviceaccount caliico-node 以及 calico-typha 对于 apiserver 的访问，统计两者的访问次数来进行验证；已经在客户 3(master)+6(worker) 的环境中进行了验证，验证数据如下:\n\n![企业微信截图_17028837898025.png](https://images.cherryfloris.eu.org/ryken/2023/12/0f00a9749ec3c364a82164df7f59f491.png)\n\n\n访问数量有一定减少，但是为了得出随着节点数量的增加而变化或者节点数越多优化效果越好，并计算出相应百分比的可以量化的优化，需要测试不同节点的效果；但是在客户环境下，操作受限(需要同步或者有一些业务在测试不能操作集群)，能否我们自己内部先搭建不同数量的集群来做测试，同时是否可以协调其他的测试同事来参与，天易一直被 hang 住了\n\n但是最终测试的集群的数量可能有些多（calico typha 是在 50 节点以上时建议使用），看方案是否可行。\n\n\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.141315152Z","tags":null},"/use-kube-ovn":{"title":"","content":"#kube-ovn #cni #how-to-use\n\n核心资源 subnet \n- ### 示例\n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: ovn-default\nspec:\n  namespaces:\n  - ns1\n  - ns2\n  cidrBlock: 172.30.10.0/24\n  default: true\n  disableGatewayCheck: false\n  disableInterConnection: false\n  excludeIps:\n  - 172.30.10.1\n  gateway: 172.30.10.1\n  gatewayNode: \"\"\n  gatewayType: distributed\n  logicalGateway: false\n  natOutgoing: true\n  protocol: IPv4\n  provider: ovn                                # 可以为其他的 cni 插件\n  vlan: ovn-vlan\n  vpc: ovn-cluster\n  private: true\n  allowSubnets:\n  - 10.16.0.0/16\n  - 10.18.0.0/16\n  acls:                                                 // ACL 参数信息\n  - action: reject\n    direction: to-lport\n    match: ip4.src==172.30.2.201 \u0026\u0026 ip4.dst==172.30.3.201\n    priority: 2022\n  - action: allow\n    direction: to-lport\n    match: ip4.src==172.30.2.201 \u0026\u0026 ip4.dst==172.30.3.202\n    priority: 2222\nstatus:\n  activateGateway: \"\"\n  conditions:\n  - lastTransitionTime: \"2022-03-25T05:51:33Z\"\n    lastUpdateTime: \"2022-03-25T06:25:05Z\"\n    reason: ResetLogicalSwitchAclSuccess\n    status: \"True\"\n    type: Validated\n  v4availableIPs: 232\n  v4usingIPs: 21\n  v6availableIPs: 0\n  v6usingIPs: 0\n```\n\n| 字段 | 说明 |\n|---|---|\n| protocol | 协议 IPv4/IPv6/Dual |\n| namespaces | 绑定的 namespace |\n| default | 设置为默认的 subnet，一个集群只能有一个默认的 subnet|\n| cidrBlock | subnet 的 cidr |\n| gateway | subnet 网关地址 |\n| excludeIps | 该 subnet 保留的 ip 地址 |\n| *network-policy* | |\n| private | 设置为 true，开启后表示禁止该 subnet 外的 ip 访问 |\n| allowSubnets | 开启 private 后，允许访问的子网列表 |\n| *gateway* | |\n| gatewayType | 网关类型 |\n| gatewayNode | 用作网关的节点列表 |\n| natOutgoing | 通过网关时是否需要masqueraded pod ip。为 false 时，pod ip 会直接暴露给外网 |\n| *dhcp*|  |\n| - | - |\n| *advance* | |\n| vlan | (underlay 模式)用于绑定 vlan id |\n| localGateway | (underlay 模式) 使用逻辑网关而非物理网关 |\n| externalEgressGateway | 外部出口网关的地址,出口流量通过基于策略的路由通过网关节点重定向到外部网关,与 natOutgoing 冲突 |\n| policyRoutingPriority | 策略路由优先级，当`externalEgressGateway` 设置时该字段也必须设置 |\n| policyRoutingTableID | 策略路由路由表，当`externalEgressGateway` 设置时该字段也必须设置，表必须唯一 |\n| disableGatewayCheck | 用于检测与网关的连通性,如果underlay模式网关不回复 icmp 可以禁用 |\n| disableInterConnection | 如果启用集群互连，使用此字段禁用自动路由 |\n\n- ### 设置绑定 namespace \n```yaml\napiVersion: kubeovn.io/v1\nkind: Subnet\nmetadata:\n  name: ovn-default\nspec:\n  namespaces:\n  - project\n  cidrBlock: 10.233.128.0/24\n  gateway: 10.233.128.1\n```\n\n绑定之后，对应 namespace 会生成以下注解信息\n```\nmetadata:\n  annotations:\n    ovn.kubernetes.io/cidr: 10.233.128.0/24\n    ovn.kubernetes.io/exclude_ips: 10.233.128.1\n    ovn.kubernetes.io/logical_switch: subnet\n```\n\n对于工作负载的 ip 分配\n- 优先使用负载指定的\n- 如果负载没有指定使用，使用 namespace 绑定的 subnet\n- 如果 namespace 没有绑定 subnet，使用安装默认的 subnet \n更多 ip 分配参考：[[kube-ovn ipam]]\n\n\n### 网络策略\n详细见 [[kube-ovn networkpolicy]]\n\n### DHCP\n- *有关 dhcp 特性用于支持 kubevirt,此处不进行展开* \n\n### qos 带宽限速\nkube-ovn 支持以下两种 qos 配置，并均可以通过设置 pod 的 annotations 开启：\n-   最大带宽限制 QoS\n```yaml\nmetadata:\n  annotations:\n    ovn.kubernetes.io/ingress_rate: \"3\" \n    ovn.kubernetes.io/egress_rate: \"1\"\n```\n-   linux-netem 模拟设备干扰丢包等的 QoS，可用于模拟测试\n```yaml\nmetadata:\n  annotations:\n    ovn.kubernetes.io/latency: \"100\" # 设置 Pod 流量延迟，取值为整数，单位为 ms\n    ovn.kubernetes.io/limit: \"1000\"  # qdisc队列可容纳的最大数据包数，取值为整形数值\n    ovn.kubernetes.io/loss: \"20\" # 为设置的报文丢包概率，取值为 float 类型，例如取值为 20，则为设置 20% 的丢包概率。\n```\n\n### vip 预留 + pod 使用 vip 固定 ip\n动态的预留一部分 IP 但是并不分配给 Pod 而是分配给其他的基础设施启用。\n```yaml\napiVersion: kubeovn.io/v1\nkind: Vip\nmetadata:\n  name: vip-01\nspec:\n  subnet: ovn-default # 指定从哪个 Subnet 中预留 IP。\n  # 固定分配的 IP 地址，该地址需在 `subnet` 的 CIDR 范围内\n  # v4Ip: \"10.16.0.121\"\n```\n\n可以使用 annotation 将某个 VIP 分配给一个 Pod -- *v1.10.6 暂不支持*\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    ovn.kubernetes.io/vip: vip-dynamic-01 # 指定 vip\n```\n\n### 配置外部网关\n在一些场景下，对所有容器访问外部的流量需要通过一个外部的网关进行统一的管理和审计。 Kube-OVN 可以通过在子网中进行相应的路由配置，将出网流量转发至对应的外部网关。\n```bash\nkind: Subnet\napiVersion: kubeovn.io/v1\nmetadata:\n  name: external\nspec:\n  cidrBlock: 172.31.0.0/16\n  gatewayType: centralized\n  natOutgoing: false\n  externalEgressGateway: 192.168.0.1\n  policyRoutingTableID: 1000\n  policyRoutingPriority: 1500\n```\n-   `natOutgoing`: 需要设置为 `false`\n-   `externalEgressGateway`：设置为外部网关的地址，需要和网关节点在同一个二层可达域\n-   `policyRoutingTableID`：使用的本地策略路由表的 TableID，每个子网均需不同以避免冲突。\n-   `policyRoutingPriority`：路由优先级，为避免后续用户定制化的其他路由操作冲突，这里可以指定路由优先级，若无特殊需求填入任意值即可。\n\n\n双栈\nloadbalancer service\n监控\n流量镜像\n多集群互联\ncilium 集成+网络流量观测+networkPolicy\n\n","lastmodified":"2025-03-26T03:48:43.168318581Z","tags":null},"/vlan-%E9%85%8D%E7%BD%AE":{"title":"vlan 配置","content":"\n[[hybridnet 网络插件]]\n\n```\nset interfaces ethernet eth1 vif 100 description 'VLAN 100'\nset interfaces ethernet eth1 vif 100 address '192.168.100.1/24'\n\nset interfaces ethernet eth13 vif 21 description 'VLAN 21'\nset interfaces ethernet eth13 vif 21 address '10.11.21.1/24'\nset interfaces ethernet eth14 vif 22 description 'VLAN 22'\nset interfaces ethernet eth14 vif 22 address '10.11.22.1/24'\n```\n\n物理机配置\n```\n      network-mode: container:cluster-worker3 // 使用kind节点的网络\n```\n\n```yaml\nname: vlan\ntopology:\n  nodes:\n    spine1:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n        - vyos/config-spine1:/opt/vyatta/etc/config\n\n    spine2:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n        - vyos/config-spine2:/opt/vyatta/etc/config\n\n    leaf1:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n        - vyos/config-leaf1:/opt/vyatta/etc/config\n\n    leaf2:\n      kind: linux\n      image: rykren/vyos:1.4\n      cmd: /sbin/init\n      binds:\n        - /lib/modules:/lib/modules\n        - vyos/config-leaf2:/opt/vyatta/etc/config\n\n    server1:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip addr add 10.10.0.2/24 dev eth1\n      - ip route replace default via 10.10.0.1\n\n    server2:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip addr add 10.10.0.3/24 dev eth1\n      - ip route replace default via 10.10.0.1\n\n    server3:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip addr add 10.10.0.4/24 dev eth1\n      - ip route replace default via 10.10.0.1\n\n    server4:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip link add link eth1 name eth1.10 type vlan id 10\n      - ip addr add 10.10.10.2/24 dev eth1.10\n      - ip link set dev eth1.10 up\n      - ip route replace default via 10.10.10.1\n\n    server5:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip link add link eth1 name eth1.11 type vlan id 11\n      - ip addr add 10.10.11.2/24 dev eth1.11\n      - ip link set dev eth1.11 up\n      - ip route replace default via 10.10.11.1\n\n    server11:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip addr add 10.11.20.2/24 dev eth1\n      - ip route replace default via 10.11.20.1\n\n    server12:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip addr add 10.11.20.3/24 dev eth1\n      - ip route replace default via 10.11.20.1\n\n    server13:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip link add link eth1 name eth1.21 type vlan id 21\n      - ip addr add 10.11.21.2/24 dev eth1.21\n      - ip link set dev eth1.21 up\n      - ip route replace default via 10.11.21.1\n\n    server14:\n      kind: linux\n      image: rykren/nettools:latest\n      exec:\n      - ip link add link eth1 name eth1.22 type vlan id 22\n      - ip addr add 10.11.22.2/24 dev eth1.22\n      - ip link set dev eth1.22 up\n      - ip route replace default via 10.11.22.1\n\n  links:\n  - endpoints: [\"leaf1:eth1\", \"spine1:eth1\"]\n  - endpoints: [\"leaf1:eth2\", \"spine2:eth1\"]\n  - endpoints: [\"leaf2:eth1\", \"spine1:eth2\"]\n  - endpoints: [\"leaf2:eth2\", \"spine2:eth2\"]\n\n  - endpoints: [\"leaf1:eth11\", \"server1:eth1\"]\n  - endpoints: [\"leaf1:eth12\", \"server2:eth1\"]\n  - endpoints: [\"leaf1:eth13\", \"server3:eth1\"]\n  - endpoints: [\"leaf1:eth14\", \"server4:eth1\"]\n  - endpoints: [\"leaf1:eth15\", \"server5:eth1\"]\n\n  - endpoints: [\"leaf2:eth11\", \"server11:eth1\"]\n  - endpoints: [\"leaf2:eth12\", \"server12:eth1\"]\n  - endpoints: [\"leaf2:eth13\", \"server13:eth1\"]\n  - endpoints: [\"leaf2:eth14\", \"server14:eth1\"]\n```\n\n\n\n配置交换机\n```\n# spine1\nset interfaces ethernet eth0 address '172.20.20.100/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.0.0.0/8'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.10.2/24'\nset interfaces ethernet eth2 address '10.1.34.2/24'\nset protocols bgp parameters router-id '10.1.10.2'\nset protocols bgp local-as 500 \nset protocols bgp neighbor 10.1.10.1 remote-as '65005'\nset protocols bgp neighbor 10.1.34.1 remote-as '65008'\n\n\n# spine2\nset interfaces ethernet eth0 address '172.20.20.101/24'\nset interfaces ethernet eth0 description public\nset protocols static route 0.0.0.0/0 next-hop 172.20.20.1 distance 1\nset nat source rule 100 outbound-interface 'eth0'\nset nat source rule 100 source address '10.0.0.0/8'\nset nat source rule 100 translation address 'masquerade'\n\nset interfaces ethernet eth1 address '10.1.12.2/24'\nset interfaces ethernet eth2 address '10.1.11.2/24'\nset protocols bgp parameters router-id '10.1.12.2'\nset protocols bgp local-as 800 \nset protocols bgp neighbor 10.1.11.1 remote-as '65008'\nset protocols bgp neighbor 10.1.12.1 remote-as '65005'\n\n\n# leaf-1\nset protocols static route 10.1.34.0/24 next-hop 10.1.10.2\nset protocols static route 10.1.11.0/24 next-hop 10.1.12.2\n\nset interfaces bridge br0 address '10.10.0.1/24'\nset interfaces bridge br0 description 'leaf1-br'\nset interfaces bridge br0 member interface eth11\nset interfaces bridge br0 member interface eth12\nset interfaces bridge br0 member interface eth13\n\nset protocols static route 0.0.0.0/0 next-hop 10.1.10.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.12.2\n\nset interfaces ethernet eth1 address '10.1.10.1/24'\nset interfaces ethernet eth2 address '10.1.12.1/24'\nset protocols bgp local-as 65005\nset protocols bgp address-family ipv4-unicast network 10.10.0.0/24\nset protocols bgp address-family ipv4-unicast network 10.10.10.0/24\nset protocols bgp address-family ipv4-unicast network 10.10.11.0/24\nset protocols bgp neighbor 10.1.10.2 remote-as '500'\nset protocols bgp neighbor 10.1.12.2 remote-as '800'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.10.0.1'\nset interfaces ethernet eth14 vif 10 description 'VLAN 10'\nset interfaces ethernet eth14 vif 10 address '10.10.10.1/24'\nset interfaces ethernet eth15 vif 11 description 'VLAN 11'\nset interfaces ethernet eth15 vif 11 address '10.10.11.1/24'\n\n\n# leaf2\nset protocols static route 10.1.10.0/24 next-hop 10.1.34.2\nset protocols static route 10.1.12.0/24 next-hop 10.1.11.2\n\nset interfaces bridge br0 address '10.11.20.1/24'\nset interfaces bridge br0 description 'leaf2-br'\nset interfaces bridge br0 member interface eth11\nset interfaces bridge br0 member interface eth12\n\nset protocols static route 0.0.0.0/0 next-hop 10.1.34.2\nset protocols static route 0.0.0.0/0 next-hop 10.1.11.2\n\nset interfaces ethernet eth1 address '10.1.34.1/24'\nset interfaces ethernet eth2 address '10.1.11.1/24'\nset protocols bgp local-as 65008\nset protocols bgp address-family ipv4-unicast network 10.11.20.0/24\nset protocols bgp address-family ipv4-unicast network 10.11.21.0/24\nset protocols bgp address-family ipv4-unicast network 10.11.22.0/24\nset protocols bgp neighbor 10.1.11.2 remote-as '800'\nset protocols bgp neighbor 10.1.34.2 remote-as '500'\nset protocols bgp parameters bestpath as-path multipath-relax\nset protocols bgp parameters router-id '10.11.20.1'\nset interfaces ethernet eth13 vif 21 description 'VLAN 21'\nset interfaces ethernet eth13 vif 21 address '10.11.21.1/24'\nset interfaces ethernet eth14 vif 22 description 'VLAN 22'\nset interfaces ethernet eth14 vif 22 address '10.11.22.1/24'\n```\n\n```\n# br1 上配置 vlan\nset interfaces bridge br1 address '10.11.30.1/24'\nset interfaces bridge br1 description 'vlan-br'\nset interfaces bridge br1 member interface eth13.21\nset interfaces bridge br1 member interface eth14.22\n```\n\n\n\n\n\n","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/vscode-+-golang-%E7%8E%AF%E5%A2%83":{"title":"vscode + golang 环境","content":"\n1. 环境配置\n- 安装 golang\n- vscode 连接上远程主机并安装 vscode server\n- vscode 中安装 go 插件\n- 安装 go 插件依赖的工具：\n\t- ctrl+shift+p 调出命令面板，输入go install tools 选Go: Install/Update Tool\n\t- 全选进行安装\n\n\n2. 使用 CGO 时，vscode 报错\n```\ngo list failed to return CompiledGoFiles. This may indicate failure to perform cgo processing; try building at the command line. See https://golang.org/issue/38990.\n```\n\n可以修改一下 gopls 的配置：https://github.com/golang/go/issues/38990#issuecomment-1367937498\n\n\n3. 调试\n```bash\ndlv dap --listen=:12345 \n```\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Connect and launch\",\n            \"type\": \"go\",\n            \"debugAdapter\": \"dlv-dap\", // the default\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 12345,\n            \"cwd\": \"/root/program/kse-upgrade\",\n            \"program\": \"/root/program/kse-upgrade/cmd/ks-upgrade.go\",\n            \"args\":[\n                \"pre-upgrade\", \"--config=./tmp/config.yaml\"\n            ]\n        }\n    ]\n}\n```\n- [debugging · golang/vscode-go Wiki · GitHub](https://github.com/golang/vscode-go/wiki/debugging#remote-debugging)\n- [Visual Studio Code Remote Development](https://code.visualstudio.com/docs/remote/remote-overview#_remote-tutorials)\n- [debugging legacy · golang/vscode-go Wiki · GitHub](https://github.com/golang/vscode-go/wiki/debugging-legacy#remote-debugging)\n- [vscode-go/docs/debugging.md at master · golang/vscode-go · GitHub](https://github.com/golang/vscode-go/blob/master/docs/debugging.md#running-debugee-externally)\n\n\nhttps://github.com/golang/vscode-go/issues/971#issuecomment-927666108\nvscode 和 zsh 环境配置","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/vyos-OSPF-%E9%85%8D%E7%BD%AE":{"title":"","content":"#vyos #路由器\n\n```\nset interfaces loopback lo address 9.9.9.9/32  \nset protocols ospf parameters router-id 8.8.8.8  \nset protocols ospf area 0 network 10.111.111.0/24  \nset protocols ospf area 1 network 9.9.9.9/32  \ncommit\nsave\n```\n\nset 配置命令\ndelete 取消配置命令\n\n配置的参考文档：\n- [vyos 基础配置_51CTO博客_nc基础配置](https://blog.51cto.com/u_15075508/4625940)\n- [Vyos网络操作系统系列文章-L2技术 | 小贝笔记 (xiaobei.one)](https://www.xiaobei.one/archives/959.html)\n","lastmodified":"2025-03-26T03:48:43.17431856Z","tags":null},"/webhook":{"title":"webhook","content":"\n动态准入控制插件\n- MutatingWebhookConfiguration\n- ValidatingWebhookConfiguration\n\n[k8s webhook准入控制插件源码级别理解-注入sidecar - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/423571596)\n\n\nopenelb webhook 使用 kube-webhook-certgen\nport-allocator webhook 使用 cert-manager\n\nks使用 helm \n```\ngenerate the CA cert\n{{- define \"generate-ca-certs\" }}\n{{- $ca := genCA \"spidernet.io\" (.Values.spiderpoolController.tls.auto.caExpiration | int) -}}\n```\n![upgit_20230203_1675411845.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230203_1675411845.png)\n\n\n绕过 webhook 检查\n| 类型           | name                      | 其他关联                           |\n| -------------- | ------------------------- | ---------------------------------- |\n| deploy         | istiod-1-11-2             |                                    |\n| svc            | istiod-1-11-2             |                                    |\n| ServiceAccount | istiod-1-11-2             | secrets：istiod-1-11-2-token-bdg5s |\n| secrets        | istiod-1-11-2-token-bdg5s |                                    |\n\n```\nkubectl create ns port-allocator-system \u0026\u0026 kubectl label --overwrite ns port-allocator-system port-allocator=disable\n```\n\n\nhelm 安装资源顺序：\n[helm/kind_sorter.go at main · helm/helm (github.com)](https://github.com/helm/helm/blob/main/pkg/releaseutil/kind_sorter.go#L31)\n\nhelm chart hook 可以自定义一些 hook，并对其进行权重执行\n[Helm Hooks 的使用-阳明的博客|Kubernetes|Istio|Prometheus|Python|Golang|云原生 (qikqiak.com)](https://www.qikqiak.com/post/helm-hooks-usage/)","lastmodified":"2025-03-26T03:48:44.142315148Z","tags":null},"/wireshark-%E6%8A%93%E5%8C%85":{"title":"","content":"#wireshark #抓包\n\n## wireshark 抓远程 ubuntu 的包\n- 安装 rpcapd\n\t[rpcapd 是一个为 Windows 版本的Wireshark](http://www.wireshark.org/)协议分析器提供远程流量捕获的守护进程。它随Windows 的[WinPcap](http://www.winpcap.org/) 网络捕获库一起提供，之前 Linux 中的没有 libpcap ,后来添加了。\n\t1. 使用 rpcapd-linux\n\t2. 使用 the-tcpdump-group/libpcap   【推荐】没有大的报错问题\n```shell\napt-get build-dep libpcap -y\ngit clone https://github.com/rpcapd-linux/rpcapd-linux.git\ncd rpcapd-linux/libpcap/\n./configure \u0026\u0026 make\ncd ..\nmake\n```\n\n[Home | TCPDUMP \u0026 LIBPCAP](https://www.tcpdump.org/index.html#latest-releases)\n```bash\napt-get build-dep libpcap -y\ngit clone https://github.com/the-tcpdump-group/libpcap\ncd libpcap/\n./configure --enable-remote\nmake\n./rpcapd/rpcapd -4 -n # 使用ipv4, 无密码认证\n```\n\n- 启动\n\t```shell\n\t./rpcapd -n -4\n\t```\n\t不指定端口，默认监听2002端口\n\n- 配置 wireshark - *图片来源参考链接*\n![upgit_20230206_1675661272.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675661272.png)\n\n![upgit_20230206_1675661280.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675661280.png)\n\n![upgit_20230206_1675661287.png](https://images.cherryfloris.eu.org/ryken/2023/02/upgit_20230206_1675661287.png)\n\n### 遇到的问题\n使用的 ubuntu 22.04 的 server 环境\n1. **You must put some 'deb-src' URIs in your sources.list**\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bck\nsed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list\napt-get update\n```\n2. **编译失败 - error: ‘SIOCGSTAMP’ undeclared (first use in this function); did you mean ‘SIOCGARP’**\n\t[format_linux_int.c:297:25: error: ‘SIOCGSTAMP’ undeclared (first use in this function); did you mean ‘SIOCGARP’? · Issue #117 · LibtraceTeam/libtrace (github.com)](https://github.com/LibtraceTeam/libtrace/issues/117)\n\t[Fix SIOCGSTAMP undeclared error on new linux kernels. · LibtraceTeam/libtrace@cd7f4c7 (github.com)](https://github.com/LibtraceTeam/libtrace/commit/cd7f4c79aa55823d2e3be9b753088c40bc44d183)\n\t```\n\t#include \u003clinux/sockios.h\u003e  // 添加这个头文件\n\t```\n3. 编译失败\n\t\t[Fix debian compilation error by peter-vanpoucke · Pull Request #9 · rpcapd-linux/rpcapd-linux (github.com)](https://github.com/rpcapd-linux/rpcapd-linux/pull/9\n\t\t社区有一个用户修复了，可以使用他的分支来编译\n\n### 参考链接\n- [wireshark远程抓包方式汇总 – Zgao's blog](https://zgao.top/wireshark%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8C%85%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/)\n- [使用rpcapd（libpcap）进行Wireshark远程抓包-CSDN博客_rpcapd](https://blog.csdn.net/hyh19962008/article/details/127260304)\n\n\n## wireshark 抓包过滤\n[wireshark 实用过滤表达式（针对ip、协议、端口、长度和内容）_aflyeaglenku的博客-CSDN博客_wireshark筛选端口](https://blog.csdn.net/aflyeaglenku/article/details/50884296)","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null},"/wireshark-%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4":{"title":"","content":"#wireshark \n\n| 功能        | 表达式 |\n| ----------- | ------ |\n| 筛选特定 ip | ip.addr == xxx       |\n","lastmodified":"2025-03-26T03:48:43.173318563Z","tags":null}}